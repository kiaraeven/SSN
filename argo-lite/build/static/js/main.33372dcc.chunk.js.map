{"version":3,"sources":["stores/PreferencesStore.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","services/AlgorithmUtils.js","constants/index.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","ipc/client.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/Navbar.jsx","components/ComDetection.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ZoomMap.jsx","visualizers/MapView.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/panels/SelectionDetail.jsx","components/panels/NodeDetailPanel.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/StatusBar.jsx","components/panels/SelectionActionPanel.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","app.jsx","index.js"],"names":["PreferencesStore","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","observable","IS_IFRAME_WIDGET","GraphStore","ref","initialGlobalConfig","nodes","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","max","labelBy","shape","labelSize","labelLength","filter","edges","crossColor","scatterplot","x","y","_lastSelectedSingleNode","nodesShowingLabels","hasGraphLoaded","selectedNodeId","setOfNeighborIds","Set","rawGraph","forEach","e","source","source_id","toString","target","target_id","add","node","has","id","runInAction","Object","keys","length","map","n","satisfy","fkey","metadata","nodePropertyTypes","includes","isHidden","nodeids","removeNodesByIds","overrides","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","snapshot","getSnapshot","noPosition","undefined","noGlobal","noOverride","JSON","stringify","savedStatesStr","savedStates","parse","savedOverrides","Map","entries","k","v","clear","merge","initialNodesShowingLabels","runActiveLayout","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","push","setPinnedNodes","graphFrame","Frame","computedGraph","init","display","ee","on","selectedNodes","data","menu","MenuFactory","children","MenuItemFactory","onClick","toggleSelectedLabels","text","key","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","sort","n1","n2","ids","i","showNodes","ContextMenu","show","left","pageX","top","pageY","uniq","nodeProperties","nodeComputed","ret","p","Number","MAX_VALUE","MIN_VALUE","Math","scales","domain","minMax","range","item","createGraph","override","get","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","averageClusteringCoefficient","connectedComponents","graphDensity","averageDegree","exactGraphDiameter","duration","interactingWithGraph","computed","fullNodes","fullEdges","uniqueValue","edgeProperties","snapshotName","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","fromId","toId","createMissing","ProjectStore","SearchStore","AppState","preferences","import","search","project","window","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","url","BACKEND_URL","fetch","method","mode","then","response","json","body","catch","error","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","split","pop","loadInitialSampleGraph","a","location","hash","substring","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","pinNodes","pauseLayout","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","result","topLinesAsString","l","trim","join","it","comment","auto_parse","skip_empty_lines","onerror","selectedNodeFileFromInput","jsnx","require","jsgraphs","jsnxGraph","Graph","addNodesFrom","addEdgesFrom","convertToJsnx","averageClustering","ConnectedComponents","idDict","g","addEdge","convertToJSGraph","componentCount","nodeCount","sum","degree","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","$","Node","index","in","out","renderData","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","prototype","connectNode","exports","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","slice","buffer","set","MeshLine","previous","next","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","c","Geometry","j","vertices","z","Float32Array","compareV3","b","aa","ab","copyV3","w","attributes","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","array","MeshLineMaterial","parameters","check","d","Material","call","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","type","value","vertexShader","fragmentShader","setValues","create","constructor","copy","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","loading","toJS","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","fileObject","Promise","resolve","reject","content","err","msg","indexOf","replace","parseGEXF","parser","DOMParser","xmlDoc","parseFromString","xmlEdges","getElementsByTagName","xmlNodes","xmlAttri","nodeAttri","edgesArr","nodesArr","nodeAttriOrdered","curr","getAttribute","currEdge","s","t","currNode","nodeAttvalues","nodeAttvalue","pagerank","attributeIdElementAttribute","attributeId","currAttri","name","readGEXF","config","parseInt","degreeDict","centrality","parseFloat","LonX","LatY","edgesSet","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","edgeKey","getNode","GEOID","Family","calDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","cos","asin","sqrt","calDIstanceToCenter","avgLat","avgLon","latlist","lonlist","average","reduce","shortestPathPairs","pathFinder","aGreedy","pathsArr","pathsSet","fromnode","tonode","pathKey1","pathKey2","find","rank","pageRank","nodekeyList","valuea","el","minv","maxv","paths","selectedGexfFileFromInput","gexfParsed","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","def","default","OrbitControls","d3","module","self","selectNode","dragging","selection","isSelected","updateSelection","mouseX","mouseY","clearSelection","NODE_NO_HIGHLIGHT","draw_object","visible","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","linkObjs","link","updateSelectionOpacity","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","links","diffx","diffy","clickedNode","pinnedx","pinnedy","mapClicked","highlightNode","highlightEdges","neighborNodes","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","stop","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","mark","edge","HalfEdge","vertex","face","prev","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","object","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","reset","scope","dispatchEvent","changeEvent","state","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","edgeCount","LineBasicMaterial","linewidth","vertexColors","VertexColors","shading","FlatShading","line","LineSegments","frustumCulled","colors","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","setHex","highlightNeighbors","highlightPathEdgeNode","pathnode","op","ctrl","leftMouseDown","onHover","lastHover","currentlyHovered","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","values","mapNodeAttributes","val","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","fontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","edgeDist","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getNodeList","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","checked","onChange","saveUserConfig","PRIMARY","React","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","handleClick","ACTIVE","items","onSelect","fill","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","numRows","selectedRegions","rows","cols","renderCell","ImportDialog","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","INPUT_GROUP","DISABLED","files","renderEdgesSelection","edgesOpen","disabled","newDelimiter","updateDelimiter","DIALOG_BODY","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","interactive","elevation","Card","ELEVATION_TWO","graphDataPath","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","readonly","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","TABLE","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","isNaN","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","RenameSnapshotDialog","RegularNavbar","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","href","argologo_dark","argologo_light","NAVBAR_HEADING","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","forceUpdate","sortedNodeList","NAVBAR_DIVIDER","setInterval","timeNow","ALIGN_RIGHT","turnOnMinimalMode","textDecoration","icon","faGithub","MinimalNavbar","role","turnOffMinimalMode","Navbar","ComDetection","runcommunity","querydict","axios","post","communityDict","modularity","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","defaultChecked","convexPolygonsShow","toFixed","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","bounds","toBBoxString","L","rectangle","weight","mapselection","eachLayer","pointLayer","CircleMarker","contains","getLatLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","nodeLoc","latLngBounds","extend","flyToBounds","MapClick","useMapEvents","click","MapView","dec2hexString","dec","substr","toUpperCase","onMouseOut","setEdgePathOption","pathHovered","nodesSelectedID","setNodeCircle","setNodePathOption","convexNodes","fillColor","fillOpacity","stroke","neighborNodesID","setPolygonPath","polygon","pi","flex","MapContainer","TileLayer","Pane","edgepositions","Polyline","pathOptions","polygonlist","Polygon","eventHandlers","thenode","mouseover","mouseout","neighborIDs","edgesOfNodes","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","placement","modifiers","preventOverflow","backgroundImage","x1","y1","x2","y2","stopColor","stopOpacity","stepSize","labelStepSize","pluralize","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","NodesPanel","getRenderedNodes","tag","popoverProps","popoverClassName","tagRenderer","NodesFilterPanel","MultiSelects","selectit","filterNodes","EdgesPanel","directionOptionOpen","class","LabelsPanel","marginLeft","SelectionDetail","TABLE_STRIPED","padding","nodeAttributeValue","num","toPrecision","formatLongFloat","selectNodes","edgeDistance","SelectionDistanceFromLatLonIn","edgeSelection","nodelength","SelectionDensity","ScatterPlot","margin","cr","maxhop","formatXtext","infinityhop","downloadCSV","column1","column2","header","csvarray","onBrushStart","sourceEvent","onBrush","onBrushEnd","selectionNodeID","circles","svg","selectAll","brushBounds","each","nodecx","nodecy","selectionNode","renderBrush","extent","getEventMouse","brushType","createRef","shortpathhop","pathlen","scalePoint","pairdistance","scaleLinear","reverse","allComputedPropertiesKeyList","input","axis","axisBottom","tickFormat","axisLeft","svgsaver","SvgSaver","querySelector","asSvg","asyncOnClick","filename","Axis","refs","RenderCircles","setScatterStyle","renderCircles","cx","cy","onMouseOver","sourceid","targetid","onMouseLeave","dataset","StatusBar","numHiddenNodes","SelectionActionPanel","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","panel","Expander","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","paddingLeft","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","innerWidth","innerHeight","App","keydown","ReactDOM"],"mappings":"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AM,CAAES,KAAM,IAAKC,MAAOvd,KAAK6c,MAC/BC,IAAK,CAAEQ,KAAM,IAAKC,MAAOvd,KAAK8c,KAC9BC,UAAW,CACTO,KAAM,KACNC,MAAO,IAAIpE,EAAMwD,QAAQ3c,KAAK+c,UAAU,GAAI/c,KAAK+c,UAAU,KAE7DC,QAAS,CAAEM,KAAM,IAAKC,MAAOvd,KAAKgd,SAClCC,WAAY,CAAEK,KAAM,IAAKC,MAAOvd,KAAKid,YACrCC,UAAW,CAAEI,KAAM,IAAKC,MAAOvd,KAAKkd,YAEtCM,aA9JuB,CACvB,yBACA,GACA,2BACA,2BACA,uBACA,wBACA,yBACA,qBACA,4BACA,GACA,iCACA,gCACA,2BACA,2BACA,sBACA,yBACA,sBACA,qBACA,iCACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,qCACA,GACA,6BACA,uBACA,2BACA,kBACA,GACA,IACA,GACA,gBACA,GACA,kDACA,2EACA,GACA,uCACA,gBACA,GACA,mDACA,sDACA,gDACA,4CACA,GACA,oDACA,2CACA,2CACA,GACA,2DACA,sDACA,GACA,oCACA,uCACA,QACA,GACA,gBACA,mEACA,wEACA,aACA,qDACA,qDACA,0CACA,GACA,+CACA,8CACA,6EACA,GACA,QACA,GACA,2EACA,2CACA,0BACA,wBACA,GACA,qDACA,qCACA,GACA,iEACA,mCACA,GACA,KA0EiC5L,KAAK,QACtC6L,eAxEyB,CACzB,kDACA,2BACA,GACA,yBACA,wBACA,yBACA,0BACA,4BACA,2BACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,gBACA,GACA,uBACA,oCACA,qDACA,0BACA,SACA,OACA,wBACA,mDACA,KA8CqC7L,KAAK,UAoB5C,cAjBOqK,EAAWK,iBACXL,EAAWhY,WACXgY,EAAWM,cACXN,EAAWza,aACXya,EAAWQ,eACXR,EAAWS,kBACXT,EAAWW,uBACXX,EAAWY,YACXZ,EAAWa,WACXb,EAAWc,iBACXd,EAAWgB,kBACXhB,EAAWiB,UAElBC,EAASG,KAAO,mBAEhBH,EAASO,UAAUzB,GAEZkB,GAGThE,EAA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","file":"static/js/main.33372dcc.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter } from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n\r\nexport default class GraphStore {\r\n\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor:  [\"#e377c2\",\"#98df8a\" , \"#ff7f0e\", \"#a55194\" , \"#2ca02c\",  \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\",\"#1f77b4\" , \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\",\"#9c9ede\",\"#8c6d31\", \"#ffbb78\",\"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 0.6,\r\n      labelLength: 10,\r\n      filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot:{\r\n      x: 'degree',\r\n      y:'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = false;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: false, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes:[],\r\n    uniqueValue:{},\r\n    nodeComputed: [\"pagerank\", \"degree\",'centrality', 'distance to center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id' ); // since node_id is already present\r\n  }\r\n\r\n  \r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if(this.nodes.color.scale == \"Nominal Scale\"){ //nominal scale \r\n      return scales[this.nodes.color.scale]()\r\n      .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n      .range(this.nodes.color.nominalColor);\r\n    }else{ //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n      .domain(this.minMax[this.nodes.colorBy])\r\n      .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n  \r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(),e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() { \r\n    runInAction('filter nodes', () => {\r\n    if(Object.keys(this.nodes.filter).length !== 0  ){\r\n      \r\n      \r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.nodes.filter){\r\n            if(this.metadata.nodePropertyTypes[fkey] == 'string'){\r\n              if(!this.nodes.filter[fkey].includes(n[fkey])){\r\n                satisfy = false\r\n              }\r\n            }else{  // number range \r\n  \r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return {...n, isHidden: true};\r\n        });\r\n      \r\n    }\r\n    });\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    if (savedStates.metadata) {\r\n      this.metadata = savedStates.metadata;\r\n    }\r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    this.rawGraph = savedStates.rawGraph;\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n\r\n    this.runActiveLayout();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout() {\r\n    if(this.frame) {\r\n      this.frame.paused = false;\r\n    } \r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  get averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  get components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n}","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest PageRank scores\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n              return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"top 10 nodes with highest PageRank scores\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // pause layout by default \r\nautorun(() => {\r\n  appState.graph.frame.paused = true;\r\n  appState.graph.frame.pauseLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","const jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    const result = jsnx.averageClustering(jsnxGraph);\r\n    console.log('Computing Clustering Coefficient');\r\n    return result;\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    return cc.componentCount();\r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length / 2;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    return dia;\r\n}\r\n ","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://github.com/poloclub/argo-graph-lite\";\r\nexport const GITHUB_URL = \"https://github.com/poloclub/argo-graph-lite\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing   \r\n  [\"Food Sharing\", \"c1295995-f0c4-4350-9ea0-c97c8a134a34\" \r\n  ],   //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  [\"Mafia Family\", \"ea3fa573-78e0-465a-98ff-f6a02d9884c2\"]\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        appState.import.loading = false;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n['LonX']), LatY: parseFloat(n['LatY']) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    calDIstanceToCenter();\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    calDIstanceToCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr , paths: pathsArr},\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if (selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 && link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    if (self.selection.length !== 0) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null\r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0xDB7734,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: false,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"square\",\r\n  NODE_HSHAPE: \"square\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"notfancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xffffff\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = [];\r\n    self.edgeCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    if (toggle) {\r\n      node.renderData.draw_object.children[0].material.color.setHex(color);\r\n      node.renderData.draw_object.children[0].visible = true;\r\n    } else {\r\n      node.renderData.draw_object.children[0].material.color.set(\r\n        node.renderData.hcolor\r\n      );\r\n      node.renderData.draw_object.children[0].visible = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n    //   // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //   // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    // }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n      }\r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      self.highlightNode(node, true);\r\n      node.renderData.textHolder.children[0].element.hideme = false;\r\n      self.highlightEdges(node, true);\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    if (self.prevHighlights != undefined) {\r\n      for (var i = 0; i < self.prevHighlights.length; i++) {\r\n        self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n        self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n      }\r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      if (clickDifference < 225) {\r\n        self.doubleClicked = true;\r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n\r\n\r\n    self.updateSelectionOpacity();\r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"rem\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    document.getElementById(\"showSelected\").style.display=\"none\";\r\n    document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    document.getElementById(\"hideAll\").style.display=\"none\";\r\n    document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    document.getElementById(\"showAll\").style.display=\"none\";\r\n    document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    if (self.prevHighlights) {\r\n      for (var i = 0; i < self.prevHighlights.length; i++) {\r\n        self.highlightNode(\r\n          self.prevHighlights[i],\r\n          !toggle,\r\n          def.SEARCH_HIGHLIGHT\r\n        );\r\n      }\r\n    }\r\n    self.prevHighlights = [];\r\n    self.graph.forEachNode(function(node) {\r\n      if (nodeids.indexOf(node.id) != -1) {\r\n        self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n        self.prevHighlights.push(node);\r\n      }\r\n    });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function() {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n     //directed arrows\r\n     self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n     var arrowPosition = self.directedArrows.attributes.position.array;\r\n     var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x)/2;\r\n            var midPointY = (v1pos.y + v2pos.y)/2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          } \r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function() {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function(node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function() {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function(graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function(node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function(link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n    });\r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        self.ee.emit(\"select-nodes\", self.selection);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function(positions) {\r\n    self.graph.forEachNode(function(node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function(node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  <MenuItem\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n    <Button className={fill ? Classes.FILL : null} text={value} />\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        />\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        />\r\n        <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        />\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter\r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderDelimiterSelection()}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readonly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            Argo supports both mouse/trackpad and touchscreen.\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>Drag with right mouse button down OR Move mouse with space key pressed</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node (view details)</td>\r\n                    <td>Single Click</td>\r\n                    <td>Tap with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes</td>\r\n                    <td>Drag left mouse button from empty area</td>\r\n                    <td>Drag 1 finger from empty area</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Drag nodes</td>\r\n                    <td>Drag with left mouse button down</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ display: \"none\" }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\" \r\n            src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n            height=\"28\"></img>\r\n          </a>\r\n          <span>SNoMAN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                />\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                />\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"document\"\r\n            >\r\n              Graph\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"Data Sheet\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Filter\"\r\n                  iconName=\"graph\"\r\n                  onClick={() => { appState.preferences.filterDialogOpen = true }}\r\n                />\r\n                <MenuItem text=\"Filters\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Show All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem>\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              Tools\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])}>\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n              \r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n              let self = this;\r\n              setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if(appState.graph.smartPause.defaultActive.isActive) {\r\n                    if(timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                      /**smart pausing*/\r\n                    if(!appState.graph.frame.paused && \r\n                      !appState.graph.smartPause.interactingWithGraph){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if(appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                        appState.graph.frame.resumeLayout();\r\n                        appState.graph.frame.paused = false;\r\n                        appState.graph.smartPause.smartPaused = false;\r\n                        self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)})()}\r\n\r\n             {<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Layout\" : \"Pause Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n                      \r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if(appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n          }\r\n            </div>\r\n          )}\r\n\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])}\r\n        >\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button>\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", appState.graph.frame.paused ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused) {\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                } else {\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\" role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\" role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\" role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores/index\";\r\nimport { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n@observer\r\nclass ComDetection extends React.Component {\r\n    @observable modularity = undefined;\r\n\r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('http://localhost:5000/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                this.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.nodes.colorBy = \"community\"\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('http://localhost:5000/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('http://localhost:5000/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button\r\n                    style={{ position: 'absolute', bottom: '30px', left: '15vw', zIndex: '1000' }}\r\n                    onClick={this.runcommunity}>Run Community</Button>\r\n                {/* {this.modularity? <Tag className=\"network-tag\">{this.modularity}</Tag>: null} */}\r\n                {/* <Button\r\n                    style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                    onClick={this.findcliques}>Find Cliques</Button> */}\r\n                <Button\r\n                    style={{ position: 'absolute', bottom: '30px', left: '30vw', zIndex: '1000' }}\r\n                    onClick={() => this.convexhull('community')}>Convex Hull by Group</Button>\r\n                <Switch style={{ position: 'absolute', bottom: '25px', left: '50vw', zIndex: '1000' }}\r\n                    defaultChecked={appState.graph.convexPolygonsShow}\r\n                    // checked={!node.isHidden}\r\n                    onChange={(value) => {\r\n                        appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n                    }}\r\n                />\r\n                <span style={{ position: 'absolute', bottom: '35px', left: '53vw', zIndex: '1000' }}> show community convex hull</span>\r\n                {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', bottom: '30px', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null}\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ComDetection;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"50vw\",\r\n          height: \"100vh\",\r\n          // flex: \"1\",\r\n          position: \"absolute\"\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      var mapselection = []\r\n      if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n        map.eachLayer((pointLayer) => { \r\n            if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n                mapselection.push(pointLayer.options.data)\r\n                pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                // pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n                // appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n            }\r\n            // else if(pointLayer instanceof L.CircleMarker){\r\n            //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n            //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n            //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n            // }\r\n          }\r\n            )\r\n      }\r\n      appState.graph.selectedNodes = [...mapselection]\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      appState.graph.frame.selection = [...mapselection]\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if (appState.graph.frame.selection.length ==0) return;  //no selection \r\n        if (appState.graph.frame.selection.length ==1) return;  // only one node is selected \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        map.flyToBounds(b)\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n        //   console.log(e)\r\n        // appState.graph.mapClicked = null\r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\n\r\n  ","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport { ZoomMap, MapClick } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      edgesOfNodes = appState.graph.selectedNodes.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '3', opacity: '1' }\r\n      } else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.7', opacity: '0.2' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '3', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.7', opacity: '0.2' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '3', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.7', opacity: '0.2' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '3', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.7', opacity: '0.2' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size * 2.5\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.3, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: def.NODE_HIGHLIGHT, zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: def.NODE_HIGHLIGHT, zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.3, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: def.NODE_HIGHLIGHT, zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: def.NODE_HIGHLIGHT, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.3, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: 'red', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.3, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: '#DB7734', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.3, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: def.NODE_HIGHLIGHT, zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.currentlyHovered) {\r\n      if (pi === appState.graph.currentlyHovered.data.ref.community) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if(appState.graph.convexPolygonsShow){\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.5, opacity: 0.8 }\r\n    }else{\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"50vw\",\r\n        height: \"100vh\",\r\n        flex: \"1\",\r\n        zIndex: \"10\"\r\n        // position: \"absolute\"\r\n      }}\r\n    > <Tag className=\"map-tag\">Map</Tag>\r\n      <MapContainer\r\n        // style={{ height: \"480px\", width: \"100%\" }}\r\n        zoom={9}\r\n        center={[37.1, -80.5]}\r\n      >\r\n        <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n        <AreaSelect />\r\n        <ZoomMap />\r\n        <MapClick />\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n\r\n              return (\r\n                <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                  data={edge}\r\n                // eventHandlers={{\r\n                //   click: (e) => {\r\n                //     console.log(e.target.options.data)\r\n                //   }}}\r\n                />\r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node)}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.updateSelectionOpacity();\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.allPropertiesKeyList}\r\n                    onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <Select\r\n                    items={appState.graph.allPropertiesKeyList}\r\n                    itemRenderer={CommonItemRenderer}\r\n                    filterable={false}\r\n                    onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                  >\r\n                    <Button text={appState.graph.nodes.sizeBy} />\r\n                  </Select>\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <Select\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  >\r\n                    <Button text={appState.graph.nodes.size.scale} />\r\n                  </Select>\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <small>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </small>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <p>Modifying All Nodes</p>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag}) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n  }}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n    appState.graph.allPropertiesKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              {appState.graph.metadata.nodePropertyTypes[it] == 'string' ?\r\n                <MultiSelects\r\n                  items={appState.graph.metadata.uniqueValue[it]}\r\n                  onSelect={selectit => {\r\n                    appState.graph.nodes.filter[it]? appState.graph.nodes.filter[it].push(selectit): appState.graph.nodes.filter[it]=[selectit]   \r\n                    appState.graph.filterNodes()\r\n                    // console.log(selectit)\r\n                    // console.log(appState.graph.nodes.filter[it][0])\r\n                  }}\r\n                  tag = { selectit=> { console.log(selectit); return selectit}}\r\n                  value= {['sdadf']}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={1}\r\n                  max={20}\r\n                  stepSize={0.1}\r\n                  labelStepSize={5}\r\n                  // onChange={([a, b]) => {\r\n                  //   runInAction(\"update scale\", () => {\r\n                  //     appState.graph.nodes.size.min = a;\r\n                  //     appState.graph.nodes.size.max = b;\r\n                  //   });\r\n                  // }}\r\n                  // value={[\r\n                  //   appState.graph.nodes.size.min,\r\n                  //   appState.graph.nodes.size.max\r\n                  // ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n        //   thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <p>{`Modifying All Edges`}</p>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* Collapsable Option: Thickness */}\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Select Edge Thickness: </p>\r\n                            <div style={{display: \"inline\", float: \"right\"}}>\r\n                               \r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{width:\"100px\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        <Button\r\n          style={{width:\"100px\",display:\"none\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\"}}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\",display:\"none\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <h6>Label Size</h6>\r\n        <Slider\r\n          min={0.1}\r\n          max={1}\r\n          stepSize={0.1}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <h6>Label Length</h6>\r\n        <Slider\r\n          min={1}\r\n          max={32}\r\n          stepSize={0.1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <h6>Label By</h6> \r\n        <Select\r\n          items={appState.graph.allPropertiesKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => (appState.graph.nodes.labelBy = it)}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const SelectionDistanceFromLatLonIn = () => {\r\n      const selectNodes = appState.graph.selectedNodes;\r\n      const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n      if ( selectNodes.length> 1) {\r\n        //// calculate only the connected distance \r\n        // const edgeSelection = appState.graph.frame.getEdgeWithinSelection(appState.graph.selectedNodes)\r\n        // if (edgeSelection.length == 0) return null;\r\n        // const edgeDistance = edgeSelection.map(e => e.edgeDist)\r\n        // return average(edgeDistance).toFixed(3);\r\n\r\n        //// calculate average distance between all selected nodes \r\n        const edgeDistance = []\r\n        \r\n        for (let i = 0; i < selectNodes.length; i++) {\r\n          for (let j = i + 1; j < selectNodes.length; j++) {\r\n            const lon1 = selectNodes[i].data.ref.LonX\r\n            const lat1 = selectNodes[i].data.ref.LatY\r\n            const lon2 = selectNodes[j].data.ref.LonX\r\n            const lat2 = selectNodes[j].data.ref.LatY\r\n            const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n            edgeDistance.push(edgeDist)\r\n          }\r\n        }\r\n        return average(edgeDistance).toFixed(3);\r\n\r\n      } else {\r\n        return null\r\n      }\r\n\r\n    }\r\n\r\n    const SelectionDensity = () => {\r\n\r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelection(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) return 0;\r\n      const nodelength = appState.graph.selectedNodes.length;\r\n      const selectionDen = 2 * edgeSelection.length / (nodelength * (nodelength - 1))\r\n      return selectionDen.toFixed(3)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n              {/* <tr>\r\n                <th></th>\r\n                <th></th>\r\n               \r\n              </tr> */}\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'The average distance is ' + SelectionDistanceFromLatLonIn() + ' km'}</td>\r\n                {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + SelectionDensity()}</td>\r\n                {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n              </tr>\r\n              {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                \r\n              ))} */}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n  // @observable x = scaleLinear()\r\n  //   .domain([\r\n  //     0,\r\n  //     max(appState.graph.frame.getNodeList(), function (d) {\r\n  //       return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n  //     })\r\n  //   ])\r\n  //   .range([0, this.width])\r\n   \r\n\r\n  \r\n  // @observable y = scaleLinear()\r\n  //   .domain([\r\n  //     0,\r\n  //     max(appState.graph.frame.getNodeList(), function (d) {\r\n  //       return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n  //     })\r\n  //   ])\r\n  //   .range([this.height, 0])\r\n\r\n  // this.props.data.filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n  // .filter(node => node.data.ref.degree !== 0 && !isNaN(parseFloat(node.data.ref.dist_to_center)))\r\n\r\n  margin = { top: 10, right: 10, bottom: 50, left: 50 }\r\n  width = 220 - this.margin.left - this.margin.right\r\n  height = 200 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n  \r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = ()=>{\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n    \r\n    let header = [];\r\n    this.setState({\r\n      csvarray : []\r\n    });\r\n    // this.state.;\r\n    if(appState.graph.scatterplot.x === 'shortest path'){\r\n      column1 = this.infinityhop\r\n      header.push('shortest path')\r\n    }else if(appState.graph.scatterplot.x === 'pair distance'){\r\n      column1 = appState.graph.rawGraph.paths.map((path,i)=>{\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    }else{\r\n      header.push(appState.graph.scatterplot.x)\r\n      column1 = appState.graph.frame.getNodeList().map((d) =>{\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n      })\r\n    }\r\n\r\n    if(appState.graph.scatterplot.y === 'shortest path'){\r\n      column2 = this.infinityhop\r\n      header.push('shortest path')\r\n    }else if(appState.graph.scatterplot.y === 'pair distance'){\r\n      column2 = appState.graph.rawGraph.paths.map((path,i)=>{\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    }else{\r\n      header.push(appState.graph.scatterplot.y)\r\n      column2 = appState.graph.frame.getNodeList().map((d) =>{\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n      })\r\n    }\r\n     \r\n    let temp = []\r\n    temp.push(header) \r\n    for (var i=0; i<column2.length && i<column1.length; i++){\r\n      temp.push([column1[i], column2[i]]);\r\n    }\r\n    this.setState({\r\n      csvarray : temp\r\n    });\r\n    \r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1] - this.cr,\r\n      y1: selection[1][1] - this.cr,\r\n    }\r\n\r\n    circles.each(function (d, i) {\r\n      const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n      const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n      if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n        selectionNodeID.push(select(this).attr(\"id\"))\r\n      }\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n    const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n      // console.log(node)\r\n      selectionNodeID.includes(node.id)\r\n\r\n    )\r\n    appState.graph.frame.selection = selectionNode\r\n    appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // console.log(selectionNode)\r\n    appState.graph.frame.updateSelectionOpacity()\r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      extent={\r\n        [[this.margin.left, this.cr], [this.width + this.margin.left, this.height + this.cr]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x,y\r\n      if(appState.graph.scatterplot.x === 'shortest path'){\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function(path,i){\r\n          return path['path'].length -1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length -1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen,i)=>{\r\n          if(pathlen == -1){\r\n            return this.maxhop+1\r\n          }else{\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n        .domain(this.infinityhop)\r\n        .range([0, this.width]);\r\n       \r\n\r\n      }else if(appState.graph.scatterplot.x === 'pair distance'){\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path,i)=>{\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n        .domain([\r\n          0,\r\n          max(pairdistance)\r\n        ])\r\n        .range([0, this.width])\r\n\r\n\r\n      }else{\r\n        x = scaleLinear()\r\n        .domain([\r\n          0,\r\n          max(appState.graph.frame.getNodeList(), function (d) {\r\n            return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n          })\r\n        ])\r\n        .range([0, this.width])\r\n      }\r\n     \r\n      if(appState.graph.scatterplot.y === 'shortest path'){\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function(path,i){\r\n          return path['path'].length -1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length -1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen,i)=>{\r\n          if(pathlen == -1){\r\n            return this.maxhop+1\r\n          }else{\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n      \r\n        y = scalePoint()\r\n        .domain(this.infinityhop)\r\n        .range([0, this.width]);\r\n    \r\n      }else if(appState.graph.scatterplot.y === 'pair distance'){\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function(path,i){\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n        .domain([\r\n          0,\r\n          max(pairdistance)\r\n        ])\r\n        .range([this.height, 0])\r\n\r\n      }else{\r\n      y = scaleLinear()\r\n        .domain([\r\n          0,\r\n          max(appState.graph.frame.getNodeList(), function (d) {\r\n            return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n          })\r\n        ])\r\n        .range([this.height, 0])\r\n      }\r\n      \r\n\r\n\r\n      return (\r\n        <div>\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          \r\n            <div>\r\n              <p style={{ display: \"inline\" }}>X By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                < SimpleSelect\r\n                  items={appState.graph.allComputedPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.scatterplot.x = it)}\r\n                  value={appState.graph.scatterplot.x}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Y by: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allComputedPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.scatterplot.y = it)}\r\n                  value={appState.graph.scatterplot.y}\r\n                />\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id = \"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",3)\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop ={this.infinityhop}/>}\r\n                <text transform={\"translate(50, 180)\"} fontSize=\"13px\">{appState.graph.scatterplot.x}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ? \r\n                  axisBottom().scale(x).tickFormat((label)=>{\r\n                    if(parseInt(label) == (this.maxhop +1)){\r\n                      return 'None'\r\n                    }else{\r\n                      return label\r\n                    }\r\n                    \r\n                  }): axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text\r\n                  transform={\"translate(-40, 140) rotate(-90)\"}\r\n                  fontSize=\"13px\"\r\n                >{appState.graph.scatterplot.y}</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ? \r\n                  axisLeft().scale(y).tickFormat((label)=>{\r\n                    if(parseInt(label) == (this.maxhop +1)){\r\n                      return 'None'\r\n                    }else{\r\n                      return label\r\n                    }\r\n                    \r\n                  })\r\n                     :axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              { (appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') \r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n        this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button \r\n            style={{transform: \"translate(0px, -2vh)\"}}\r\n            onClick={() => {\r\n            var svgsaver = new SvgSaver();                      // creates a new instance\r\n            var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n            svgsaver.asSvg(svg);  \r\n          }}>Download Image</Button>\r\n          \r\n          \r\n          {(\r\n        <CSVLink data={this.state.csvarray} onClick = {this.downloadCSV}  asyncOnClick={true} filename=\"bsedata.csv\">\r\n          <Button \r\n            style={{transform: \"translate(0px, -2vh)\"}}\r\n            \r\n            >DownLoad CSV\r\n          </Button>\r\n        </CSVLink>\r\n      )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n    \r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') \r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')){\r\n        if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else if (appState.graph.currentlyHovered) {\r\n          if (node.id === appState.graph.currentlyHovered.id) {\r\n            return {\r\n              fill: node.renderData.color,\r\n              zIndex: \"10000\",\r\n              stroke: def.NODE_HIGHLIGHT,\r\n              fillOpacity: 0.8\r\n            }\r\n          } else {\r\n            return {\r\n              fill: node.renderData.color,\r\n              zIndex: \"0\",\r\n              stroke: false,\r\n              fillOpacity: 0.15\r\n            }\r\n          }\r\n        } else if (appState.graph.selectedNodes.length > 0) {\r\n          if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n            return {\r\n              fill: node.renderData.color,\r\n              zIndex: \"0\",\r\n              stroke: false,\r\n              fillOpacity: 0.15\r\n            }\r\n          } else {\r\n            return {\r\n              fill: node.renderData.color,\r\n              zIndex: \"10000\",\r\n              stroke: def.NODE_HIGHLIGHT,\r\n              fillOpacity: 0.8\r\n            }\r\n          }\r\n        }\r\n      }else{ //path node style \r\n        return { \r\n          fill: \"rgba(25, 158, 199, .9)\",\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      }\r\n    \r\n  }\r\n\r\n  pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let ydata =[]\r\n      if((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')){\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path,i)=>(\r\n          <circle\r\n          cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop +1):this.props.scale.x(path['path'].length-1)}\r\n          cy={this.props.scale.y(parseFloat(path['distance']))}   \r\n          r={this.props.cr}\r\n          style={this.setScatterStyle(path)}\r\n          id={`${path.source}👉${path.target}`}\r\n          data={path}\r\n          onMouseOver={(e) => {\r\n            // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n            const [sourceid, targetid] =  e.target.getAttribute('id').split('👉')\r\n            // e.target.getAttribute('fill') node.renderData.color,\r\n            e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n            // const source = appState.graph.frame.getNode(sourceid)\r\n            // const target = appState.graph.frame.getNode(targetid)\r\n            const thepath = this.pathFinder.find(sourceid, targetid)\r\n            const pathnode = thepath.map((node)=>{\r\n              return appState.graph.frame.getNode(node.id)\r\n            })\r\n            //control map highlight \r\n            appState.graph.pathHovered = {\r\n              \"sourceid\":sourceid,\r\n              \"targetid\":targetid, \r\n              \"pathnode\": pathnode\r\n            } \r\n            // control socio update \r\n            appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n          }}\r\n          onMouseLeave={(e) => {\r\n            // if (appState.graph.mapClicked) return;\r\n            e.target.style.fill = 'rgba(25, 158, 199, .9)'\r\n\r\n            appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              // if (n !== appState.graph.mapClicked) {\r\n              appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              // }\r\n            }\r\n            );\r\n            appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n            appState.graph.pathHovered = null;\r\n\r\n\r\n          }}\r\n          key={i}\r\n        />)\r\n        )\r\n        \r\n\r\n      }else if((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')){\r\n        renderCircles = appState.graph.rawGraph.paths.map((path,i)=>(\r\n          <circle\r\n          cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop +1):this.props.scale.y(path['path'].length-1)}\r\n          cx={this.props.scale.x(parseFloat(path['distance']))}   \r\n          r={this.props.cr}\r\n          style={this.setScatterStyle(path)}\r\n          id={`${path.source}👉${path.target}`}\r\n          // data={node}\r\n          onMouseOver={(e) => {\r\n            // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n            const [sourceid, targetid] =  e.target.getAttribute('id').split('👉')\r\n            // const source = appState.graph.frame.getNode(sourceid)\r\n            // const target = appState.graph.frame.getNode(targetid)\r\n            const thepath = this.pathFinder.find(sourceid, targetid)\r\n            const pathnode = thepath.map((node)=>{\r\n              return appState.graph.frame.getNode(node.id)\r\n            })\r\n            //control map highlight \r\n            appState.graph.pathHovered = {\r\n              \"sourceid\":sourceid,\r\n              \"targetid\":targetid, \r\n              \"pathnode\": pathnode\r\n            } \r\n            // control socio update \r\n            appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n          }}\r\n          onMouseLeave={(e) => {\r\n            // if (appState.graph.mapClicked) return;\r\n\r\n            appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              // if (n !== appState.graph.mapClicked) {\r\n              appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              // }\r\n            }\r\n            );\r\n            appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n            appState.graph.pathHovered = null;\r\n\r\n\r\n          }}\r\n          key={i}\r\n        />)\r\n        )\r\n      }else if((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') \r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')){\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n  \r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n  \r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n  \r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n  \r\n  \r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n      \r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport SelectionDetail from \"./panels/SelectionDetail\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    right: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    right: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-22em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\">\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \"scatter-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            {/* <FilterOptionsCard /> */}\r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filter option  panels */}\r\n        {/* <div className=\"left-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.filterToggleOptions}> &#8250;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n\r\n\r\n        <Tag className=\"network-tag\">\r\n          Network\r\n        </Tag>\r\n\r\n\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 1 && <SelectionDetail />\r\n        }\r\n        {/* {appState.graph.selectedNodes.length === 1 && (\r\n          <NodeDetail node={appState.graph.selectedNodes[0].data.ref} />\r\n        )} */}\r\n\r\n        {/* {appState.graph.selectedNodes.length !== 1 && appState.graph.currentlyHovered && (\r\n          <NodeDetail node={appState.graph.currentlyHovered.data.ref} />\r\n        )} */}\r\n\r\n\r\n\r\n        <Legends />\r\n        <StatusBar />\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n  \r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n        [Classes.DARK]: appState.preferences.darkMode\r\n      })}>\r\n         <Navbar />\r\n         {appState.graph.hasGraph && <ComDetection />}\r\n        \r\n\r\n        <div className=\"graph\">\r\n         \r\n          <main className=\"main\">\r\n            {appState.graph.hasGraph ? (\r\n              <ThreeJSVis />\r\n            ) : (\r\n                <WorkspaceView />\r\n              )}\r\n            \r\n          </main>\r\n          {appState.graph.hasGraph && <FloatingCards />}\r\n          <Dialogs />\r\n        </div>\r\n          {appState.graph.hasGraph ? (\r\n              <MapView />\r\n            ) : (\r\n                <WorkspaceView />\r\n              )}\r\n         {/* <h3>{this.mss}</h3> */}\r\n      </div>\r\n      \r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}