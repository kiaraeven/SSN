{"version":3,"sources":["stores/PreferencesStore.js","services/AlgorithmUtils.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/SelectionDetail.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","jsnx","require","jsgraphs","convertToJsnx","snapshot","jsnxGraph","Graph","addNodesFrom","rawGraph","nodes","map","n","id","addEdgesFrom","edges","e","source_id","target_id","convertToJSGraph","i","idDict","length","g","forEach","addEdge","connectedComponents","keydown","connectcom","cc","ConnectedComponents","componentCount","exactGraphDiameter","graphDiameter","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","Math","max","GraphStore","_dec","ref","_dec2","initialGlobalConfig","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","labelBy","shape","labelSize","labelLength","crossColor","scatterplot","x","y","clusteringco","filter","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_descriptor27","_descriptor28","_descriptor29","_descriptor30","_descriptor31","tempRawGraph","undefined","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_descriptor36","_lastSelectedSingleNode","nodesShowingLabels","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","_descriptor42","_descriptor43","_descriptor44","_descriptor45","_descriptor46","_descriptor47","_descriptor48","_descriptor49","_descriptor50","_descriptor51","_descriptor52","_descriptor53","_descriptor54","hasGraphLoaded","get","selectedNodes","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","k","removeList","indexOf","uniq_compute","u","inputString","connectingWords","replace","word","includes","toLowerCase","charAt","toUpperCase","slice","capitalizeString","neighborIDs","j","links","link","push","fromId","toId","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","s","done","err","scales","domain","minMax","range","_this","Set","item","selectedNodeId","setOfNeighborIds","source","toString","target","add","node","has","_this2","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","_this3","runInAction","selection","Object","keys","_objectSpread","satisfy","fkey","nodePropertyTypes","getNodeList","renderData","draw_object","children","visible","nodeids","_this4","_this5","removeNodesByIds","_this6","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","a","b","half","floor","medianLat","medianLon","lat1","lon1","lat2","lon2","c","cos","asin","sqrt","calDistanceFromLatLonInKm","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","edgeProperties","savedStatesStr","runActiveLayout","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this7","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","averageClustering","averageClusteringCoefficient","nodeCount","graphDensity","sum","degree","averageDegree","array","edgeSelection","linkObjs","uniqEdgeSelection","edgeDistance","edgeDist","reduce","toFixed","temraw","reaverageClusteringCoefficient","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","globalFlatRatio","convexhullby","groupby","mapClicked","areaSelected","currentlyHovered","convexNodes","pathHovered","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","clearBrush","mapEdgeShow","autoZoom","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","split","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","substring","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","clustercoe","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","pinNodes","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","join","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","betweenness","closeness","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","rank","_context4","parseInt","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","pathFinder","aGreedy","pathsArr","pathsSet","pathKey1","pathKey2","find","pageRank","centrality","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","linkVertical","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","clearSelection","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","getEdgeWithinOutSelection","withinoutEdges","getEdgeWithinDist","mindist","maxdist","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightAllEdges","highlightedgeWithinDist","updateSelectionOutOpacity","highlightClickNode","neighborNodes","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","edge","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","_loop","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","thenode","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","mapsize","fontSize","mapfontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","newDelimiter","updateDelimiter","DIALOG_BODY","TABLE","rel","href","Spinner","renderExampleDataset","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","class","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","deselectIndex1","onRelease","_ref3","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","role","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","DetectKeyPress","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","edgeSelectionID","nodesSelectedID","degreeselectionID","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","neighborNodesID","selectedNeighborIDs","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","flex","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","mouseover","mouseout","direction","permanent","defaultChecked","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","header","csvarray","unshift","noderow","column","onBrushStart","sourceEvent","onBrush","onBrushEnd","selectionNodeID","circles","svg","selectAll","brushBounds","x0","y0","each","nodecx","nodecy","renderBrush","SVGBrush","extent","getEventMouse","_this$svg$getBounding","brushType","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","XYSelect","allComputedPropertiesKeyList","input","RenderCircles","Axis","axis","axisBottom","tickFormat","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","renderCircles","cluster","ci","cx","cy","onMouseOver","_e$target$getAttribut","_e$target$getAttribut2","sourceid","targetid","onMouseLeave","_e$target$getAttribut3","_e$target$getAttribut4","dataset","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","marginLeft","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","onEdgeBrushStart","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","_this$edgesvg$getBoun","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","SelectionDistanceFromLatLonIn","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","ti","selectneighbors","selectNodes","SelectionDensity","avgdist","nodelength","selectionDen","selectedEdge","avgDegree","de","avgdensity","selectnodesID","rediameter","reclustercoe","recomponent","StatGroupPanel","fromCharCode","avgConnectionDist","cdistance","runKfullfillment","calculateDistance","dLat","dLon","atan2","currentNode","_step2","_iterator2","otherNode","_step3","_iterator3","cnn","snn","intersection","findKfulfillment","runGlobalFlatRatio","shuffleArray","randomIndex","_step6","_iterator6","_step7","_iterator7","nodeOrders","_step8","nodesLabels","distanceMatrix","_iterator8","nl","_step9","_iterator9","ll","avgGBarSum","order","nodesWKnn","degreeConstraintMatrix","degreeCount","_step4","connectionCounted","_iterator4","totalDistance","_loop2","_step5","neighborsid","_iterator5","neighbor","gBarSumDistances","gSum","flat","runLocalFlatRatio","_step10","_iterator10","currentId","ndistance","isFinite","_step11","_iterator11","_step12","_iterator12","findFlatRatio","runShortestPath","pairdist","shortestPathPairs","Sidebar","avgdegree","rerunDiameter","rerundiameter","rerunCluster","reruncluster","rerunComponent","reruncomponent","cityName","getElementsByClassName","background","SidebarMenu","openCity","colspan","avgDist","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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","file":"static/js/main.4876c85c.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import appState from '../stores';\r\n\r\nconst jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.clusteringco\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    appState.graph.clusteringco = jsnx.averageClustering(jsnxGraph);\r\n    // const result = 0\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n    return appState.graph.clusteringco;\r\n}\r\n\r\n/**\r\n * ReCalculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function reaverageClusteringCoefficient(snapshot) {\r\n    \r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    \r\n    \r\n    return jsnx.averageClustering(jsnxGraph);\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.connectcom\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    console.log('compute connected copoenent')\r\n    appState.graph.connectcom = cc.componentCount()\r\n    // console.log('connected:')\r\n    // console.log(appState.graph.connectcom)\r\n    return appState.graph.connectcom;\r\n   \r\n}\r\n\r\nexport function reconnectedComponents(snapshot) {\r\n    \r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    \r\n    \r\n    // console.log('connected:')\r\n    // console.log(appState.graph.connectcom)\r\n    return cc.componentCount();\r\n   \r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.graphDiameter\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    appState.graph.graphDiameter = dia\r\n    return dia;\r\n}\r\n ","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter , reaverageClusteringCoefficient, reconnectedComponents} from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor: [\"#0073bc\", \"#ff3333\",\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot: {\r\n      x: 'degree',\r\n      y: 'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n  @observable globalFlatRatio = undefined;\r\n  @observable keydown = false;\r\n  clusteringco = 0;\r\n  graphDiameter = 0;\r\n  connectcom = 0;\r\n\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable autoZoom = true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n  @observable areaSelected = undefined;\r\n  @observable clearBrush = false;\r\n\r\n\r\n  @observable selectedEdge = 0;\r\n  @observable avgDegree = 0;\r\n  @observable avgdist = 0;\r\n  @observable avgdensity = 0;\r\n  @observable clustercoe = 0;\r\n  @observable rediameter = '';\r\n  @observable reclustercoe = '';\r\n  @observable recomponent = '';\r\n\r\n tempRawGraph = undefined;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on \r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\"pagerank\", \"degree\", 'centrality', 'distance to center'  ,  'betweenness', 'closeness',  'betweeness centrality', 'closeness centrality', 'distance to group center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  @observable\r\n  degreeselection = []\r\n\r\n  @observable\r\n  degreebrushed = false\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = []\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden', 'id', 'Longitude', 'Latitude', 'LatY', 'LonX', 'dist to center', 'dist_to_center', 'centrality', 'shortest path', 'pair distance', 'node_id', 'standard distance', 'network density', 'SHORT', \"ORGANIZATION\", 'isconvex', 'nearestnn']\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n\r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n\r\n    const capitalizeString =(inputString)=> {\r\n      const connectingWords = ['in', 'to']; // Add more connecting words as needed\r\n    \r\n      return inputString.replace(/\\w+/g, function(word) {\r\n        return connectingWords.includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n      });\r\n    }\r\n    \r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return capitalizeString(u)\r\n    })\r\n    return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n\r\n\r\n\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j] || !this.selectedNodes[j].links) continue\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        })\r\n\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([\r\n          ...neighborIDs\r\n        ])\r\n        return uniqNeighborIDs\r\n      } else {\r\n        return []\r\n      }\r\n    } else {\r\n      return []\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      const nominalColor =  [\"#0073bc\", \"#ff3333\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n        .range(nominalColor);\r\n    } else { //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() {\r\n    runInAction('filter nodes', () => {\r\n      if (this.selectedNodes.length > 0) {\r\n      this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n\r\n    if (this.frame.selection.length > 0) {\r\n      this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n   \r\n      if (Object.keys(this.filter).length === 0){\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {return { ...n, isHidden: false }});\r\n      }\r\n\r\n      if (Object.keys(this.filter).length !== 0) {\r\n\r\n\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == 'string') {\r\n              if (this.filter[fkey].length > 0 && (!this.filter[fkey].includes(n[fkey]))) {\r\n                satisfy = false\r\n              }\r\n            } else {  // number range \r\n              if (this.filter[fkey] && (n[fkey] < this.filter[fkey]['min'] || n[fkey] > this.filter[fkey]['max'])) {\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n      }\r\n      this.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n\r\n    });\r\n     // this.runActiveLayout()\r\n    //  appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\"\r\n    const toId = \"target_id\"\r\n    const mapId = \"ID\"\r\n    const mapLon = \"LonX\"\r\n    const mapLat = \"LatY\"\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr =\r\n    initialgraph.rawGraph.nodes.map(\r\n        n => ({ ...n, LonX: parseFloat(n[\"LonX\"]), LatY: parseFloat(n[\"LatY\"]) }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n  \r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n  \r\n    // const edgesSet = new Set();\r\n  \r\n    // const edgesArr = [];\r\n  \r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n  \r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n  \r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n  \r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n      edgesArr.forEach(it => {\r\n        const fromnode = nodesArr.filter((node)=>{return node.id === it[fromId].toString()})\r\n        const tonode = nodesArr.filter((node)=>{return node.id === it[toId].toString()})\r\n        const Nonloc = 360\r\n        if(fromnode.length > 0 && tonode.length >0){\r\n        it.fromlocLatY = parseFloat(fromnode[0].LatY)\r\n        it.fromlocLonX = parseFloat(fromnode[0].LonX)\r\n        it.tolocLatY = parseFloat(tonode[0].LatY)\r\n        it.tolocLonX = parseFloat(tonode[0].LonX) }\r\n        else{\r\n        it.fromlocLatY = Nonloc\r\n        it.fromlocLonX = Nonloc\r\n        it.tolocLatY = Nonloc\r\n        it.tolocLonX = Nonloc\r\n        }// observable array???\r\n        it.withinState = true\r\n        it.withinFamily = true\r\n        \r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n        \r\n      });\r\n    } \r\n\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295;    // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n        c(lat1 * p) * c(lat2 * p) *\r\n        (1 - c((lon2 - lon1) * p)) / 2;\r\n  \r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n  \r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n  \r\n  \r\n    const calMedianCenter = ()=>{\r\n      const latlist = nodesArr.map(n => parseFloat(n['LatY']))\r\n      const lonlist = nodesArr.map(n => parseFloat(n['LonX']))\r\n      const medianCenter = (values)=>{\r\n        if(values.length ===0) throw new Error(\"No inputs\");\r\n  \r\n        const result1 = [...values].sort((a, b) => a - b)\r\n      \r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n      \r\n        var half = Math.floor(result1.length / 2);\r\n        \r\n        if (result1.length % 2)\r\n          return result1[half];\r\n        \r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      }\r\n  \r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist)\r\n        const medianLon = medianCenter(lonlist)\r\n        nodesArr.forEach(function (n, i) {\r\n          n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n        })\r\n      }\r\n  \r\n  \r\n    }\r\n  \r\n    if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n      // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  \r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n      // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n  \r\n  \r\n  \r\n    //   graph.forEachNode(function (fromnode) {\r\n  \r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph \r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n            \r\n    //          })\r\n    //         }\r\n             \r\n    //         //directed graph: \r\n    //       }\r\n  \r\n    //     })\r\n  \r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n  \r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n  \r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0])\r\n    const nodePropertyTypes = {}\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n    })\r\n    const uniqueValue = {}\r\n    nodekeyList.forEach(function (k, i) {\r\n  \r\n      if (nodePropertyTypes[k] == 'string') {\r\n        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        const minv = Math.min(...valuea)\r\n        const maxv = Math.max(...valuea)\r\n        uniqueValue[k] = [minv, maxv]\r\n      }\r\n    })\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: 'Untitled Graph',\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: ['pagerank', 'degree', 'distance to center' ,  'betweenness', 'closeness'],\r\n        edgeProperties: ['source_id', 'target_id'],\r\n       \r\n      },\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    \r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph \r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n    \r\n  \r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = 'degree';\r\n    this.scatterplot.y = 'distance to center';\r\n\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n  //   appState.graph.frame.paused = false;\r\n  // appState.graph.frame.resumeLayout();\r\n  //                 this.forceUpdate();\r\n  \r\n\r\n                      // this.frame.resumeLayout();\r\n                      // this.forceUpdate();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout  () {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n    \r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size >0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n \r\n  density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n \r\n  degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n  avgDist(){\r\n\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    const edgeSelection = [];\r\n    this.frame.getNodeList().forEach(node => {\r\n      if(node.linkObjs && node.linkObjs.length>0){\r\n        edgeSelection.push(...node.linkObjs)\r\n      }\r\n      \r\n    })\r\n\r\n    if (edgeSelection.length > 0) {\r\n      const uniqEdgeSelection = uniq(edgeSelection)\r\n      \r\n      if (uniqEdgeSelection.length > 0) {\r\n        const edgeDistance = uniqEdgeSelection.map(e=>{\r\n          if(e.edgeDist >0){\r\n            return e.edgeDist\r\n          }else {\r\n            return 0\r\n          }\r\n         \r\n        })\r\n        // console.log(edgeDistance)\r\n        return average(edgeDistance).toFixed(2);\r\n\r\n      } else {\r\n        return 0\r\n      }\r\n\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n\r\n\r\n  diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n\r\n  rerundiameter(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n\r\n  reruncluster(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return reaverageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n  reruncomponent(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n}\r\n\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.globalFlatRatio = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.areaSelected = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  if(appState.graph.frame) {appState.graph.frame.selection = [];}\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n \r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n \r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n    appState.graph.clustercoe = appState.graph.averageClustering().toFixed(3)\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    // appState.graph.frame.selection = []\r\n\r\n    // \r\n    appState.graph.selectedNodes = appState.graph.frame.selection\r\n\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    // appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  \r\n  // appState.graph.runActiveLayout();\r\n  // setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length>0){  //dehilight border when innitially load \r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n  }\r\n  // if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n  //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  // }\r\n})\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"5cd394cf-5589-4a9e-bf7b-26f9d252c4d9\"],  \r\n   \r\n  // 8b1fa770-a1d0-43f0-b798-def14744dd8c\r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  [\"Mafia Family Network\", \"2abf97e5-d210-481b-8675-a4656e622a55\"],\r\n  // c43890f8-1cfb-4599-a0d3-8f47303691fc\r\n  [\"US flight Network\", '01221941-76e7-4491-b712-b54fd3b07f7a'],\r\n  \r\n  ['US 117th House Vote Network','ef6031bc-d0ac-4287-8042-1d9759d61a12']\r\n  // \"5c1c6b89-24cd-4dff-9748-6cf6ad8a43a1\" 960 edges\r\n  // e6d1062c-f1ac-4d69-8039-16d589fb04cf\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport centrality from 'ngraph.centrality';\r\n// import betweennes from 'ngraph.centrality/src/betweenness';\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.globalFlatRatio = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.areaSelected = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n \r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  // appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        \r\n      }\r\n      appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id,  betweenness:0, closeness:0 };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0,betweenness:0, closeness:0 , pagerank: 0, LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 , betweenness:0, closeness:0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 ,betweenness:0, closeness:0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  // const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n  const betweenness = centrality.betweenness(graph)\r\n  const closeness = centrality.closeness(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id],  closeness: closeness[n.id],betweenness:betweenness[n.id], degree: parseInt(degreeDict[n.id] ) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center',  'betweenness', 'closeness' ],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  // const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  const betweenness = centrality.betweenness(graph);\r\n  const closeness = centrality.closeness(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, closeness:closeness[n.id] , betweenness: betweenness[n.id],pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center',  'betweenness', 'closeness'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { linkVertical } = require(\"d3\");\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  \r\n   //return all the edges within and out the selected nodes \r\n   self.getEdgeWithinOutSelection = function (selection) {\r\n    const withinoutEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1 )&& link.source!==link.target && withinoutEdges.indexOf(link) == -1) {\r\n            withinoutEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinoutEdges;\r\n  }\r\n\r\n   //return all the edges within distance \r\n   self.getEdgeWithinDist = function (mindist, maxdist) {\r\n    const withinoutEdges = []\r\n    self.graph.forEachNode (n=>{\r\n      if(n.linkObjs && n.linkObjs.length> 0){\r\n        n.linkObjs.forEach(function (link) {\r\n          if (link.edgeDist >mindist && link.edgeDist <maxdist) {\r\n            withinoutEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    })\r\n    \r\n    return withinoutEdges;\r\n  }\r\n\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = []\r\n    const edgekeys = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && edgekeys.indexOf(key1) == -1) {\r\n            withinEdges.push(link)\r\n            edgekeys.push(key1)\r\n            edgekeys.push(key2)\r\n            // edgecount = edgecount+1\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  \r\n //highlight nodes and edges within selection\r\n self.updateDegreeHistOpacity = function () {\r\n  if (self.degreehighlight.length > 0) {\r\n    if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n      const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n        var p = 0.017453292519943295;    // Math.PI / 180\r\n        var c = Math.cos;\r\n        var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n          c(lat1 * p) * c(lat2 * p) *\r\n          (1 - c((lon2 - lon1) * p)) / 2;\r\n    \r\n        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n      }\r\n      var sumOfAllDistance = 0;\r\n      var n = 0;\r\n      var max = 0;\r\n      self.graph.forEachNode(n => {\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX)\r\n        if (dist > max) {\r\n          max = dist;\r\n        }\r\n      })\r\n      self.graph.forEachNode(n => {  \r\n        // self.colorNodeColor(n, \"#0000FF\");\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX);\r\n        console.log(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0]['LatY'],self.degreehighlight[0]['LatX'])\r\n        self.colorNode(n, 0x0000FF);\r\n        if (dist == 0) {\r\n          self.colorNodeOpacity(n, 1);\r\n        } else if (dist < max/4) {\r\n          self.colorNodeOpacity(n, 0.2);\r\n        }else if (dist < (2*max)/4) {\r\n          self.colorNodeOpacity(n, 0.4);\r\n        }else if (dist < (3*max)/4) {\r\n          self.colorNodeOpacity(n, 0.6);\r\n        }\r\n        else {\r\n          self.colorNodeOpacity(n, 0.8);\r\n        }\r\n        \r\n        \r\n      });\r\n    }\r\n    else {\r\n    self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })  \r\n\r\n    //hilight within edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    const withinEdges = self.getEdgeWithinSelection(self.degreehighlight)\r\n\r\n    for (var i = 0; i < withinEdges.length; i++) {\r\n      withinEdges[i].linecolor.r = red;\r\n      withinEdges[i].linecolor.g = blue;\r\n      withinEdges[i].linecolor.b = green;\r\n    }\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //highlight nodes \r\n    for (var i = 0; i < self.degreehighlight.length; i++) {\r\n      self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n    }\r\n\r\n  } \r\n  }else {        //when no nodes satisfying the condition, all 0.2 opacity \r\n    self.graph.forEachNode(n => {\r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    self.colorNodeEdge(null);\r\n  }\r\n}\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n      \r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {  \r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX,self.selection[0]['LatY'],self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max/4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          }else if (dist < (2*max)/4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          }else if (dist < (3*max)/4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n          \r\n          \r\n        });\r\n      }\r\n      else {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } \r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n  self.highlightAllEdges = function(){\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = red //black/white\r\n      link.linecolor.g = blue\r\n      link.linecolor.b = green\r\n    })\r\n    self.arrow.material.color.setRGB(red, blue, green);  \r\n  }\r\n\r\n  //highlight  edges within distance range \r\n  self.highlightedgeWithinDist = function(mindist, maxdist){\r\n\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      if(link.edgeDist>=mindist && link.edgeDist <=maxdist){\r\n        link.linecolor.r = red;\r\n      link.linecolor.g = blue;\r\n      link.linecolor.b = green;\r\n      }else{\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      }\r\n      \r\n    })\r\n    self.arrow.material.color.setRGB(red, blue, green);  \r\n\r\n    //hilight  edges within distance \r\n    \r\n    // const withinEdges = self.getEdgeWithinDist(mindist,maxdist)\r\n\r\n    // for (var i = 0; i < withinEdges.length; i++) {\r\n    //   withinEdges[i].linecolor.r = red;\r\n    //   withinEdges[i].linecolor.g = blue;\r\n    //   withinEdges[i].linecolor.b = green;\r\n    // }\r\n    // self.arrow.material.color.setRGB(red, blue, green);\r\n  }\r\n\r\n\r\n   //highlight nodes and edges branching out from selection\r\n  self.updateSelectionOutOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n      \r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {  \r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX,self.selection[0]['LatY'],self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max/4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          }else if (dist < (2*max)/4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          }else if (dist < (3*max)/4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n          \r\n          \r\n        });\r\n      }\r\n      else {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinOutSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } \r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n\r\n   //highlight clicked nodes and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node ) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n    //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //   //fisrt dehighlight all the edges\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })  \r\n\r\n    //   //hilight neighbor edges\r\n    //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n    //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //   const withinEdges = node.linkObjs\r\n\r\n    //   for (var i = 0; i < withinEdges.length; i++) {\r\n    //     withinEdges[i].linecolor.r = red;\r\n    //     withinEdges[i].linecolor.g = blue;\r\n    //     withinEdges[i].linecolor.b = green;\r\n    //   }\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n    // } else {        //when no nodes are given, all 1 opacity \r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n        \r\n    //   });\r\n    //   self.colorNodeEdge(null);\r\n    // }\r\n   \r\n\r\n    // self.highlightNode(node, true);\r\n    // node.renderData.textHolder.children[0].element.hideme = false;\r\n    self.colorNodeEdge(node);\r\n  }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (!node) return \r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null;\r\n      \r\n      \r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"circle\",\r\n  NODE_HSHAPE: \"circle\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if(!self.selection[i]) continue\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n      // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    }\r\n\r\n  // };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  }\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null\r\n      appState.graph.areaSelected = undefined;\r\n      // appState.graph.networkClicked = null\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n      \r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node)\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      \r\n      \r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n        \r\n        \r\n      }\r\n\r\n\r\n\r\n      \r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 500) {\r\n        self.doubleClicked = true;\r\n        \r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null\r\n    appState.graph.areaSelected = undefined;\r\n    appState.graph.degreeselection = []\r\n    appState.graph.degreebrushed = false\r\n    \r\n    self.updateSelectionOpacity();\r\n\r\n    if(self.selection.length == 1){\r\n      const thenode = self.selection[0]\r\n      self.highlightClickNode(thenode)\r\n      appState.graph.mapClicked = thenode\r\n      // self.selection = self.getNeighborNodesFromGraph(thenode);\r\n      appState.graph.selectedNodes = self.getNeighborNodesFromGraph(thenode);\r\n        \r\n      \r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if(self.selection.length == 0){\r\n      appState.graph.mapClicked = null\r\n      appState.graph.areaSelected = undefined;\r\n    }\r\n\r\n    // if(self.selection.length>0){\r\n    //   const tselection = self.selection.map(n=>n)\r\n    //   appState.graph.selectedNodes = tselection\r\n    // }\r\n    \r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *6;\r\n    mapsize  = size/6;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n      node.renderData.textHolder.children[0].element.children[0].style.mapfontSize =\r\n      mapsize.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    // document.getElementById(\"showSelected\").style.display=\"none\";\r\n    // document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n    self.selection.forEach(n=>{\r\n      document.querySelectorAll(`.maptooltip_${n.id}`).forEach(node=>{\r\n        node.style.opacity = 1;\r\n      })\r\n      \r\n    })\r\n    \r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    \r\n    \r\n    \r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    // document.getElementById(\"hideAll\").style.display=\"none\";\r\n    // document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    // document.getElementById(\"showAll\").style.display=\"none\";\r\n    // document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","// import appState from '../../stores/index';\r\nconst { default: appState } = require(\"../../stores\");\r\nvar def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function () {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n    //directed arrows\r\n    self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n    var arrowPosition = self.directedArrows.attributes.position.array;\r\n    var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x) / 2;\r\n            var midPointY = (v1pos.y + v2pos.y) / 2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function () {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function () {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function (node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function () {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function (graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function (node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function (link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function (node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n      \r\n    });\r\n    \r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n          appState.graph.selectedNodes.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        // self.ee.emit(\"select-nodes\", self.selection);\r\n        \r\n        //  = self.selection \r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function (positions) {\r\n    self.graph.forEachNode(function (node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function (node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  \r\n\r\n  <MenuItem\r\n  iconName={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Distance to center\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Shortest path\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Pair distance\"\r\n            ? \"globe\" : \"graph\"}\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.replace(/\\w+/g, function(word) {\r\n      return ['to'].includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n    })}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        /> */}\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        /> */}\r\n        {/* <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        /> */}\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderExampleDataset(){\r\n    return(\r\n      <div id=\"exampleTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n        <p>Required attributes for nodelist.csv. Each row of the node table should represent attributes of a node, including at least a unique node ID and the node's longitude and latitude. </p>\r\n                    <table id=\"exampleNodeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead >\r\n                            <tr>\r\n                                <th > ID (unique node ID field) </th>\r\n                                <th> LonX (node longitude ) </th>\r\n                                <th> LatY (node latitude ) </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>67.2391</td>\r\n                                <td>-102.3472</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Required attributes for edgelist.csv. Each row of the edge table should represent attributes of an edge, including at least a source and target column corresponding to the node ID. </p>\r\n                    <table id = \"exampleEdgeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th > Source </th>\r\n                                <th> Target </th>\r\n                              \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>\"FWL\"</td>\r\n                \r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Example Dataset:</p>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1_OIDSbUyM9gTqziVdcqU_NsGxkk6HMTo/view?usp=share_link\"> US_airport_nodelist.csv</a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1cvOUir8gKDlS_hhNGL0qQOn2eNHCDsOU/view?usp=share_link\"> US_airport_edgelist.csv</a>\r\n                </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderExampleDataset()}\r\n              {/* {this.renderDelimiterSelection()} */}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://gatech.co1.qualtrics.com/jfe/form/SV_3kjYXeZT37404PY\"> Please fill out the participant survey here</a>\r\n            <p> SNoMaN supports both mouse/trackpad and touchscreen. </p>\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.filterKeyList}\r\n                    onSelect={it => {appState.graph.nodes.colorBy = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => {appState.graph.nodes.color.scale = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => {appState.graph.nodes.color.from = it.hex\r\n                          appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => {appState.graph.nodes.color.to = it.hex\r\n                        appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={appState.graph.filterKeyList}\r\n                    // itemRenderer={CommonItemRenderer}\r\n                    // filterable={false}\r\n                    onSelect={it => {appState.graph.nodes.sizeBy = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    // onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                    value={appState.graph.nodes.sizeBy}\r\n                    />\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onSelect={it => {appState.graph.nodes.size.scale = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                  // onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                  />\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n              <div style = {{height:\"15px\"}}>\r\n\r\n              </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <text style={{fontSize: \"12px\"}}>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable>\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"12px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"inline\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        {/* <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button> */}\r\n        <Button\r\n          style={{display:\"inline\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={40}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => {appState.graph.nodes.labelBy = it; appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: appState.graph.filter[it]\r\n                    })\r\n                    \r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={(Object.keys(appState.graph.filter).length === 0) ? []:appState.graph.filter[it]}\r\n\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    placeholder: '  ',\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      // var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n                      if (deselectIndex1 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:appState.graph.filter[it]\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      // var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      // if (deselectIndex1 > -1) {\r\n                      //   appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                      //   // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                      //   appState.graph.filterNodes()\r\n                      // }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10000}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                {/* <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                /> */}\r\n                {/* <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                /> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                {/* <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                /> */}\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n              {/* {                    {appState.graph.hasGraph && <Button className={\"pt-small\"} text=\"Clear Selection and Filter\" onClick={() => (appState.graph.overrides = new Map())} />}} */}\r\n              <div className=\"pt-button-group\">\r\n              <a className=\"pt-button pt-icon-refresh\"  role=\"button\" onClick={() => {\r\n                appState.graph.mapClicked = undefined;\r\n                appState.graph.areaSelected = undefined;\r\n                appState.graph.selectedNodes = [];\r\n                appState.graph.frame.selection = []\r\n                appState.graph.filter  = {}\r\n                appState.graph.currentlyHovered = undefined;\r\n              \r\n                appState.graph.edgeselection = [];\r\n                appState.graph.degreeselection = [];\r\n                appState.graph.degreebrushed = false;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n                appState.graph.distanceDensityCurrentlyClicked = [];\r\n                appState.graph.clearBrush = true;\r\n                appState.graph.filterNodes()\r\n                appState.graph.frame.updateSelectionOpacity()\r\n\r\n                // this.forceUpdate();\r\n              }}>Clear All Selections and Filters</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        appState.graph.areaSelected = undefined;\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      // appState.graph.selectedNodes = []\r\n      if (selectionNode.length === 0) return \r\n      appState.graph.selectedNodes = selectionNode\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.frame.updateSelectionOutOpacity();\r\n      appState.graph.areaSelected = true;\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if(!appState.graph.autoZoom) return;\r\n        if (appState.graph.frame.selection.length ==0) {\r\n          // if (appState.graph.frame.getNodeList() >0){\r\n            const nodeLoc = appState.graph.frame.getNodeList().map(function(node){\r\n              return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n            })\r\n            const b = latLngBounds() // seemed to work without having to pass init arg\r\n            nodeLoc.forEach(coords => {\r\n                b.extend(coords)\r\n            })\r\n            if(Object.keys(b).length > 0){\r\n              map.fitBounds(b)\r\n            }\r\n            \r\n          // }\r\n          return null;\r\n        }   //no selection \r\n        if (appState.graph.frame.selection.length ==1) { // only one node is selected \r\n          const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n          })\r\n          const b = latLngBounds() // seemed to work without having to pass init arg\r\n          nodeLoc.forEach(coords => {\r\n              b.extend(coords)\r\n          })\r\n          if(Object.keys(b).length > 0){\r\n            map.fitBounds(b)\r\n          }\r\n          return; \r\n        }  \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        if(Object.keys(b).length > 0){\r\n          map.fitBounds(b)\r\n        }\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n          if (appState.useToolbartoSelect) {\r\n            appState.useToolbartoSelect = false\r\n          } else {\r\n            appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        appState.graph.areaSelected = undefined;\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        \r\n          }\r\n        \r\n        \r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\nexport function DetectKeyPress(){\r\n  document.addEventListener('keydown', (event) => {\r\n    appState.graph.keydown = true\r\n  }, false);\r\n  document.addEventListener('keyup', (event) => {\r\n    appState.graph.keydown = false\r\n  }, false);\r\n  return null;\r\n}\r\n\r\n\r\n  ","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON, FeatureGroup, Circle } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\"\r\nimport { ZoomMap, MapClick, DetectKeyPress } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\"\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\"\r\n\r\nimport Curve from \"../components/Curve\"\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered && appState.graph.currentlyHovered.links) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n        return `${edge.source.id}👉 ${edge.target.id}`\r\n      })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    //highlight branching out edges as well when select from map \r\n    if(appState.graph.areaSelected && appState.graph.selectedNodes.length > 0){\r\n      \r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if(appState.graph.degreeselection.length>0){\r\n      const degreeselectionID = appState.graph.degreeselection.map(n=>n.id)\r\n      if (degreeselectionID.indexOf(edge.fromId) !== -1 && degreeselectionID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0'}\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    \r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n    console.log(appState.graph.watchAppearance)\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if(appState.graph.degreeselection.length>0){\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n    if(appState.graph.degreebrushed && appState.graph.degreeselection.length==0){\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const neighborIDs = appState.graph.selectedNeighborIDs\r\n      if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if(neighborIDs.indexOf(node.id) !== -1){\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      }\r\n      else {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.03, stroke: false, zIndex: 'auto' }\r\n\r\n      }\r\n    }\r\n    else {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyClicked.length > 0) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    \r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"100%\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n        \r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n        \r\n\r\n        {/* <ReactLeafletToolbar /> */}\r\n        \r\n        <AreaSelect />\r\n        <ZoomMap /> \r\n        <MapClick />\r\n        <DetectKeyPress />\r\n\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n            {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n              return (\r\n                // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                //   data={edge}\r\n                // // eventHandlers={{\r\n                // //   click: (e) => {\r\n                // //     console.log(e.target.options.data)\r\n                // //   }}}\r\n                // />\r\n                <Curve path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n          options={this.setEdgePathOption(edge)}\r\n            />\r\n                \r\n                \r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                        appState.graph.edgeselection = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                    style = {{textAlign: \"left\"}}\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.mapfontSize}\r\n                      className = {`maptooltip maptooltip_${node.id}`} direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> : \r\n                      <Tooltip   fontSize={node.renderData.textHolder.children[0].element.children[0].style.mapfontSize} style = {{textAlign: \"left\"}} className={`maptooltip maptooltip_${node.id}`} direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <div>\r\n        <Switch style={{ position: 'fixed', top: '5vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.mapEdgeShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.mapEdgeShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '5vh', right: '4vw', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n        <Switch style={{ position: 'fixed', top: '8vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.convexPolygonsShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '8vh', right: '4vw', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n        <Switch style={{ position: 'fixed', top: '11vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.autoZoom}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.autoZoom = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '11vh', right: '4vw', zIndex: '1000' }}> Automatic Zoom</span>\r\n        \r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '14vh', right: '1vw', zIndex: '1000' }}> press CTRL key to select nodes on the map</span>\r\n\r\n        </div>\r\n        \r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n      \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 60, left: 70 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // // this.state.;\r\n    // if (appState.graph.scatterplot.x === 'shortest path') {\r\n    //   column1 = this.infinityhop\r\n    //   header.push('shortest path')\r\n    // } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n    //   column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n    //     return parseFloat(path['distance'])\r\n    //   })\r\n    //   header.push('pair distance')\r\n    // } else {\r\n    //   header.push(appState.graph.scatterplot.x)\r\n    //   column1 = appState.graph.frame.getNodeList().map((d) => {\r\n    //     return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n    //   })\r\n    // }\r\n\r\n    // if (appState.graph.scatterplot.y === 'shortest path') {\r\n    //   column2 = this.infinityhop\r\n    //   header.push('shortest path')\r\n    // } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n    //   column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n    //     return parseFloat(path['distance'])\r\n    //   })\r\n    //   header.push('pair distance')\r\n    // } else {\r\n    //   header.push(appState.graph.scatterplot.y)\r\n    //   column2 = appState.graph.frame.getNodeList().map((d) => {\r\n    //     return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n    //   })\r\n    // }\r\n\r\n    //download for all \r\n    let temp = []\r\n    header = appState.graph.metadata.nodeComputed.filter(n=> (n!== 'shortest path'&& n!=='pair distance'))\r\n    header.unshift('id')\r\n    temp.push(header)\r\n    // temp[0].unshift('id')\r\n    appState.graph.frame.getNodeList().forEach((node)=>{\r\n      const noderow = []\r\n      // noderow.push(node.id)\r\n      header.forEach((column)=>{\r\n        noderow.push(node.data.ref[column])\r\n      })\r\n      temp.push(noderow)\r\n    })\r\n   \r\n    \r\n    // temp.push(header)\r\n    // for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n    //   temp.push([column1[i], column2[i]]);\r\n    // }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.mapClicked = null\r\n    appState.graph.clearBrush = false;\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = []\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    if(selection ) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      }\r\n      console.log(selection[0][1], selection[1][1],brushBounds.y1, brushBounds.y0);\r\n  \r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n        console.log(nodecx, nodecy);\r\n        if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n          selectionNodeID.push(select(this).attr(\"id\"))\r\n        }\r\n  \r\n  \r\n  \r\n      })\r\n  \r\n  \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n  \r\n      )\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.selectedNodes = selectionNode\r\n  \r\n  \r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity()\r\n    }else{   //click to clear selection \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n    }\r\n    \r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left,  this.margin.top], [this.width + this.margin.left, this.height + this.margin.top ]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      const capitalizeString =(inputString)=> {\r\n        const connectingWords = ['in', 'to']; // Add more connecting words as needed\r\n      \r\n        return inputString.replace(/\\w+/g, function(word) {\r\n          return connectingWords.includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n        });\r\n      }\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\"}}>X by: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList.map(s=>capitalizeString(s))}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={\r\n                  capitalizeString(appState.graph.scatterplot.x)\r\n                  }\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={capitalizeString(appState.graph.scatterplot.y)}\r\n              />\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                <text style={{ transform: 'translate(20vw, 27.5vh)' }} fontSize=\"11px\">{(appState.graph.scatterplot.x === 'standard distance') ? 'Standard Distance (km)' : capitalizeString(appState.graph.scatterplot.x)}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text \r\n                 style={{ transform: \"translate(-45px, 18vh) rotate(-90deg)\", }}\r\n                  // transform={\"translate(-1vw, 21vh) rotate(-90deg)\"}\r\n                  fontSize=\"11px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance') ? 'Standard Distance (km)' : capitalizeString(appState.graph.scatterplot.y) }</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(35vw, 1vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(12vw, 1.0vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n      // density distance node style\r\n\r\n      // //hover on one group \r\n      // if (appState.graph.distanceDensityCurrentlyHovered) {\r\n\r\n      //   if (String(node['name']) === String(appState.graph.distanceDensityCurrentlyHovered)) {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"10000\",\r\n      //       stroke: def.NODE_HIGHLIGHT,\r\n      //       fillOpacity: 0.8\r\n      //     }\r\n      //   } else {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"0\",\r\n      //       stroke: false,\r\n      //       fillOpacity: 0.1\r\n      //     }\r\n      //   }\r\n\r\n      // } else {// no hover \r\n      //   return {\r\n      //     fill: appState.graph.nodeColorScale(node['name']),\r\n      //     zIndex: \"0\",\r\n      //     stroke: false,\r\n      //     fillOpacity: 0.8\r\n      //   }\r\n\r\n      // }\r\n      \r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (appState.graph.distanceDensityCurrentlyClicked.includes(String(node['name']))) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } \r\n        else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n      }\r\n    }\r\n    else { //path node style \r\n      return {\r\n        \r\n        fill: appState.graph.edges.color,\r\n        zIndex: \"0\",\r\n        stroke: false,\r\n        fillOpacity: 0.8\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              // onMouseOver={(e) => {\r\n              //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n              //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n              //     // console.log(node)\r\n              //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n              //   )\r\n              //   appState.graph.frame.selection = selectionNode\r\n              //   appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n              //   // console.log(selectionNode)\r\n              //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              // }}\r\n              // onMouseLeave={(e) => {\r\n\r\n              //   if (appState.graph.mapClicked) return;\r\n              //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n              //   appState.graph.frame.selection = []\r\n              //   appState.graph.selectedNodes = []\r\n              //   appState.graph.edgeselection = []\r\n\r\n              //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              //     // if (n !== appState.graph.mapClicked) {\r\n              //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              //     // }\r\n              //   }\r\n              //   );\r\n\r\n\r\n              // }}\r\n              onClick={(e) => {\r\n                if (appState.graph.distanceDensityCurrentlyClicked.includes(e.target.getAttribute('id'))) {\r\n                  appState.graph.distanceDensityCurrentlyClicked = appState.graph.distanceDensityCurrentlyClicked.filter(node => \r\n                    node !==  e.target.getAttribute('id')\r\n                  )\r\n                }\r\n                else {\r\n                  appState.graph.distanceDensityCurrentlyClicked.push(e.target.getAttribute('id'));\r\n                }\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  appState.graph.distanceDensityCurrentlyClicked.includes(String(node.data.ref[appState.graph.groupby]))\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\" \r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              // e.target.getAttribute('fill') node.renderData.color,\r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              \r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\n// import { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n     \r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 70, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 3 *2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  @action\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    this.SelectionDensity()\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) {\r\n        appState.graph.avgdist = 0\r\n        return [null, []];\r\n      }\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          \r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n      return [appState.graph.avgdist, edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) {\r\n        appState.graph.avgdist = 0\r\n        return [null, []];\r\n      }\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n      return [appState.graph.avgdist, edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n          return [appState.graph.avgdist, edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n  \r\n  @action\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) {\r\n      appState.graph.tempRawGraph = undefined\r\n      return 0;\r\n    }\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    appState.graph.selectedEdge = edgeSelection.length;\r\n    appState.graph.avgDegree = appState.graph.selectedNodes.reduce((de, l) => de + l.data.ref.degree, 0) / appState.graph.selectedNodes.length\r\n    appState.graph.avgDegree = appState.graph.avgDegree.toFixed(3)\r\n    appState.graph.avgdensity = selectionDen.toFixed(3);\r\n    const selectnodesID = appState.graph.selectedNodes.map(n=>n.id)\r\n    appState.graph.rediameter = ''\r\n    appState.graph.reclustercoe = ''\r\n    appState.graph.recomponent = ''\r\n    appState.graph.tempRawGraph = {\r\n      \r\n        nodes: appState.graph.rawGraph.nodes.filter((n)=>(selectnodesID.includes(n.id))),\r\n        edges: appState.graph.rawGraph.edges.filter((e)=>(selectnodesID.includes(e.source_id) && selectnodesID.includes(e.target_id)))\r\n\r\n      \r\n    }\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.mapClicked){\r\n  const thenode = appState.graph.mapClicked\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    appState.graph.selectedEdge = edgeSelection.length;\r\n    appState.graph.avgDegree = selectneighbors.reduce((de, l) => de + l.data.ref.degree, 0) / selectneighbors.length;\r\n    appState.graph.avgDegree = appState.graph.avgDegree.toFixed(3)\r\n    appState.graph.avgdensity = selectionDen.toFixed(3);\r\n    const selectnodesID = selectneighbors.map(n=>n.data.ref.id)\r\n    selectnodesID.push(appState.graph.mapClicked.id)\r\n    appState.graph.rediameter = ''\r\n    appState.graph.reclustercoe = ''\r\n    appState.graph.recomponent = ''\r\n    appState.graph.tempRawGraph = {\r\n      \r\n        nodes: appState.graph.rawGraph.nodes.filter((n)=>(selectnodesID.includes(n.id))),\r\n        edges: appState.graph.rawGraph.edges.filter((e)=>(selectnodesID.includes(e.source_id) && selectnodesID.includes(e.target_id)))\r\n\r\n      \r\n    }\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n    \r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false\r\n    // rehighlight all edges in sociogram\r\n    appState.graph.frame.highlightAllEdges()\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    appState.graph.frame.highlightedgeWithinDist(distbuffer_min, distbuffer_max)\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n  \r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n  \r\n  \r\n      })\r\n  \r\n      \r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n      \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n\r\n      // when no node statisfy, should dehighlight \r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n    \r\n    \r\n  \r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n    \r\n  \r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n    \r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      selectionNode = selectneighbors.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }\r\n\r\n    \r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                </tr> */}\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"35vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                  \r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"35vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.mapClicked && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.mapClicked\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n  \r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                   \r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  </tr> */}\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                    \r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"35vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n  \r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n  \r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                    \r\n  \r\n  \r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"35vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n  \r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            } \r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n  \r\n  \r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n     \r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      return (\r\n        //\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'1 nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                </tr> */}\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n         \r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              {/* <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density() ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr> */}\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            \r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"35vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"35vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n                \r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from 'ngraph.graph';\r\nimport path from 'ngraph.path';\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n\r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                appState.graph.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? String.fromCharCode(communityDict[node.id] + 97) : 'a'\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n\r\n                appState.graph.nodes.convexhullby = \"community\"\r\n                appState.graph.nodes.groupby = \"community\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    avgConnectionDist = () => {\r\n        appState.graph.rawGraph.nodes.forEach(function (node) {\r\n            const links = appState.graph.frame.getNode(node['id']).linkObjs\r\n            if (links) {\r\n                const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                node['average distance'] = cdistance / node.degree\r\n                node['average distance'] = node['average distance'].toFixed(2)\r\n            }else{\r\n                node['average distance'] = 0\r\n            }\r\n        })\r\n\r\n        appState.graph.scatterplot.x = 'average distance'\r\n        appState.graph.scatterplot.y = 'degree'\r\n        appState.graph.metadata.nodeComputed.push('average distance')\r\n\r\n    }\r\n\r\n    runKfullfillment = () => {\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        // Function to find the K nearest neighbors for each node\r\n        const findKfulfillment = (nodes, edges) => {\r\n            const neighbors = {};\r\n\r\n\r\n            for (const currentNode of nodes) {\r\n                // find nearest neighbors\r\n                const currentId = currentNode.id;\r\n                currentNode['nearestnn'] = []\r\n                // neighbors[currentId] = [];\r\n\r\n                // Calculate distances to all other nodes\r\n                for (const otherNode of nodes) {\r\n                    if (currentNode !== otherNode) {\r\n                        const distance = calculateDistance(\r\n                            currentNode.LatY,\r\n                            currentNode.LonX,\r\n                            otherNode.LatY,\r\n                            otherNode.LonX\r\n                        );\r\n\r\n                        currentNode['nearestnn'].push({\r\n                            id: otherNode.id,\r\n                            distance: distance\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Sort neighbors by distance and keep the closest K\r\n                currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                const k = currentNode['degree']\r\n                currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n                //find connected node id\r\n                currentNode['connected node'] = []\r\n                for (const edge of edges) {\r\n                    if (edge.source_id == currentNode['id'] || edge.target_id == currentNode[\"id\"]) {\r\n                        currentNode['connected node'].push(edge.source_id)\r\n                        currentNode['connected node'].push(edge.target_id)\r\n                    }\r\n                }\r\n                currentNode['connected node'].filter((n) => n !== currentNode['id']);\r\n\r\n\r\n\r\n                // calculate kfulfillment\r\n                const cnn = new Set(currentNode['connected node']);\r\n                currentNode['connected node'] = Array.from(cnn)\r\n                const snn = new Set(currentNode['nearestnn'].map(n => n.id));\r\n\r\n                const intersection = [...cnn].filter(item => snn.has(item));\r\n                if (currentNode['degree'] === 0) {\r\n                    currentNode['k-fulfillment'] = 0\r\n                } else {\r\n                    currentNode['k-fulfillment'] = intersection.length / currentNode['degree']\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        findKfulfillment(appState.graph.rawGraph.nodes, appState.graph.rawGraph.edges)\r\n        appState.graph.metadata.nodeComputed.push('k-fulfillment')\r\n        appState.graph.scatterplot.x = 'k-fulfillment'\r\n        appState.graph.scatterplot.y = 'degree'\r\n\r\n\r\n    }\r\n\r\n    runGlobalFlatRatio = () => {\r\n        const nodes = appState.graph.rawGraph.nodes\r\n        const iter = 5\r\n        const shuffleArray = (array) => {\r\n            for (let i = array.length - 1; i > 0; i--) {\r\n                // Generate a random index from 0 to i\r\n                const randomIndex = Math.floor(Math.random() * (i + 1));\r\n\r\n                // Swap elements array[i] and array[randomIndex]\r\n                const temp = array[i];\r\n                array[i] = array[randomIndex];\r\n                array[randomIndex] = temp;\r\n            }\r\n        }\r\n\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        const gBarSumDistances = (nodeOrders, nodesWKnn, distanceMatrix, degreeConstraintMatrix) => {\r\n            const degreeCount = new Map();\r\n            nodeOrders.forEach(node => degreeCount.set(node, 0));\r\n\r\n            const nodesLabels = nodesWKnn.map((n) => n['id']);\r\n            const n = nodesLabels.length;\r\n            const connectionCounted = {}\r\n            for (const nl of nodesLabels) {\r\n                connectionCounted[nl] = {};\r\n            }\r\n\r\n            let totalDistance = 0;\r\n\r\n            for (let i = 0; i < nodeOrders.length; i++) {\r\n                const node = nodeOrders[i];\r\n                const neighbors = nodesWKnn.filter(obj => {\r\n                    return obj['id'] === node\r\n                })[0]['nearestnn'];\r\n\r\n                const neighborsid = neighbors.map(n => n['id'])\r\n\r\n\r\n                for (const neighbor of neighborsid) {\r\n                    if (!connectionCounted[node][neighbor] &&\r\n                        degreeCount.get(node) < appState.graph.frame.getNode(node).data.ref.degree &&\r\n                        degreeCount.get(neighbor) < appState.graph.frame.getNode(neighbor).data.ref.degree) {\r\n                        totalDistance += distanceMatrix[node][neighbor];\r\n                        degreeCount.set(node, degreeCount.get(node) + 1);\r\n                        degreeCount.set(neighbor, degreeCount.get(neighbor) + 1);\r\n                        connectionCounted[node][neighbor] = true;\r\n                        connectionCounted[neighbor][node] = true;\r\n                        // console.log(\"Added distance for\", node, neighbor, \"in order:\", nodeOrders);\r\n                    }\r\n                }\r\n            }\r\n            return totalDistance;\r\n        }\r\n\r\n        //calcualte knn \r\n        if (!nodes[0]['nearestnn']) {\r\n            for (const currentNode of nodes) {\r\n                // find nearest neighbors\r\n                const currentId = currentNode.id;\r\n                currentNode['nearestnn'] = []\r\n                // neighbors[currentId] = [];\r\n\r\n                // Calculate distances to all other nodes\r\n                for (const otherNode of nodes) {\r\n                    if (currentNode !== otherNode) {\r\n                        const distance = calculateDistance(\r\n                            currentNode.LatY,\r\n                            currentNode.LonX,\r\n                            otherNode.LatY,\r\n                            otherNode.LonX\r\n                        );\r\n\r\n                        currentNode['nearestnn'].push({\r\n                            id: otherNode.id,\r\n                            distance: distance\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Sort neighbors by distance and keep the closest K\r\n                currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                const k = currentNode['degree']\r\n                currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Generate iteration number of node orders \r\n        const nodeOrders = [];\r\n        for (let i = 0; i < iter; i++) {\r\n            nodeOrders.push(nodes.map((n) => n['id']));\r\n            shuffleArray(nodeOrders[i]); // Shuffle the node order\r\n        }\r\n\r\n        // Precompute the distance matrix\r\n        const nodesLabels = nodes.map((n) => n['id']);\r\n        const n = nodesLabels.length;\r\n        const distanceMatrix = {};\r\n        for (const nl of nodesLabels) {\r\n            distanceMatrix[nl] = {};\r\n            for (const ll of nodesLabels) {\r\n                distanceMatrix[nl][ll] = 0;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            // Skip diagonal values \r\n            for (let j = i + 1; j < n; j++) {\r\n                const distance = calculateDistance(\r\n                    nodes[i].LatY,\r\n                    nodes[i].LonX,\r\n                    nodes[j].LatY,\r\n                    nodes[j].LonX\r\n                )\r\n\r\n                // Update both upper and lower side of the matrix since the network is undirected\r\n                distanceMatrix[nodes[i]['id']][nodes[j]['id']] = distance;\r\n                distanceMatrix[nodes[j]['id']][nodes[i]['id']] = distance;\r\n            }\r\n        }\r\n\r\n        // Precompute the degree constraint matrix\r\n        const degreeConstraintMatrix = nodes.map(x => x['degree']);\r\n\r\n        // Calculate average distance of G_bar under iterations. \r\n        const avgGBarSum = nodeOrders.map(order => gBarSumDistances(order, nodes, distanceMatrix, degreeConstraintMatrix))\r\n            .reduce((a, b) => a + b, 0) / iter;\r\n        const links = appState.graph.frame.getNodeList().map(n => n.linkObjs).flat().filter(i => i)\r\n        const gSum = links.reduce((dist, l) => dist + l.edgeDist, 0) / 2\r\n\r\n        appState.graph.globalFlatRatio = avgGBarSum / gSum;\r\n    }\r\n\r\n\r\n\r\n    runLocalFlatRatio = () => {\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        const findFlatRatio = (nodes) => {\r\n            const neighbors = {};\r\n\r\n            if (nodes[0]['nearestnn']) {\r\n                // don't calculate nearest neighbors again\r\n                //calculate connected node distance directly\r\n                for (const currentNode of nodes) {\r\n                    const currentId = currentNode.id;\r\n                    const links = appState.graph.frame.getNode(currentId).linkObjs\r\n                    if (links) {\r\n                        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                        const ndistance = currentNode['nearestnn'].reduce((dist, l) => dist + l.distance, 0);\r\n                        // calculate flat ratio\r\n                        currentNode['flattening ratio'] = ndistance / cdistance\r\n                        if (!isFinite(currentNode['flattening ratio'])) {\r\n                            currentNode['flattening ratio'] = 0\r\n                        }\r\n                    } else {\r\n                        currentNode['flattening ratio'] = 0\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                for (const currentNode of nodes) {\r\n                    // find nearest neighbors\r\n                    const currentId = currentNode.id;\r\n                    currentNode['nearestnn'] = []\r\n                    // neighbors[currentId] = [];\r\n\r\n                    // Calculate distances to all other nodes\r\n                    for (const otherNode of nodes) {\r\n                        if (currentNode !== otherNode) {\r\n                            const distance = calculateDistance(\r\n                                currentNode.LatY,\r\n                                currentNode.LonX,\r\n                                otherNode.LatY,\r\n                                otherNode.LonX\r\n                            );\r\n\r\n                            currentNode['nearestnn'].push({\r\n                                id: otherNode.id,\r\n                                distance: distance\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    // Sort neighbors by distance and keep the closest K\r\n                    currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                    const k = currentNode['degree']\r\n                    currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n                    //calculate connected node distance\r\n                    const links = appState.graph.frame.getNode(currentId).linkObjs\r\n                    if (links) {\r\n                        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                        const ndistance = currentNode['nearestnn'].reduce((dist, l) => dist + l.distance, 0);\r\n                        // calculate flat ratio\r\n                        currentNode['flattening ratio'] = ndistance / cdistance\r\n                        if (!isFinite(currentNode['flattening ratio'])) {\r\n                            currentNode['flattening ratio'] = 0\r\n                        }\r\n                    } else {\r\n                        currentNode['flattening ratio'] = 0\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        findFlatRatio(appState.graph.rawGraph.nodes)\r\n        appState.graph.metadata.nodeComputed.push('flattening ratio')\r\n        appState.graph.scatterplot.x = 'flattening ratio'\r\n        appState.graph.scatterplot.y = 'degree'\r\n\r\n    }\r\n\r\n    runShortestPath = () => {\r\n\r\n\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n            var p = 0.017453292519943295;    // Math.PI / 180\r\n            var c = Math.cos;\r\n            var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n                c(lat1 * p) * c(lat2 * p) *\r\n                (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n\r\n        const graph = createGraph();\r\n\r\n        // hardcode LatY and LonX for sample dataset \r\n        appState.graph.rawGraph.nodes.forEach(node => graph.addNode(node[\"id\"].toString(), { LatY: parseFloat(node[\"LatY\"]), LonX: parseFloat(node[\"LonX\"]) }))\r\n        appState.graph.rawGraph.edges.forEach(edge => graph.addLink(edge[\"source_id\"], edge[\"target_id\"]));\r\n\r\n        const shortestPathPairs = () => {\r\n            let pathFinder = path.aGreedy(graph);\r\n            const pathsArr = []\r\n            const pathsSet = new Set();\r\n\r\n\r\n\r\n            graph.forEachNode(function (fromnode) {\r\n\r\n                graph.forEachNode(function (tonode) {\r\n                    if (fromnode.id !== tonode.id) {\r\n                        const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n                        const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n                        const edgeinfo = appState.graph.rawGraph.edges.filter((edge) => {\r\n                            return (edge.source_id === fromnode.id && edge.target_id === tonode.id)\r\n                        })\r\n                        let pairdist = calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n\r\n\r\n\r\n                        // undirected graph:\r\n                        // only add once for undirected graph \r\n                        if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2))) {\r\n                            pathsSet.add(pathKey1);\r\n                            pathsSet.add(pathKey2);\r\n                            pathsArr.push({\r\n                                \"source\": fromnode.id,\r\n                                \"target\": tonode.id,\r\n                                \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n                                \"distance\": pairdist\r\n\r\n                            })\r\n                        }\r\n\r\n                        //directed graph: \r\n                    }\r\n\r\n                })\r\n\r\n            })\r\n            // console.log(nodesArr.length)\r\n            // console.log(pathsArr.length)\r\n            return pathsArr\r\n\r\n        }\r\n        appState.graph.rawGraph.paths = shortestPathPairs();\r\n        appState.graph.metadata.nodeComputed.push('shortest path')\r\n        appState.graph.metadata.nodeComputed.push('pair distance')\r\n        appState.graph.scatterplot.x = 'pair distance'\r\n        appState.graph.scatterplot.y = 'shortest path'\r\n\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n\r\n            // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes,\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div> \r\n                    <p className=\"stat-section-heading\">Distance and Shortest Path</p>\r\n                     <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.avgConnectionDist}>Run Average Distance</Button>\r\n                        <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runShortestPath}>Run Shortest Path</Button>\r\n                    <br></br>\r\n                    <hr />\r\n                    <p className=\"stat-section-heading\">Efficient Distance Analysis</p>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runLocalFlatRatio}>Run Local Flattening Ratio</Button>\r\n                   <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runKfullfillment}>Run  K-fullfillment</Button>\r\n                        <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runGlobalFlatRatio}>Run Global Flattening Ratio</Button>\r\n                    {appState.graph.globalFlatRatio ? <text className=\"gf-tag\" style={{ fontSize: \"8px\" }} >{parseFloat(appState.graph.globalFlatRatio).toFixed(3)}</text> : null}\r\n                    <br></br>\r\n                    <hr />\r\n                    <p className=\"stat-section-heading\">Group-related Functions</p>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community Detection</Button>\r\n                    {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n                    {appState.graph.modularity ? <text className=\"modularity-tag\" style={{ fontSize: \"8px\" }} >{\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}</text> : null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\", fontSize: \"12px\" }}>Convex Hull By: </p>\r\n                        <span style={{}}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList.filter(it=>(it !== 'ID'&& (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]))))}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                    appState.graph.convexPolygonsShow = true\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\", fontSize: \"12px\" }}>Cluster By: </p>\r\n                        <span style={{}}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList.filter(it=>(it !== 'ID'&& (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]))))}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport {\r\n    Button\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\n@observer\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n            x[i].style.display = \"none\";\r\n        }\r\n        var x = document.getElementsByClassName(\"sidebarButton\");\r\n        for (i = 0; i < x.length; i++) {\r\n            x[i].style.background = \"white\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n        document.getElementById(cityName + 'Tab').style.background = \"gray\";\r\n\r\n    }\r\n    // AverageDegree=()=>{\r\n    //     links.reduce((dist, l) => dist + l.edgeDist, 0) / 2\r\n    // }\r\n\r\n    SelectionDistanceFromLatLonIn = () => {\r\n        const selectNodes = appState.graph.selectedNodes;\r\n        const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n        if (appState.graph.mapClicked) {\r\n\r\n            const edgeSelection = appState.graph.mapClicked.linkObjs\r\n            if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n            this.edgeSelection = edgeSelection\r\n            const edgeDistance = edgeSelection.map(e => {\r\n                if (e.edgeDist > 0) {\r\n                    return e.edgeDist\r\n                } else {\r\n                    return 0\r\n                }\r\n\r\n            })\r\n            return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        }\r\n\r\n        if (selectNodes.length > 1) {\r\n            //// calculate only the connected distance \r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n            if (edgeSelection.length == 0) return [null, []];\r\n            this.edgeSelection = edgeSelection\r\n            const edgeDistance = edgeSelection.map(e => {\r\n                if (e.edgeDist > 0) {\r\n                    return e.edgeDist\r\n                } else {\r\n                    return 0\r\n                }\r\n\r\n            })\r\n            return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n            //// calculate average distance between all selected nodes \r\n            // const edgeDistance = []\r\n            // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n            //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n            //     edgeDistance.push(edge.edgeDist)\r\n\r\n            //   }\r\n            // })\r\n            // if(edgeDistance.length>0){\r\n            //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n            // }else{\r\n            //   return  [null, []]\r\n            // }\r\n\r\n            // for (let i = 0; i < selectNodes.length; i++) {\r\n            //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n            //     const lon1 = selectNodes[i].data.ref.LonX\r\n            //     const lat1 = selectNodes[i].data.ref.LatY\r\n            //     const lon2 = selectNodes[j].data.ref.LonX\r\n            //     const lat2 = selectNodes[j].data.ref.LatY\r\n            //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n            //     edgeDistance.push(edgeDist)\r\n            //   }\r\n            // }\r\n\r\n\r\n\r\n        } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n            let edgeSelection = []\r\n            appState.graph.frame.getNodeList().forEach(node => {\r\n                if (node.linkObjs && node.linkObjs.length > 0) {\r\n                    edgeSelection.push(...node.linkObjs)\r\n                }\r\n\r\n            })\r\n\r\n            if (edgeSelection.length > 0) {\r\n                let uniqEdgeSelection = uniq(edgeSelection)\r\n                this.edgeSelection = uniqEdgeSelection\r\n                if (uniqEdgeSelection.length > 0) {\r\n                    let edgeDistance = uniqEdgeSelection.map(e => {\r\n                        if (e.edgeDist > 0) {\r\n                            return e.edgeDist\r\n                        } else {\r\n                            return 0\r\n                        }\r\n\r\n                    })\r\n                    // console.log(edgeDistance)\r\n                    return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n                } else {\r\n                    return [null, []]\r\n                }\r\n\r\n            } else {\r\n                return [null, []]\r\n            }\r\n\r\n\r\n            // return null\r\n        }\r\n\r\n    }\r\n\r\n    // @computed\r\n    SelectionDensity = () => {\r\n\r\n        // undirect graph\r\n        // console.log(\"ashdakjs\")\r\n        if (appState.graph.selectedNodes.length > 1) {\r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n            // console.log(edgeSelection.length);\r\n            if (edgeSelection.length == 0) return [0, 0, 0];\r\n            // this.edgeSelection = [...edgeSelection]\r\n\r\n            const nodelength = appState.graph.selectedNodes.length;\r\n            const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n            const avgdegree = appState.graph.selectedNodes.reduce((de, l) => de + l.data.ref.degree, 0) / appState.graph.selectedNodes.length\r\n            return [selectionDen.toFixed(3), edgeSelection.length, avgdegree]\r\n        } else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]) {\r\n            const thenode = appState.graph.selectedNodes[0]\r\n            const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n            // console.log(edgeSelection.length);\r\n            if (edgeSelection.length == 0) return [0, 0, 0];\r\n            // this.edgeSelection = [...edgeSelection]\r\n            const avgdegree = selectneighbors.reduce((de, l) => de + l.data.ref.degree, 0) / selectneighbors.length\r\n            const nodelength = selectneighbors.length;\r\n            const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n            return [selectionDen.toFixed(3), edgeSelection.length, avgdegree]\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    rerunDiameter = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.rediameter = appState.graph.rerundiameter(appState.graph.tempRawGraph)\r\n        }else{\r\n            appState.graph.rediameter= 0\r\n        }\r\n\r\n    }\r\n    rerunCluster = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.reclustercoe = appState.graph.reruncluster(appState.graph.tempRawGraph).toFixed(2)\r\n        }else{\r\n            appState.graph.reclustercoe= 0\r\n        }\r\n\r\n    }\r\n    rerunComponent = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.recomponent = appState.graph.reruncomponent(appState.graph.tempRawGraph)\r\n        }else{\r\n            appState.graph.recomponent= 0\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        if (appState.graph.frame && appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar \">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{appState.graph.selectedNodes.length}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n\r\n                                        <td>{appState.graph.hasGraph ? appState.graph.selectedEdge : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgDegree : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgdist : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgdensity : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter\r\n                                            <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunDiameter}>rerun</Button>\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.rediameter : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunCluster}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.reclustercoe : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunComponent}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.recomponent : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n        } else if (appState.graph.frame && appState.graph.mapClicked && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            //one node is clicked\r\n            const thenode = appState.graph.mapClicked\r\n            const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n            // appState.graph.selectedNodes = selectneighbors\r\n            if (selectneighbors.length > 1) {\r\n                return appState.graph.frame && (\r\n                    <SidebarMenu>\r\n                        <div class=\"sidebar-container\">\r\n                            <div class=\"w3-bar \">\r\n                                <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                                <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                                <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                            </div>\r\n                            <div id=\"Appearance\" class=\"city\">\r\n                                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                                <Tabs2 animate id=\"graph-options\">\r\n                                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                                <text style={{ fontSize: \"12px\" }}></text>\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <hr />\r\n                            <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                                <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                    <tbody>\r\n                                        {/* <thead> */}\r\n                                        <tr>\r\n                                            <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                        </tr>\r\n                                        {/* </thead> */}\r\n                                        {/* <caption>Network Statistics</caption> */}\r\n                                        <tr>\r\n                                            <td># Nodes</td>\r\n                                            <td>{selectneighbors.length}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td># Edges</td>\r\n                                            <td>{appState.graph.selectedEdge}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Degree</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgDegree : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Distance</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgdist : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Density</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgdensity : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                        <td>Network Diameter\r\n                                            <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunDiameter}>rerun</Button>\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.rediameter : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunCluster}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.reclustercoe : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunComponent}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.recomponent : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </SidebarMenu>\r\n                );\r\n            } else {\r\n                //selection is 0\r\n                return appState.graph.frame && (\r\n                    <SidebarMenu>\r\n                        <div class=\"sidebar-container\">\r\n                            <div class=\"w3-bar \">\r\n                                <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                                <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                                <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                            </div>\r\n                            <div id=\"Appearance\" class=\"city\">\r\n                                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                                <Tabs2 animate id=\"graph-options\">\r\n                                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                                <text style={{ fontSize: \"12px\" }}></text>\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <hr />\r\n                            <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                                <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                    <tbody>\r\n                                        {/* <thead> */}\r\n                                        <tr>\r\n                                            <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                        </tr>\r\n                                        {/* </thead> */}\r\n                                        {/* <caption>Network Statistics</caption> */}\r\n                                        <tr>\r\n                                            <td># Nodes</td>\r\n                                            <td>{0}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td># Edges</td>\r\n                                            <td>{0}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Degree</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Distance</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Density</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Diameter</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Clustering<br></br>Coefficient</td>\r\n                                            <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Connected <br></br>Component</td>\r\n                                            <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </SidebarMenu>\r\n                );\r\n            }\r\n        }\r\n        else if (appState.graph.frame && appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n            //one node is selected \r\n            const thenode = appState.graph.selectedNodes[0]\r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar \">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{1}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n                                        <td>{0}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {thenode.data.ref.degree}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance</td>\r\n                                        <td>\r\n                                            {0}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {0}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n        }\r\n        else if (appState.graph.frame && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            //no node is selected \r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar \">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n                                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance</td>\r\n                                        <td>\r\n                                            {appState.graph.frame ? appState.graph.avgDist() : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient</td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component</td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n        }\r\n        else {\r\n            //everything else , no valid selection, etc. \r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar \">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{0}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n                                        <td>{0}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter <br></br>\r\n\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n      })} style={{display: \"flex\"}}>\r\n        <div>\r\n        <NavbarSelector />\r\n        </div>\r\n        <div class=\"container\" style={{paddingTop:\"5vh\", maxWidth:\"100vw\", height:\"100%\"}}>\r\n          <div class=\"container\" style={{height:\"100%\"}}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                    {appState.graph.hasGraph && <Tag className=\"network-tag\">Network</Tag>}\r\n                    <main className=\"main\">\r\n                      {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                        <ThreeJSVis />\r\n                      ) : (\r\n                        <WorkspaceView />\r\n                      )}\r\n                    </main>\r\n                    {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                    <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div class=\"container__right\">\r\n                  {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",width: '40vw'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame &&  <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame  && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}