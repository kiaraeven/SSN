{"version":3,"sources":["stores/PreferencesStore.js","services/AlgorithmUtils.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/panels/SelectionDetail.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","jsnx","require","jsgraphs","convertToJsnx","snapshot","jsnxGraph","Graph","addNodesFrom","rawGraph","nodes","map","n","id","addEdgesFrom","edges","e","source_id","target_id","convertToJSGraph","i","idDict","length","g","forEach","addEdge","connectedComponents","keydown","connectcom","cc","ConnectedComponents","componentCount","exactGraphDiameter","graphDiameter","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","Math","max","GraphStore","_dec","ref","_dec2","initialGlobalConfig","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","labelBy","shape","labelSize","labelLength","crossColor","scatterplot","x","y","clusteringco","filter","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_descriptor27","_descriptor28","_descriptor29","_descriptor30","tempRawGraph","undefined","_descriptor31","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_lastSelectedSingleNode","nodesShowingLabels","_descriptor36","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","_descriptor42","_descriptor43","_descriptor44","_descriptor45","_descriptor46","_descriptor47","_descriptor48","_descriptor49","_descriptor50","_descriptor51","_descriptor52","_descriptor53","hasGraphLoaded","get","selectedNodes","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","k","removeList","indexOf","uniq_compute","u","inputString","connectingWords","replace","word","includes","toLowerCase","charAt","toUpperCase","slice","capitalizeString","neighborIDs","j","links","link","push","fromId","toId","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","s","done","err","scales","domain","minMax","range","_this","Set","item","selectedNodeId","setOfNeighborIds","source","toString","target","add","node","has","_this2","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","_this3","runInAction","selection","Object","keys","_objectSpread","satisfy","fkey","nodePropertyTypes","getNodeList","renderData","draw_object","children","visible","nodeids","_this4","_this5","removeNodesByIds","_this6","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","a","b","half","floor","medianLat","medianLon","lat1","lon1","lat2","lon2","c","cos","asin","sqrt","calDistanceFromLatLonInKm","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","edgeProperties","savedStatesStr","runActiveLayout","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this7","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","averageClustering","averageClusteringCoefficient","nodeCount","graphDensity","sum","degree","averageDegree","array","edgeSelection","linkObjs","uniqEdgeSelection","edgeDistance","edgeDist","reduce","toFixed","temraw","reaverageClusteringCoefficient","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","globalFlatRatio","convexhullby","groupby","mapClicked","currentlyHovered","convexNodes","pathHovered","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","clearBrush","mapEdgeShow","autoZoom","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","split","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","substring","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","clustercoe","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","clearSelection","pinNodes","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","join","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","shortestPathPairs","pathsArr","rank","_context4","parseInt","centrality","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","pathFinder","aGreedy","pathsSet","pathKey1","pathKey2","find","pageRank","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightClickNode","neighborNodes","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","edge","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","_loop","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","thenode","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","fontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","newDelimiter","updateDelimiter","DIALOG_BODY","TABLE","rel","href","Spinner","renderExampleDataset","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","class","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","marginLeft","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","deselectIndex1","onRelease","_ref3","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","role","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","DetectKeyPress","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","edgeSelectionID","nodesSelectedID","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","neighborNodesID","selectedNeighborIDs","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","flex","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","mouseover","mouseout","direction","permanent","defaultChecked","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","onEdgeBrushStart","sourceEvent","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","selectAll","brushBounds","each","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","SVGBrush","extent","getEventMouse","_this$edgesvg$getBoun","brushType","onBrushStart","onBrush","onBrushEnd","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","x0","y0","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","SelectionDistanceFromLatLonIn","SelectionDensity","input","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","tickFormat","ti","selectneighbors","selectNodes","avgdist","nodelength","selectionDen","selectedEdge","avgDegree","de","avgdensity","selectnodesID","rediameter","reclustercoe","recomponent","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","column1","column2","header","csvarray","selectionNodeID","circles","svg","nodecx","nodecy","renderBrush","_this$svg$getBounding","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","XYSelect","allComputedPropertiesKeyList","RenderCircles","Axis","axis","axisBottom","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","renderCircles","cluster","ci","cx","cy","onMouseOver","_e$target$getAttribut","_e$target$getAttribut2","sourceid","targetid","onMouseLeave","_e$target$getAttribut3","_e$target$getAttribut4","dataset","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","StatGroupPanel","fromCharCode","avgConnectionDist","cdistance","runKfullfillment","calculateDistance","dLat","dLon","atan2","currentNode","_step2","_iterator2","otherNode","_step3","_iterator3","cnn","snn","intersection","findKfulfillment","runGlobalFlatRatio","shuffleArray","randomIndex","_step6","_iterator6","_step7","_iterator7","nodeOrders","_step8","nodesLabels","distanceMatrix","_iterator8","nl","_step9","_iterator9","ll","avgGBarSum","order","nodesWKnn","degreeConstraintMatrix","degreeCount","_step4","connectionCounted","_iterator4","totalDistance","_loop2","_step5","neighborsid","_iterator5","neighbor","gBarSumDistances","gSum","flat","runLocalFlatRatio","_step10","_iterator10","currentId","ndistance","isFinite","_step11","_iterator11","_step12","_iterator12","findFlatRatio","runShortestPath","pairdist","Sidebar","avgdegree","rerunDiameter","rerundiameter","rerunCluster","reruncluster","rerunComponent","reruncomponent","cityName","getElementsByClassName","background","SidebarMenu","openCity","colspan","avgDist","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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","file":"static/js/main.4f6c50c7.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import appState from '../stores';\r\n\r\nconst jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.clusteringco\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    appState.graph.clusteringco = jsnx.averageClustering(jsnxGraph);\r\n    // const result = 0\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n    return appState.graph.clusteringco;\r\n}\r\n\r\n/**\r\n * ReCalculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function reaverageClusteringCoefficient(snapshot) {\r\n    \r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    \r\n    \r\n    return jsnx.averageClustering(jsnxGraph);\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.connectcom\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    console.log('compute connected copoenent')\r\n    appState.graph.connectcom = cc.componentCount()\r\n    // console.log('connected:')\r\n    // console.log(appState.graph.connectcom)\r\n    return appState.graph.connectcom;\r\n   \r\n}\r\n\r\nexport function reconnectedComponents(snapshot) {\r\n    \r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    \r\n    \r\n    // console.log('connected:')\r\n    // console.log(appState.graph.connectcom)\r\n    return cc.componentCount();\r\n   \r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.graphDiameter\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    appState.graph.graphDiameter = dia\r\n    return dia;\r\n}\r\n ","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter , reaverageClusteringCoefficient, reconnectedComponents} from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor: [\"#0073bc\", \"#ff3333\",\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot: {\r\n      x: 'degree',\r\n      y: 'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n  @observable globalFlatRatio = undefined;\r\n  @observable keydown = false;\r\n  clusteringco = 0;\r\n  graphDiameter = 0;\r\n  connectcom = 0;\r\n\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable autoZoom = true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n  @observable clearBrush = false;\r\n\r\n\r\n  @observable selectedEdge = 0;\r\n  @observable avgDegree = 0;\r\n  @observable avgdist = 0;\r\n  @observable avgdensity = 0;\r\n  @observable clustercoe = 0;\r\n  @observable rediameter = '';\r\n  @observable reclustercoe = '';\r\n  @observable recomponent = '';\r\n\r\n tempRawGraph = undefined;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on \r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\"pagerank\", \"degree\", 'centrality', 'distance to center', 'betweeness centrality', 'closeness centrality', 'distance to group center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  @observable\r\n  degreeselection = []\r\n\r\n  @observable\r\n  degreebrushed = false\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = []\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden', 'id', 'Longitude', 'Latitude', 'LatY', 'LonX', 'dist to center', 'dist_to_center', 'centrality', 'shortest path', 'pair distance', 'node_id', 'standard distance', 'network density', 'SHORT', \"ORGANIZATION\"]\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n\r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n\r\n    const capitalizeString =(inputString)=> {\r\n      const connectingWords = ['in', 'to']; // Add more connecting words as needed\r\n    \r\n      return inputString.replace(/\\w+/g, function(word) {\r\n        return connectingWords.includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n      });\r\n    }\r\n    \r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return capitalizeString(u)\r\n    })\r\n    return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n\r\n\r\n\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j] || !this.selectedNodes[j].links) continue\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        })\r\n\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([\r\n          ...neighborIDs\r\n        ])\r\n        return uniqNeighborIDs\r\n      } else {\r\n        return []\r\n      }\r\n    } else {\r\n      return []\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      const nominalColor =  [\"#0073bc\", \"#ff3333\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n        .range(nominalColor);\r\n    } else { //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() {\r\n    runInAction('filter nodes', () => {\r\n      if (this.selectedNodes.length > 0) {\r\n      this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n\r\n    if (this.frame.selection.length > 0) {\r\n      this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n   \r\n      if (Object.keys(this.filter).length === 0){\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {return { ...n, isHidden: false }});\r\n      }\r\n\r\n      if (Object.keys(this.filter).length !== 0) {\r\n\r\n\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == 'string') {\r\n              if (this.filter[fkey].length > 0 && (!this.filter[fkey].includes(n[fkey]))) {\r\n                satisfy = false\r\n              }\r\n            } else {  // number range \r\n              if (this.filter[fkey] && (n[fkey] < this.filter[fkey]['min'] || n[fkey] > this.filter[fkey]['max'])) {\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n      }\r\n      this.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n\r\n    });\r\n     // this.runActiveLayout()\r\n\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\"\r\n    const toId = \"target_id\"\r\n    const mapId = \"ID\"\r\n    const mapLon = \"LonX\"\r\n    const mapLat = \"LatY\"\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr =\r\n    initialgraph.rawGraph.nodes.map(\r\n        n => ({ ...n, LonX: parseFloat(n[\"LonX\"]), LatY: parseFloat(n[\"LatY\"]) }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n  \r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n  \r\n    // const edgesSet = new Set();\r\n  \r\n    // const edgesArr = [];\r\n  \r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n  \r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n  \r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n  \r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n      edgesArr.forEach(it => {\r\n        const fromnode = nodesArr.filter((node)=>{return node.id === it[fromId].toString()})\r\n        const tonode = nodesArr.filter((node)=>{return node.id === it[toId].toString()})\r\n        const Nonloc = 360\r\n        if(fromnode.length > 0 && tonode.length >0){\r\n        it.fromlocLatY = parseFloat(fromnode[0].LatY)\r\n        it.fromlocLonX = parseFloat(fromnode[0].LonX)\r\n        it.tolocLatY = parseFloat(tonode[0].LatY)\r\n        it.tolocLonX = parseFloat(tonode[0].LonX) }\r\n        else{\r\n        it.fromlocLatY = Nonloc\r\n        it.fromlocLonX = Nonloc\r\n        it.tolocLatY = Nonloc\r\n        it.tolocLonX = Nonloc\r\n        }// observable array???\r\n        it.withinState = true\r\n        it.withinFamily = true\r\n        \r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n        \r\n      });\r\n    } \r\n\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295;    // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n        c(lat1 * p) * c(lat2 * p) *\r\n        (1 - c((lon2 - lon1) * p)) / 2;\r\n  \r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n  \r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n  \r\n  \r\n    const calMedianCenter = ()=>{\r\n      const latlist = nodesArr.map(n => parseFloat(n['LatY']))\r\n      const lonlist = nodesArr.map(n => parseFloat(n['LonX']))\r\n      const medianCenter = (values)=>{\r\n        if(values.length ===0) throw new Error(\"No inputs\");\r\n  \r\n        const result1 = [...values].sort((a, b) => a - b)\r\n      \r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n      \r\n        var half = Math.floor(result1.length / 2);\r\n        \r\n        if (result1.length % 2)\r\n          return result1[half];\r\n        \r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      }\r\n  \r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist)\r\n        const medianLon = medianCenter(lonlist)\r\n        nodesArr.forEach(function (n, i) {\r\n          n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n        })\r\n      }\r\n  \r\n  \r\n    }\r\n  \r\n    if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n      // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  \r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n      // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n  \r\n  \r\n  \r\n    //   graph.forEachNode(function (fromnode) {\r\n  \r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph \r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n            \r\n    //          })\r\n    //         }\r\n             \r\n    //         //directed graph: \r\n    //       }\r\n  \r\n    //     })\r\n  \r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n  \r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n  \r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0])\r\n    const nodePropertyTypes = {}\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n    })\r\n    const uniqueValue = {}\r\n    nodekeyList.forEach(function (k, i) {\r\n  \r\n      if (nodePropertyTypes[k] == 'string') {\r\n        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        const minv = Math.min(...valuea)\r\n        const maxv = Math.max(...valuea)\r\n        uniqueValue[k] = [minv, maxv]\r\n      }\r\n    })\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: 'Untitled Graph',\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: ['pagerank', 'degree', 'distance to center'],\r\n        edgeProperties: ['source_id', 'target_id'],\r\n       \r\n      },\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    \r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph \r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n    \r\n  \r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = 'degree';\r\n    this.scatterplot.y = 'distance to center';\r\n\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n  //   appState.graph.frame.paused = false;\r\n  // appState.graph.frame.resumeLayout();\r\n  //                 this.forceUpdate();\r\n  \r\n\r\n                      // this.frame.resumeLayout();\r\n                      // this.forceUpdate();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout  () {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n    \r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size >0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n \r\n  density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n \r\n  degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n  avgDist(){\r\n\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    const edgeSelection = [];\r\n    this.frame.getNodeList().forEach(node => {\r\n      if(node.linkObjs && node.linkObjs.length>0){\r\n        edgeSelection.push(...node.linkObjs)\r\n      }\r\n      \r\n    })\r\n\r\n    if (edgeSelection.length > 0) {\r\n      const uniqEdgeSelection = uniq(edgeSelection)\r\n      \r\n      if (uniqEdgeSelection.length > 0) {\r\n        const edgeDistance = uniqEdgeSelection.map(e=>{\r\n          if(e.edgeDist >0){\r\n            return e.edgeDist\r\n          }else {\r\n            return 0\r\n          }\r\n         \r\n        })\r\n        // console.log(edgeDistance)\r\n        return average(edgeDistance).toFixed(2);\r\n\r\n      } else {\r\n        return 0\r\n      }\r\n\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n\r\n\r\n  diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n\r\n  rerundiameter(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n\r\n  reruncluster(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return reaverageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n  reruncomponent(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n}\r\n\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.globalFlatRatio = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n \r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n    appState.graph.clustercoe = appState.graph.averageClustering().toFixed(3)\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    // appState.graph.frame.selection = []\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  \r\n  // appState.graph.runActiveLayout();\r\n  // setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length>0){  //dehilight border when innitially load \r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n  }\r\n  if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n    this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  }\r\n})\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"8b1fa770-a1d0-43f0-b798-def14744dd8c\"],   \r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  [\"Mafia Family Network\", \"c43890f8-1cfb-4599-a0d3-8f47303691fc\"],\r\n  [\"US flight Network\", '9cf82a47-e5b6-4d45-87aa-fae9e4ca66fa'],\r\n  ['US 117th House Vote Network',\"5c1c6b89-24cd-4dff-9748-6cf6ad8a43a1\"]\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.globalFlatRatio = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  // appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        \r\n      }\r\n      appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] ) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr , paths: pathsArr},\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = []\r\n    const edgekeys = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && edgekeys.indexOf(key1) == -1) {\r\n            withinEdges.push(link)\r\n            edgekeys.push(key1)\r\n            edgekeys.push(key2)\r\n            // edgecount = edgecount+1\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n //highlight nodes and edges within selection\r\n self.updateDegreeHistOpacity = function () {\r\n  if (self.degreehighlight.length > 0) {\r\n    if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n      const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n        var p = 0.017453292519943295;    // Math.PI / 180\r\n        var c = Math.cos;\r\n        var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n          c(lat1 * p) * c(lat2 * p) *\r\n          (1 - c((lon2 - lon1) * p)) / 2;\r\n    \r\n        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n      }\r\n      var sumOfAllDistance = 0;\r\n      var n = 0;\r\n      var max = 0;\r\n      self.graph.forEachNode(n => {\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX)\r\n        if (dist > max) {\r\n          max = dist;\r\n        }\r\n      })\r\n      self.graph.forEachNode(n => {  \r\n        // self.colorNodeColor(n, \"#0000FF\");\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX);\r\n        console.log(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0]['LatY'],self.degreehighlight[0]['LatX'])\r\n        self.colorNode(n, 0x0000FF);\r\n        if (dist == 0) {\r\n          self.colorNodeOpacity(n, 1);\r\n        } else if (dist < max/4) {\r\n          self.colorNodeOpacity(n, 0.2);\r\n        }else if (dist < (2*max)/4) {\r\n          self.colorNodeOpacity(n, 0.4);\r\n        }else if (dist < (3*max)/4) {\r\n          self.colorNodeOpacity(n, 0.6);\r\n        }\r\n        else {\r\n          self.colorNodeOpacity(n, 0.8);\r\n        }\r\n        \r\n        \r\n      });\r\n    }\r\n    else {\r\n    self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })  \r\n\r\n    //hilight within edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    const withinEdges = self.getEdgeWithinSelection(self.degreehighlight)\r\n\r\n    for (var i = 0; i < withinEdges.length; i++) {\r\n      withinEdges[i].linecolor.r = red;\r\n      withinEdges[i].linecolor.g = blue;\r\n      withinEdges[i].linecolor.b = green;\r\n    }\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //highlight nodes \r\n    for (var i = 0; i < self.degreehighlight.length; i++) {\r\n      self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n    }\r\n\r\n  } \r\n  }else {        //when no nodes satisfying the condition, all 0.2 opacity \r\n    self.graph.forEachNode(n => {\r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    self.colorNodeEdge(null);\r\n  }\r\n}\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n      \r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {  \r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX,self.selection[0]['LatY'],self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max/4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          }else if (dist < (2*max)/4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          }else if (dist < (3*max)/4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n          \r\n          \r\n        });\r\n      }\r\n      else {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } \r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n   //highlight clicked nodes and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node ) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n    //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //   //fisrt dehighlight all the edges\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })  \r\n\r\n    //   //hilight neighbor edges\r\n    //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n    //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //   const withinEdges = node.linkObjs\r\n\r\n    //   for (var i = 0; i < withinEdges.length; i++) {\r\n    //     withinEdges[i].linecolor.r = red;\r\n    //     withinEdges[i].linecolor.g = blue;\r\n    //     withinEdges[i].linecolor.b = green;\r\n    //   }\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n    // } else {        //when no nodes are given, all 1 opacity \r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n        \r\n    //   });\r\n    //   self.colorNodeEdge(null);\r\n    // }\r\n   \r\n\r\n    // self.highlightNode(node, true);\r\n    // node.renderData.textHolder.children[0].element.hideme = false;\r\n    self.colorNodeEdge(node);\r\n  }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (!node) return \r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null\r\n      \r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"square\",\r\n  NODE_HSHAPE: \"square\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if(!self.selection[i]) continue\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n      // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    }\r\n\r\n  // };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  }\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null\r\n      // appState.graph.networkClicked = null\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n      \r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node)\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      \r\n      \r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n        \r\n        \r\n      }\r\n\r\n\r\n\r\n      \r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 500) {\r\n        self.doubleClicked = true;\r\n        \r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null\r\n    appState.graph.degreeselection = []\r\n    appState.graph.degreebrushed = false\r\n    \r\n    self.updateSelectionOpacity();\r\n\r\n    if(self.selection.length == 1){\r\n      const thenode = self.selection[0]\r\n      self.highlightClickNode(thenode)\r\n      appState.graph.mapClicked = thenode\r\n      // self.selection = self.getNeighborNodesFromGraph(thenode);\r\n      appState.graph.selectedNodes = self.getNeighborNodesFromGraph(thenode);\r\n        \r\n      \r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if(self.selection.length == 0){\r\n      appState.graph.mapClicked = null\r\n    }\r\n    \r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *13;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize *2 ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    document.getElementById(\"showSelected\").style.display=\"none\";\r\n    document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    document.getElementById(\"hideAll\").style.display=\"none\";\r\n    document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    document.getElementById(\"showAll\").style.display=\"none\";\r\n    document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function () {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n    //directed arrows\r\n    self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n    var arrowPosition = self.directedArrows.attributes.position.array;\r\n    var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x) / 2;\r\n            var midPointY = (v1pos.y + v2pos.y) / 2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function () {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function () {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function (node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function () {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function (graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function (node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function (link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function (node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n      \r\n    });\r\n    \r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        self.ee.emit(\"select-nodes\", self.selection);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function (positions) {\r\n    self.graph.forEachNode(function (node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function (node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  \r\n\r\n  <MenuItem\r\n  iconName={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Distance to center\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Shortest path\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Pair distance\"\r\n            ? \"globe\" : \"graph\"}\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.replace(/\\w+/g, function(word) {\r\n      return ['to'].includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n    })}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        /> */}\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        /> */}\r\n        {/* <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        /> */}\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderExampleDataset(){\r\n    return(\r\n      <div id=\"exampleTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n        <p>Required attributes for nodelist.csv. Each row of the node table should represent attributes of a node, including at least a unique node ID and the node's longitude and latitude. </p>\r\n                    <table id=\"exampleNodeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead >\r\n                            <tr>\r\n                                <th > ID (unique node ID field) </th>\r\n                                <th> LonX (node longitude ) </th>\r\n                                <th> LatY (node latitude ) </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>67.2391</td>\r\n                                <td>-102.3472</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Required attributes for edgelist.csv. Each row of the edge table should represent attributes of an edge, including at least a source and target column corresponding to the node ID. </p>\r\n                    <table id = \"exampleEdgeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th > Source </th>\r\n                                <th> Target </th>\r\n                              \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>\"FWL\"</td>\r\n                \r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Example Dataset:</p>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1_OIDSbUyM9gTqziVdcqU_NsGxkk6HMTo/view?usp=share_link\"> US_airport_nodelist.csv</a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1cvOUir8gKDlS_hhNGL0qQOn2eNHCDsOU/view?usp=share_link\"> US_airport_edgelist.csv</a>\r\n                </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderExampleDataset()}\r\n              {/* {this.renderDelimiterSelection()} */}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://gatech.co1.qualtrics.com/jfe/form/SV_3kjYXeZT37404PY\"> Please fill out the participant survey here</a>\r\n            <p> SNoMaN supports both mouse/trackpad and touchscreen. </p>\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.filterKeyList}\r\n                    onSelect={it => {appState.graph.nodes.colorBy = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => {appState.graph.nodes.color.scale = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => {appState.graph.nodes.color.from = it.hex\r\n                          appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => {appState.graph.nodes.color.to = it.hex\r\n                        appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={appState.graph.filterKeyList}\r\n                    // itemRenderer={CommonItemRenderer}\r\n                    // filterable={false}\r\n                    onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                    value={appState.graph.nodes.sizeBy}\r\n                    />\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                  />\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n              <div style = {{height:\"15px\"}}>\r\n\r\n              </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <text style={{fontSize: \"12px\"}}>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable>\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"12px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"none\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\",display:\"none\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={20}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => {appState.graph.nodes.labelBy = it; appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: appState.graph.filter[it]\r\n                    })\r\n                    \r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={(Object.keys(appState.graph.filter).length === 0) ? []:appState.graph.filter[it]}\r\n\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    placeholder: '  ',\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      // var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n                      if (deselectIndex1 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:appState.graph.filter[it]\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      // var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      // if (deselectIndex1 > -1) {\r\n                      //   appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                      //   // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                      //   appState.graph.filterNodes()\r\n                      // }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                {/* <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                /> */}\r\n                {/* <MenuDivider /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                /> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                {/* <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                /> */}\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n              {/* {                    {appState.graph.hasGraph && <Button className={\"pt-small\"} text=\"Clear Selection and Filter\" onClick={() => (appState.graph.overrides = new Map())} />}} */}\r\n              <div className=\"pt-button-group\">\r\n              <a className=\"pt-button pt-icon-refresh\"  role=\"button\" onClick={() => {\r\n                appState.graph.mapClicked = undefined;\r\n                appState.graph.selectedNodes = [];\r\n                appState.graph.frame.selection = []\r\n                appState.graph.filter  = {}\r\n                appState.graph.currentlyHovered = undefined;\r\n                // appState.graph.mapClicked = undefined;\r\n                appState.graph.edgeselection = [];\r\n                appState.graph.degreeselection = [];\r\n                appState.graph.degreebrushed = false;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n                appState.graph.distanceDensityCurrentlyClicked = [];\r\n                appState.graph.clearBrush = true;\r\n                appState.graph.filterNodes()\r\n                appState.graph.frame.updateSelectionOpacity()\r\n\r\n                // this.forceUpdate();\r\n              }}>Clear All Selections and Filters</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      // appState.graph.selectedNodes = []\r\n      if (selectionNode.length === 0) return \r\n      appState.graph.selectedNodes = selectionNode\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if(!appState.graph.autoZoom) return;\r\n        if (appState.graph.frame.selection.length ==0) {\r\n          // if (appState.graph.frame.getNodeList() >0){\r\n            const nodeLoc = appState.graph.frame.getNodeList().map(function(node){\r\n              return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n            })\r\n            const b = latLngBounds() // seemed to work without having to pass init arg\r\n            nodeLoc.forEach(coords => {\r\n                b.extend(coords)\r\n            })\r\n            if(Object.keys(b).length > 0){\r\n              map.fitBounds(b)\r\n            }\r\n            \r\n          // }\r\n          return null;\r\n        }   //no selection \r\n        if (appState.graph.frame.selection.length ==1) return;  // only one node is selected \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        if(Object.keys(b).length > 0){\r\n          map.fitBounds(b)\r\n        }\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n          if (appState.useToolbartoSelect) {\r\n            appState.useToolbartoSelect = false\r\n          } else {\r\n            appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        \r\n          }\r\n        \r\n        \r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\nexport function DetectKeyPress(){\r\n  document.addEventListener('keydown', (event) => {\r\n    appState.graph.keydown = true\r\n  }, false);\r\n  document.addEventListener('keyup', (event) => {\r\n    appState.graph.keydown = false\r\n  }, false);\r\n  return null;\r\n}\r\n\r\n\r\n  ","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON, FeatureGroup, Circle } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\"\r\nimport { ZoomMap, MapClick, DetectKeyPress } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\"\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\"\r\n\r\nimport Curve from \"../components/Curve\"\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered && appState.graph.currentlyHovered.links) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n        return `${edge.source.id}👉 ${edge.target.id}`\r\n      })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n    console.log(appState.graph.watchAppearance)\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if(appState.graph.degreeselection.length>0){\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n    if(appState.graph.degreebrushed && appState.graph.degreeselection.length==0){\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const neighborIDs = appState.graph.selectedNeighborIDs\r\n      if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if(neighborIDs.indexOf(node.id) !== -1){\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      }\r\n      else {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.03, stroke: false, zIndex: 'auto' }\r\n\r\n      }\r\n    }\r\n    else {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyClicked.length > 0) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    \r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"100%\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n        \r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n        \r\n\r\n        {/* <ReactLeafletToolbar /> */}\r\n        \r\n        <AreaSelect />\r\n        <ZoomMap /> \r\n        <MapClick />\r\n        <DetectKeyPress />\r\n\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n            {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n              return (\r\n                // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                //   data={edge}\r\n                // // eventHandlers={{\r\n                // //   click: (e) => {\r\n                // //     console.log(e.target.options.data)\r\n                // //   }}}\r\n                // />\r\n                <Curve path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n          options={this.setEdgePathOption(edge)}\r\n            />\r\n                \r\n                \r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                        appState.graph.edgeselection = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.fontSize}\r\n                      className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> : <Tooltip className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <div>\r\n        <Switch style={{ position: 'fixed', top: '5vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.mapEdgeShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.mapEdgeShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '5vh', right: '4vw', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n        <Switch style={{ position: 'fixed', top: '8vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.convexPolygonsShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '8vh', right: '4vw', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n        <Switch style={{ position: 'fixed', top: '11vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.autoZoom}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.autoZoom = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '11vh', right: '4vw', zIndex: '1000' }}> Automatic Zoom</span>\r\n        \r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '14vh', right: '1vw', zIndex: '1000' }}> press CTRL key to select nodes on the map</span>\r\n\r\n        </div>\r\n        \r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n      \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 64, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  @action\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) {\r\n        appState.graph.avgdist = 0\r\n        return [null, []];\r\n      }\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          \r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n      return [appState.graph.avgdist, edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) {\r\n        appState.graph.avgdist = 0\r\n        return [null, []];\r\n      }\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n      return [appState.graph.avgdist, edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n          return [appState.graph.avgdist, edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n  \r\n  @action\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) {\r\n      appState.graph.tempRawGraph = undefined\r\n      return 0;\r\n    }\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    appState.graph.selectedEdge = edgeSelection.length;\r\n    appState.graph.avgDegree = appState.graph.selectedNodes.reduce((de, l) => de + l.data.ref.degree, 0) / appState.graph.selectedNodes.length\r\n    appState.graph.avgDegree = appState.graph.avgDegree.toFixed(3)\r\n    appState.graph.avgdensity = selectionDen.toFixed(3);\r\n    const selectnodesID = appState.graph.selectedNodes.map(n=>n.id)\r\n    appState.graph.rediameter = ''\r\n    appState.graph.reclustercoe = ''\r\n    appState.graph.recomponent = ''\r\n    appState.graph.tempRawGraph = {\r\n      \r\n        nodes: appState.graph.rawGraph.nodes.filter((n)=>(selectnodesID.includes(n.id))),\r\n        edges: appState.graph.rawGraph.edges.filter((e)=>(selectnodesID.includes(e.source_id) && selectnodesID.includes(e.target_id)))\r\n\r\n      \r\n    }\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n  const thenode = appState.graph.selectedNodes[0]\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    appState.graph.selectedEdge = edgeSelection.length;\r\n    appState.graph.avgDegree = selectneighbors.reduce((de, l) => de + l.data.ref.degree, 0) / selectneighbors.length;\r\n    appState.graph.avgDegree = appState.graph.avgDegree.toFixed(3)\r\n    appState.graph.avgdensity = selectionDen.toFixed(3);\r\n    const selectnodesID = selectneighbors.map(n=>n.data.ref.id)\r\n    selectnodesID.push(appState.graph.selectedNodes[0].id)\r\n    appState.graph.rediameter = ''\r\n    appState.graph.reclustercoe = ''\r\n    appState.graph.recomponent = ''\r\n    appState.graph.tempRawGraph = {\r\n      \r\n        nodes: appState.graph.rawGraph.nodes.filter((n)=>(selectnodesID.includes(n.id))),\r\n        edges: appState.graph.rawGraph.edges.filter((e)=>(selectnodesID.includes(e.source_id) && selectnodesID.includes(e.target_id)))\r\n\r\n      \r\n    }\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n    \r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n  \r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n  \r\n  \r\n      })\r\n  \r\n      \r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n      \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n\r\n      // when no node statisfy, should dehighlight \r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n    \r\n    \r\n  \r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n    \r\n  \r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n    \r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      selectionNode = selectneighbors.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }\r\n\r\n    \r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                  \r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.selectedNodes.length ==1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n  \r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                   \r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                    \r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n  \r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n  \r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                    \r\n  \r\n  \r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n  \r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            } \r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n  \r\n  \r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n     \r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density() ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            \r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n                \r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 50, left: 50 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // this.state.;\r\n    if (appState.graph.scatterplot.x === 'shortest path') {\r\n      column1 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n      column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.x)\r\n      column1 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n      })\r\n    }\r\n\r\n    if (appState.graph.scatterplot.y === 'shortest path') {\r\n      column2 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n      column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.y)\r\n      column2 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n      })\r\n    }\r\n\r\n    let temp = []\r\n    temp.push(header)\r\n    for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n      temp.push([column1[i], column2[i]]);\r\n    }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false;\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = []\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    if(selection ) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      }\r\n      console.log(selection[0][1], selection[1][1],brushBounds.y1, brushBounds.y0);\r\n  \r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n        console.log(nodecx, nodecy);\r\n        if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n          selectionNodeID.push(select(this).attr(\"id\"))\r\n        }\r\n  \r\n  \r\n  \r\n      })\r\n  \r\n  \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n  \r\n      )\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.selectedNodes = selectionNode\r\n  \r\n  \r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity()\r\n    }else{   //click to clear selection \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n    }\r\n    \r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left,  this.margin.top], [this.width + this.margin.left, this.height + this.margin.top ]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      const capitalizeString =(inputString)=> {\r\n        const connectingWords = ['in', 'to']; // Add more connecting words as needed\r\n      \r\n        return inputString.replace(/\\w+/g, function(word) {\r\n          return connectingWords.includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n        });\r\n      }\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\"}}>X by: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList.map(s=>capitalizeString(s))}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={\r\n                  capitalizeString(appState.graph.scatterplot.x)\r\n                  }\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={capitalizeString(appState.graph.scatterplot.y)}\r\n              />\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                <text style={{ transform: 'translate(20vw, 28vh)' }} fontSize=\"12px\">{(appState.graph.scatterplot.x === 'standard distance') ? 'Standard Distance (km)' : capitalizeString(appState.graph.scatterplot.x)}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text \r\n                 style={{ transform: \"translate(-30px, 21vh) rotate(-90deg)\", }}\r\n                  // transform={\"translate(-1vw, 21vh) rotate(-90deg)\"}\r\n                  fontSize=\"12px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance') ? 'Standard Distance (km)' : capitalizeString(appState.graph.scatterplot.y) }</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(35vw, 1vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(12vw, 1.0vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n      // density distance node style\r\n\r\n      // //hover on one group \r\n      // if (appState.graph.distanceDensityCurrentlyHovered) {\r\n\r\n      //   if (String(node['name']) === String(appState.graph.distanceDensityCurrentlyHovered)) {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"10000\",\r\n      //       stroke: def.NODE_HIGHLIGHT,\r\n      //       fillOpacity: 0.8\r\n      //     }\r\n      //   } else {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"0\",\r\n      //       stroke: false,\r\n      //       fillOpacity: 0.1\r\n      //     }\r\n      //   }\r\n\r\n      // } else {// no hover \r\n      //   return {\r\n      //     fill: appState.graph.nodeColorScale(node['name']),\r\n      //     zIndex: \"0\",\r\n      //     stroke: false,\r\n      //     fillOpacity: 0.8\r\n      //   }\r\n\r\n      // }\r\n      \r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (appState.graph.distanceDensityCurrentlyClicked.includes(String(node['name']))) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } \r\n        else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n      }\r\n    }\r\n    else { //path node style \r\n      return {\r\n        \r\n        fill: appState.graph.edges.color,\r\n        zIndex: \"0\",\r\n        stroke: false,\r\n        fillOpacity: 0.8\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              // onMouseOver={(e) => {\r\n              //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n              //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n              //     // console.log(node)\r\n              //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n              //   )\r\n              //   appState.graph.frame.selection = selectionNode\r\n              //   appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n              //   // console.log(selectionNode)\r\n              //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              // }}\r\n              // onMouseLeave={(e) => {\r\n\r\n              //   if (appState.graph.mapClicked) return;\r\n              //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n              //   appState.graph.frame.selection = []\r\n              //   appState.graph.selectedNodes = []\r\n              //   appState.graph.edgeselection = []\r\n\r\n              //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              //     // if (n !== appState.graph.mapClicked) {\r\n              //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              //     // }\r\n              //   }\r\n              //   );\r\n\r\n\r\n              // }}\r\n              onClick={(e) => {\r\n                if (appState.graph.distanceDensityCurrentlyClicked.includes(e.target.getAttribute('id'))) {\r\n                  appState.graph.distanceDensityCurrentlyClicked = appState.graph.distanceDensityCurrentlyClicked.filter(node => \r\n                    node !==  e.target.getAttribute('id')\r\n                  )\r\n                }\r\n                else {\r\n                  appState.graph.distanceDensityCurrentlyClicked.push(e.target.getAttribute('id'));\r\n                }\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  appState.graph.distanceDensityCurrentlyClicked.includes(String(node.data.ref[appState.graph.groupby]))\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\" \r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              // e.target.getAttribute('fill') node.renderData.color,\r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              \r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\n// import { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport SelectionDetail from \"./panels/SelectionDetail\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        {/* {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 1 && <SelectionDetail />\r\n        } */}\r\n        {/* {appState.graph.selectedNodes.length === 1 && (\r\n          <NodeDetail node={appState.graph.selectedNodes[0].data.ref} />\r\n        )} */}\r\n\r\n        {/* {appState.graph.selectedNodes.length !== 1 && appState.graph.currentlyHovered && (\r\n          <NodeDetail node={appState.graph.currentlyHovered.data.ref} />\r\n        )} */}\r\n\r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from 'ngraph.graph';\r\nimport path from 'ngraph.path';\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n\r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                appState.graph.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? String.fromCharCode(communityDict[node.id] + 97) : 'a'\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n\r\n                appState.graph.nodes.convexhullby = \"community\"\r\n                appState.graph.nodes.groupby = \"community\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    avgConnectionDist = () => {\r\n        appState.graph.rawGraph.nodes.forEach(function (node) {\r\n            const links = appState.graph.frame.getNode(node['id']).linkObjs\r\n            if (links) {\r\n                const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                node['average distance'] = cdistance / node.degree\r\n                node['average distance'] = node['average distance'].toFixed(2)\r\n            }else{\r\n                node['average distance'] = 0\r\n            }\r\n        })\r\n\r\n        appState.graph.scatterplot.x = 'average distance'\r\n        appState.graph.scatterplot.y = 'degree'\r\n        appState.graph.metadata.nodeComputed.push('average distance')\r\n\r\n    }\r\n\r\n    runKfullfillment = () => {\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        // Function to find the K nearest neighbors for each node\r\n        const findKfulfillment = (nodes, edges) => {\r\n            const neighbors = {};\r\n\r\n\r\n            for (const currentNode of nodes) {\r\n                // find nearest neighbors\r\n                const currentId = currentNode.id;\r\n                currentNode['nearestnn'] = []\r\n                // neighbors[currentId] = [];\r\n\r\n                // Calculate distances to all other nodes\r\n                for (const otherNode of nodes) {\r\n                    if (currentNode !== otherNode) {\r\n                        const distance = calculateDistance(\r\n                            currentNode.LatY,\r\n                            currentNode.LonX,\r\n                            otherNode.LatY,\r\n                            otherNode.LonX\r\n                        );\r\n\r\n                        currentNode['nearestnn'].push({\r\n                            id: otherNode.id,\r\n                            distance: distance\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Sort neighbors by distance and keep the closest K\r\n                currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                const k = currentNode['degree']\r\n                currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n                //find connected node id\r\n                currentNode['connected node'] = []\r\n                for (const edge of edges) {\r\n                    if (edge.source_id == currentNode['id'] || edge.target_id == currentNode[\"id\"]) {\r\n                        currentNode['connected node'].push(edge.source_id)\r\n                        currentNode['connected node'].push(edge.target_id)\r\n                    }\r\n                }\r\n                currentNode['connected node'].filter((n) => n !== currentNode['id']);\r\n\r\n\r\n\r\n                // calculate kfulfillment\r\n                const cnn = new Set(currentNode['connected node']);\r\n                currentNode['connected node'] = Array.from(cnn)\r\n                const snn = new Set(currentNode['nearestnn'].map(n => n.id));\r\n\r\n                const intersection = [...cnn].filter(item => snn.has(item));\r\n                if (currentNode['degree'] === 0) {\r\n                    currentNode['k-fulfillment'] = 0\r\n                } else {\r\n                    currentNode['k-fulfillment'] = intersection.length / currentNode['degree']\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        findKfulfillment(appState.graph.rawGraph.nodes, appState.graph.rawGraph.edges)\r\n        appState.graph.metadata.nodeComputed.push('k-fulfillment')\r\n        appState.graph.scatterplot.x = 'k-fulfillment'\r\n        appState.graph.scatterplot.y = 'degree'\r\n\r\n\r\n    }\r\n\r\n    runGlobalFlatRatio = () => {\r\n        const nodes = appState.graph.rawGraph.nodes\r\n        const iter = 5\r\n        const shuffleArray = (array) => {\r\n            for (let i = array.length - 1; i > 0; i--) {\r\n                // Generate a random index from 0 to i\r\n                const randomIndex = Math.floor(Math.random() * (i + 1));\r\n\r\n                // Swap elements array[i] and array[randomIndex]\r\n                const temp = array[i];\r\n                array[i] = array[randomIndex];\r\n                array[randomIndex] = temp;\r\n            }\r\n        }\r\n\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        const gBarSumDistances = (nodeOrders, nodesWKnn, distanceMatrix, degreeConstraintMatrix) => {\r\n            const degreeCount = new Map();\r\n            nodeOrders.forEach(node => degreeCount.set(node, 0));\r\n\r\n            const nodesLabels = nodesWKnn.map((n) => n['id']);\r\n            const n = nodesLabels.length;\r\n            const connectionCounted = {}\r\n            for (const nl of nodesLabels) {\r\n                connectionCounted[nl] = {};\r\n            }\r\n\r\n            let totalDistance = 0;\r\n\r\n            for (let i = 0; i < nodeOrders.length; i++) {\r\n                const node = nodeOrders[i];\r\n                const neighbors = nodesWKnn.filter(obj => {\r\n                    return obj['id'] === node\r\n                })[0]['nearestnn'];\r\n\r\n                const neighborsid = neighbors.map(n => n['id'])\r\n\r\n\r\n                for (const neighbor of neighborsid) {\r\n                    if (!connectionCounted[node][neighbor] &&\r\n                        degreeCount.get(node) < appState.graph.frame.getNode(node).data.ref.degree &&\r\n                        degreeCount.get(neighbor) < appState.graph.frame.getNode(neighbor).data.ref.degree) {\r\n                        totalDistance += distanceMatrix[node][neighbor];\r\n                        degreeCount.set(node, degreeCount.get(node) + 1);\r\n                        degreeCount.set(neighbor, degreeCount.get(neighbor) + 1);\r\n                        connectionCounted[node][neighbor] = true;\r\n                        connectionCounted[neighbor][node] = true;\r\n                        // console.log(\"Added distance for\", node, neighbor, \"in order:\", nodeOrders);\r\n                    }\r\n                }\r\n            }\r\n            return totalDistance;\r\n        }\r\n\r\n        //calcualte knn \r\n        if (!nodes[0]['nearestnn']) {\r\n            for (const currentNode of nodes) {\r\n                // find nearest neighbors\r\n                const currentId = currentNode.id;\r\n                currentNode['nearestnn'] = []\r\n                // neighbors[currentId] = [];\r\n\r\n                // Calculate distances to all other nodes\r\n                for (const otherNode of nodes) {\r\n                    if (currentNode !== otherNode) {\r\n                        const distance = calculateDistance(\r\n                            currentNode.LatY,\r\n                            currentNode.LonX,\r\n                            otherNode.LatY,\r\n                            otherNode.LonX\r\n                        );\r\n\r\n                        currentNode['nearestnn'].push({\r\n                            id: otherNode.id,\r\n                            distance: distance\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Sort neighbors by distance and keep the closest K\r\n                currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                const k = currentNode['degree']\r\n                currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Generate iteration number of node orders \r\n        const nodeOrders = [];\r\n        for (let i = 0; i < iter; i++) {\r\n            nodeOrders.push(nodes.map((n) => n['id']));\r\n            shuffleArray(nodeOrders[i]); // Shuffle the node order\r\n        }\r\n\r\n        // Precompute the distance matrix\r\n        const nodesLabels = nodes.map((n) => n['id']);\r\n        const n = nodesLabels.length;\r\n        const distanceMatrix = {};\r\n        for (const nl of nodesLabels) {\r\n            distanceMatrix[nl] = {};\r\n            for (const ll of nodesLabels) {\r\n                distanceMatrix[nl][ll] = 0;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            // Skip diagonal values \r\n            for (let j = i + 1; j < n; j++) {\r\n                const distance = calculateDistance(\r\n                    nodes[i].LatY,\r\n                    nodes[i].LonX,\r\n                    nodes[j].LatY,\r\n                    nodes[j].LonX\r\n                )\r\n\r\n                // Update both upper and lower side of the matrix since the network is undirected\r\n                distanceMatrix[nodes[i]['id']][nodes[j]['id']] = distance;\r\n                distanceMatrix[nodes[j]['id']][nodes[i]['id']] = distance;\r\n            }\r\n        }\r\n\r\n        // Precompute the degree constraint matrix\r\n        const degreeConstraintMatrix = nodes.map(x => x['degree']);\r\n\r\n        // Calculate average distance of G_bar under iterations. \r\n        const avgGBarSum = nodeOrders.map(order => gBarSumDistances(order, nodes, distanceMatrix, degreeConstraintMatrix))\r\n            .reduce((a, b) => a + b, 0) / iter;\r\n        const links = appState.graph.frame.getNodeList().map(n => n.linkObjs).flat().filter(i => i)\r\n        const gSum = links.reduce((dist, l) => dist + l.edgeDist, 0) / 2\r\n\r\n        appState.graph.globalFlatRatio = avgGBarSum / gSum;\r\n    }\r\n\r\n\r\n\r\n    runLocalFlatRatio = () => {\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        const findFlatRatio = (nodes) => {\r\n            const neighbors = {};\r\n\r\n            if (nodes[0]['nearestnn']) {\r\n                // don't calculate nearest neighbors again\r\n                //calculate connected node distance directly\r\n                for (const currentNode of nodes) {\r\n                    const currentId = currentNode.id;\r\n                    const links = appState.graph.frame.getNode(currentId).linkObjs\r\n                    if (links) {\r\n                        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                        const ndistance = currentNode['nearestnn'].reduce((dist, l) => dist + l.distance, 0);\r\n                        // calculate flat ratio\r\n                        currentNode['flattening ratio'] = ndistance / cdistance\r\n                        if (!isFinite(currentNode['flattening ratio'])) {\r\n                            currentNode['flattening ratio'] = 0\r\n                        }\r\n                    } else {\r\n                        currentNode['flattening ratio'] = 0\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                for (const currentNode of nodes) {\r\n                    // find nearest neighbors\r\n                    const currentId = currentNode.id;\r\n                    currentNode['nearestnn'] = []\r\n                    // neighbors[currentId] = [];\r\n\r\n                    // Calculate distances to all other nodes\r\n                    for (const otherNode of nodes) {\r\n                        if (currentNode !== otherNode) {\r\n                            const distance = calculateDistance(\r\n                                currentNode.LatY,\r\n                                currentNode.LonX,\r\n                                otherNode.LatY,\r\n                                otherNode.LonX\r\n                            );\r\n\r\n                            currentNode['nearestnn'].push({\r\n                                id: otherNode.id,\r\n                                distance: distance\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    // Sort neighbors by distance and keep the closest K\r\n                    currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                    const k = currentNode['degree']\r\n                    currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n                    //calculate connected node distance\r\n                    const links = appState.graph.frame.getNode(currentId).linkObjs\r\n                    if (links) {\r\n                        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                        const ndistance = currentNode['nearestnn'].reduce((dist, l) => dist + l.distance, 0);\r\n                        // calculate flat ratio\r\n                        currentNode['flattening ratio'] = ndistance / cdistance\r\n                        if (!isFinite(currentNode['flattening ratio'])) {\r\n                            currentNode['flattening ratio'] = 0\r\n                        }\r\n                    } else {\r\n                        currentNode['flattening ratio'] = 0\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        findFlatRatio(appState.graph.rawGraph.nodes)\r\n        appState.graph.metadata.nodeComputed.push('flattening ratio')\r\n        appState.graph.scatterplot.x = 'flattening ratio'\r\n        appState.graph.scatterplot.y = 'degree'\r\n\r\n    }\r\n\r\n    runShortestPath = () => {\r\n\r\n\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n            var p = 0.017453292519943295;    // Math.PI / 180\r\n            var c = Math.cos;\r\n            var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n                c(lat1 * p) * c(lat2 * p) *\r\n                (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n\r\n        const graph = createGraph();\r\n\r\n        // hardcode LatY and LonX for sample dataset \r\n        appState.graph.rawGraph.nodes.forEach(node => graph.addNode(node[\"id\"].toString(), { LatY: parseFloat(node[\"LatY\"]), LonX: parseFloat(node[\"LonX\"]) }))\r\n        appState.graph.rawGraph.edges.forEach(edge => graph.addLink(edge[\"source_id\"], edge[\"target_id\"]));\r\n\r\n        const shortestPathPairs = () => {\r\n            let pathFinder = path.aGreedy(graph);\r\n            const pathsArr = []\r\n            const pathsSet = new Set();\r\n\r\n\r\n\r\n            graph.forEachNode(function (fromnode) {\r\n\r\n                graph.forEachNode(function (tonode) {\r\n                    if (fromnode.id !== tonode.id) {\r\n                        const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n                        const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n                        const edgeinfo = appState.graph.rawGraph.edges.filter((edge) => {\r\n                            return (edge.source_id === fromnode.id && edge.target_id === tonode.id)\r\n                        })\r\n                        let pairdist = calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n\r\n\r\n\r\n                        // undirected graph:\r\n                        // only add once for undirected graph \r\n                        if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2))) {\r\n                            pathsSet.add(pathKey1);\r\n                            pathsSet.add(pathKey2);\r\n                            pathsArr.push({\r\n                                \"source\": fromnode.id,\r\n                                \"target\": tonode.id,\r\n                                \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n                                \"distance\": pairdist\r\n\r\n                            })\r\n                        }\r\n\r\n                        //directed graph: \r\n                    }\r\n\r\n                })\r\n\r\n            })\r\n            // console.log(nodesArr.length)\r\n            // console.log(pathsArr.length)\r\n            return pathsArr\r\n\r\n        }\r\n        appState.graph.rawGraph.paths = shortestPathPairs();\r\n        appState.graph.metadata.nodeComputed.push('shortest path')\r\n        appState.graph.metadata.nodeComputed.push('pair distance')\r\n        appState.graph.scatterplot.x = 'pair distance'\r\n        appState.graph.scatterplot.y = 'shortest path'\r\n\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n\r\n            // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes,\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div> \r\n                    <p>Distance and Shortest Path</p>\r\n                     <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.avgConnectionDist}>Run Average Distance</Button>\r\n                        <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runShortestPath}>Run Shortest Path</Button>\r\n                    <br></br>\r\n                    <hr />\r\n                    <p>Efficient Distance Analysis</p>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runLocalFlatRatio}>Run Local Flattening Ratio</Button>\r\n                   <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runKfullfillment}>Run  K-fullfillment</Button>\r\n                        <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runGlobalFlatRatio}>Run Global Flattening Ratio</Button>\r\n                    {appState.graph.globalFlatRatio ? <text className=\"gf-tag\" style={{ fontSize: \"8px\" }} >{parseFloat(appState.graph.globalFlatRatio).toFixed(3)}</text> : null}\r\n                    <br></br>\r\n                    <hr />\r\n                    <p>Group-related Functions</p>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community Detection</Button>\r\n                    {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n                    {appState.graph.modularity ? <text className=\"modularity-tag\" style={{ fontSize: \"8px\" }} >{\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}</text> : null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\", fontSize: \"12px\" }}>Convex Hull By: </p>\r\n                        <span style={{}}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList.filter(it=>(it !== 'ID'&& (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]))))}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                    appState.graph.convexPolygonsShow = true\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\", fontSize: \"12px\" }}>Cluster By: </p>\r\n                        <span style={{}}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList.filter(it=>(it !== 'ID'&& (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]))))}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport {\r\n    Button\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\n@observer\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n            x[i].style.display = \"none\";\r\n        }\r\n        var x = document.getElementsByClassName(\"sidebarButton\");\r\n        for (i = 0; i < x.length; i++) {\r\n            x[i].style.background = \"black\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n        document.getElementById(cityName + 'Tab').style.background = \"gray\";\r\n\r\n    }\r\n    // AverageDegree=()=>{\r\n    //     links.reduce((dist, l) => dist + l.edgeDist, 0) / 2\r\n    // }\r\n\r\n    SelectionDistanceFromLatLonIn = () => {\r\n        const selectNodes = appState.graph.selectedNodes;\r\n        const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n        if (appState.graph.mapClicked) {\r\n\r\n            const edgeSelection = appState.graph.mapClicked.linkObjs\r\n            if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n            this.edgeSelection = edgeSelection\r\n            const edgeDistance = edgeSelection.map(e => {\r\n                if (e.edgeDist > 0) {\r\n                    return e.edgeDist\r\n                } else {\r\n                    return 0\r\n                }\r\n\r\n            })\r\n            return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        }\r\n\r\n        if (selectNodes.length > 1) {\r\n            //// calculate only the connected distance \r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n            if (edgeSelection.length == 0) return [null, []];\r\n            this.edgeSelection = edgeSelection\r\n            const edgeDistance = edgeSelection.map(e => {\r\n                if (e.edgeDist > 0) {\r\n                    return e.edgeDist\r\n                } else {\r\n                    return 0\r\n                }\r\n\r\n            })\r\n            return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n            //// calculate average distance between all selected nodes \r\n            // const edgeDistance = []\r\n            // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n            //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n            //     edgeDistance.push(edge.edgeDist)\r\n\r\n            //   }\r\n            // })\r\n            // if(edgeDistance.length>0){\r\n            //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n            // }else{\r\n            //   return  [null, []]\r\n            // }\r\n\r\n            // for (let i = 0; i < selectNodes.length; i++) {\r\n            //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n            //     const lon1 = selectNodes[i].data.ref.LonX\r\n            //     const lat1 = selectNodes[i].data.ref.LatY\r\n            //     const lon2 = selectNodes[j].data.ref.LonX\r\n            //     const lat2 = selectNodes[j].data.ref.LatY\r\n            //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n            //     edgeDistance.push(edgeDist)\r\n            //   }\r\n            // }\r\n\r\n\r\n\r\n        } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n            let edgeSelection = []\r\n            appState.graph.frame.getNodeList().forEach(node => {\r\n                if (node.linkObjs && node.linkObjs.length > 0) {\r\n                    edgeSelection.push(...node.linkObjs)\r\n                }\r\n\r\n            })\r\n\r\n            if (edgeSelection.length > 0) {\r\n                let uniqEdgeSelection = uniq(edgeSelection)\r\n                this.edgeSelection = uniqEdgeSelection\r\n                if (uniqEdgeSelection.length > 0) {\r\n                    let edgeDistance = uniqEdgeSelection.map(e => {\r\n                        if (e.edgeDist > 0) {\r\n                            return e.edgeDist\r\n                        } else {\r\n                            return 0\r\n                        }\r\n\r\n                    })\r\n                    // console.log(edgeDistance)\r\n                    return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n                } else {\r\n                    return [null, []]\r\n                }\r\n\r\n            } else {\r\n                return [null, []]\r\n            }\r\n\r\n\r\n            // return null\r\n        }\r\n\r\n    }\r\n\r\n    // @computed\r\n    SelectionDensity = () => {\r\n\r\n        // undirect graph\r\n        console.log(\"ashdakjs\")\r\n        if (appState.graph.selectedNodes.length > 1) {\r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n            // console.log(edgeSelection.length);\r\n            if (edgeSelection.length == 0) return [0, 0, 0];\r\n            // this.edgeSelection = [...edgeSelection]\r\n\r\n            const nodelength = appState.graph.selectedNodes.length;\r\n            const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n            const avgdegree = appState.graph.selectedNodes.reduce((de, l) => de + l.data.ref.degree, 0) / appState.graph.selectedNodes.length\r\n            return [selectionDen.toFixed(3), edgeSelection.length, avgdegree]\r\n        } else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]) {\r\n            const thenode = appState.graph.selectedNodes[0]\r\n            const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n            // console.log(edgeSelection.length);\r\n            if (edgeSelection.length == 0) return [0, 0, 0];\r\n            // this.edgeSelection = [...edgeSelection]\r\n            const avgdegree = selectneighbors.reduce((de, l) => de + l.data.ref.degree, 0) / selectneighbors.length\r\n            const nodelength = selectneighbors.length;\r\n            const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n            return [selectionDen.toFixed(3), edgeSelection.length, avgdegree]\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    rerunDiameter = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.rediameter = appState.graph.rerundiameter(appState.graph.tempRawGraph)\r\n        }else{\r\n            appState.graph.rediameter= 0\r\n        }\r\n\r\n    }\r\n    rerunCluster = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.reclustercoe = appState.graph.reruncluster(appState.graph.tempRawGraph).toFixed(2)\r\n        }else{\r\n            appState.graph.reclustercoe= 0\r\n        }\r\n\r\n    }\r\n    rerunComponent = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.recomponent = appState.graph.reruncomponent(appState.graph.tempRawGraph)\r\n        }else{\r\n            appState.graph.recomponent= 0\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        if (appState.graph.frame && appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar w3-black\">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{appState.graph.selectedNodes.length}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n\r\n                                        <td>{appState.graph.hasGraph ? appState.graph.selectedEdge : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgDegree : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgdist : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgdensity : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter\r\n                                            <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunDiameter}>rerun</Button>\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.rediameter : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunCluster}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.reclustercoe : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunComponent}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.recomponent : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n        } else if (appState.graph.frame && appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            //one node is clicked\r\n            const thenode = appState.graph.selectedNodes[0]\r\n            const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n            // appState.graph.selectedNodes = selectneighbors\r\n            if (selectneighbors.length > 1) {\r\n                return appState.graph.frame && (\r\n                    <SidebarMenu>\r\n                        <div class=\"sidebar-container\">\r\n                            <div class=\"w3-bar w3-black\">\r\n                                <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                                <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                                <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                            </div>\r\n                            <div id=\"Appearance\" class=\"city\">\r\n                                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                                <Tabs2 animate id=\"graph-options\">\r\n                                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                                <text style={{ fontSize: \"12px\" }}></text>\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <hr />\r\n                            <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                                <table className={Classes.TABLE} style={{ width: '100%' }}>\r\n\r\n                                    <tbody>\r\n                                        {/* <thead> */}\r\n                                        <tr>\r\n                                            <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                        </tr>\r\n                                        {/* </thead> */}\r\n                                        {/* <caption>Network Statistics</caption> */}\r\n                                        <tr>\r\n                                            <td># Nodes</td>\r\n                                            <td>{selectneighbors.length}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td># Edges</td>\r\n                                            <td>{appState.graph.selectedEdge}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Degree</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgDegree : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Distance</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgdist : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Density</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgdensity : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                        <td>Network Diameter\r\n                                            <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunDiameter}>rerun</Button>\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.rediameter : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunCluster}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.reclustercoe : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunComponent}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.recomponent : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </SidebarMenu>\r\n                );\r\n            } else {\r\n                //selection is 0\r\n                return appState.graph.frame && (\r\n                    <SidebarMenu>\r\n                        <div class=\"sidebar-container\">\r\n                            <div class=\"w3-bar w3-black\">\r\n                                <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                                <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                                <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                            </div>\r\n                            <div id=\"Appearance\" class=\"city\">\r\n                                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                                <Tabs2 animate id=\"graph-options\">\r\n                                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                                <text style={{ fontSize: \"12px\" }}></text>\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <hr />\r\n                            <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                                <table className={Classes.TABLE} style={{ width: '100%' }}>\r\n\r\n                                    <tbody>\r\n                                        {/* <thead> */}\r\n                                        <tr>\r\n                                            <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                        </tr>\r\n                                        {/* </thead> */}\r\n                                        {/* <caption>Network Statistics</caption> */}\r\n                                        <tr>\r\n                                            <td># Nodes</td>\r\n                                            <td>{0}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td># Edges</td>\r\n                                            <td>{0}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Degree</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Distance</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Density</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Diameter</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Clustering<br></br>Coefficient</td>\r\n                                            <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Connected <br></br>Component</td>\r\n                                            <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </SidebarMenu>\r\n                );\r\n            }\r\n        }\r\n        else if (appState.graph.frame && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            //no node is selected \r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar w3-black\">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n                                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance</td>\r\n                                        <td>\r\n                                            {appState.graph.frame ? appState.graph.avgDist() : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient</td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component</td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n        }\r\n        else {\r\n            //everything else , no valid selection, etc. \r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar w3-black\">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{0}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n                                        <td>{0}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter <br></br>\r\n\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n      })} style={{display: \"flex\"}}>\r\n        <div>\r\n        <NavbarSelector />\r\n        </div>\r\n        <div class=\"container\" style={{paddingTop:\"5vh\", maxWidth:\"100vw\", height:\"100%\"}}>\r\n          <div class=\"container\" style={{height:\"100%\"}}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                    {appState.graph.hasGraph && <Tag className=\"network-tag\">Network</Tag>}\r\n                    <main className=\"main\">\r\n                      {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                        <ThreeJSVis />\r\n                      ) : (\r\n                        <WorkspaceView />\r\n                      )}\r\n                    </main>\r\n                    {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                    <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div class=\"container__right\">\r\n                  {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",width: '40vw'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame &&  <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame  && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}