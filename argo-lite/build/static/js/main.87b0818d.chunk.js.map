{"version":3,"sources":["stores/PreferencesStore.js","services/AlgorithmUtils.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/panels/SelectionDetail.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","jsnx","require","jsgraphs","averageClusteringCoefficient","snapshot","keydown","clusteringco","jsnxGraph","Graph","addNodesFrom","rawGraph","nodes","map","n","id","addEdgesFrom","edges","e","source_id","target_id","convertToJsnx","averageClustering","selectedNodes","length","filter","x","undefined","selection","getNodeList","forEach","node","renderData","draw_object","children","visible","connectedComponents","connectcom","cc","ConnectedComponents","i","idDict","g","addEdge","convertToJSGraph","componentCount","exactGraphDiameter","graphDiameter","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","Math","max","GraphStore","_dec","ref","_dec2","initialGlobalConfig","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","labelBy","shape","labelSize","labelLength","crossColor","scatterplot","y","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_descriptor27","_lastSelectedSingleNode","nodesShowingLabels","_descriptor28","_descriptor29","_descriptor30","_descriptor31","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_descriptor36","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","_descriptor42","_descriptor43","_descriptor44","_descriptor45","hasGraphLoaded","get","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","k","removeList","indexOf","u","toLowerCase","split","s","charAt","toUpperCase","substring","join","neighborIDs","j","links","link","push","fromId","toId","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","done","err","scales","domain","minMax","range","_this","Set","item","selectedNodeId","setOfNeighborIds","source","toString","target","add","has","_this2","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","_this3","runInAction","Object","keys","_objectSpread","satisfy","fkey","nodePropertyTypes","includes","nodeids","_this4","_this5","removeNodesByIds","_this6","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","a","b","half","floor","medianLat","medianLon","lat1","lon1","lat2","lon2","c","cos","asin","sqrt","calDistanceFromLatLonInKm","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","edgeProperties","savedStatesStr","runActiveLayout","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this7","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","nodeCount","graphDensity","sum","degree","averageDegree","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","globalFlatRatio","convexhullby","groupby","mapClicked","currentlyHovered","convexNodes","pathHovered","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","clearBrush","mapEdgeShow","autoZoom","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","clearSelection","pinNodes","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","replace","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","shortestPathPairs","pathsArr","rank","_context4","parseInt","centrality","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","array","reduce","pathFinder","aGreedy","pathsSet","pathKey1","pathKey2","find","pageRank","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","linkObjs","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightClickNode","neighborNodes","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","edge","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","_loop","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","thenode","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","fontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","edgeDist","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","newDelimiter","updateDelimiter","DIALOG_BODY","TABLE","rel","href","Spinner","renderExampleDataset","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","toFixed","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","class","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","marginLeft","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","deselectIndex1","onRelease","_ref3","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","role","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","DetectKeyPress","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","edgeSelectionID","nodesSelectedID","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","neighborNodesID","selectedNeighborIDs","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","flex","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","mouseover","mouseout","direction","permanent","defaultChecked","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","edgeSelection","SelectionDistanceFromLatLonIn","selectNodes","edgeDistance","uniqEdgeSelection","SelectionDensity","nodelength","selectneighbors","onEdgeBrushStart","sourceEvent","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","selectAll","brushBounds","each","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","SVGBrush","extent","getEventMouse","_this$edgesvg$getBoun","brushType","onBrushStart","onBrush","onBrushEnd","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","x0","y0","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","input","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","tickFormat","ti","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","column1","column2","header","csvarray","selectionNodeID","circles","svg","nodecx","nodecy","renderBrush","_this$svg$getBounding","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","XYSelect","allComputedPropertiesKeyList","RenderCircles","Axis","axis","axisBottom","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","renderCircles","cluster","ci","cx","cy","onMouseOver","_e$target$getAttribut","_e$target$getAttribut2","sourceid","targetid","onMouseLeave","_e$target$getAttribut3","_e$target$getAttribut4","dataset","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","StatGroupPanel","fromCharCode","avgConnectionDist","cdistance","runKfullfillment","calculateDistance","dLat","dLon","atan2","currentNode","_step2","_iterator2","otherNode","_step3","_iterator3","cnn","snn","intersection","findKfulfillment","runGlobalFlatRatio","shuffleArray","randomIndex","_step6","_iterator6","_step7","_iterator7","nodeOrders","_step8","nodesLabels","distanceMatrix","_iterator8","nl","_step9","_iterator9","ll","avgGBarSum","order","nodesWKnn","degreeConstraintMatrix","degreeCount","_step4","connectionCounted","_iterator4","totalDistance","_loop2","_step5","neighborsid","_iterator5","neighbor","gBarSumDistances","gSum","flat","runLocalFlatRatio","_step10","_iterator10","currentId","ndistance","isFinite","_step11","_iterator11","_step12","_iterator12","findFlatRatio","runShortestPath","pairdist","Sidebar","cityName","getElementsByClassName","SidebarMenu","openCity","colspan","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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","file":"static/js/main.87b0818d.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import appState from '../stores';\r\n\r\nconst jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.clusteringco\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    appState.graph.clusteringco = jsnx.averageClustering(jsnxGraph);\r\n    // const result = 0\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n    return appState.graph.clusteringco;\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.connectcom\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    console.log('compute connected copoenent')\r\n    appState.graph.connectcom = cc.componentCount()\r\n    return appState.graph.connectcom;\r\n   \r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.graphDiameter\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    appState.graph.graphDiameter = dia\r\n    return dia;\r\n}\r\n ","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter } from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor: [\"#0073bc\", \"#ff3333\",\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot: {\r\n      x: 'degree',\r\n      y: 'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n  @observable globalFlatRatio = undefined;\r\n  @observable keydown = false;\r\n  clusteringco = 0;\r\n  graphDiameter = 0;\r\n  connectcom = 0;\r\n\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable autoZoom = true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n  @observable clearBrush = false;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on \r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\"pagerank\", \"degree\", 'centrality', 'distance to center', 'betweeness centrality', 'closeness centrality', 'distance to group center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  @observable\r\n  degreeselection = []\r\n\r\n  @observable\r\n  degreebrushed = false\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = []\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden', 'id', 'Longitude', 'Latitude', 'LatY', 'LonX', 'dist to center', 'dist_to_center', 'centrality', 'shortest path', 'pair distance', 'node_id', 'standard distance', 'network density']\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n\r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return u.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')\r\n    })\r\n    return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n\r\n\r\n\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j] || !this.selectedNodes[j].links) continue\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        })\r\n\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([\r\n          ...neighborIDs\r\n        ])\r\n        return uniqNeighborIDs\r\n      } else {\r\n        return []\r\n      }\r\n    } else {\r\n      return []\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      const nominalColor =  [\"#0073bc\", \"#ff3333\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n        .range(nominalColor);\r\n    } else { //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() {\r\n    runInAction('filter nodes', () => {\r\n      if (this.selectedNodes.length > 0) {\r\n      this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n\r\n    if (this.frame.selection.length > 0) {\r\n      this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n   \r\n      if (Object.keys(this.filter).length === 0){\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {return { ...n, isHidden: false }});\r\n      }\r\n\r\n      if (Object.keys(this.filter).length !== 0) {\r\n\r\n\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == 'string') {\r\n              if (this.filter[fkey].length > 0 && (!this.filter[fkey].includes(n[fkey]))) {\r\n                satisfy = false\r\n              }\r\n            } else {  // number range \r\n              if (this.filter[fkey] && (n[fkey] < this.filter[fkey]['min'] || n[fkey] > this.filter[fkey]['max'])) {\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n      }\r\n      this.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n\r\n    });\r\n     // this.runActiveLayout()\r\n\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\"\r\n    const toId = \"target_id\"\r\n    const mapId = \"ID\"\r\n    const mapLon = \"LonX\"\r\n    const mapLat = \"LatY\"\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr =\r\n    initialgraph.rawGraph.nodes.map(\r\n        n => ({ ...n, LonX: parseFloat(n[\"LonX\"]), LatY: parseFloat(n[\"LatY\"]) }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n  \r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n  \r\n    // const edgesSet = new Set();\r\n  \r\n    // const edgesArr = [];\r\n  \r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n  \r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n  \r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n  \r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n      edgesArr.forEach(it => {\r\n        const fromnode = nodesArr.filter((node)=>{return node.id === it[fromId].toString()})\r\n        const tonode = nodesArr.filter((node)=>{return node.id === it[toId].toString()})\r\n        const Nonloc = 360\r\n        if(fromnode.length > 0 && tonode.length >0){\r\n        it.fromlocLatY = parseFloat(fromnode[0].LatY)\r\n        it.fromlocLonX = parseFloat(fromnode[0].LonX)\r\n        it.tolocLatY = parseFloat(tonode[0].LatY)\r\n        it.tolocLonX = parseFloat(tonode[0].LonX) }\r\n        else{\r\n        it.fromlocLatY = Nonloc\r\n        it.fromlocLonX = Nonloc\r\n        it.tolocLatY = Nonloc\r\n        it.tolocLonX = Nonloc\r\n        }// observable array???\r\n        it.withinState = true\r\n        it.withinFamily = true\r\n        \r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n        \r\n      });\r\n    } \r\n\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295;    // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n        c(lat1 * p) * c(lat2 * p) *\r\n        (1 - c((lon2 - lon1) * p)) / 2;\r\n  \r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n  \r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n  \r\n  \r\n    const calMedianCenter = ()=>{\r\n      const latlist = nodesArr.map(n => parseFloat(n['LatY']))\r\n      const lonlist = nodesArr.map(n => parseFloat(n['LonX']))\r\n      const medianCenter = (values)=>{\r\n        if(values.length ===0) throw new Error(\"No inputs\");\r\n  \r\n        const result1 = [...values].sort((a, b) => a - b)\r\n      \r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n      \r\n        var half = Math.floor(result1.length / 2);\r\n        \r\n        if (result1.length % 2)\r\n          return result1[half];\r\n        \r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      }\r\n  \r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist)\r\n        const medianLon = medianCenter(lonlist)\r\n        nodesArr.forEach(function (n, i) {\r\n          n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n        })\r\n      }\r\n  \r\n  \r\n    }\r\n  \r\n    if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n      // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  \r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n      // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n  \r\n  \r\n  \r\n    //   graph.forEachNode(function (fromnode) {\r\n  \r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph \r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n            \r\n    //          })\r\n    //         }\r\n             \r\n    //         //directed graph: \r\n    //       }\r\n  \r\n    //     })\r\n  \r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n  \r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n  \r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0])\r\n    const nodePropertyTypes = {}\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n    })\r\n    const uniqueValue = {}\r\n    nodekeyList.forEach(function (k, i) {\r\n  \r\n      if (nodePropertyTypes[k] == 'string') {\r\n        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        const minv = Math.min(...valuea)\r\n        const maxv = Math.max(...valuea)\r\n        uniqueValue[k] = [minv, maxv]\r\n      }\r\n    })\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: 'Untitled Graph',\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: ['pagerank', 'degree', 'distance to center'],\r\n        edgeProperties: ['source_id', 'target_id'],\r\n       \r\n      },\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    \r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph \r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n    \r\n  \r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = 'degree';\r\n    this.scatterplot.y = 'distance to center';\r\n\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n  //   appState.graph.frame.paused = false;\r\n  // appState.graph.frame.resumeLayout();\r\n  //                 this.forceUpdate();\r\n  \r\n\r\n                      // this.frame.resumeLayout();\r\n                      // this.forceUpdate();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout  () {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n    \r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size >0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n \r\n  density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n \r\n  degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n\r\n  diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n}","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.globalFlatRatio = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n \r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    // appState.graph.frame.selection = []\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  \r\n  // appState.graph.runActiveLayout();\r\n  // setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length>0){  //dehilight border when innitially load \r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n  }\r\n  if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n    this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  }\r\n})\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"8b1fa770-a1d0-43f0-b798-def14744dd8c\"],   \r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  [\"Mafia Family Network\", \"c43890f8-1cfb-4599-a0d3-8f47303691fc\"],\r\n  [\"US flight Network\", '9cf82a47-e5b6-4d45-87aa-fae9e4ca66fa'],\r\n  ['US 117th House Vote Network',\"5c1c6b89-24cd-4dff-9748-6cf6ad8a43a1\"]\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.globalFlatRatio = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  // appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        \r\n      }\r\n      appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] ) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr , paths: pathsArr},\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1 )&& link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = []\r\n    const edgekeys = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && edgekeys.indexOf(key1) == -1) {\r\n            withinEdges.push(link)\r\n            edgekeys.push(key1)\r\n            edgekeys.push(key2)\r\n            // edgecount = edgecount+1\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n //highlight nodes and edges within selection\r\n self.updateDegreeHistOpacity = function () {\r\n  if (self.degreehighlight.length > 0) {\r\n    if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n      const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n        var p = 0.017453292519943295;    // Math.PI / 180\r\n        var c = Math.cos;\r\n        var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n          c(lat1 * p) * c(lat2 * p) *\r\n          (1 - c((lon2 - lon1) * p)) / 2;\r\n    \r\n        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n      }\r\n      var sumOfAllDistance = 0;\r\n      var n = 0;\r\n      var max = 0;\r\n      self.graph.forEachNode(n => {\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX)\r\n        if (dist > max) {\r\n          max = dist;\r\n        }\r\n      })\r\n      self.graph.forEachNode(n => {  \r\n        // self.colorNodeColor(n, \"#0000FF\");\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX);\r\n        console.log(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0]['LatY'],self.degreehighlight[0]['LatX'])\r\n        self.colorNode(n, 0x0000FF);\r\n        if (dist == 0) {\r\n          self.colorNodeOpacity(n, 1);\r\n        } else if (dist < max/4) {\r\n          self.colorNodeOpacity(n, 0.2);\r\n        }else if (dist < (2*max)/4) {\r\n          self.colorNodeOpacity(n, 0.4);\r\n        }else if (dist < (3*max)/4) {\r\n          self.colorNodeOpacity(n, 0.6);\r\n        }\r\n        else {\r\n          self.colorNodeOpacity(n, 0.8);\r\n        }\r\n        \r\n        \r\n      });\r\n    }\r\n    else {\r\n    self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })  \r\n\r\n    //hilight within edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    const withinEdges = self.getEdgeWithinSelection(self.degreehighlight)\r\n\r\n    for (var i = 0; i < withinEdges.length; i++) {\r\n      withinEdges[i].linecolor.r = red;\r\n      withinEdges[i].linecolor.g = blue;\r\n      withinEdges[i].linecolor.b = green;\r\n    }\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //highlight nodes \r\n    for (var i = 0; i < self.degreehighlight.length; i++) {\r\n      self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n    }\r\n\r\n  } \r\n  }else {        //when no nodes satisfying the condition, all 0.2 opacity \r\n    self.graph.forEachNode(n => {\r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    self.colorNodeEdge(null);\r\n  }\r\n}\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n      \r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {  \r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX,self.selection[0]['LatY'],self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max/4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          }else if (dist < (2*max)/4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          }else if (dist < (3*max)/4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n          \r\n          \r\n        });\r\n      }\r\n      else {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } \r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n   //highlight clicked nodes and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node ) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n    //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //   //fisrt dehighlight all the edges\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })  \r\n\r\n    //   //hilight neighbor edges\r\n    //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n    //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //   const withinEdges = node.linkObjs\r\n\r\n    //   for (var i = 0; i < withinEdges.length; i++) {\r\n    //     withinEdges[i].linecolor.r = red;\r\n    //     withinEdges[i].linecolor.g = blue;\r\n    //     withinEdges[i].linecolor.b = green;\r\n    //   }\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n    // } else {        //when no nodes are given, all 1 opacity \r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n        \r\n    //   });\r\n    //   self.colorNodeEdge(null);\r\n    // }\r\n   \r\n\r\n    // self.highlightNode(node, true);\r\n    // node.renderData.textHolder.children[0].element.hideme = false;\r\n    self.colorNodeEdge(node);\r\n  }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (!node) return \r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null\r\n      \r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"square\",\r\n  NODE_HSHAPE: \"square\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if(!self.selection[i]) continue\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n      // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    }\r\n\r\n  // };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  }\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null\r\n      // appState.graph.networkClicked = null\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n      \r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node)\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      \r\n      \r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n        \r\n        \r\n      }\r\n\r\n\r\n\r\n      \r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 500) {\r\n        self.doubleClicked = true;\r\n        \r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null\r\n    appState.graph.degreeselection = []\r\n    appState.graph.degreebrushed = false\r\n    \r\n    self.updateSelectionOpacity();\r\n\r\n    if(self.selection.length == 1){\r\n      const thenode = self.selection[0]\r\n      self.highlightClickNode(thenode)\r\n      appState.graph.mapClicked = thenode\r\n      // self.selection = self.getNeighborNodesFromGraph(thenode);\r\n      appState.graph.selectedNodes = self.getNeighborNodesFromGraph(thenode);\r\n        \r\n      \r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if(self.selection.length == 0){\r\n      appState.graph.mapClicked = null\r\n    }\r\n    \r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *13;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize *2 ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    document.getElementById(\"showSelected\").style.display=\"none\";\r\n    document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    document.getElementById(\"hideAll\").style.display=\"none\";\r\n    document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    document.getElementById(\"showAll\").style.display=\"none\";\r\n    document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function () {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n    //directed arrows\r\n    self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n    var arrowPosition = self.directedArrows.attributes.position.array;\r\n    var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x) / 2;\r\n            var midPointY = (v1pos.y + v2pos.y) / 2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function () {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function () {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function (node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function () {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function (graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function (node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function (link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function (node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n      \r\n    });\r\n    \r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        self.ee.emit(\"select-nodes\", self.selection);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function (positions) {\r\n    self.graph.forEachNode(function (node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function (node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  <MenuItem\r\n  iconName={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Distance to center\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Shortest path\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Pair distance\"\r\n            ? \"globe\" : \"graph\"}\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        /> */}\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        /> */}\r\n        {/* <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        /> */}\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderExampleDataset(){\r\n    return(\r\n      <div id=\"exampleTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n        <p>Required attributes for nodelist.csv. Each row of the node table should represent attributes of a node, including at least a unique node ID and the node's longitude and latitude. </p>\r\n                    <table id=\"exampleNodeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead >\r\n                            <tr>\r\n                                <th > ID (unique node ID field) </th>\r\n                                <th> LonX (node longitude ) </th>\r\n                                <th> LatY (node latitude ) </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>67.2391</td>\r\n                                <td>-102.3472</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Required attributes for edgelist.csv. Each row of the edge table should represent attributes of an edge, including at least a source and target column corresponding to the node ID. </p>\r\n                    <table id = \"exampleEdgeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th > Source </th>\r\n                                <th> Target </th>\r\n                              \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>\"FWL\"</td>\r\n                \r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Example Dataset:</p>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1_OIDSbUyM9gTqziVdcqU_NsGxkk6HMTo/view?usp=share_link\"> US_airport_nodelist.csv</a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1cvOUir8gKDlS_hhNGL0qQOn2eNHCDsOU/view?usp=share_link\"> US_airport_edgelist.csv</a>\r\n                </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderExampleDataset()}\r\n              {/* {this.renderDelimiterSelection()} */}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://gatech.co1.qualtrics.com/jfe/form/SV_3kjYXeZT37404PY\"> Please fill out the participant survey here</a>\r\n            <p> SNoMaN supports both mouse/trackpad and touchscreen. </p>\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.filterKeyList}\r\n                    onSelect={it => {appState.graph.nodes.colorBy = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => {appState.graph.nodes.color.scale = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => {appState.graph.nodes.color.from = it.hex\r\n                          appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => {appState.graph.nodes.color.to = it.hex\r\n                        appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={appState.graph.filterKeyList}\r\n                    // itemRenderer={CommonItemRenderer}\r\n                    // filterable={false}\r\n                    onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                    value={appState.graph.nodes.sizeBy}\r\n                    />\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                  />\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n              <div style = {{height:\"15px\"}}>\r\n\r\n              </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <text style={{fontSize: \"12px\"}}>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable>\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"12px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"none\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\",display:\"none\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={20}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => {appState.graph.nodes.labelBy = it; appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: appState.graph.filter[it]\r\n                    })\r\n                    \r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={(Object.keys(appState.graph.filter).length === 0) ? []:appState.graph.filter[it]}\r\n\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    placeholder: '  ',\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      // var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n                      if (deselectIndex1 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:appState.graph.filter[it]\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      // var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      // if (deselectIndex1 > -1) {\r\n                      //   appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                      //   // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                      //   appState.graph.filterNodes()\r\n                      // }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                {/* <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                /> */}\r\n                {/* <MenuDivider /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                /> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                />\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n              {/* {                    {appState.graph.hasGraph && <Button className={\"pt-small\"} text=\"Clear Selection and Filter\" onClick={() => (appState.graph.overrides = new Map())} />}} */}\r\n              <div className=\"pt-button-group\">\r\n              <a className=\"pt-button pt-icon-refresh\"  role=\"button\" onClick={() => {\r\n                appState.graph.mapClicked = undefined;\r\n                appState.graph.selectedNodes = [];\r\n                appState.graph.frame.selection = []\r\n                appState.graph.filter  = {}\r\n                appState.graph.currentlyHovered = undefined;\r\n                // appState.graph.mapClicked = undefined;\r\n                appState.graph.edgeselection = [];\r\n                appState.graph.degreeselection = [];\r\n                appState.graph.degreebrushed = false;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n                appState.graph.distanceDensityCurrentlyClicked = [];\r\n                appState.graph.clearBrush = true;\r\n                appState.graph.filterNodes()\r\n                appState.graph.frame.updateSelectionOpacity()\r\n\r\n                // this.forceUpdate();\r\n              }}>Clear All Selections and Filters</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      // appState.graph.selectedNodes = []\r\n      if (selectionNode.length === 0) return \r\n      appState.graph.selectedNodes = selectionNode\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if(!appState.graph.autoZoom) return;\r\n        if (appState.graph.frame.selection.length ==0) {\r\n          // if (appState.graph.frame.getNodeList() >0){\r\n            const nodeLoc = appState.graph.frame.getNodeList().map(function(node){\r\n              return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n            })\r\n            const b = latLngBounds() // seemed to work without having to pass init arg\r\n            nodeLoc.forEach(coords => {\r\n                b.extend(coords)\r\n            })\r\n            if(Object.keys(b).length > 0){\r\n              map.fitBounds(b)\r\n            }\r\n            \r\n          // }\r\n          return null;\r\n        }   //no selection \r\n        if (appState.graph.frame.selection.length ==1) return;  // only one node is selected \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        if(Object.keys(b).length > 0){\r\n          map.fitBounds(b)\r\n        }\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n          if (appState.useToolbartoSelect) {\r\n            appState.useToolbartoSelect = false\r\n          } else {\r\n            appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        \r\n          }\r\n        \r\n        \r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\nexport function DetectKeyPress(){\r\n  document.addEventListener('keydown', (event) => {\r\n    appState.graph.keydown = true\r\n  }, false);\r\n  document.addEventListener('keyup', (event) => {\r\n    appState.graph.keydown = false\r\n  }, false);\r\n  return null;\r\n}\r\n\r\n\r\n  ","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON, FeatureGroup, Circle } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\"\r\nimport { ZoomMap, MapClick, DetectKeyPress } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\"\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\"\r\n\r\nimport Curve from \"../components/Curve\"\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered && appState.graph.currentlyHovered.links) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n        return `${edge.source.id}👉 ${edge.target.id}`\r\n      })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n    console.log(appState.graph.watchAppearance)\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if(appState.graph.degreeselection.length>0){\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n    if(appState.graph.degreebrushed && appState.graph.degreeselection.length==0){\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const neighborIDs = appState.graph.selectedNeighborIDs\r\n      if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if(neighborIDs.indexOf(node.id) !== -1){\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      }\r\n      else {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.03, stroke: false, zIndex: 'auto' }\r\n\r\n      }\r\n    }\r\n    else {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyClicked.length > 0) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    \r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"100%\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n        \r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n        \r\n\r\n        {/* <ReactLeafletToolbar /> */}\r\n        \r\n        <AreaSelect />\r\n        <ZoomMap /> \r\n        <MapClick />\r\n        <DetectKeyPress />\r\n\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n            {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n              return (\r\n                // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                //   data={edge}\r\n                // // eventHandlers={{\r\n                // //   click: (e) => {\r\n                // //     console.log(e.target.options.data)\r\n                // //   }}}\r\n                // />\r\n                <Curve path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n          options={this.setEdgePathOption(edge)}\r\n            />\r\n                \r\n                \r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                        appState.graph.edgeselection = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.fontSize}\r\n                      className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> : <Tooltip className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <div>\r\n        <Switch style={{ position: 'fixed', top: '5vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.mapEdgeShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.mapEdgeShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '5vh', right: '4vw', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n        <Switch style={{ position: 'fixed', top: '8vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.convexPolygonsShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '8vh', right: '4vw', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n        <Switch style={{ position: 'fixed', top: '11vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.autoZoom}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.autoZoom = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '11vh', right: '4vw', zIndex: '1000' }}> Automatic Zoom</span>\r\n        \r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '14vh', right: '1vw', zIndex: '1000' }}> press CTRL key to select nodes on the map</span>\r\n\r\n        </div>\r\n        \r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n      \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 64, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n  const thenode = appState.graph.selectedNodes[0]\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n    \r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n  \r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n  \r\n  \r\n      })\r\n  \r\n      \r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n      \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n\r\n      // when no node statisfy, should dehighlight \r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n    \r\n    \r\n  \r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n    \r\n  \r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n    \r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      selectionNode = selectneighbors.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }\r\n\r\n    \r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                  \r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.selectedNodes.length ==1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n  \r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                   \r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                    \r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n  \r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n  \r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                    \r\n  \r\n  \r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n  \r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            } \r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n  \r\n  \r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n     \r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density() ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            \r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n                \r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 50, left: 50 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // this.state.;\r\n    if (appState.graph.scatterplot.x === 'shortest path') {\r\n      column1 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n      column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.x)\r\n      column1 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n      })\r\n    }\r\n\r\n    if (appState.graph.scatterplot.y === 'shortest path') {\r\n      column2 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n      column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.y)\r\n      column2 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n      })\r\n    }\r\n\r\n    let temp = []\r\n    temp.push(header)\r\n    for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n      temp.push([column1[i], column2[i]]);\r\n    }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false;\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = []\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    if(selection ) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      }\r\n      console.log(selection[0][1], selection[1][1],brushBounds.y1, brushBounds.y0);\r\n  \r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n        console.log(nodecx, nodecy);\r\n        if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n          selectionNodeID.push(select(this).attr(\"id\"))\r\n        }\r\n  \r\n  \r\n  \r\n      })\r\n  \r\n  \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n  \r\n      )\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.selectedNodes = selectionNode\r\n  \r\n  \r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity()\r\n    }else{   //click to clear selection \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n    }\r\n    \r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left,  this.margin.top], [this.width + this.margin.left, this.height + this.margin.top ]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\"}}>X By: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                {/* <text style={{ transform: 'translate(20vw, 28vh)' }} fontSize=\"12px\">{(appState.graph.scatterplot.x === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text> */}\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                {/* <text \r\n                 style={{ transform: \"translate(-3vw, 21vh) rotate(-90deg)\", }}\r\n                  // transform={\"translate(-3vw, 21vh) rotate(-90deg)\"}\r\n                  fontSize=\"12px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text> */}\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(35vw, 1vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(12vw, 1.0vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n      // density distance node style\r\n\r\n      // //hover on one group \r\n      // if (appState.graph.distanceDensityCurrentlyHovered) {\r\n\r\n      //   if (String(node['name']) === String(appState.graph.distanceDensityCurrentlyHovered)) {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"10000\",\r\n      //       stroke: def.NODE_HIGHLIGHT,\r\n      //       fillOpacity: 0.8\r\n      //     }\r\n      //   } else {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"0\",\r\n      //       stroke: false,\r\n      //       fillOpacity: 0.1\r\n      //     }\r\n      //   }\r\n\r\n      // } else {// no hover \r\n      //   return {\r\n      //     fill: appState.graph.nodeColorScale(node['name']),\r\n      //     zIndex: \"0\",\r\n      //     stroke: false,\r\n      //     fillOpacity: 0.8\r\n      //   }\r\n\r\n      // }\r\n      \r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (appState.graph.distanceDensityCurrentlyClicked.includes(String(node['name']))) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } \r\n        else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n      }\r\n    }\r\n    else { //path node style \r\n      return {\r\n        \r\n        fill: appState.graph.edges.color,\r\n        zIndex: \"0\",\r\n        stroke: false,\r\n        fillOpacity: 0.8\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              // onMouseOver={(e) => {\r\n              //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n              //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n              //     // console.log(node)\r\n              //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n              //   )\r\n              //   appState.graph.frame.selection = selectionNode\r\n              //   appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n              //   // console.log(selectionNode)\r\n              //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              // }}\r\n              // onMouseLeave={(e) => {\r\n\r\n              //   if (appState.graph.mapClicked) return;\r\n              //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n              //   appState.graph.frame.selection = []\r\n              //   appState.graph.selectedNodes = []\r\n              //   appState.graph.edgeselection = []\r\n\r\n              //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              //     // if (n !== appState.graph.mapClicked) {\r\n              //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              //     // }\r\n              //   }\r\n              //   );\r\n\r\n\r\n              // }}\r\n              onClick={(e) => {\r\n                if (appState.graph.distanceDensityCurrentlyClicked.includes(e.target.getAttribute('id'))) {\r\n                  appState.graph.distanceDensityCurrentlyClicked = appState.graph.distanceDensityCurrentlyClicked.filter(node => \r\n                    node !==  e.target.getAttribute('id')\r\n                  )\r\n                }\r\n                else {\r\n                  appState.graph.distanceDensityCurrentlyClicked.push(e.target.getAttribute('id'));\r\n                }\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  appState.graph.distanceDensityCurrentlyClicked.includes(String(node.data.ref[appState.graph.groupby]))\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\" \r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              // e.target.getAttribute('fill') node.renderData.color,\r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              \r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\n// import { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport SelectionDetail from \"./panels/SelectionDetail\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        {/* {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 1 && <SelectionDetail />\r\n        } */}\r\n        {/* {appState.graph.selectedNodes.length === 1 && (\r\n          <NodeDetail node={appState.graph.selectedNodes[0].data.ref} />\r\n        )} */}\r\n\r\n        {/* {appState.graph.selectedNodes.length !== 1 && appState.graph.currentlyHovered && (\r\n          <NodeDetail node={appState.graph.currentlyHovered.data.ref} />\r\n        )} */}\r\n\r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from 'ngraph.graph';\r\nimport path from 'ngraph.path';\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n\r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                appState.graph.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? String.fromCharCode(communityDict[node.id] + 97) : 'a'\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n\r\n                appState.graph.nodes.convexhullby = \"community\"\r\n                appState.graph.nodes.groupby = \"community\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    avgConnectionDist = () => {\r\n        appState.graph.rawGraph.nodes.forEach(function (node) {\r\n            const links = appState.graph.frame.getNode(node['id']).linkObjs\r\n            if (links) {\r\n                const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                node['average distance'] = cdistance / node.degree\r\n                node['average distance'] = node['average distance'].toFixed(2)\r\n            }else{\r\n                node['average distance'] = 0\r\n            }\r\n        })\r\n\r\n        appState.graph.scatterplot.x = 'average distance'\r\n        appState.graph.scatterplot.y = 'degree'\r\n        appState.graph.metadata.nodeComputed.push('average distance')\r\n\r\n    }\r\n\r\n    runKfullfillment = () => {\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        // Function to find the K nearest neighbors for each node\r\n        const findKfulfillment = (nodes, edges) => {\r\n            const neighbors = {};\r\n\r\n\r\n            for (const currentNode of nodes) {\r\n                // find nearest neighbors\r\n                const currentId = currentNode.id;\r\n                currentNode['nearestnn'] = []\r\n                // neighbors[currentId] = [];\r\n\r\n                // Calculate distances to all other nodes\r\n                for (const otherNode of nodes) {\r\n                    if (currentNode !== otherNode) {\r\n                        const distance = calculateDistance(\r\n                            currentNode.LatY,\r\n                            currentNode.LonX,\r\n                            otherNode.LatY,\r\n                            otherNode.LonX\r\n                        );\r\n\r\n                        currentNode['nearestnn'].push({\r\n                            id: otherNode.id,\r\n                            distance: distance\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Sort neighbors by distance and keep the closest K\r\n                currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                const k = currentNode['degree']\r\n                currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n                //find connected node id\r\n                currentNode['connected node'] = []\r\n                for (const edge of edges) {\r\n                    if (edge.source_id == currentNode['id'] || edge.target_id == currentNode[\"id\"]) {\r\n                        currentNode['connected node'].push(edge.source_id)\r\n                        currentNode['connected node'].push(edge.target_id)\r\n                    }\r\n                }\r\n                currentNode['connected node'].filter((n) => n !== currentNode['id']);\r\n\r\n\r\n\r\n                // calculate kfulfillment\r\n                const cnn = new Set(currentNode['connected node']);\r\n                currentNode['connected node'] = Array.from(cnn)\r\n                const snn = new Set(currentNode['nearestnn'].map(n => n.id));\r\n\r\n                const intersection = [...cnn].filter(item => snn.has(item));\r\n                if (currentNode['degree'] === 0) {\r\n                    currentNode['k-fulfillment'] = 0\r\n                } else {\r\n                    currentNode['k-fulfillment'] = intersection.length / currentNode['degree']\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        findKfulfillment(appState.graph.rawGraph.nodes, appState.graph.rawGraph.edges)\r\n        appState.graph.metadata.nodeComputed.push('k-fulfillment')\r\n        appState.graph.scatterplot.x = 'k-fulfillment'\r\n        appState.graph.scatterplot.y = 'degree'\r\n\r\n\r\n    }\r\n\r\n    runGlobalFlatRatio = () => {\r\n        const nodes = appState.graph.rawGraph.nodes\r\n        const iter = 5\r\n        const shuffleArray = (array) => {\r\n            for (let i = array.length - 1; i > 0; i--) {\r\n                // Generate a random index from 0 to i\r\n                const randomIndex = Math.floor(Math.random() * (i + 1));\r\n\r\n                // Swap elements array[i] and array[randomIndex]\r\n                const temp = array[i];\r\n                array[i] = array[randomIndex];\r\n                array[randomIndex] = temp;\r\n            }\r\n        }\r\n\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        const gBarSumDistances = (nodeOrders, nodesWKnn, distanceMatrix, degreeConstraintMatrix) => {\r\n            const degreeCount = new Map();\r\n            nodeOrders.forEach(node => degreeCount.set(node, 0));\r\n\r\n            const nodesLabels = nodesWKnn.map((n) => n['id']);\r\n            const n = nodesLabels.length;\r\n            const connectionCounted = {}\r\n            for (const nl of nodesLabels) {\r\n                connectionCounted[nl] = {};\r\n            }\r\n\r\n            let totalDistance = 0;\r\n\r\n            for (let i = 0; i < nodeOrders.length; i++) {\r\n                const node = nodeOrders[i];\r\n                const neighbors = nodesWKnn.filter(obj => {\r\n                    return obj['id'] === node\r\n                })[0]['nearestnn'];\r\n\r\n                const neighborsid = neighbors.map(n => n['id'])\r\n\r\n\r\n                for (const neighbor of neighborsid) {\r\n                    if (!connectionCounted[node][neighbor] &&\r\n                        degreeCount.get(node) < appState.graph.frame.getNode(node).data.ref.degree &&\r\n                        degreeCount.get(neighbor) < appState.graph.frame.getNode(neighbor).data.ref.degree) {\r\n                        totalDistance += distanceMatrix[node][neighbor];\r\n                        degreeCount.set(node, degreeCount.get(node) + 1);\r\n                        degreeCount.set(neighbor, degreeCount.get(neighbor) + 1);\r\n                        connectionCounted[node][neighbor] = true;\r\n                        connectionCounted[neighbor][node] = true;\r\n                        // console.log(\"Added distance for\", node, neighbor, \"in order:\", nodeOrders);\r\n                    }\r\n                }\r\n            }\r\n            return totalDistance;\r\n        }\r\n\r\n        //calcualte knn \r\n        if (!nodes[0]['nearestnn']) {\r\n            for (const currentNode of nodes) {\r\n                // find nearest neighbors\r\n                const currentId = currentNode.id;\r\n                currentNode['nearestnn'] = []\r\n                // neighbors[currentId] = [];\r\n\r\n                // Calculate distances to all other nodes\r\n                for (const otherNode of nodes) {\r\n                    if (currentNode !== otherNode) {\r\n                        const distance = calculateDistance(\r\n                            currentNode.LatY,\r\n                            currentNode.LonX,\r\n                            otherNode.LatY,\r\n                            otherNode.LonX\r\n                        );\r\n\r\n                        currentNode['nearestnn'].push({\r\n                            id: otherNode.id,\r\n                            distance: distance\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Sort neighbors by distance and keep the closest K\r\n                currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                const k = currentNode['degree']\r\n                currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Generate iteration number of node orders \r\n        const nodeOrders = [];\r\n        for (let i = 0; i < iter; i++) {\r\n            nodeOrders.push(nodes.map((n) => n['id']));\r\n            shuffleArray(nodeOrders[i]); // Shuffle the node order\r\n        }\r\n\r\n        // Precompute the distance matrix\r\n        const nodesLabels = nodes.map((n) => n['id']);\r\n        const n = nodesLabels.length;\r\n        const distanceMatrix = {};\r\n        for (const nl of nodesLabels) {\r\n            distanceMatrix[nl] = {};\r\n            for (const ll of nodesLabels) {\r\n                distanceMatrix[nl][ll] = 0;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            // Skip diagonal values \r\n            for (let j = i + 1; j < n; j++) {\r\n                const distance = calculateDistance(\r\n                    nodes[i].LatY,\r\n                    nodes[i].LonX,\r\n                    nodes[j].LatY,\r\n                    nodes[j].LonX\r\n                )\r\n\r\n                // Update both upper and lower side of the matrix since the network is undirected\r\n                distanceMatrix[nodes[i]['id']][nodes[j]['id']] = distance;\r\n                distanceMatrix[nodes[j]['id']][nodes[i]['id']] = distance;\r\n            }\r\n        }\r\n\r\n        // Precompute the degree constraint matrix\r\n        const degreeConstraintMatrix = nodes.map(x => x['degree']);\r\n\r\n        // Calculate average distance of G_bar under iterations. \r\n        const avgGBarSum = nodeOrders.map(order => gBarSumDistances(order, nodes, distanceMatrix, degreeConstraintMatrix))\r\n            .reduce((a, b) => a + b, 0) / iter;\r\n        const links = appState.graph.frame.getNodeList().map(n => n.linkObjs).flat().filter(i => i)\r\n        const gSum = links.reduce((dist, l) => dist + l.edgeDist, 0) / 2\r\n\r\n        appState.graph.globalFlatRatio = avgGBarSum / gSum;\r\n    }\r\n\r\n\r\n\r\n    runLocalFlatRatio = () => {\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        const findFlatRatio = (nodes) => {\r\n            const neighbors = {};\r\n\r\n            if (nodes[0]['nearestnn']) {\r\n                // don't calculate nearest neighbors again\r\n                //calculate connected node distance directly\r\n                for (const currentNode of nodes) {\r\n                    const currentId = currentNode.id;\r\n                    const links = appState.graph.frame.getNode(currentId).linkObjs\r\n                    if (links) {\r\n                        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                        const ndistance = currentNode['nearestnn'].reduce((dist, l) => dist + l.distance, 0);\r\n                        // calculate flat ratio\r\n                        currentNode['flattening ratio'] = ndistance / cdistance\r\n                        if (!isFinite(currentNode['flattening ratio'])) {\r\n                            currentNode['flattening ratio'] = 0\r\n                        }\r\n                    } else {\r\n                        currentNode['flattening ratio'] = 0\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                for (const currentNode of nodes) {\r\n                    // find nearest neighbors\r\n                    const currentId = currentNode.id;\r\n                    currentNode['nearestnn'] = []\r\n                    // neighbors[currentId] = [];\r\n\r\n                    // Calculate distances to all other nodes\r\n                    for (const otherNode of nodes) {\r\n                        if (currentNode !== otherNode) {\r\n                            const distance = calculateDistance(\r\n                                currentNode.LatY,\r\n                                currentNode.LonX,\r\n                                otherNode.LatY,\r\n                                otherNode.LonX\r\n                            );\r\n\r\n                            currentNode['nearestnn'].push({\r\n                                id: otherNode.id,\r\n                                distance: distance\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    // Sort neighbors by distance and keep the closest K\r\n                    currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                    const k = currentNode['degree']\r\n                    currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n                    //calculate connected node distance\r\n                    const links = appState.graph.frame.getNode(currentId).linkObjs\r\n                    if (links) {\r\n                        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                        const ndistance = currentNode['nearestnn'].reduce((dist, l) => dist + l.distance, 0);\r\n                        // calculate flat ratio\r\n                        currentNode['flattening ratio'] = ndistance / cdistance\r\n                        if (!isFinite(currentNode['flattening ratio'])) {\r\n                            currentNode['flattening ratio'] = 0\r\n                        }\r\n                    } else {\r\n                        currentNode['flattening ratio'] = 0\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        findFlatRatio(appState.graph.rawGraph.nodes)\r\n        appState.graph.metadata.nodeComputed.push('flattening ratio')\r\n        appState.graph.scatterplot.x = 'flattening ratio'\r\n        appState.graph.scatterplot.y = 'degree'\r\n\r\n    }\r\n\r\n    runShortestPath = () => {\r\n\r\n\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n            var p = 0.017453292519943295;    // Math.PI / 180\r\n            var c = Math.cos;\r\n            var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n                c(lat1 * p) * c(lat2 * p) *\r\n                (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n\r\n        const graph = createGraph();\r\n\r\n        // hardcode LatY and LonX for sample dataset \r\n        appState.graph.rawGraph.nodes.forEach(node => graph.addNode(node[\"id\"].toString(), { LatY: parseFloat(node[\"LatY\"]), LonX: parseFloat(node[\"LonX\"]) }))\r\n        appState.graph.rawGraph.edges.forEach(edge => graph.addLink(edge[\"source_id\"], edge[\"target_id\"]));\r\n\r\n        const shortestPathPairs = () => {\r\n            let pathFinder = path.aGreedy(graph);\r\n            const pathsArr = []\r\n            const pathsSet = new Set();\r\n\r\n\r\n\r\n            graph.forEachNode(function (fromnode) {\r\n\r\n                graph.forEachNode(function (tonode) {\r\n                    if (fromnode.id !== tonode.id) {\r\n                        const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n                        const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n                        const edgeinfo = appState.graph.rawGraph.edges.filter((edge) => {\r\n                            return (edge.source_id === fromnode.id && edge.target_id === tonode.id)\r\n                        })\r\n                        let pairdist = calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n\r\n\r\n\r\n                        // undirected graph:\r\n                        // only add once for undirected graph \r\n                        if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2))) {\r\n                            pathsSet.add(pathKey1);\r\n                            pathsSet.add(pathKey2);\r\n                            pathsArr.push({\r\n                                \"source\": fromnode.id,\r\n                                \"target\": tonode.id,\r\n                                \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n                                \"distance\": pairdist\r\n\r\n                            })\r\n                        }\r\n\r\n                        //directed graph: \r\n                    }\r\n\r\n                })\r\n\r\n            })\r\n            // console.log(nodesArr.length)\r\n            // console.log(pathsArr.length)\r\n            return pathsArr\r\n\r\n        }\r\n        appState.graph.rawGraph.paths = shortestPathPairs();\r\n        appState.graph.metadata.nodeComputed.push('shortest path')\r\n        appState.graph.metadata.nodeComputed.push('pair distance')\r\n        appState.graph.scatterplot.x = 'pair distance'\r\n        appState.graph.scatterplot.y = 'shortest path'\r\n\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n\r\n            // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes,\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runGlobalFlatRatio}>Run Global Flattening Ratio</Button>\r\n                    {appState.graph.globalFlatRatio ? <text className=\"gf-tag\" style={{ fontSize: \"8px\" }} >{parseFloat(appState.graph.globalFlatRatio).toFixed(3)}</text> : null}\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runLocalFlatRatio}>Run Local Flattening Ratio</Button>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.avgConnectionDist}>Run Average Distance</Button>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runKfullfillment}>Run  K-fullfillment</Button>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runShortestPath}>Run Shortest Path</Button>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community</Button>\r\n                    {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n                    {appState.graph.modularity ? <text className=\"modularity-tag\" style={{ fontSize: \"8px\" }} >{\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}</text> : null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\", fontSize: \"12px\" }}>Convex Hull By: </p>\r\n                        <span style={{}}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                    appState.graph.convexPolygonsShow = true\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\", fontSize: \"12px\" }}>Cluster By: </p>\r\n                        <span style={{}}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\n\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n          x[i].style.display = \"none\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n      return appState.graph.frame && (\r\n        <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n                <div class=\"w3-bar w3-black\">\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                </div> \r\n                <div id=\"Appearance\" class=\"city\">\r\n                    <text style={{fontSize: \"12px\"}}>Appearance </text>\r\n                    <Tabs2 animate id=\"graph-options\">\r\n                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Filter\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Filter Options</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"f_nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Statistics\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Statistics</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"s_layout\" title=\"Groups\" panel={<StatGroupPanel />} />\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                    <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colspan=\"2\" style={{textAlign: \"center\"}}><Tag>Statistics</Tag></th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td># Nodes</td>\r\n                                <td>{appState.graph.metadata.fullNodes}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td># Edges</td>\r\n                                <td>{appState.graph.metadata.fullEdges}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Average Degree</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Density</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Diameter</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Clustering<br></br>Coefficient</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Connected <br></br>Component</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </SidebarMenu>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n      })} style={{display: \"flex\"}}>\r\n        <div>\r\n        <NavbarSelector />\r\n        </div>\r\n        <div class=\"container\" style={{paddingTop:\"5vh\", maxWidth:\"100vw\", height:\"100%\"}}>\r\n          <div class=\"container\" style={{height:\"100%\"}}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                    {appState.graph.hasGraph && <Tag className=\"network-tag\">Network</Tag>}\r\n                    <main className=\"main\">\r\n                      {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                        <ThreeJSVis />\r\n                      ) : (\r\n                        <WorkspaceView />\r\n                      )}\r\n                    </main>\r\n                    {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                    <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div class=\"container__right\">\r\n                  {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",width: '40vw'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame &&  <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame  && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}