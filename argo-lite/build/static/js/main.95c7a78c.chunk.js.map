{"version":3,"sources":["stores/PreferencesStore.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","services/AlgorithmUtils.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/panels/SelectionDetail.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","GraphStore","_dec","ref","_dec2","initialGlobalConfig","nodes","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","max","labelBy","shape","labelSize","labelLength","edges","crossColor","scatterplot","x","y","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_lastSelectedSingleNode","nodesShowingLabels","_descriptor26","_descriptor27","_descriptor28","_descriptor29","_descriptor30","_descriptor31","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_descriptor36","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","_descriptor42","_descriptor43","hasGraphLoaded","get","selectedNodes","length","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","filter","k","removeList","indexOf","map","u","toLowerCase","split","s","charAt","toUpperCase","substring","join","neighborIDs","j","links","forEach","link","push","fromId","toId","rawGraph","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","n","done","Math","err","e","f","scales","domain","minMax","range","_this","Set","item","selectedNodeId","setOfNeighborIds","source","source_id","toString","target","target_id","add","node","has","id","_this2","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","_this3","runInAction","Object","keys","satisfy","fkey","nodePropertyTypes","includes","_objectSpread","undefined","selection","getNodeList","renderData","draw_object","children","visible","runActiveLayout","nodeids","_this4","_this5","removeNodesByIds","_this6","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","snapshot","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","a","b","half","floor","medianLat","medianLon","i","lat1","lon1","lat2","lon2","c","cos","asin","sqrt","calDistanceFromLatLonInKm","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","edgeProperties","savedStatesStr","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this7","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","averageClusteringCoefficient","connectedComponents","graphDensity","averageDegree","exactGraphDiameter","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","convexhullby","groupby","mapClicked","currentlyHovered","convexNodes","pathHovered","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","clearSelection","pinNodes","setTimeout","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","jsnx","require","jsgraphs","jsnxGraph","Graph","addNodesFrom","addEdgesFrom","convertToJsnx","averageClustering","ConnectedComponents","idDict","g","addEdge","convertToJSGraph","componentCount","nodeCount","sum","degree","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","hasPathTo","pathLength","pathTo","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","replace","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","shortestPathPairs","pathsArr","rank","_context4","parseInt","centrality","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","array","reduce","pathFinder","aGreedy","pathsSet","pathKey1","pathKey2","find","pageRank","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","linkObjs","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightClickNode","neighborNodes","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","edge","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","_loop","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","thenode","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","fontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","edgeDist","hide","updateColorsAndPositions","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","disabled","newDelimiter","updateDelimiter","Spinner","DIALOG_BODY","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","TABLE","toFixed","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","class","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","marginLeft","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","onRelease","_ref3","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","href","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","role","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","autoZoom","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","mapEdgeShow","edgeSelectionID","nodesSelectedID","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","neighborNodesID","selectedNeighborIDs","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","flex","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","mouseover","mouseout","direction","permanent","defaultChecked","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","edgeSelection","SelectionDistanceFromLatLonIn","selectNodes","edgeDistance","uniqEdgeSelection","SelectionDensity","nodelength","selectneighbors","onEdgeBrushStart","sourceEvent","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","selectAll","brushBounds","each","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","SVGBrush","extent","getEventMouse","_this$edgesvg$getBoun","brushType","onBrushStart","onBrush","onBrushEnd","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","x0","y0","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","input","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","tickFormat","ti","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","column1","column2","header","csvarray","selectionNodeID","circles","svg","nodecx","nodecy","renderBrush","_this$svg$getBounding","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","XYSelect","allComputedPropertiesKeyList","RenderCircles","Axis","axis","axisBottom","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","renderCircles","cluster","ci","cx","cy","onMouseOver","_e$target$getAttribut","_e$target$getAttribut2","sourceid","targetid","onMouseLeave","_e$target$getAttribut3","_e$target$getAttribut4","dataset","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","StatGroupPanel","fromCharCode","runShortestPath","pairdist","Sidebar","cityName","getElementsByClassName","SidebarMenu","openCity","colspan","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","keydown","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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yB,iBAC1CC,KAAM,CAAExc,KAAM,IAAK3W,MAAOI,KAAK+yB,MAC/BC,IAAK,CAAEzc,KAAM,IAAK3W,MAAOI,KAAKgzB,KAC9BC,UAAW,CACT1c,KAAM,KACN3W,MAAO,IAAIiwB,EAAMgD,QAAQ7yB,KAAKizB,UAAU,GAAIjzB,KAAKizB,UAAU,KAE7DC,QAAS,CAAE3c,KAAM,IAAK3W,MAAOI,KAAKkzB,SAClCC,WAAY,CAAE5c,KAAM,IAAK3W,MAAOI,KAAKmzB,YACrCC,UAAW,CAAE7c,KAAM,IAAK3W,MAAOI,KAAKozB,YAEtCI,aA9JuB,CACvB,yBACA,GACA,2BACA,2BACA,uBACA,wBACA,yBACA,qBACA,4BACA,GACA,iCACA,gCACA,2BACA,2BACA,sBACA,yBACA,sBACA,qBACA,iCACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,qCACA,GACA,6BACA,uBACA,2BACA,kBACA,GACA,IACA,GACA,gBACA,GACA,kDACA,2EACA,GACA,uCACA,gBACA,GACA,mDACA,sDACA,gDACA,4CACA,GACA,oDACA,2CACA,2CACA,GACA,2DACA,sDACA,GACA,oCACA,uCACA,QACA,GACA,gBACA,mEACA,wEACA,aACA,qDACA,qDACA,0CACA,GACA,+CACA,8CACA,6EACA,GACA,QACA,GACA,2EACA,2CACA,0BACA,wBACA,GACA,qDACA,qCACA,GACA,iEACA,mCACA,GACA,KA0EiCttB,KAAK,QACtCutB,eAxEyB,CACzB,kDACA,2BACA,GACA,yBACA,wBACA,yBACA,0BACA,4BACA,2BACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,gBACA,GACA,uBACA,oCACA,qDACA,0BACA,SACA,OACA,wBACA,mDACA,KA8CqCvtB,KAAK,UAoB5C,cAjBOksB,EAAWI,iBACXJ,EAAW1sB,WACX0sB,EAAWK,cACXL,EAAWpwB,aACXowB,EAAWO,eACXP,EAAWQ,kBACXR,EAAWU,uBACXV,EAAWW,YACXX,EAAWY,WACXZ,EAAWa,iBACXb,EAAWe,kBACXf,EAAWgB,UAElBC,EAAS9c,KAAO,mBAEhB8c,EAASK,UAAUtB,GAEZiB,GAGTxD,EAAMsC,iBAAiBjxB,UAAYyI,OAAOqM,OAAO6Z,EAAM0C,SAASrxB,WAChE2uB,EAAMsC,iBAAiBjxB,UAAUiZ,YAAc0V,EAAMsC,iBAErDtC,EAAMsC,iBAAiBjxB,UAAUyyB,KAAO,SAAStrB,GAa/C,OAZAwnB,EAAM0C,SAASrxB,UAAUyyB,KAAKnd,KAAKxW,KAAMqI,GAEzCrI,KAAKwyB,UAAYnqB,EAAOmqB,UACxBxyB,KAAK0F,IAAM2C,EAAO3C,IAClB1F,KAAKyyB,OAASpqB,EAAOoqB,OACrBzyB,KAAKgC,MAAM2xB,KAAKtrB,EAAOrG,OACvBhC,KAAK2yB,QAAUtqB,EAAOsqB,QACtB3yB,KAAK4yB,WAAWe,KAAKtrB,EAAOuqB,YAC5B5yB,KAAK8yB,gBAAkBzqB,EAAOyqB,gBAC9B9yB,KAAK+yB,KAAO1qB,EAAO0qB,KACnB/yB,KAAKgzB,IAAM3qB,EAAO2qB,IAEXhzB,MAGTwU,EAAQ8b,SAAWT,EAAMS,SACzB9b,EAAQ2d,iBAAmBtC,EAAMsC,kB,oBChbjC,IAAIyB,EAAM5R,EAAQ,IAAa6R,QAC3BhE,EAAQ+D,EAAI/D,MAOClvB,GANNizB,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,GACJH,EAAI1iB,GACL8Q,EAAQ,KACcA,EAAQ,GAA9B6R,SAERG,EAAOxf,QAAU,SAAUmB,GACzBA,EAAKse,WAAa,SAAUtrB,GAC1BgN,EAAKue,SAAWvrB,EAChBgN,EAAKxL,UAAY,CAACxB,GAClBA,EAAK0B,WAAW8pB,YAAa,EAC7Bxe,EAAKye,gBAAgBze,EAAK0e,OAAQ1e,EAAK2e,SAMzC3e,EAAKsK,eAAiB,WACpB,IAAK,IAAIxS,EAAI,EAAGA,EAAIkI,EAAKxL,UAAUpF,OAAQ0I,IACzCkI,EAAKxL,UAAUsD,GAAGpD,WAAW8pB,YAAa,EACrCP,EAAIW,kBAGP5e,EAAKxL,UAAUsD,GAAGpD,WAAWC,YAAY+oB,SAASrxB,MAAMquB,IACtD,IAAIR,EAAM6C,MAAM/c,EAAKxL,UAAUsD,GAAGpD,WAAWrI,QAH/C2T,EAAKxL,UAAUsD,GAAGpD,WAAWC,YAAYC,SAAS,GAAGC,SAAU,EAMjEmL,EAAKxL,UAAUsD,GAAGpD,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQC,QAAS,EAEvE/e,EAAKxL,UAAY,IAInBwL,EAAKgf,uBAAyB,SAAUxqB,GAEtC,IADA,IAAMyqB,EAAc,GACXnnB,EAAI,EAAGA,EAAItD,EAAUpF,OAAQ0I,IACjCtD,EAAUsD,IAAMtD,EAAUsD,GAAGonB,UAC9B1qB,EAAUsD,GAAGonB,SAASvuB,SAAQ,SAAUC,IACG,IAApC4D,EAAU1E,QAAQc,EAAK8B,UAAsD,IAApC8B,EAAU1E,QAAQc,EAAKiC,SAAmBjC,EAAK8B,SAAS9B,EAAKiC,SAAwC,GAA9BosB,EAAYnvB,QAAQc,IACvIquB,EAAYpuB,KAAKD,MAKzB,OAAOquB,GAGTjf,EAAKmf,iCAAmC,SAAU3qB,GAGhD,IAFA,IAAMyqB,EAAc,GACdG,EAAW,GACRtnB,EAAI,EAAGA,EAAItD,EAAUpF,OAAQ0I,IACjCtD,EAAUsD,IAAMtD,EAAUsD,GAAGonB,UAC9B1qB,EAAUsD,GAAGonB,SAASvuB,SAAQ,SAAUC,GACtC,IAAMyuB,EAAI,GAAA/vB,OAAMsB,EAAK8B,OAAOQ,GAAE,iBAAA5D,OAAMsB,EAAKiC,OAAOK,IAC1CosB,EAAI,GAAAhwB,OAAMsB,EAAKiC,OAAOK,GAAE,iBAAA5D,OAAMsB,EAAK8B,OAAOQ,KACP,IAApCsB,EAAU1E,QAAQc,EAAK8B,UAAsD,IAApC8B,EAAU1E,QAAQc,EAAKiC,SAAmBjC,EAAK8B,SAAS9B,EAAKiC,SAAqC,GAA3BusB,EAAStvB,QAAQuvB,KACpIJ,EAAYpuB,KAAKD,GACjBwuB,EAASvuB,KAAKwuB,GACdD,EAASvuB,KAAKyuB,OAMtB,OAAOL,GAKVjf,EAAKuf,wBAA0B,WAC9B,GAAIvf,EAAKwf,gBAAgBpwB,OAAS,EAChC,GAAmC,GAA/B4Q,EAAKwf,gBAAgBpwB,QAAepE,EAASC,MAAMw0B,gBAAiB,CACtE,IAAMlnB,EAA4B,SAACR,EAAMC,EAAMC,EAAMC,GACnD,IAAI7G,EAAI,oBACJ8G,EAAItG,KAAKuG,IACTZ,EAAI,GAAMW,GAAGF,EAAOF,GAAQ1G,GAAK,EACnC8G,EAAEJ,EAAO1G,GAAK8G,EAAEF,EAAO5G,IACtB,EAAI8G,GAAGD,EAAOF,GAAQ3G,IAAM,EAE/B,OAAO,MAAQQ,KAAKwG,KAAKxG,KAAKyG,KAAKd,KAIjC3K,EAAM,EACVmT,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrB,IAAI+tB,EAAOnnB,EAA0B5G,EAAE8J,KAAKzP,IAAIsK,KAAM3E,EAAE8J,KAAKzP,IAAIoK,KAAK4J,EAAKwf,gBAAgB,GAAG/jB,KAAKzP,IAAIsK,KAAM0J,EAAKwf,gBAAgB,GAAG/jB,KAAKzP,IAAIoK,MAC1IspB,EAAO7yB,IACTA,EAAM6yB,MAGV1f,EAAK/U,MAAM8P,aAAY,SAAApJ,GAErB,IAAI+tB,EAAOnnB,EAA0B5G,EAAE8J,KAAKzP,IAAIsK,KAAM3E,EAAE8J,KAAKzP,IAAIoK,KAAK4J,EAAKwf,gBAAgB,GAAG/jB,KAAKzP,IAAIsK,KAAM0J,EAAKwf,gBAAgB,GAAG/jB,KAAKzP,IAAIoK,MAC9IhL,QAAQC,IAAIsG,EAAE8J,KAAKzP,IAAIsK,KAAM3E,EAAE8J,KAAKzP,IAAIoK,KAAK4J,EAAKwf,gBAAgB,GAAS,KAAExf,EAAKwf,gBAAgB,GAAS,MAC3Gxf,EAAK2f,UAAUhuB,EAAG,KACN,GAAR+tB,EACF1f,EAAK4f,iBAAiBjuB,EAAG,GAChB+tB,EAAO7yB,EAAI,EACpBmT,EAAK4f,iBAAiBjuB,EAAG,IACjB+tB,EAAQ,EAAE7yB,EAAK,EACvBmT,EAAK4f,iBAAiBjuB,EAAG,IACjB+tB,EAAQ,EAAE7yB,EAAK,EACvBmT,EAAK4f,iBAAiBjuB,EAAG,IAGzBqO,EAAK4f,iBAAiBjuB,EAAG,WAM1B,CACLqO,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrBqO,EAAK4f,iBAAiBjuB,EAAG,OAM3BqO,EAAK6f,YAAYlvB,SAAQ,SAAUC,GACjCA,EAAKkvB,UAAUC,EAAI/f,EAAK5V,SAAW,IAAO,IAC1CwG,EAAKkvB,UAAU/S,EAAI/M,EAAK5V,SAAW,IAAO,IAC1CwG,EAAKkvB,UAAUroB,EAAIuI,EAAK5V,SAAW,IAAO,OAS5C,IALA,IAAI41B,EAAM,IAAI9F,EAAM6C,MAAM/xB,EAASC,MAAMiC,MAAMb,OAAO0zB,EAClDE,EAAO,IAAI/F,EAAM6C,MAAM/xB,EAASC,MAAMiC,MAAMb,OAAO0gB,EACnDmT,EAAQ,IAAIhG,EAAM6C,MAAM/xB,EAASC,MAAMiC,MAAMb,OAAOoL,EAClDwnB,EAAcjf,EAAKgf,uBAAuBhf,EAAKwf,iBAE5C1nB,EAAI,EAAGA,EAAImnB,EAAY7vB,OAAQ0I,IACtCmnB,EAAYnnB,GAAGgoB,UAAUC,EAAIC,EAC7Bf,EAAYnnB,GAAGgoB,UAAU/S,EAAIkT,EAC7BhB,EAAYnnB,GAAGgoB,UAAUroB,EAAIyoB,EAE/BlgB,EAAKmgB,MAAMzC,SAASrxB,MAAM+zB,OAAOJ,EAAKC,EAAMC,GAG5C,IAASpoB,EAAI,EAAGA,EAAIkI,EAAKwf,gBAAgBpwB,OAAQ0I,IAC/CkI,EAAK4f,iBAAiB5f,EAAKwf,gBAAgB1nB,GAAI,QAKjDkI,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrBqO,EAAK4f,iBAAiBjuB,EAAG,OAG3BqO,EAAKqgB,cAAc,OAMrBrgB,EAAKqK,uBAAyB,WAE5B,GAAIrK,EAAKxL,UAAUpF,OAAS,EAC1B,GAA6B,GAAzB4Q,EAAKxL,UAAUpF,QAAepE,EAASC,MAAMw0B,gBAAiB,CAChE,IAAMlnB,EAA4B,SAACR,EAAMC,EAAMC,EAAMC,GACnD,IAAI7G,EAAI,oBACJ8G,EAAItG,KAAKuG,IACTZ,EAAI,GAAMW,GAAGF,EAAOF,GAAQ1G,GAAK,EACnC8G,EAAEJ,EAAO1G,GAAK8G,EAAEF,EAAO5G,IACtB,EAAI8G,GAAGD,EAAOF,GAAQ3G,IAAM,EAE/B,OAAO,MAAQQ,KAAKwG,KAAKxG,KAAKyG,KAAKd,KAIjC3K,EAAM,EACVmT,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrB,IAAI+tB,EAAOnnB,EAA0B5G,EAAE8J,KAAKzP,IAAIsK,KAAM3E,EAAE8J,KAAKzP,IAAIoK,KAAK4J,EAAKxL,UAAU,GAAGiH,KAAKzP,IAAIsK,KAAM0J,EAAKxL,UAAU,GAAGiH,KAAKzP,IAAIoK,MAC9HspB,EAAO7yB,IACTA,EAAM6yB,MAGV1f,EAAK/U,MAAM8P,aAAY,SAAApJ,GAErB,IAAI+tB,EAAOnnB,EAA0B5G,EAAE8J,KAAKzP,IAAIsK,KAAM3E,EAAE8J,KAAKzP,IAAIoK,KAAK4J,EAAKxL,UAAU,GAAGiH,KAAKzP,IAAIsK,KAAM0J,EAAKxL,UAAU,GAAGiH,KAAKzP,IAAIoK,MAClIhL,QAAQC,IAAIsG,EAAE8J,KAAKzP,IAAIsK,KAAM3E,EAAE8J,KAAKzP,IAAIoK,KAAK4J,EAAKxL,UAAU,GAAS,KAAEwL,EAAKxL,UAAU,GAAS,MAC/FwL,EAAK2f,UAAUhuB,EAAG,KACN,GAAR+tB,EACF1f,EAAK4f,iBAAiBjuB,EAAG,GAChB+tB,EAAO7yB,EAAI,EACpBmT,EAAK4f,iBAAiBjuB,EAAG,IACjB+tB,EAAQ,EAAE7yB,EAAK,EACvBmT,EAAK4f,iBAAiBjuB,EAAG,IACjB+tB,EAAQ,EAAE7yB,EAAK,EACvBmT,EAAK4f,iBAAiBjuB,EAAG,IAGzBqO,EAAK4f,iBAAiBjuB,EAAG,WAM1B,CACLqO,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrBqO,EAAK4f,iBAAiBjuB,EAAG,OAM3BqO,EAAK6f,YAAYlvB,SAAQ,SAAUC,GACjCA,EAAKkvB,UAAUC,EAAI/f,EAAK5V,SAAW,IAAO,IAC1CwG,EAAKkvB,UAAU/S,EAAI/M,EAAK5V,SAAW,IAAO,IAC1CwG,EAAKkvB,UAAUroB,EAAIuI,EAAK5V,SAAW,IAAO,OAS5C,IALA,IAAI41B,EAAM,IAAI9F,EAAM6C,MAAM/xB,EAASC,MAAMiC,MAAMb,OAAO0zB,EAClDE,EAAO,IAAI/F,EAAM6C,MAAM/xB,EAASC,MAAMiC,MAAMb,OAAO0gB,EACnDmT,EAAQ,IAAIhG,EAAM6C,MAAM/xB,EAASC,MAAMiC,MAAMb,OAAOoL,EAClDwnB,EAAcjf,EAAKgf,uBAAuBhf,EAAKxL,WAE5CsD,EAAI,EAAGA,EAAImnB,EAAY7vB,OAAQ0I,IACtCmnB,EAAYnnB,GAAGgoB,UAAUC,EAAIC,EAC7Bf,EAAYnnB,GAAGgoB,UAAU/S,EAAIkT,EAC7BhB,EAAYnnB,GAAGgoB,UAAUroB,EAAIyoB,EAE/BlgB,EAAKmgB,MAAMzC,SAASrxB,MAAM+zB,OAAOJ,EAAKC,EAAMC,GAG5C,IAASpoB,EAAI,EAAGA,EAAIkI,EAAKxL,UAAUpF,OAAQ0I,IACzCkI,EAAK4f,iBAAiB5f,EAAKxL,UAAUsD,GAAI,QAM3CkI,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrBqO,EAAK4f,iBAAiBjuB,EAAG,MAG3BqO,EAAKqgB,cAAc,OAKvBrgB,EAAKsgB,mBAAqB,SAAUttB,GAClC,GAAIA,EAAO,CACTgN,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrBqO,EAAK4f,iBAAiBjuB,EAAG,OA2B3B,IADA,IAAM4uB,EAAgBvgB,EAAKwgB,0BAA0BxtB,GAC5C8E,EAAI,EAAGA,EAAIyoB,EAAcnxB,OAAQ0I,IACxCkI,EAAK4f,iBAAiBW,EAAczoB,GAAI,GAc5CkI,EAAKqgB,cAAcrtB,KAOrBgN,EAAKwgB,0BAA4B,SAAUxtB,GACzC,IAAMytB,EAAe,GACfC,EAAQ,GACRC,EAAM,GACZ,GAAK3tB,EAAL,CACA,IAAK,IAAI8E,EAAI,EAAGA,EAAI9E,EAAKtC,MAAMtB,OAAQ0I,IACrC4oB,EAAM7vB,KAAKmC,EAAKtC,MAAMoH,GAAGhH,QACzB6vB,EAAI9vB,KAAKmC,EAAKtC,MAAMoH,GAAG/G,MAOzB,OALAiP,EAAK/U,MAAM8P,aAAY,SAAApJ,IACO,GAAxB+uB,EAAM5wB,QAAQ6B,EAAEuB,MAAmC,GAAtBytB,EAAI7wB,QAAQ6B,EAAEuB,KAC7CutB,EAAa5vB,KAAKc,MAGf8uB,IAQTzgB,EAAKye,gBAAkB,SAAUC,EAAQC,EAAQnqB,GAC/C,GAAIwL,EAAKue,SACP,IAAIqC,EAAQlC,EAAS1e,EAAKue,SAASlxB,EAC/BwzB,EAAQlC,EAAS3e,EAAKue,SAASjxB,EAIrC,IAAIwzB,EAActsB,EAElB,GAAIssB,IAAgBA,EAAYC,QAAS,CACvCD,EAAYC,SAAU,EACtBD,EAAYE,SAAU,EACtBh2B,EAASC,MAAMmc,WAAa0Z,EAC5B9gB,EAAKihB,cAAcH,GAAa,GAChC9gB,EAAKkhB,eAAeJ,GAAa,GACjC,IAAMP,EAAgBvgB,EAAKwgB,0BAA0BM,GACrD9gB,EAAKxL,UAAY+rB,EACjBn1B,QAAQC,IAAI2U,EAAKxL,gBACRssB,GAAeA,EAAYC,UAEpCD,EAAYC,SAAU,EACtBD,EAAYE,SAAU,EACtBh2B,EAASC,MAAMmc,WAAa,KAE5BpH,EAAKxL,UAAY,IAiBnB,IAAK,IAAIsD,EAAI,EAAGA,EAAIkI,EAAKxL,UAAUpF,OAAQ0I,IACrCkI,EAAKue,WACPve,EAAKxL,UAAUsD,GAAGzK,GAAKuzB,EACvB5gB,EAAKxL,UAAUsD,GAAGxK,GAAKuzB,EACvB7gB,EAAKxL,UAAUsD,GAAGqpB,GAAKnhB,EAAKxL,UAAUsD,GAAGzK,EACzC2S,EAAKxL,UAAUsD,GAAGspB,GAAKphB,EAAKxL,UAAUsD,GAAGxK,EAEpCwzB,IACH9gB,EAAKxL,UAAUsD,GAAGipB,SAAU,EAC5B/gB,EAAKxL,UAAUsD,GAAGkpB,SAAU,IAG3B/C,EAAIW,kBAGP5e,EAAKxL,UAAUsD,GAAGpD,WAAWC,YAAY+oB,SAASrxB,MAAMquB,IACtD,IAAIR,EAAM6C,MAAM/c,EAAKxL,UAAUsD,GAAGpD,WAAWrI,QAH/C2T,EAAKxL,UAAUsD,GAAGpD,WAAWC,YAAYC,SAAS,GAAGC,SAAU,EAQjEmL,EAAKxL,UACHsD,GACApD,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQC,QAAS,GAWzD/e,EAAKqhB,eAAiB,SAAU3C,EAAQC,GACtC,IAAK3e,EAAKue,SAAU,CAElB,GADAve,EAAKshB,SAAW,IAAIpH,EAAMqH,QAAQ7C,EAAQC,EAAQ,GAC9C3e,EAAKwhB,WAAWn0B,EAAI2S,EAAKshB,SAASj0B,EACpC,IAAIuP,EAAOoD,EAAKwhB,WACZC,EAAQzhB,EAAKshB,cAEb1kB,EAAOoD,EAAKshB,SACZG,EAAQzhB,EAAKwhB,WAGnBxhB,EAAK/U,MAAM8P,aAAY,SAAU/H,GAC/B,IAAI0uB,EACuB,UAAvB1hB,EAAK2hB,QAAQC,OACfF,EAAO1hB,EAAK6hB,MAAMC,gBAAgB9uB,EAAKE,IACP,MAAvB8M,EAAK2hB,QAAQC,SACtBF,EAAO1uB,GAELgN,EAAK+hB,UAAUnlB,EAAM6kB,EAAOC,EAAKr0B,EAAGq0B,EAAKp0B,IAC3C0S,EAAKxL,UAAU3D,KAAKmC,QAY5BgN,EAAK+hB,UAAY,SAAUpW,EAAGoU,EAAGiC,EAAMC,GACrC,OACED,EAAOjC,EAAE1yB,GACT20B,EAAOrW,EAAEte,IACP40B,EAAOlC,EAAEzyB,GAAK20B,EAAOtW,EAAEre,GAAO20B,EAAOlC,EAAEzyB,GAAK20B,EAAOtW,EAAEre,M,oBC9a7D,IAAI6N,EAAQkR,EAAQ,KAAiBlR,MAErC0D,EAAQ1D,MAAQA,EAEhB,IAAIlQ,EAAQohB,EAAQ,KAAqB6V,gBAAgB,GAEzDrjB,EAAQ5T,MAAQA,EAEZ2b,SACFA,OAAOub,KAAOtjB,I,oBCThBwf,EAAOxf,QAAU,IAA0B,0C,oBCA3Cwf,EAAOxf,QAAU,IAA0B,yC,i7ooRCA3C,uDAEayJ,EAAU8Z,IAAQ/hB,OAAO,CACpC0b,SAAUsG,IAASC,O,yDCHrB,IAAIpI,EAAQ7N,EAAQ,KAChBkW,EAAQlW,EAAQ,KACpBzF,OAAOsT,MAAQA,EACf7N,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KAIR,IAAImB,EAAOnB,EAAQ,KAAoBmB,KACnC8L,EAAOjN,EAAQ,KAAoBiN,KACnC6E,EAAgB9R,EAAQ,IAARA,CAAoC6N,GACxDA,EAAMS,SAAWtO,EAAQ,KAA6BsO,SACtDT,EAAMsC,iBAAmBnQ,EAAQ,KAA6BmQ,iBAC9D,IAAI4B,EAAK/R,EAAQ,IACb9Q,EAAK8Q,EAAQ,KACMA,EAAQ,IAAmBxgB,iBAElDgT,EAAQqf,QAAU,CAChBhE,MAAOA,EACPS,SAAUT,EAAMS,SAChB6B,iBAAkBtC,EAAMsC,iBAIxB+F,MAAOA,EACPC,YAAY,EACZhV,KAAMA,EACN8L,KAAMA,EACN6E,cAAeA,EACfC,GAAIA,EACJ7iB,GAAIA,EACJknB,WAAY,MACZC,eAAgB,MAEhBC,mBAAoB,QACpBC,iBAAkB,SAClBC,cAAe,iCACfC,aAAc,iCACdC,cAAc,EACdC,aAAa,EACbC,gBAAgB,EAChBC,eAAe,EACftE,mBAAmB,EACnBuE,yBAAyB,EACzBC,WAAY,SACZC,YAAa,SACbC,UAAW,EACXC,eAAgB,EAChBC,OAAQ,KACRC,MAAO,UACPC,KAAK,EACLC,+BAAgC,GAChCC,YAAY,EACZC,UAAW,IACXC,cAAe,IACfC,cAAe,IACfC,gBAAiB,yBACjBC,aAAc,IACdC,gBAAgB,EAChBC,UAAW,W,4DC5DU9X,EAAQ,GAAvB7gB,WAAR,IAEIyyB,EAAM5R,EAAQ,IAAa6R,QAE3BhE,GADU7N,EAAQ,KAAW+X,MACrBnG,EAAI/D,OACZqI,EAAQtE,EAAIsE,MACZC,EAAavE,EAAIuE,WAIjBpE,GAHOH,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,IACT7iB,EAAK0iB,EAAI1iB,GA6ObsD,EAAQ1D,MA3OI,SAASlQ,EAAO02B,GAE1B,IAAI3hB,EAAO3V,KACXW,SAASC,MAAM6P,QAAUzQ,KAEzBA,KAAKg6B,QAAUp5B,EACfZ,KAAKs3B,QAAUA,GAAW,CACxBC,OAAQ3D,EAAIuF,QAEdn5B,KAAKi6B,eAAiBj6B,KAAKs3B,QAAQ4C,aAAe,GAElDl6B,KAAKm6B,YAAc,GACnBn6B,KAAKw1B,YAAc,GACnBx1B,KAAKo6B,UAAY,IACjBp6B,KAAKq6B,cAAgB,IAAIxK,EAAMyK,cAC/Bt6B,KAAKq6B,cAAcE,aAAc,EACjCv6B,KAAKw6B,cAAgB,EAErBx6B,KAAKmK,UAAY,GAEjBnK,KAAKy6B,IAAM,GACXz6B,KAAK+yB,KAAO,EACZ/yB,KAAKgzB,IAAM,IACXhzB,KAAKm3B,WAAa,IAAItH,EAAMqH,QAAQ,EAAG,EAAG,GAC1Cl3B,KAAKi3B,SAAW,IAAIpH,EAAMqH,QAAQ,EAAG,EAAG,GACxCl3B,KAAKk0B,SAAW,KAChBl0B,KAAK06B,SAAU,EACf16B,KAAK26B,YAAc,IACnB36B,KAAK46B,aAAe,IACpB56B,KAAK66B,QAAU,IACf76B,KAAK+P,QAAS,EACd/P,KAAK86B,WAAY,EACjB96B,KAAKkR,GAAKA,EAAG,IACblR,KAAK+6B,YAAa,EAClB/6B,KAAK2C,UAAY,EACjB3C,KAAKg7B,iBAAmB,EACxBh7B,KAAKi7B,WAAarH,EAAIyF,IACtBr5B,KAAKk7B,0BAA4BtH,EAAI0F,+BACrCt5B,KAAKD,UAAW,EAChBC,KAAKm7B,SAAW,KAChBn7B,KAAK6R,iBAAmB,KACxB7R,KAAKo7B,qBAAuBxH,EAAIkF,wBAChC94B,KAAKq7B,eAAiB,GACtBr7B,KAAKs7B,KAAO,KAEZtZ,EAAQ,IAARA,CAAyBhiB,MACzBgiB,EAAQ,IAARA,CAAmBhiB,MACnBgiB,EAAQ,IAARA,CAAuBhiB,MACvBgiB,EAAQ,IAARA,CAA0BhiB,MAC1BgiB,EAAQ,IAARA,CAAoBhiB,MACpBgiB,EAAQ,IAARA,CAAmBhiB,MACnBgiB,EAAQ,IAARA,CAAoBhiB,MACpBgiB,EAAQ,IAARA,CAAkBhiB,MAClBgiB,EAAQ,IAARA,CAAiBhiB,MACjBgiB,EAAQ,IAARA,CAAoBhiB,MAKpB,IAAIu7B,EAAQ,IAAIrD,EAChBl4B,KAAKiR,QAAU,WACTknB,IACFoD,EAAMC,UAAU,GAChBC,SAASzd,KAAK0d,YAAYH,EAAMI,MAElC37B,KAAK47B,WAYP57B,KAAK47B,QAAU,WACTzD,GACFoD,EAAMM,QAGRlmB,EAAKmmB,SAASC,SACdpmB,EAAKqmB,SAED7D,GACFoD,EAAMU,MAURC,sBAAsBvmB,EAAKimB,UAM7B57B,KAAKgR,KAAO,WAAqB,IAAZsgB,IAAErI,UAAAlkB,OAAA,QAAAmF,IAAA+e,UAAA,KAAAA,UAAA,GACrBtT,EAAKwmB,SAAW,IAAItM,EAAMuM,cAAc,CACtCC,OAAO,EACPC,UAAWhL,EACXiL,uBAAuB,IAEzB5mB,EAAK6mB,gBAAkB,IAAI3M,EAAMuM,cAAc,CAC7CC,OAAO,EACPC,UAAWhL,EACXiL,uBAAuB,IAIzB5mB,EAAK8mB,mBACL9mB,EAAK+mB,oBAEL/mB,EAAKgnB,cACLhnB,EAAKinB,eACLjnB,EAAKknB,gBACLlnB,EAAKmnB,cAGLnnB,EAAK8e,QAAQsI,UAAY,GACzBpnB,EAAK8e,QAAQiH,YAAY/lB,EAAKwmB,SAASa,YACvCrnB,EAAK8e,QAAQiH,YAAY/lB,EAAKsnB,YAAYD,YAC1CrnB,EAAK8e,QAAQiH,YAAY/lB,EAAK6mB,gBAAgBQ,YAE9CrnB,EAAKunB,cAELvnB,EAAKwnB,aAEL5gB,OAAOiD,iBACL,UACA,SAAS9X,GACPA,EAAE01B,iBACFznB,EAAK0nB,oBAEP,GAEF9gB,OAAOiD,iBACL,QACA,SAAS9X,GACPA,EAAE01B,iBACFznB,EAAK0nB,oBAEP,IAOJ1nB,EAAK0nB,eAAiB,WACpB1nB,EAAK2nB,WAAa3nB,EAAK8e,QAAQ8I,wBAC/B5nB,EAAK8a,MAAQ9a,EAAK2nB,WAAW7M,MAC7B9a,EAAK6nB,OAAS7nB,EAAK2nB,WAAWE,OAC9B7nB,EAAK8nB,QAAQhN,MAAQ,GAAM9a,EAAK6nB,OAChC7nB,EAAK8nB,QAAQD,OAAS,GAAM7nB,EAAK6nB,OACjC7nB,EAAK+nB,OAAS/nB,EAAK8a,MAAQ9a,EAAK6nB,OAChC7nB,EAAKgoB,QAAQD,OAAS/nB,EAAK+nB,OAC3B/nB,EAAKgoB,QAAQC,yBAEbjoB,EAAKwmB,SAAS0B,QAAQloB,EAAK8a,MAAO9a,EAAK6nB,QACvC7nB,EAAKsnB,YAAYY,QAAQloB,EAAK8a,MAAO9a,EAAK6nB,QAC1C7nB,EAAK6mB,gBAAgBqB,QAAQ,GAAMloB,EAAK6nB,OAAQ,GAAM7nB,EAAK6nB,SAM7D,IAAIM,EAAQ,EACRC,EAAoC,EACxC/9B,KAAKg8B,OAAS,WAWZ,GAVArmB,EAAKqoB,eACLroB,EAAKsoB,cAEQ,GAATH,IACFnoB,EAAKuoB,eACLvoB,EAAKwoB,cACLL,EAAQ,GAEVA,GAAS,EACTC,GAAqC,EACV,MAAvBpoB,EAAK2hB,QAAQC,QACQ,GAAnB5hB,EAAKolB,WAAoB,CAC3B,IAAIj5B,EAAQ,GAQZ,GAPA6T,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9B7G,EAAM0E,KAAKmC,MAEbgN,EAAK6hB,MAAM11B,MAAMA,GACjB6T,EAAK6hB,MAAMA,MAAM,OAAQzD,EAAGqK,UAAUzoB,EAAK6f,cAC3C7f,EAAK6hB,MAAM6G,UACX1oB,EAAK6hB,MAAMrc,OACPxF,EAAK2oB,eAAiB3oB,EAAK5F,OAE7B,IACE,IAAItC,EAAI,EACNnG,EAAIE,KAAK+2B,KACP/2B,KAAKxG,IAAI2U,EAAK6hB,MAAMgH,YAClBh3B,KAAKxG,IAAI,EAAI2U,EAAK6hB,MAAMiH,eAE9BhxB,EAAInG,IACFmG,EAEFkI,EAAK6hB,MAAMkH,OAIf/oB,EAAKolB,YAAa,EAGtBplB,EAAKwmB,SAASwC,YAAY,EAAG,EAAGhpB,EAAK8a,MAAO9a,EAAK6nB,QACjD7nB,EAAKwmB,SAASyC,WAAW,EAAG,EAAGjpB,EAAK8a,MAAO9a,EAAK6nB,QAChD7nB,EAAKwmB,SAAS0C,gBAAe,GAC7BlpB,EAAKwmB,SAASH,OAAOrmB,EAAKmpB,MAAOnpB,EAAKgoB,SACtChoB,EAAKsnB,YAAYjB,OAAOrmB,EAAKmpB,MAAOnpB,EAAKgoB,SAGrCI,GAAqC/9B,KAAKk7B,4BAC5C6C,EAAoC,EAEhCpoB,EAAKslB,aACPtlB,EAAK8nB,QAAQhN,MAAQ,GAAM9a,EAAK6nB,OAChC7nB,EAAK8nB,QAAQD,OAAS,GAAM7nB,EAAK6nB,OACjC7nB,EAAK6mB,gBAAgBmC,YAAY,EAAG,EAAGhpB,EAAK8nB,QAAQhN,MAAO9a,EAAK8nB,QAAQD,QACxE7nB,EAAK6mB,gBAAgBoC,WAAW,EAAG,EAAGjpB,EAAK8nB,QAAQhN,MAAO9a,EAAK8nB,QAAQD,QACvE7nB,EAAK6mB,gBAAgBqC,gBAAe,GACpClpB,EAAK6mB,gBAAgBR,OAAOrmB,EAAKmpB,MAAOnpB,EAAK8nB,QAAQsB,a,mBC3O7D,WAIE,SAASC,IACPh/B,KAAKi/B,WAAa,EAElBj/B,KAAKk/B,MAAQ,GACbl/B,KAAKm/B,SAAW,GAYhBn/B,KAAKo/B,SAAW,IAAIC,EACpBr/B,KAAKs/B,WAAa,IAAID,EAEtBr/B,KAAKkxB,SAAW,GAooBlB,SAASqO,IACPv/B,KAAKw/B,OAAS,IAAI3P,MAAMqH,QACxBl3B,KAAKy/B,SAAW,IAAI5P,MAAMqH,QAC1Bl3B,KAAK0/B,KAAO,EAEZ1/B,KAAK2/B,SAAW,EAChB3/B,KAAK4/B,QAAU,KACf5/B,KAAKqa,KAjqBO,EAkqBZra,KAAK6/B,KAAO,KAuEd,SAASC,EAASC,EAAQC,GACxBhgC,KAAK+/B,OAASA,EACd//B,KAAKib,KAAO,KACZjb,KAAK+Y,KAAO,KACZ/Y,KAAKigC,KAAO,KACZjgC,KAAKggC,KAAOA,EA4Cd,SAASE,EAAWC,GAClBngC,KAAKmgC,MAAQA,EACbngC,KAAKib,KAAO,KACZjb,KAAK+Y,KAAO,KACZ/Y,KAAKggC,KAAO,KAKd,SAASX,IACPr/B,KAAKogC,KAAO,KACZpgC,KAAKqgC,KAAO,KA5wBd12B,OAAO22B,OAAOtB,EAAU99B,UAAW,CACjCq/B,cAAe,SAASC,IACQ,IAA1Bt1B,MAAMu1B,QAAQD,IAChBz/B,QAAQiX,MAAM,sDAGZwoB,EAAOz7B,OAAS,GAClBhE,QAAQiX,MACN,8DAIJhY,KAAK0gC,YAEL,IAAK,IAAIjzB,EAAI,EAAG6T,EAAIkf,EAAOz7B,OAAQ0I,EAAI6T,EAAG7T,IACxCzN,KAAKkxB,SAAS1qB,KAAK,IAAI05B,EAAWM,EAAO/yB,KAK3C,OAFAzN,KAAK2gC,UAEE3gC,MAGT4gC,cAAe,SAAS/lB,GACtB,IAAI2lB,EAAS,GAqCb,OAnCA3lB,EAAOgmB,mBAAkB,GAEzBhmB,EAAOimB,UAAS,SAASn4B,GACvB,IAAI8E,EAAG6T,EAAG6e,EAENtP,EAAWloB,EAAKkoB,SAEpB,QAAiB3mB,IAAb2mB,EACF,GAAIA,EAASkQ,WAAY,CACvB,IAAI7P,EAAWL,EAASK,SAExB,IAAKzjB,EAAI,EAAG6T,EAAI4P,EAASnsB,OAAQ0I,EAAI6T,EAAG7T,KACtC0yB,EAAQjP,EAASzjB,GAAGuzB,SACdC,aAAat4B,EAAKu4B,aAExBV,EAAOh6B,KAAK25B,QAET,GAAItP,EAASsQ,iBAAkB,CACpC,IAAIC,EAAYvQ,EAAStE,WAAWmF,SAEpC,QAAkBxnB,IAAdk3B,EACF,IAAK3zB,EAAI,EAAG6T,EAAI8f,EAAUC,MAAO5zB,EAAI6T,EAAG7T,KACtC0yB,EAAQ,IAAItQ,MAAMqH,SAGfoK,oBAAoBF,EAAW3zB,GAC/BwzB,aAAat4B,EAAKu4B,aAErBV,EAAOh6B,KAAK25B,OAOfngC,KAAKugC,cAAcC,IAG5BE,UAAW,WAIT,OAHA1gC,KAAKk/B,MAAQ,GACbl/B,KAAKkxB,SAAW,GAETlxB,MAKTuhC,gBAAiB,SAASxB,EAAQC,GAWhC,OAVAD,EAAOC,KAAOA,EAEO,OAAjBA,EAAKJ,QACP5/B,KAAKo/B,SAASoC,OAAOzB,GAErB//B,KAAKo/B,SAASqC,aAAazB,EAAKJ,QAASG,GAG3CC,EAAKJ,QAAUG,EAER//B,MAKT0hC,qBAAsB,SAAS3B,EAAQC,GAiBrC,OAhBID,IAAWC,EAAKJ,UAGE,OAAhBG,EAAOhnB,MAAiBgnB,EAAOhnB,KAAKinB,OAASA,EAG/CA,EAAKJ,QAAUG,EAAOhnB,KAItBinB,EAAKJ,QAAU,MAInB5/B,KAAKo/B,SAASuC,OAAO5B,GAEd//B,MAKT4hC,0BAA2B,SAAS5B,GAClC,GAAqB,OAAjBA,EAAKJ,QAAkB,CAMzB,IAHA,IAAIiC,EAAQ7B,EAAKJ,QACb3D,EAAM+D,EAAKJ,QAEK,OAAb3D,EAAIljB,MAAiBkjB,EAAIljB,KAAKinB,OAASA,GAC5C/D,EAAMA,EAAIljB,KAUZ,OAPA/Y,KAAKo/B,SAAS0C,cAAcD,EAAO5F,GAInC4F,EAAM5mB,KAAOghB,EAAIljB,KAAO,KACxBinB,EAAKJ,QAAU,KAERiC,IAMXE,mBAAoB,SAAS/B,EAAMgC,GACjC,IAAIC,EAAejiC,KAAK4hC,0BAA0B5B,GAElD,QAAqB91B,IAAjB+3B,EACF,QAAsB/3B,IAAlB83B,EAGFhiC,KAAKs/B,WAAW4C,YAAYD,OACvB,CAGL,IAAIlC,EAASkC,EAEb,EAAG,CAID,IAAIE,EAAapC,EAAOhnB,KAETipB,EAAcI,gBAAgBrC,EAAOI,OAIrCngC,KAAKi/B,UAClBj/B,KAAKuhC,gBAAgBxB,EAAQiC,GAE7BhiC,KAAKs/B,WAAWkC,OAAOzB,GAKzBA,EAASoC,QACS,OAAXpC,GAIb,OAAO//B,MAKTqiC,wBAAyB,SAASlD,GAChC,IAAkC,IAA9Bn/B,KAAKs/B,WAAWgD,UAAqB,CACvC,IAAIvC,EAAS//B,KAAKs/B,WAAWiD,QAE7B,EAAG,CASD,IANA,IAAIJ,EAAapC,EAAOhnB,KAEpBypB,EAAcxiC,KAAKi/B,UAEnBwD,EAAU,KAELh1B,EAAI,EAAGA,EAAI0xB,EAASp6B,OAAQ0I,IAAK,CACxC,IAAIuyB,EAAOb,EAAS1xB,GAEpB,GAzNI,IAyNAuyB,EAAK3lB,KAAkB,CACzB,IAAIqoB,EAAW1C,EAAKoC,gBAAgBrC,EAAOI,OAO3C,GALIuC,EAAWF,IACbA,EAAcE,EACdD,EAAUzC,GAGRwC,EAAc,IAAOxiC,KAAKi/B,UAAW,OAM7B,OAAZwD,GACFziC,KAAKuhC,gBAAgBxB,EAAQ0C,GAG/B1C,EAASoC,QACS,OAAXpC,GAGX,OAAO//B,MAKT2iC,gBAAiB,WACf,IAMIl1B,EAAG6T,EAAGlb,EANN7D,EAAM,IAAIstB,MAAMqH,QAChB10B,EAAM,IAAIqtB,MAAMqH,QAEhB0L,EAAc,GACdC,EAAc,GAMlB,IAAKp1B,EAAI,EAAGA,EAAI,EAAGA,IACjBm1B,EAAYn1B,GAAKo1B,EAAYp1B,GAAKzN,KAAKkxB,SAAS,GAQlD,IALA3uB,EAAIoxB,KAAK3zB,KAAKkxB,SAAS,GAAGiP,OAC1B39B,EAAImxB,KAAK3zB,KAAKkxB,SAAS,GAAGiP,OAIrB1yB,EAAI,EAAG6T,EAAIthB,KAAKkxB,SAASnsB,OAAQ0I,EAAI6T,EAAG7T,IAAK,CAChD,IAAIsyB,EAAS//B,KAAKkxB,SAASzjB,GACvB0yB,EAAQJ,EAAOI,MAInB,IAAK/5B,EAAI,EAAGA,EAAI,EAAGA,IACb+5B,EAAM2C,aAAa18B,GAAK7D,EAAIugC,aAAa18B,KAC3C7D,EAAIwgC,aAAa38B,EAAG+5B,EAAM2C,aAAa18B,IACvCw8B,EAAYx8B,GAAK25B,GAMrB,IAAK35B,EAAI,EAAGA,EAAI,EAAGA,IACb+5B,EAAM2C,aAAa18B,GAAK5D,EAAIsgC,aAAa18B,KAC3C5D,EAAIugC,aAAa38B,EAAG+5B,EAAM2C,aAAa18B,IACvCy8B,EAAYz8B,GAAK25B,GAcvB,OAPA//B,KAAKi/B,UACH,EACAh4B,OAAO+7B,SACNx7B,KAAKhF,IAAIgF,KAAKy7B,IAAI1gC,EAAIS,GAAIwE,KAAKy7B,IAAIzgC,EAAIQ,IACtCwE,KAAKhF,IAAIgF,KAAKy7B,IAAI1gC,EAAIU,GAAIuE,KAAKy7B,IAAIzgC,EAAIS,IACvCuE,KAAKhF,IAAIgF,KAAKy7B,IAAI1gC,EAAI4uB,GAAI3pB,KAAKy7B,IAAIzgC,EAAI2uB,KAEpC,CAAE5uB,IAAKqgC,EAAapgC,IAAKqgC,IAMlCK,mBAAqB,WACnB,IAAIC,EAAOC,EAAOC,EAElB,OAAO,gBACSn5B,IAAVi5B,IACFA,EAAQ,IAAItT,MAAMyT,MAClBF,EAAQ,IAAIvT,MAAM0T,MAClBF,EAAe,IAAIxT,MAAMqH,SAG3B,IAAI6I,EAMAyD,EAAIC,EAAIC,EAAIC,EACZl2B,EAAG6T,EAAGlb,EAONs8B,EAbFxR,EAAWlxB,KAAKkxB,SACd0S,EAAW5jC,KAAK2iC,kBAChBpgC,EAAMqhC,EAASrhC,IACfC,EAAMohC,EAASphC,IAWjBggC,EAAc,EACZtT,EAAQ,EAEZ,IAAKzhB,EAAI,EAAGA,EAAI,EAAGA,KACjBi1B,EACElgC,EAAIiL,GAAG0yB,MAAM2C,aAAar1B,GAAKlL,EAAIkL,GAAG0yB,MAAM2C,aAAar1B,IAE5C+0B,IACbA,EAAcE,EACdxT,EAAQzhB,GAYZ,IARA+1B,EAAKjhC,EAAI2sB,GACTuU,EAAKjhC,EAAI0sB,GAITsT,EAAc,EACdW,EAAM9S,IAAImT,EAAGrD,MAAOsD,EAAGtD,OAElB1yB,EAAI,EAAG6T,EAAIthB,KAAKkxB,SAASnsB,OAAQ0I,EAAI6T,EAAG7T,KAC3CsyB,EAAS7O,EAASzjB,MAEH+1B,GAAMzD,IAAW0D,IAC9BN,EAAMU,oBAAoB9D,EAAOI,OAAO,EAAMkD,IAE9CX,EAAWW,EAAaS,kBAAkB/D,EAAOI,QAElCqC,IACbA,EAAcE,EACdgB,EAAK3D,IAUX,IAHAyC,EAAc,EACdY,EAAMW,sBAAsBP,EAAGrD,MAAOsD,EAAGtD,MAAOuD,EAAGvD,OAE9C1yB,EAAI,EAAG6T,EAAIthB,KAAKkxB,SAASnsB,OAAQ0I,EAAI6T,EAAG7T,KAC3CsyB,EAAS7O,EAASzjB,MAEH+1B,GAAMzD,IAAW0D,GAAM1D,IAAW2D,IAC/ChB,EAAWl7B,KAAKy7B,IAAIG,EAAMhB,gBAAgBrC,EAAOI,SAElCqC,IACbA,EAAcE,EACdiB,EAAK5D,GAKX,IAAIb,EAAQ,GAEZ,GAAIkE,EAAMhB,gBAAgBuB,EAAGxD,OAAS,EAYpC,IATAjB,EAAM14B,KACJ+4B,EAAKvpB,OAAOwtB,EAAIC,EAAIC,GACpBnE,EAAKvpB,OAAO2tB,EAAIF,EAAID,GACpBjE,EAAKvpB,OAAO2tB,EAAID,EAAID,GACpBlE,EAAKvpB,OAAO2tB,EAAIH,EAAIE,IAKjBj2B,EAAI,EAAGA,EAAI,EAAGA,IACjBrH,GAAKqH,EAAI,GAAK,EAIdyxB,EAAMzxB,EAAI,GAAGu2B,QAAQ,GAAGC,QAAQ/E,EAAM,GAAG8E,QAAQ59B,IAIjD84B,EAAMzxB,EAAI,GAAGu2B,QAAQ,GAAGC,QAAQ/E,EAAM94B,EAAI,GAAG49B,QAAQ,SAcvD,IATA9E,EAAM14B,KACJ+4B,EAAKvpB,OAAOwtB,EAAIE,EAAID,GACpBlE,EAAKvpB,OAAO2tB,EAAIH,EAAIC,GACpBlE,EAAKvpB,OAAO2tB,EAAIF,EAAIC,GACpBnE,EAAKvpB,OAAO2tB,EAAID,EAAIF,IAKjB/1B,EAAI,EAAGA,EAAI,EAAGA,IACjBrH,GAAKqH,EAAI,GAAK,EAIdyxB,EAAMzxB,EAAI,GAAGu2B,QAAQ,GAAGC,QAAQ/E,EAAM,GAAG8E,SAAS,EAAIv2B,GAAK,IAI3DyxB,EAAMzxB,EAAI,GAAGu2B,QAAQ,GAAGC,QAAQ/E,EAAM94B,EAAI,GAAG49B,QAAQ,IAMzD,IAAKv2B,EAAI,EAAGA,EAAI,EAAGA,IACjBzN,KAAKk/B,MAAM14B,KAAK04B,EAAMzxB,IAKxB,IAAKA,EAAI,EAAG6T,EAAI4P,EAASnsB,OAAQ0I,EAAI6T,EAAG7T,IAGtC,IAFAsyB,EAAS7O,EAASzjB,MAGL+1B,GACXzD,IAAW0D,GACX1D,IAAW2D,GACX3D,IAAW4D,EACX,CACAnB,EAAcxiC,KAAKi/B,UACnB,IAAIwD,EAAU,KAEd,IAAKr8B,EAAI,EAAGA,EAAI,EAAGA,KACjBs8B,EAAW1iC,KAAKk/B,MAAM94B,GAAGg8B,gBAAgBrC,EAAOI,QAEjCqC,IACbA,EAAcE,EACdD,EAAUziC,KAAKk/B,MAAM94B,IAIT,OAAZq8B,GACFziC,KAAKuhC,gBAAgBxB,EAAQ0C,GAKnC,OAAOziC,MApKU,GA0KrBkkC,aAAc,WAGZ,IAFA,IAAIC,EAAc,GAET12B,EAAI,EAAGA,EAAIzN,KAAKk/B,MAAMn6B,OAAQ0I,IAAK,CAC1C,IAAIuyB,EAAOhgC,KAAKk/B,MAAMzxB,GA5dd,IA8dJuyB,EAAK3lB,MACP8pB,EAAY39B,KAAKw5B,GAMrB,OAFAhgC,KAAKk/B,MAAQiF,EAENnkC,MAKTokC,gBAAiB,WAGf,IAAgC,IAA5BpkC,KAAKo/B,SAASkD,UAAqB,CACrC,IAAI+B,EACF7B,EAAc,EAIZ8B,EAAUtkC,KAAKo/B,SAASmD,QAAQvC,KAChCD,EAASuE,EAAQ1E,QAIrB,EAAG,CACD,IAAI8C,EAAW4B,EAAQlC,gBAAgBrC,EAAOI,OAE1CuC,EAAWF,IACbA,EAAcE,EACd2B,EAAYtE,GAGdA,EAASA,EAAOhnB,WACE,OAAXgnB,GAAmBA,EAAOC,OAASsE,GAE5C,OAAOD,IAQXE,eAAgB,SAASC,EAAUC,EAAWzE,EAAM0E,GAOlD,IAAI7E,EAJJ7/B,KAAK+hC,mBAAmB/B,GAExBA,EAAK3lB,KA/gBK,EAohBRwlB,EADgB,OAAd4E,EACKA,EAAYzE,EAAKgE,QAAQ,GAKzBS,EAAU1rB,KAGnB,EAAG,CACD,IAAI4rB,EAAW9E,EAAKI,KAChB2E,EAAeD,EAAS3E,KA/hBpB,IAiiBJ4E,EAAavqB,OACXuqB,EAAaxC,gBAAgBoC,GAAYxkC,KAAKi/B,UAGhDj/B,KAAKukC,eAAeC,EAAUG,EAAUC,EAAcF,GAItDA,EAAQl+B,KAAKq5B,IAIjBA,EAAOA,EAAK9mB,WACL8mB,IAAS4E,GAElB,OAAOzkC,MAKT6kC,iBAAkB,SAASR,EAAWS,GAGpC,IAAI9E,EAAOT,EAAKvpB,OAAOquB,EAAWS,EAAYzE,OAAQyE,EAAY1E,QAQlE,OANApgC,KAAKk/B,MAAM14B,KAAKw5B,GAIhBA,EAAKgE,SAAS,GAAGC,QAAQa,EAAY7E,MAE9BD,EAAKgE,QAAQ,IAMtBe,YAAa,SAASV,EAAWK,GAC/B1kC,KAAKm/B,SAAW,GAKhB,IAHA,IAAI6F,EAAgB,KAChBC,EAAmB,KAEdx3B,EAAI,EAAGA,EAAIi3B,EAAQ3/B,OAAQ0I,IAAK,CACvC,IAAIq3B,EAAcJ,EAAQj3B,GAItBy3B,EAAWllC,KAAK6kC,iBAAiBR,EAAWS,GAE1B,OAAlBE,EACFA,EAAgBE,EAIhBA,EAASnsB,KAAKkrB,QAAQgB,GAGxBjlC,KAAKm/B,SAAS34B,KAAK0+B,EAASlF,MAC5BiF,EAAmBC,EAOrB,OAFAF,EAAcjsB,KAAKkrB,QAAQgB,GAEpBjlC,MAKTmlC,gBAAiB,SAASd,GACxB,IAAIK,EAAU,GAiBd,OAdA1kC,KAAKs/B,WAAW5vB,QAIhB1P,KAAK0hC,qBAAqB2C,EAAWA,EAAUrE,MAE/ChgC,KAAKukC,eAAeF,EAAUlE,MAAO,KAAMkE,EAAUrE,KAAM0E,GAE3D1kC,KAAK+kC,YAAYV,EAAWK,GAI5B1kC,KAAKqiC,wBAAwBriC,KAAKm/B,UAE3Bn/B,MAGTolC,QAAS,WAKP,OAJAplC,KAAKo/B,SAAS1vB,QACd1P,KAAKs/B,WAAW5vB,QAChB1P,KAAKm/B,SAAW,GAETn/B,MAGT2gC,QAAS,WACP,IAAIZ,EAMJ,IAJA//B,KAAKkjC,0BAIwCh5B,KAArC61B,EAAS//B,KAAKokC,oBACpBpkC,KAAKmlC,gBAAgBpF,GAOvB,OAJA//B,KAAKkkC,eAELlkC,KAAKolC,UAEEplC,QAiBX2J,OAAO22B,OAAOf,EAAM,CAClBvpB,OAAQ,SAAS7I,EAAGC,EAAGU,GACrB,IAAIkyB,EAAO,IAAIT,EAEX8F,EAAK,IAAIvF,EAAS3yB,EAAG6yB,GACrBsF,EAAK,IAAIxF,EAAS1yB,EAAG4yB,GACrBuF,EAAK,IAAIzF,EAAShyB,EAAGkyB,GAYzB,OARAqF,EAAGtsB,KAAOwsB,EAAGtqB,KAAOqqB,EACpBA,EAAGvsB,KAAOssB,EAAGpqB,KAAOsqB,EACpBA,EAAGxsB,KAAOusB,EAAGrqB,KAAOoqB,EAIpBrF,EAAKH,KAAOwF,EAELrF,EAAKW,aAIhBh3B,OAAO22B,OAAOf,EAAKr+B,UAAW,CAC5B8iC,QAAS,SAASv2B,GAGhB,IAFA,IAAIoyB,EAAO7/B,KAAK6/B,KAETpyB,EAAI,GACToyB,EAAOA,EAAK9mB,KACZtL,IAGF,KAAOA,EAAI,GACToyB,EAAOA,EAAK5kB,KACZxN,IAGF,OAAOoyB,GAGTc,QAAU,WACR,IAAI6E,EAEJ,OAAO,gBACYt7B,IAAbs7B,IAAwBA,EAAW,IAAI3V,MAAM4V,UAEjD,IAAIt4B,EAAInN,KAAK6/B,KAAKQ,OACdjzB,EAAIpN,KAAK6/B,KAAKO,OACdtyB,EAAI9N,KAAK6/B,KAAK9mB,KAAKqnB,OAUvB,OARAoF,EAASnV,IAAIljB,EAAEgzB,MAAO/yB,EAAE+yB,MAAOryB,EAAEqyB,OAEjCqF,EAAShG,OAAOx/B,KAAKw/B,QACrBgG,EAAS/F,SAASz/B,KAAKy/B,UACvBz/B,KAAK0/B,KAAO8F,EAAS9F,OAErB1/B,KAAK2/B,SAAW3/B,KAAKw/B,OAAOkG,IAAI1lC,KAAKy/B,UAE9Bz/B,MAlBD,GAsBVoiC,gBAAiB,SAASjC,GACxB,OAAOngC,KAAKw/B,OAAOkG,IAAIvF,GAASngC,KAAK2/B,YAczCh2B,OAAO22B,OAAOR,EAAS5+B,UAAW,CAChCk/B,KAAM,WACJ,OAAOpgC,KAAK+/B,QAGdM,KAAM,WACJ,OAAOrgC,KAAKib,KAAOjb,KAAKib,KAAK8kB,OAAS,MAGxCh7B,OAAQ,WACN,IAAIq7B,EAAOpgC,KAAKogC,OACZC,EAAOrgC,KAAKqgC,OAEhB,OAAa,OAATA,EACKA,EAAKF,MAAMwF,WAAWvF,EAAKD,QAG5B,GAGVyF,cAAe,WACb,IAAIxF,EAAOpgC,KAAKogC,OACZC,EAAOrgC,KAAKqgC,OAEhB,OAAa,OAATA,EACKA,EAAKF,MAAM2D,kBAAkB1D,EAAKD,QAGnC,GAGV8D,QAAS,SAASpE,GAIhB,OAHA7/B,KAAKigC,KAAOJ,EACZA,EAAKI,KAAOjgC,KAELA,QAoBX2J,OAAO22B,OAAOjB,EAAWn+B,UAAW,CAClCqhC,MAAO,WACL,OAAOviC,KAAKogC,MAGdyF,KAAM,WACJ,OAAO7lC,KAAKqgC,MAGd3wB,MAAO,WAGL,OAFA1P,KAAKogC,KAAOpgC,KAAKqgC,KAAO,KAEjBrgC,MAKTyhC,aAAc,SAASj5B,EAAQu3B,GAY7B,OAXAA,EAAO9kB,KAAOzS,EAAOyS,KACrB8kB,EAAOhnB,KAAOvQ,EAEM,OAAhBu3B,EAAO9kB,KACTjb,KAAKogC,KAAOL,EAEZA,EAAO9kB,KAAKlC,KAAOgnB,EAGrBv3B,EAAOyS,KAAO8kB,EAEP//B,MAKT8lC,YAAa,SAASt9B,EAAQu3B,GAY5B,OAXAA,EAAO9kB,KAAOzS,EACdu3B,EAAOhnB,KAAOvQ,EAAOuQ,KAED,OAAhBgnB,EAAOhnB,KACT/Y,KAAKqgC,KAAON,EAEZA,EAAOhnB,KAAKkC,KAAO8kB,EAGrBv3B,EAAOuQ,KAAOgnB,EAEP//B,MAKTwhC,OAAQ,SAASzB,GAYf,OAXkB,OAAd//B,KAAKogC,KACPpgC,KAAKogC,KAAOL,EAEZ//B,KAAKqgC,KAAKtnB,KAAOgnB,EAGnBA,EAAO9kB,KAAOjb,KAAKqgC,KACnBN,EAAOhnB,KAAO,KAEd/Y,KAAKqgC,KAAON,EAEL//B,MAKTkiC,YAAa,SAASnC,GAWpB,IAVkB,OAAd//B,KAAKogC,KACPpgC,KAAKogC,KAAOL,EAEZ//B,KAAKqgC,KAAKtnB,KAAOgnB,EAGnBA,EAAO9kB,KAAOjb,KAAKqgC,KAII,OAAhBN,EAAOhnB,MACZgnB,EAASA,EAAOhnB,KAKlB,OAFA/Y,KAAKqgC,KAAON,EAEL//B,MAKT2hC,OAAQ,SAAS5B,GAaf,OAZoB,OAAhBA,EAAO9kB,KACTjb,KAAKogC,KAAOL,EAAOhnB,KAEnBgnB,EAAO9kB,KAAKlC,KAAOgnB,EAAOhnB,KAGR,OAAhBgnB,EAAOhnB,KACT/Y,KAAKqgC,KAAON,EAAO9kB,KAEnB8kB,EAAOhnB,KAAKkC,KAAO8kB,EAAO9kB,KAGrBjb,MAKT8hC,cAAe,SAAS30B,EAAGC,GAazB,OAZe,OAAXD,EAAE8N,KACJjb,KAAKogC,KAAOhzB,EAAE2L,KAEd5L,EAAE8N,KAAKlC,KAAO3L,EAAE2L,KAGH,OAAX3L,EAAE2L,KACJ/Y,KAAKqgC,KAAOlzB,EAAE8N,KAEd7N,EAAE2L,KAAKkC,KAAO9N,EAAE8N,KAGXjb,MAGTsiC,QAAS,WACP,OAAqB,OAAdtiC,KAAKogC,QAMhBvQ,MAAMmP,UAAYA,EA56BpB,I,mBCHA,WAGE,SAAS+G,EAAevF,GACtB3Q,MAAMoB,SAASza,KAAKxW,MAEpBA,KAAKuW,KAAO,iBAEZvW,KAAKgmC,mBAAmB,IAAIC,EAAqBzF,IACjDxgC,KAAKkmC,gBAQP,SAASD,EAAqBzF,GAC5B3Q,MAAMiB,eAAeta,KAAKxW,MAE1BA,KAAKuW,KAAO,uBAIZ,IAAI2a,EAAW,GACXiV,EAAU,QAIUj8B,IAApB2lB,MAAMmP,WACRj+B,QAAQiX,MACN,8EAUJ,IANA,IAIIknB,GAJY,IAAIrP,MAAMmP,WAAYuB,cAAcC,GAI9BtB,MAEbzxB,EAAI,EAAGA,EAAIyxB,EAAMn6B,OAAQ0I,IAAK,CACrC,IAAIuyB,EAAOd,EAAMzxB,GACboyB,EAAOG,EAAKH,KAIhB,EAAG,CACD,IAAIM,EAAQN,EAAKO,OAAOD,MAExBjP,EAAS1qB,KAAK25B,EAAMn9B,EAAGm9B,EAAMl9B,EAAGk9B,EAAMhP,GACtCgV,EAAQ3/B,KAAKw5B,EAAKR,OAAOx8B,EAAGg9B,EAAKR,OAAOv8B,EAAG+8B,EAAKR,OAAOrO,GAEvD0O,EAAOA,EAAK9mB,WACL8mB,IAASG,EAAKH,MAKzB7/B,KAAKgyB,aACH,WACA,IAAInC,MAAMuW,uBAAuBlV,EAAU,IAE7ClxB,KAAKgyB,aAAa,SAAU,IAAInC,MAAMuW,uBAAuBD,EAAS,IAnDxEJ,EAAe7kC,UAAYyI,OAAOqM,OAAO6Z,MAAMoB,SAAS/vB,WACxD6kC,EAAe7kC,UAAUiZ,YAAc4rB,EAqDvCE,EAAqB/kC,UAAYyI,OAAOqM,OACtC6Z,MAAMiB,eAAe5vB,WAEvB+kC,EAAqB/kC,UAAUiZ,YAAc8rB,EAI7CpW,MAAMkW,eAAiBA,EACvBlW,MAAMoW,qBAAuBA,EA1E/B,I,oBCCA,IAAIpW,EAAQ7N,EAAQ,KAEpB6N,EAAMwW,YAAc,SAAS5R,GAC3B5E,EAAMyW,SAAS9vB,KAAKxW,MAEpBA,KAAKy0B,QAAUA,EACfz0B,KAAKy0B,QAAQ8R,MAAM7U,SAAW,WAE9B1xB,KAAKwf,iBAAiB,WAAW,WACC,OAA5Bxf,KAAKy0B,QAAQ+R,YACfxmC,KAAKy0B,QAAQ+R,WAAWC,YAAYzmC,KAAKy0B,aAK/C5E,EAAMwW,YAAYnlC,UAAYyI,OAAOqM,OAAO6Z,EAAMyW,SAASplC,WAC3D2uB,EAAMwW,YAAYnlC,UAAUiZ,YAAc0V,EAAMwW,YAEhDxW,EAAM6W,YAAc,SAASjS,GAC3B5E,EAAMwW,YAAY7vB,KAAKxW,KAAMy0B,IAG/B5E,EAAM6W,YAAYxlC,UAAYyI,OAAOqM,OAAO6Z,EAAMwW,YAAYnlC,WAC9D2uB,EAAM6W,YAAYxlC,UAAUiZ,YAAc0V,EAAM6W,YAIhD7W,EAAM8W,cAAgB,WAGpB,IAAIC,EAAQC,EAFZ9lC,QAAQC,IAAI,sBAAuB6uB,EAAMiX,UAIzC,IAAIC,EAAS,IAAIlX,EAAMmX,QAEnBC,EAAQ,CACVlI,OAAQ,CAAEtE,IAAK,EAAG8L,MAAO,IACzBW,QAAS,IAGPlK,EAAavB,SAAS0L,cAAc,OACxCnK,EAAWuJ,MAAMa,SAAW,SAE5BpK,EAAWuJ,MAAMc,qBAAuB,cACxCrK,EAAWuJ,MAAMe,kBAAoB,cACrCtK,EAAWuJ,MAAMgB,gBAAkB,cACnCvK,EAAWuJ,MAAMiB,eAAiB,cAElCxnC,KAAKg9B,WAAaA,EAElB,IAAIyK,EAAgBhM,SAAS0L,cAAc,OAiC3C,SAASO,EAAQ9nC,GACf,OAAO4H,KAAKy7B,IAAIrjC,GAASqH,OAAO+7B,QAAU,EAAIpjC,EA2ChD,SAAS+nC,EAAmBZ,GAC1B,IAAIa,EAAWb,EAAOa,SAEtB,MACE,qCACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,IACjB,IACAF,GAASE,EAAS,IAClB,IACAF,GAASE,EAAS,IAClB,IACAF,GAASE,EAAS,IAClB,IACAF,GAASE,EAAS,IAClB,IACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,KACjB,IACAF,EAAQE,EAAS,KACjB,IACAF,EAAQE,EAAS,KACjB,IACAF,EAAQE,EAAS,KACjB,IACAF,EAAQE,EAAS,KACjB,IACAF,EAAQE,EAAS,KACjB,IA/GJH,EAAclB,MAAM7U,SAAW,WAC/B+V,EAAclB,MAAMh0B,KAAO,MAC3Bk1B,EAAclB,MAAM9zB,IAAM,MAE1Bg1B,EAAclB,MAAMc,qBAAuB,cAC3CI,EAAclB,MAAMe,kBAAoB,cACxCG,EAAclB,MAAMgB,gBAAkB,cACtCE,EAAclB,MAAMiB,eAAiB,cAErCxK,EAAWtB,YAAY+L,GAEvBznC,KAAK6nC,cAAgB,aAGrB7nC,KAAK8nC,UAAW,EAEhB9nC,KAAK+nC,QAAU,WACb,MAAO,CACLtX,MAAOmW,EACPpJ,OAAQqJ,IAIZ7mC,KAAK69B,QAAU,SAASpN,EAAO+M,GAC7BoJ,EAASnW,EACToW,EAAUrJ,EAEVR,EAAWuJ,MAAM9V,MAAQA,EAAQ,KACjCuM,EAAWuJ,MAAM/I,OAASA,EAAS,MAmIrCx9B,KAAKg8B,OAAS,SAAS8C,EAAOC,GAC5B,IAAI/+B,KAAK8nC,SAAT,CAGA,IAAIrN,EACD,GAAMjzB,KAAKwgC,IAAInY,EAAMroB,KAAKygC,SAAoC,GAA3BlJ,EAAOmJ,oBAC3CrB,EAEEI,EAAMlI,OAAOtE,MAAQA,IACvBuC,EAAWuJ,MAAM4B,kBAAoB1N,EAAM,KAC3CuC,EAAWuJ,MAAM6B,eAAiB3N,EAAM,KACxCuC,EAAWuJ,MAAM8B,aAAe5N,EAAM,KACtCuC,EAAWuJ,MAAM+B,YAAc7N,EAAM,KAErCwM,EAAMlI,OAAOtE,IAAMA,GAGrBqE,EAAM+B,oBAEgB,OAAlB9B,EAAOnb,QAAiBmb,EAAO8B,oBAEnC9B,EAAOwJ,mBAAmBC,WAAWzJ,EAAOmC,aAE5C,IAAIqF,EACF,cACA9L,EACA,MAtJJ,SAA4BsM,GAC1B,IAAIa,EAAWb,EAAOa,SAEtB,MACE,YACAF,EAAQE,EAAS,IACjB,IACAF,GAASE,EAAS,IAClB,IACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,IACjB,IACAF,GAASE,EAAS,IAClB,IACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,IACjB,IACAF,EAAQE,EAAS,IACjB,IACAF,GAASE,EAAS,IAClB,IACAF,EAAQE,EAAS,KACjB,IACAF,EAAQE,EAAS,KACjB,IACAF,EAAQE,EAAS,KACjB,IACAF,GAASE,EAAS,KAClB,IACAF,EAAQE,EAAS,KACjB,IACAF,EAAQE,EAAS,KACjB,IAmHAa,CAAmB1J,EAAOwJ,oBAExBtB,EAAMlI,OAAOwH,QAAUA,IACzBkB,EAAclB,MAAMmC,gBAAkBnC,EACtCkB,EAAclB,MAAMoC,aAAepC,EACnCkB,EAAclB,MAAMqC,WAAarC,EACjCkB,EAAclB,MAAMsC,UAAYtC,EAEhCU,EAAMlI,OAAOwH,MAAQA,GA/EzB,SAASuC,EAAajuB,EAAQkkB,GAC5B,GAAIlkB,aAAkBgV,EAAMwW,YAAa,CACvC,IAAIE,EAEA1rB,aAAkBgV,EAAM6W,aAG1BK,EAAOpT,KAAKoL,EAAOwJ,oBACnBxB,EAAOgC,YACPhC,EAAOiC,aAAanuB,EAAOqmB,aAC3B6F,EAAO9kC,MAAM4Y,EAAO5Y,OAEpB8kC,EAAOa,SAAS,GAAK,EACrBb,EAAOa,SAAS,GAAK,EACrBb,EAAOa,SAAS,IAAM,EACtBb,EAAOa,SAAS,IAAM,EAEtBrB,EAAQoB,EAAmBZ,IAE3BR,EAAQoB,EAAmB9sB,EAAOqmB,aAGpC,IAAIzM,EAAU5Z,EAAO4Z,QACjBwU,EAAchC,EAAMC,QAAQrsB,EAAOhS,SAEnBqB,IAAhB++B,GAA6BA,IAAgB1C,IAC/C9R,EAAQ8R,MAAMmC,gBAAkBnC,EAChC9R,EAAQ8R,MAAMoC,aAAepC,EAC7B9R,EAAQ8R,MAAMqC,WAAarC,EAC3B9R,EAAQ8R,MAAMsC,UAAYtC,EAE1BU,EAAMC,QAAQrsB,EAAOhS,IAAM09B,GAGzB9R,EAAQ+R,aAAeiB,GACzBA,EAAc/L,YAAYjH,GAI9B,IAAK,IAAIhnB,EAAI,EAAG6T,EAAIzG,EAAOtQ,SAASxF,OAAQ0I,EAAI6T,EAAG7T,IACjDq7B,EAAajuB,EAAOtQ,SAASkD,GAAIsxB,GA0CnC+J,CAAahK,EAAOC,O,oBC7PhB/c,EAAQ,KAEhBgS,EAAOxf,QAAU,SAASqb,GAgBxB,SAASiE,EAAcjZ,EAAQmiB,EAAYr8B,GAGzCX,KAAKW,SAAWA,EAEhBX,KAAK6a,OAASA,EAEd7a,KAAKg9B,gBAA4B9yB,IAAf8yB,EAA2BA,EAAavB,SAG1Dz7B,KAAKkpC,SAAU,EAGflpC,KAAKwI,OAAS,IAAIqnB,EAAMqH,QAGxBl3B,KAAKmpC,YAAc,EACnBnpC,KAAKwiC,YAAc4G,IAGnBppC,KAAKqpC,QAAU,EACfrpC,KAAK66B,QAAUuO,IAIfppC,KAAKspC,cAAgB,EACrBtpC,KAAKupC,cAAgB/hC,KAAKgiC,GAI1BxpC,KAAKypC,iBAAmBL,IACxBppC,KAAK0pC,gBAAkBN,IAIvBppC,KAAK2pC,eAAgB,EACrB3pC,KAAK4pC,cAAgB,IAIrB5pC,KAAK6pC,YAAa,EAClB7pC,KAAK8pC,UAAY,EAGjB9pC,KAAK+pC,cAAe,EACpB/pC,KAAKgqC,YAAc,EAGnBhqC,KAAKiqC,WAAY,EACjBjqC,KAAKkqC,YAAc,EAInBlqC,KAAKmqC,YAAa,EAClBnqC,KAAKoqC,gBAAkB,EAGvBpqC,KAAKqqC,YAAa,EAGlBrqC,KAAK4J,KAAO,CAAE0gC,KAAM,GAAIC,GAAI,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,MAAO,IAG9D1qC,KAAK2qC,aAAe,CAClBC,MAAO/a,EAAMgb,MAAMP,KACnBQ,KAAMjb,EAAMgb,MAAME,OAClBC,IAAKnb,EAAMgb,MAAML,OAInBxqC,KAAKirC,QAAUjrC,KAAKwI,OAAOw4B,QAC3BhhC,KAAKkrC,UAAYlrC,KAAK6a,OAAO6W,SAASsP,QACtChhC,KAAKmrC,MAAQnrC,KAAK6a,OAAOuwB,KAGzBprC,KAAKqrC,UAAW,EAChBrrC,KAAKsrC,SAAU,EAMftrC,KAAKurC,cAAgB,WACnB,OAAOC,EAAUC,KAGnBzrC,KAAK0rC,kBAAoB,WACvB,OAAOF,EAAUG,OAGnB3rC,KAAK2Z,MAAQ,WACXiyB,EAAMpjC,OAAOmrB,KAAKiY,EAAMX,SACxBW,EAAM/wB,OAAO6W,SAASiC,KAAKiY,EAAMV,WACjCU,EAAM/wB,OAAOuwB,KAAOQ,EAAMT,MAE1BS,EAAM/wB,OAAO+iB,yBACbgO,EAAMC,cAAcC,GAEpBF,EAAM7P,SAEN9jB,EAAQ8zB,EAAMC,MAIhBhsC,KAAK+7B,OAAU,WACb,IAAIkQ,EAAS,IAAIpc,EAAMqH,QAGnBgV,GAAO,IAAIrc,EAAMsc,YAAaC,mBAChCvxB,EAAOwxB,GACP,IAAIxc,EAAMqH,QAAQ,EAAG,EAAG,IAEtBoV,EAAcJ,EAAKlL,QAAQuL,UAE3BC,EAAe,IAAI3c,EAAMqH,QACzBuV,EAAiB,IAAI5c,EAAMsc,WAE/B,OAAO,WACL,IAAIza,EAAWka,EAAM/wB,OAAO6W,SAiE5B,OA/DAua,EAAOtY,KAAKjC,GAAUgb,IAAId,EAAMpjC,QAGhCyjC,EAAOU,gBAAgBT,GAGvBV,EAAUoB,eAAeX,GAErBL,EAAMzB,YAAclyB,IAAU8zB,EAAMC,MACtCa,EAqIK,EAAIrlC,KAAKgiC,GAAM,GAAK,GAAMoC,EAAMxB,iBAlIvCoB,EAAUG,OAASmB,EAAenB,MAClCH,EAAUC,KAAOqB,EAAerB,IAGhCD,EAAUG,MAAQnkC,KAAKhF,IACrBopC,EAAMnC,gBACNjiC,KAAKjF,IAAIqpC,EAAMlC,gBAAiB8B,EAAUG,QAI5CH,EAAUC,IAAMjkC,KAAKhF,IACnBopC,EAAMtC,cACN9hC,KAAKjF,IAAIqpC,EAAMrC,cAAeiC,EAAUC,MAG1CD,EAAUuB,WAEVvB,EAAUwB,QAAU/qC,EAGpBupC,EAAUwB,OAASxlC,KAAKhF,IACtBopC,EAAMzC,YACN3hC,KAAKjF,IAAIqpC,EAAMpJ,YAAagJ,EAAUwB,SAIxCpB,EAAMpjC,OAAOE,IAAIukC,GAEjBhB,EAAOiB,iBAAiB1B,GAGxBS,EAAOU,gBAAgBL,GAEvB5a,EAASiC,KAAKiY,EAAMpjC,QAAQE,IAAIujC,GAEhCL,EAAM/wB,OAAOsyB,OAAOvB,EAAMpjC,SAEE,IAAxBojC,EAAMjC,eACRmD,EAAenB,OAAS,EAAIC,EAAMhC,cAClCkD,EAAerB,KAAO,EAAIG,EAAMhC,eAEhCkD,EAAezc,IAAI,EAAG,EAAG,GAG3BpuB,EAAQ,EACRgrC,EAAU5c,IAAI,EAAG,EAAG,MAOlB+c,GACAZ,EAAa1I,kBAAkB8H,EAAM/wB,OAAO6W,UAAY2b,GACxD,GAAK,EAAIZ,EAAe/G,IAAIkG,EAAM/wB,OAAOyyB,aAAeD,KAExDzB,EAAMC,cAAcC,GAEpBU,EAAa7Y,KAAKiY,EAAM/wB,OAAO6W,UAC/B+a,EAAe9Y,KAAKiY,EAAM/wB,OAAOyyB,YACjCF,GAAc,GAEP,IA1FE,GAiGfptC,KAAKutC,QAAU,WACb3B,EAAM5O,WAAWwQ,oBAAoB,cAAeC,GAAe,GACnE7B,EAAM5O,WAAWwQ,oBAAoB,YAAaE,GAAa,GAC/D9B,EAAM5O,WAAWwQ,oBAAoB,QAASG,GAAc,GAE5D/B,EAAM5O,WAAWwQ,oBAAoB,aAAcI,GAAc,GACjEhC,EAAM5O,WAAWwQ,oBAAoB,WAAYK,GAAY,GAC7DjC,EAAM5O,WAAWwQ,oBAAoB,YAAaM,GAAa,GAE/DrS,SAAS+R,oBAAoB,YAAaO,GAAa,GACvDtS,SAAS+R,oBAAoB,UAAWQ,GAAW,GAEnDzxB,OAAOixB,oBAAoB,UAAWS,GAAW,IASnD,IAAIrC,EAAQ5rC,KACR8rC,EAAc,CAAEv1B,KAAM,UACtB23B,EAAa,CAAE33B,KAAM,SACrB43B,EAAW,CAAE53B,KAAM,OAEnBw1B,EAAQ,CACVC,MAAO,EACPoC,OAAQ,EACRC,MAAO,EACPrD,IAAK,EACLsD,aAAc,EACdC,YAAa,EACbC,UAAW,GAGTv2B,EAAQ8zB,EAAMC,KAEdqB,EAAM,KAGN7B,EAAY,IAAI3b,EAAM4e,UACtB3B,EAAiB,IAAIjd,EAAM4e,UAE3BxsC,EAAQ,EACRgrC,EAAY,IAAIpd,EAAMqH,QACtBkW,GAAc,EAEdsB,EAAc,IAAI7e,EAAMgD,QACxB8b,EAAY,IAAI9e,EAAMgD,QACtB+b,EAAc,IAAI/e,EAAMgD,QAExBgc,EAAW,IAAIhf,EAAMgD,QACrBic,EAAS,IAAIjf,EAAMgD,QACnBkc,EAAW,IAAIlf,EAAMgD,QAErBmc,EAAa,IAAInf,EAAMgD,QACvBoc,EAAW,IAAIpf,EAAMgD,QACrBqc,EAAa,IAAIrf,EAAMgD,QAM3B,SAASsc,IACP,OAAO3nC,KAAK4nC,IAAI,IAAMxD,EAAM9B,WAG9B,SAAS+C,EAAWwC,GAClBvC,EAAenB,OAAS0D,EAG1B,SAASC,EAASD,GAChBvC,EAAerB,KAAO4D,EAGxB,IAAIE,EAAW,WACb,IAAI9/B,EAAI,IAAIogB,EAAMqH,QAElB,OAAO,SAAiBwL,EAAU8M,GAChC//B,EAAEggC,oBAAoBD,EAAc,GACpC//B,EAAEigC,gBAAgBhN,GAElBuK,EAAUvkC,IAAI+G,IAPH,GAWXkgC,EAAS,WACX,IAAIlgC,EAAI,IAAIogB,EAAMqH,QAElB,OAAO,SAAewL,EAAU8M,GAC9B//B,EAAEggC,oBAAoBD,EAAc,GACpC//B,EAAEigC,eAAehN,GAEjBuK,EAAUvkC,IAAI+G,IAPL,GAYTmgC,EAAO,WACT,IAAI3D,EAAS,IAAIpc,EAAMqH,QAEvB,OAAO,SAAa2Y,EAAQC,GAC1B,IAAIrb,EACFmX,EAAM5O,aAAevB,SACjBmQ,EAAM5O,WAAWhf,KACjB4tB,EAAM5O,WAEZ,GAAI4O,EAAM/wB,kBAAkBgV,EAAMkgB,kBAAmB,CAEnD,IAAIre,EAAWka,EAAM/wB,OAAO6W,SAC5Bua,EAAOtY,KAAKjC,GAAUgb,IAAId,EAAMpjC,QAChC,IAAIwnC,EAAiB/D,EAAOlnC,SAG5BirC,GAAkBxoC,KAAKwgC,IACnB4D,EAAM/wB,OAAO4f,IAAM,EAAKjzB,KAAKgiC,GAAM,KAIvC+F,EACG,EAAIM,EAASG,EAAkBvb,EAAQwb,aACxCrE,EAAM/wB,OAAOksB,QAEf4I,EACG,EAAIG,EAASE,EAAkBvb,EAAQwb,aACxCrE,EAAM/wB,OAAOksB,aAEN6E,EAAM/wB,kBAAkBgV,EAAMqgB,oBAEvCX,EACGM,GAAUjE,EAAM/wB,OAAOuc,MAAQwU,EAAM/wB,OAAOtI,MAC3Cq5B,EAAM/wB,OAAOuwB,KACb3W,EAAQ0b,YACVvE,EAAM/wB,OAAOksB,QAEf4I,EACGG,GAAUlE,EAAM/wB,OAAOpI,IAAMm5B,EAAM/wB,OAAOu1B,QACzCxE,EAAM/wB,OAAOuwB,KACb3W,EAAQwb,aACVrE,EAAM/wB,OAAOksB,UAIfhmC,QAAQsvC,KACN,gFAEFzE,EAAM3B,WAAY,IAhDb,GAyDX,SAASqG,EAAQC,EAAYC,EAAU/wB,GACjCmsB,EAAM/wB,kBAAkBgV,EAAMkgB,kBAChC9tC,GAASsuC,EACA3E,EAAM/wB,kBAAkBgV,EAAMqgB,oBACvCtE,EAAM/wB,OAAOuwB,KAAO5jC,KAAKhF,IACvBopC,EAAMvC,QACN7hC,KAAKjF,IAAIqpC,EAAM/Q,QAAS+Q,EAAM/wB,OAAOuwB,KAAOmF,IAE9C3E,EAAM/wB,OAAO+iB,yBACbwP,GAAc,IAEdrsC,QAAQsvC,KACN,uFAEFzE,EAAM/B,YAAa,GAIvB,SAAS4G,EAASF,EAAYC,GACxB5E,EAAM/wB,kBAAkBgV,EAAMkgB,kBAChC9tC,GAASsuC,EACA3E,EAAM/wB,kBAAkBgV,EAAMqgB,oBACvCtE,EAAM/wB,OAAOuwB,KAAO5jC,KAAKhF,IACvBopC,EAAMvC,QACN7hC,KAAKjF,IAAIqpC,EAAM/Q,QAAS+Q,EAAM/wB,OAAOuwB,KAAOmF,IAE9C3E,EAAM/wB,OAAO+iB,yBACbwP,GAAc,IAEdrsC,QAAQsvC,KACN,uFAEFzE,EAAM/B,YAAa,GA8BvB,SAAS6G,EAAmBjxB,GAG1BovB,EAASxe,IAAI5Q,EAAMkxB,QAASlxB,EAAMmxB,SA2NpC,SAASlD,EAAYjuB,GACnB,IAAsB,IAAlBmsB,EAAM1C,QAAV,CAIA,GAFAzpB,EAAM2d,iBAEF3d,EAAMoxB,SAAWjF,EAAMjB,aAAaC,MAAO,CAC7C,IAA2B,IAAvBgB,EAAM7B,aAAwB,QA/OtC,SAA+BtqB,GAG7BivB,EAAYre,IAAI5Q,EAAMkxB,QAASlxB,EAAMmxB,SA8OnCE,CAAsBrxB,GAEtBxH,EAAQ8zB,EAAMqC,YACT,GAAI3uB,EAAMoxB,SAAWjF,EAAMjB,aAAaG,KAAM,CACnD,IAAyB,IAArBc,EAAM/B,WAAsB,QA/OpC,SAA8BpqB,GAE5BuvB,EAAW3e,IAAI5Q,EAAMkxB,QAASlxB,EAAMmxB,SA+OlCG,CAAqBtxB,GAErBxH,EAAQ8zB,EAAMsC,WACT,GAAI5uB,EAAMoxB,SAAWjF,EAAMjB,aAAaK,IAAK,CAClD,IAAwB,IAApBY,EAAM3B,UAAqB,OAE1B2B,EAAMP,WAAYO,EAAMN,UAC3BoF,EAAmBjxB,GAEnBxH,EAAQ8zB,EAAMf,KAId/yB,IAAU8zB,EAAMC,OAClBvQ,SAASjc,iBAAiB,YAAauuB,GAAa,GACpDtS,SAASjc,iBAAiB,UAAWwuB,GAAW,GAEhDpC,EAAMC,cAAcqC,KAIxB,SAASH,EAAYtuB,GACnB,IAAsB,IAAlBmsB,EAAM1C,QAIV,GAFAzpB,EAAM2d,iBAEFnlB,IAAU8zB,EAAMqC,OAAQ,CAC1B,IAA2B,IAAvBxC,EAAM7B,aAAwB,QAjQtC,SAA+BtqB,GAG7BkvB,EAAUte,IAAI5Q,EAAMkxB,QAASlxB,EAAMmxB,SACnChC,EAAYoC,WAAWrC,EAAWD,GAElC,IAAIja,EACFmX,EAAM5O,aAAevB,SACjBmQ,EAAM5O,WAAWhf,KACjB4tB,EAAM5O,WAGZ6P,EACI,EAAIrlC,KAAKgiC,GAAKoF,EAAY5rC,EAAKyxB,EAAQ0b,YACvCvE,EAAM5B,aAIVsF,EACI,EAAI9nC,KAAKgiC,GAAKoF,EAAY3rC,EAAKwxB,EAAQwb,aACvCrE,EAAM5B,aAGV0E,EAAY/a,KAAKgb,GAEjB/C,EAAM7P,SA0OJkV,CAAsBxxB,QACjB,GAAIxH,IAAU8zB,EAAMsC,MAAO,CAChC,IAAyB,IAArBzC,EAAM/B,WAAsB,QAzOpC,SAA8BpqB,GAE5BwvB,EAAS5e,IAAI5Q,EAAMkxB,QAASlxB,EAAMmxB,SAElC1B,EAAW8B,WAAW/B,EAAUD,GAE5BE,EAAWjsC,EAAI,EACjBqtC,EAAQnB,KACCD,EAAWjsC,EAAI,GACxBwtC,EAAStB,KAGXH,EAAWrb,KAAKsb,GAEhBrD,EAAM7P,SA6NJmV,CAAqBzxB,QAChB,GAAIxH,IAAU8zB,EAAMf,IAAK,CAC9B,IAAwB,IAApBY,EAAM3B,UAAqB,OAET,GAAlB2B,EAAMP,UACmB,GAAvBO,EAAMuF,gBACRT,EAAmBjxB,GACnBmsB,EAAMuF,eAAgB,GAjO9B,SAA4B1xB,GAG1BqvB,EAAOze,IAAI5Q,EAAMkxB,QAASlxB,EAAMmxB,SAEhC7B,EAASiC,WAAWlC,EAAQD,GAE5Be,EAAIb,EAAS/rC,EAAG+rC,EAAS9rC,GAEzB4rC,EAASlb,KAAKmb,GAEdlD,EAAM7P,SA0NJqV,CAAmB3xB,IAIvB,SAASuuB,EAAUvuB,IACK,IAAlBmsB,EAAM1C,UAKVzN,SAAS+R,oBAAoB,UAAWQ,GAAW,GAEnDpC,EAAMC,cAAcsC,GAEpBl2B,EAAQ8zB,EAAMC,MAGhB,SAAS2B,EAAaluB,IAEA,IAAlBmsB,EAAM1C,UACe,IAArB0C,EAAM/B,YACL5xB,IAAU8zB,EAAMC,MAAQ/zB,IAAU8zB,EAAMqC,SAI3C3uB,EAAM2d,iBACN3d,EAAM4xB,kBA7OR,SAA0B5xB,GAExB+wB,SAAW,CAACxtC,EAAGyc,EAAMkxB,QAAS1tC,EAAGwc,EAAMmxB,SAEnCnxB,EAAMqwB,OAAS,EACjBW,EAAStB,IAAgBqB,UAChB/wB,EAAMqwB,OAAS,GACxBQ,EAAQnB,IAAgBqB,UAG1B5E,EAAM7P,SAqONuV,CAAiB7xB,GAEjBmsB,EAAMC,cAAcqC,GACpBtC,EAAMC,cAAcsC,IAGtB,SAASF,EAAUxuB,IAEG,IAAlBmsB,EAAM1C,UACe,IAArB0C,EAAMvB,aACc,IAApBuB,EAAM3B,YAIRxO,SAASjc,iBAAiB,YAAauuB,GAAa,GArOtD,SAAuBtuB,GAGrB,OAAQA,EAAM8xB,SACZ,KAAK3F,EAAMhiC,KAAK2gC,GACdqF,EAAI,EAAGhE,EAAM1B,aACb0B,EAAM7P,SACN,MAEF,KAAK6P,EAAMhiC,KAAK6gC,OACdmF,EAAI,GAAIhE,EAAM1B,aACd0B,EAAM7P,SACN,MAEF,KAAK6P,EAAMhiC,KAAK0gC,KACdsF,EAAIhE,EAAM1B,YAAa,GACvB0B,EAAM7P,SACN,MAEF,KAAK6P,EAAMhiC,KAAK4gC,MACdoF,GAAKhE,EAAM1B,YAAa,GACxB0B,EAAM7P,SACN,MAEF,KAAK6P,EAAMhiC,KAAK8gC,MACQ,GAAlBkB,EAAMP,WACRO,EAAMuF,eAAgB,EACtBl5B,EAAQ8zB,EAAMf,MA4MpBwG,CAAc/xB,IAchB,SAASmuB,EAAanuB,GACpB,IAAsB,IAAlBmsB,EAAM1C,QAAV,CAEA,OAAQzpB,EAAMgyB,QAAQ1sC,QACpB,KAAK,EACH,IAA2B,IAAvB6mC,EAAM7B,aAAwB,QAzNxC,SAAgCtqB,GAG9BivB,EAAYre,IAAI5Q,EAAMgyB,QAAQ,GAAGj/B,MAAOiN,EAAMgyB,QAAQ,GAAG/+B,OAwNrDg/B,CAAuBjyB,GAEvBxH,EAAQ8zB,EAAMuC,aAEd,MAEF,KAAK,EACH,IAAyB,IAArB1C,EAAM/B,WAAsB,QA5NtC,SAA+BpqB,GAG7B,IAAIkyB,EAAKlyB,EAAMgyB,QAAQ,GAAGj/B,MAAQiN,EAAMgyB,QAAQ,GAAGj/B,MAC/Co/B,EAAKnyB,EAAMgyB,QAAQ,GAAG/+B,MAAQ+M,EAAMgyB,QAAQ,GAAG/+B,MAE/CgwB,EAAWl7B,KAAKyG,KAAK0jC,EAAKA,EAAKC,EAAKA,GAExC5C,EAAW3e,IAAI,EAAGqS,GAsNdmP,CAAsBpyB,GAEtBxH,EAAQ8zB,EAAMwC,YAEd,MAEF,KAAK,EACH,IAAwB,IAApB3C,EAAM3B,UAAqB,QA1NrC,SAA6BxqB,GAG3BovB,EAASxe,IAAI5Q,EAAMgyB,QAAQ,GAAGj/B,MAAOiN,EAAMgyB,QAAQ,GAAG/+B,OAyNlDo/B,CAAoBryB,GAEpBxH,EAAQ8zB,EAAMyC,UAEd,MAEF,QACEv2B,EAAQ8zB,EAAMC,KAGd/zB,IAAU8zB,EAAMC,MAClBJ,EAAMC,cAAcqC,IAIxB,SAASJ,EAAYruB,GACnB,IAAsB,IAAlBmsB,EAAM1C,QAKV,OAHAzpB,EAAM2d,iBACN3d,EAAM4xB,kBAEE5xB,EAAMgyB,QAAQ1sC,QACpB,KAAK,EACH,IAA2B,IAAvB6mC,EAAM7B,aAAwB,OAClC,GAAI9xB,IAAU8zB,EAAMuC,aAAc,QA9OxC,SAA+B7uB,GAG7BkvB,EAAUte,IAAI5Q,EAAMgyB,QAAQ,GAAGj/B,MAAOiN,EAAMgyB,QAAQ,GAAG/+B,OACvDk8B,EAAYoC,WAAWrC,EAAWD,GAElC,IAAIja,EACFmX,EAAM5O,aAAevB,SACjBmQ,EAAM5O,WAAWhf,KACjB4tB,EAAM5O,WAGZ6P,EACI,EAAIrlC,KAAKgiC,GAAKoF,EAAY5rC,EAAKyxB,EAAQ0b,YACvCvE,EAAM5B,aAIVsF,EACI,EAAI9nC,KAAKgiC,GAAKoF,EAAY3rC,EAAKwxB,EAAQwb,aACvCrE,EAAM5B,aAGV0E,EAAY/a,KAAKgb,GAEjB/C,EAAM7P,SAuNFgW,CAAsBtyB,GAEtB,MAEF,KAAK,EACH,IAAyB,IAArBmsB,EAAM/B,WAAsB,OAChC,GAAI5xB,IAAU8zB,EAAMwC,YAAa,QA1NvC,SAA8B9uB,GAG5B,IAAIkyB,EAAKlyB,EAAMgyB,QAAQ,GAAGj/B,MAAQiN,EAAMgyB,QAAQ,GAAGj/B,MAC/Co/B,EAAKnyB,EAAMgyB,QAAQ,GAAG/+B,MAAQ+M,EAAMgyB,QAAQ,GAAG/+B,MAE/CgwB,EAAWl7B,KAAKyG,KAAK0jC,EAAKA,EAAKC,EAAKA,GAExC3C,EAAS5e,IAAI,EAAGqS,GAEhBwM,EAAW8B,WAAW/B,EAAUD,GAE5BE,EAAWjsC,EAAI,EACjBwtC,EAAStB,KACAD,EAAWjsC,EAAI,GACxBqtC,EAAQnB,KAGVH,EAAWrb,KAAKsb,GAEhBrD,EAAM7P,SAwMFiW,CAAqBvyB,GAErB,MAEF,KAAK,EACH,IAAwB,IAApBmsB,EAAM3B,UAAqB,OAC/B,GAAIhyB,IAAU8zB,EAAMyC,UAAW,QA3MrC,SAA4B/uB,GAG1BqvB,EAAOze,IAAI5Q,EAAMgyB,QAAQ,GAAGj/B,MAAOiN,EAAMgyB,QAAQ,GAAG/+B,OAEpDq8B,EAASiC,WAAWlC,EAAQD,GAE5Be,EAAIb,EAAS/rC,EAAG+rC,EAAS9rC,GAEzB4rC,EAASlb,KAAKmb,GAEdlD,EAAM7P,SAkMFkW,CAAmBxyB,GAEnB,MAEF,QACExH,EAAQ8zB,EAAMC,MAIpB,SAAS6B,EAAWpuB,IACI,IAAlBmsB,EAAM1C,UAIV0C,EAAMC,cAAcsC,GAEpBl2B,EAAQ8zB,EAAMC,MAGhB,SAASyB,EAAchuB,GACrBA,EAAM2d,iBA1eRp9B,KAAK4vC,IAAMA,EAwCX5vC,KAAKswC,QAAU,SAASruC,GACtBquC,EAAQruC,GACR2pC,EAAM7P,UAGR/7B,KAAKywC,SAAW,SAASxuC,GACvBwuC,EAASxuC,GACT2pC,EAAM7P,UAgcR6P,EAAM5O,WAAWxd,iBAAiB,cAAeiuB,GAAe,GAEhE7B,EAAM5O,WAAWxd,iBAAiB,YAAakuB,GAAa,GAC5D9B,EAAM5O,WAAWxd,iBAAiB,QAASmuB,GAAc,GAEzD/B,EAAM5O,WAAWxd,iBAAiB,aAAcouB,GAAc,GAC9DhC,EAAM5O,WAAWxd,iBAAiB,WAAYquB,GAAY,GAC1DjC,EAAM5O,WAAWxd,iBAAiB,YAAasuB,GAAa,GAE5DvxB,OAAOiD,iBAAiB,UAAWyuB,GAAW,GAC9C1xB,OAAOiD,iBAAiB,SAjHxB,SAAiBC,IAEK,IAAlBmsB,EAAM1C,UACe,IAArB0C,EAAMvB,aACc,IAApBuB,EAAM3B,WAzPV,SAAqBxqB,GACnB,OAAQA,EAAM8xB,SACZ,KAAK3F,EAAMhiC,KAAK8gC,MACQ,GAAlBkB,EAAMP,WACRO,EAAMuF,eAAgB,EACtBl5B,EAAQ8zB,EAAMC,OAwPpBkG,CAAYzyB,MAyG4B,GAI1Czf,KAAK+7B,SAwHP,OAlHAjI,EAAc5yB,UAAYyI,OAAOqM,OAAO6Z,EAAMsiB,gBAAgBjxC,WAC9D4yB,EAAc5yB,UAAUiZ,YAAc2Z,EAEtCnqB,OAAOyoC,iBAAiBte,EAAc5yB,UAAW,CAC/CmxC,OAAQ,CACNxtC,IAAK,WAIH,OAHA9D,QAAQsvC,KACN,4DAEKrwC,KAAKwI,SAMhB8pC,OAAQ,CACNztC,IAAK,WAIH,OAHA9D,QAAQsvC,KACN,+EAEMrwC,KAAK6pC,YAGfxZ,IAAK,SAASzwB,GACZmB,QAAQsvC,KACN,8EAEFrwC,KAAK6pC,YAAcjqC,IAIvB2yC,SAAU,CACR1tC,IAAK,WAIH,OAHA9D,QAAQsvC,KACN,mFAEMrwC,KAAK+pC,cAGf1Z,IAAK,SAASzwB,GACZmB,QAAQsvC,KACN,kFAEFrwC,KAAK+pC,cAAgBnqC,IAIzB4yC,MAAO,CACL3tC,IAAK,WAIH,OAHA9D,QAAQsvC,KACN,6EAEMrwC,KAAKiqC,WAGf5Z,IAAK,SAASzwB,GACZmB,QAAQsvC,KACN,4EAEFrwC,KAAKiqC,WAAarqC,IAItB6yC,OAAQ,CACN5tC,IAAK,WAIH,OAHA9D,QAAQsvC,KACN,+EAEMrwC,KAAKqqC,YAGfha,IAAK,SAASzwB,GACZmB,QAAQsvC,KACN,8EAEFrwC,KAAKqqC,YAAczqC,IAIvB8yC,aAAc,CACZ7tC,IAAK,WAIH,OAHA9D,QAAQsvC,KACN,wFAEMrwC,KAAK2pC,eAGftZ,IAAK,SAASzwB,GACZmB,QAAQsvC,KACN,uFAEFrwC,KAAK2pC,eAAiB/pC,IAI1B+yC,qBAAsB,CACpB9tC,IAAK,WAIH,OAHA9D,QAAQsvC,KACN,4FAEKrwC,KAAK4pC,eAGdvZ,IAAK,SAASzwB,GACZmB,QAAQsvC,KACN,4FAEFrwC,KAAK4pC,cAAgBhqC,MAOpBk0B,I,gFCz+BT,IAAIF,EAAM5R,EAAQ,IAAc6R,QAC5BlzB,EAAWqhB,EAAQ,GAAmB6R,QACtChE,EAAQ+D,EAAI/D,MACL+D,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,GACJH,EAAI1iB,GAEb8iB,EAAOxf,QAAU,SAASmB,GAMxBA,EAAKi9B,eAAiB,SAASpgC,EAAOE,EAAOmgC,GAC3C,IAAIC,EAAe,EACfC,EAAe,EAInB,GACED,GAAgBD,EAAeG,WAAaH,EAAeI,WAC3DF,GAAgBF,EAAeK,UAAYL,EAAeM,gBAClDN,EAAiBA,EAAeO,cAK1C,MAAO,CAAEpwC,EAHCwP,EAAQsgC,EAGG7vC,EAFXyP,EAAQqgC,IASpBp9B,EAAK09B,SAAW,SAAS1qC,GACvB,IAAI2qC,EAAY3qC,EACXA,EAAKyI,OACRzI,EAAKyI,KAAO,IAGd,IAAgBmiC,EAoBhB,OAdAD,EAAUjpC,WAAa,CACrBjB,MAAOT,EAAKyI,KAAKhI,OAAS,WAC1BpH,MAAO2G,EAAKyI,KAAKpP,OAAS4xB,EAAIwE,WAC9Bob,OAAQ7qC,EAAKyI,KAAKoiC,QAAU5f,EAAIyE,eAChC31B,MAAOiG,EAAKyI,KAAK1O,OAASkxB,EAAImF,WAC9BtD,WAXc8d,EAWO5yC,EAASC,MAAMiC,MAAMb,MAV7B,4CAA4CyxC,KAAKF,GAE9D,IAAI1jB,EAAM6C,MAAM/xB,EAASC,MAAMiC,MAAMb,OACnC,MAQF0xC,SAAUlsC,KAAK+2B,KAAqB,EAAhB/2B,KAAKmsC,UACzBrxC,KAAMqG,EAAKyI,KAAK9O,KAChBsxC,MAAOjrC,EAAKyI,KAAKwiC,OAAShgB,EAAI4F,UAC9Bx2B,EAAG,EACHC,EAAG,EACHqsB,GAAI,EACJC,GAAI,GAEC+jB,GAMT39B,EAAKk+B,YAAc,WACjB,IAAIC,EAAY,IAAIjkB,EAAMkkB,MAO1B,OANAD,EAAUE,OAAO,EAAG,GACpBF,EAAUG,OAAO,EAAG,GACpBH,EAAUG,OAAO,EAAG,GACpBH,EAAUG,OAAO,EAAG,GACpBH,EAAUG,OAAO,EAAG,GACpBH,EAAUG,OAAO,EAAG,GACb,IAAIpkB,EAAMqkB,cAAcJ,IAMjCn+B,EAAKw+B,YAAc,WACjB,IAAIL,EAAY,IAAIjkB,EAAMkkB,MAM1B,OALAD,EAAUE,QAAQ,GAAI,GACtBF,EAAUG,QAAQ,EAAG,GACrBH,EAAUG,OAAO,EAAG,GACpBH,EAAUG,OAAO,GAAI,GACrBH,EAAUG,QAAQ,GAAI,GACf,IAAIpkB,EAAMqkB,cAAcJ,IAOjCn+B,EAAKy+B,YAAc,SAASC,GAC1B,OAAO7sC,KAAK4nC,IAAKiF,EAAS7sC,KAAKgiC,IAAO,EAAM,GAAM,EAAM,M,oBCjG5D,IAAI5V,EAAM5R,EAAQ,IAAa6R,QAC3BhE,EAAQ+D,EAAI/D,MAKZiE,GAJOF,EAAIzQ,KACJyQ,EAAI3E,KACA2E,EAAItD,SACIsD,EAAIzB,iBACPyB,EAAIE,eACpBC,EAAKH,EAAIG,GAEIpzB,GADRizB,EAAI1iB,GACiB8Q,EAAQ,GAA9B6R,SAORG,EAAOxf,QAAU,SAASmB,GAIxBA,EAAKwnB,WAAa,WAChB,IAAImX,EAAetyB,EAAQ,IAC3BrM,EAAK/U,MAAQ0zC,IACT3+B,EAAKqkB,SACPrkB,EAAKiK,YAAYjK,EAAKqkB,UAO1BrkB,EAAKunB,YAAc,WACU,UAAvBvnB,EAAK2hB,QAAQC,OACf5hB,EAAK4+B,oBAC2B,MAAvB5+B,EAAK2hB,QAAQC,QACtB5hB,EAAK6+B,iBAOT7+B,EAAK4+B,kBAAoB,WACvB5+B,EAAK6hB,MAAQxV,EAAQ,IAARA,CAA8BrM,EAAK/U,QAMlD+U,EAAK6+B,cAAgB,WACnB7+B,EAAK6hB,MAAQzD,EACV0gB,kBACAjd,MAAM,SAAUzD,EAAG2gB,gBAAgBC,UAAU,IAC7Cnd,MAAM,OAAQzD,EAAGqK,aACjB5G,MAAM,IAAKzD,EAAG6gB,OAAO,GAAGD,SAAS,OACjCnd,MAAM,IAAKzD,EAAG8gB,OAAO,GAAGF,SAAS,OACjCx5B,OAIHxF,EAAK6hB,MAAMiH,WAAW,MAItB9oB,EAAK6hB,MAAMsd,cAAc,KAG3Bn/B,EAAK8mB,iBAAmB,WACtB9mB,EAAK8e,QAAUgH,SAASsZ,eAAe,mBACvCp/B,EAAKq/B,aAAevZ,SAASwZ,cAAc,oBAC3Ct/B,EAAK2nB,WAAa3nB,EAAK8e,QAAQ8I,wBAC/B5nB,EAAK8a,MAAQ9a,EAAKq/B,aAAaE,YAC/Bv/B,EAAK6nB,OAAS7nB,EAAKq/B,aAAaG,aAChCx/B,EAAK+nB,OAAS/nB,EAAK8a,MAAQ9a,EAAK6nB,OAChC7nB,EAAKid,WAAa,IAAI/C,EAAMgD,QAAQld,EAAK8a,MAAO9a,EAAK6nB,SAGvD7nB,EAAK+mB,kBAAoB,WACvB/mB,EAAKwmB,SAAS0B,QAAQloB,EAAK8a,MAAO9a,EAAK6nB,QACvC7nB,EAAKsnB,YAAc,IAAIpN,EAAM8W,cAC7BhxB,EAAKsnB,YAAYY,QAAQloB,EAAK8a,MAAO9a,EAAK6nB,QAC1C7nB,EAAKsnB,YAAYD,WAAWuJ,MAAM7U,SAAW,WAC7C/b,EAAKsnB,YAAYD,WAAWuJ,MAAM9zB,IAAM,EACxCkD,EAAK6mB,gBAAgBQ,WAAWuJ,MAAM7U,SAAW,WACjD/b,EAAK6mB,gBAAgBQ,WAAWuJ,MAAM6J,OAAS,OAC/Cz6B,EAAK6mB,gBAAgBQ,WAAWuJ,MAAM6O,aAAe,GACrDz/B,EAAK6mB,gBAAgBQ,WAAWuJ,MAAMh0B,KAAO,EAC7CoD,EAAK6mB,gBAAgBqB,QAAQ,GAAMloB,EAAK6nB,OAAQ,GAAM7nB,EAAK6nB,QAC3D7nB,EAAK6mB,gBAAgB6Y,OAAS,IAC9B1/B,EAAKwmB,SAASmZ,cAAc/4B,OAAOg5B,mBAMrC5/B,EAAKgnB,YAAc,WACjBhnB,EAAKgoB,QAAU,IAAI9N,EAAMkgB,kBACvBp6B,EAAK8kB,IACL9kB,EAAK8a,MAAQ9a,EAAK6nB,OAClB7nB,EAAKod,KACLpd,EAAKqd,KAEPrd,EAAKgoB,QAAQjM,SAASP,EAAI,IAC1B,IAAI2K,EAAW,IAAIhI,EAAcne,EAAKgoB,QAAShoB,EAAK8e,QAAS9zB,GAG7DA,EAASm7B,SAAWA,EAEpBA,EAASuP,UAAW,EACpBvP,EAASwP,SAAU,EACnBxP,EAASqN,YAAc,GACvBrN,EAAS0G,YAAiC,EAAnB7sB,EAAKglB,YAC5BmB,EAAStzB,OAAO6nB,IAAI,EAAG,EAAG,GAC1ByL,EAASiO,cAAe,EACxBp0B,EAAKmmB,SAAWA,GAMlBnmB,EAAKinB,aAAe,WAClBjnB,EAAK8nB,QAAU,GACf9nB,EAAK8nB,QAAQsB,OAAS,IAAIlP,EAAMkgB,kBAC9Bp6B,EAAK8kB,IACL,EACA9kB,EAAKod,KACLpd,EAAKqd,KAEPrd,EAAK8nB,QAAQsB,OAAOrN,SAASP,EAAuB,EAAnBxb,EAAKglB,YAErChlB,EAAK6/B,UAAY,CAChBxyC,EAAG,KACHC,EAAG,KACHkuB,EAAG,MAOFxb,EAAK8nB,QAAQgY,mBAAqB,SAASC,EAAQC,GAElD,GACEhgC,EAAKgoB,QAAQjM,SAAS1uB,GAAK2S,EAAK6/B,UAAUxyC,GAC1C2S,EAAKgoB,QAAQjM,SAASzuB,GAAK0S,EAAK6/B,UAAUvyC,GAC1C0S,EAAKgoB,QAAQjM,SAASP,GAAKxb,EAAK6/B,UAAUrkB,EAH5C,CAQAxb,EAAK6/B,UAAUxyC,EAAI2S,EAAKgoB,QAAQjM,SAAS1uB,EACzC2S,EAAK6/B,UAAUvyC,EAAI0S,EAAKgoB,QAAQjM,SAASzuB,EACzC0S,EAAK6/B,UAAUrkB,EAAIxb,EAAKgoB,QAAQjM,SAASP,EAGzC,IAAMykB,GAAejgC,EAAK6nB,OAAS,KAAO7nB,EAAKgoB,QAAQjM,SAASP,EAEhExb,EAAKmmB,SAAS8T,KACV8F,EAAS//B,EAAK8nB,QAAQhN,MAAS,IAC/B,IACA9a,EAAKgoB,QAAQjM,SAAS1uB,IACrB4yC,IACAjgC,EAAK6nB,OAASmY,GAAUhgC,EAAK8nB,QAAQD,OAAU,IAChD,IACA7nB,EAAKgoB,QAAQjM,SAASzuB,GACtB2yC,KAINj1C,EAAS80C,mBAAqB9/B,EAAK8nB,QAAQgY,oBAM/C9/B,EAAKknB,cAAgB,WACnBlnB,EAAKmpB,MAAQ,IAAIjP,EAAMgmB,MAEvBlgC,EAAK6qB,OAAS,IAAI3Q,EAAMiB,eACxBnb,EAAK7T,MAAQ,IAAI+tB,EAAMimB,MACvBngC,EAAKmpB,MAAMp2B,IAAIiN,EAAK7T,OAEH,SAAb8xB,EAAIwF,MACNzjB,EAAKogC,kBAELpgC,EAAKqgC,mBAGP,IAAIC,EAAOtgC,EAAKk+B,cAEhBl+B,EAAKugC,kBAAkBD,GACvBtgC,EAAKwgC,gBAAgBF,GACrBtgC,EAAKygC,cAAcH,IAMrBtgC,EAAKogC,gBAAkB,WACrBpgC,EAAK9S,MAAQ,IAAIgtB,EAAMiB,eACvB,IAAI/lB,EAAY,IAAI8kB,EAAMkC,gBACxB,IAAIX,aAA8B,EAAjBzb,EAAKykB,WACtB,GAEEic,EAAS,IAAIxmB,EAAMkC,gBACrB,IAAIX,aAA8B,EAAjBzb,EAAKykB,WACtB,GAGFzkB,EAAK9S,MAAMmvB,aAAa,WAAYjnB,GACpC4K,EAAK9S,MAAMmvB,aAAa,QAASqkB,GACjC,IAAMxlB,EAAW,IAAIylB,aACrBzlB,EAAS0lB,aAAc5gC,EAAK9S,MAAM0pB,WAAWxhB,WAC7C8lB,EAAS2lB,UAAW7gC,EAAK9S,MAAM0pB,WAAW8pB,QAE1CI,QAAU,IAAIC,aAAc,CAE1B10C,MAAO,SACP20C,UAAW,EACXC,cAAc,EAGdC,QAAQ,EACRC,iBAAiB,IAInB,IAAIC,EAAO,IAAIC,MAAOnmB,EAAU4lB,SAChCM,EAAKE,uBACLF,EAAK90C,MAAMouB,IAAK,EAAG,EAAG,GACtByO,MAAMp2B,IAAKquC,IAMbphC,EAAKqgC,iBAAmB,WACtBrgC,EAAK9S,MAAQ,IAAIgtB,EAAMiB,eACvB,IAAIuC,EAAW,IAAIxD,EAAMqnB,kBAAkB,CACzCP,UAAW,EACX30C,MAAO,SACP40C,aAAc/mB,EAAMsnB,aACpBC,QAASvnB,EAAMwnB,cAEjB1hC,EAAKohC,KAAO,IAAIlnB,EAAMynB,aAAa3hC,EAAK9S,MAAOwwB,GAC/C1d,EAAKohC,KAAKQ,eAAgB,EAC1B5hC,EAAKmpB,MAAMp2B,IAAIiN,EAAKohC,MAEpB,IAAIhsC,EAAY,IAAI8kB,EAAMkC,gBACxB,IAAIX,aAA8B,EAAjBzb,EAAKykB,WACtB,GAEEic,EAAS,IAAIxmB,EAAMkC,gBACrB,IAAIX,aAA8B,EAAjBzb,EAAKykB,WACtB,GAGFzkB,EAAK9S,MAAMmvB,aAAa,WAAYjnB,GACpC4K,EAAK9S,MAAMmvB,aAAa,QAASqkB,GAGjC1gC,EAAK6hC,eAAiB,IAAI3nB,EAAMiB,eAChC,IAAI2mB,EAAgB,IAAI5nB,EAAM6nB,kBAAkB,CAC9C11C,MAAO,WAET2T,EAAKmgB,MAAQ,IAAIjG,EAAM8nB,KAAKhiC,EAAK6hC,eAAgBC,GACjD9hC,EAAKmgB,MAAMyhB,eAAgB,EAC3B5hC,EAAKmpB,MAAMp2B,IAAIiN,EAAKmgB,OACpB,IAAI8hB,EAAiB,IAAI/nB,EAAMkC,gBAC7B,IAAIX,aAA8B,EAAjBzb,EAAKykB,WACtB,GAEEyd,EAAc,IAAIhoB,EAAMkC,gBAC1B,IAAIX,aAA8B,EAAjBzb,EAAKykB,WACtB,GAGFzkB,EAAK6hC,eAAexlB,aAAa,WAAY4lB,GAC7CjiC,EAAK6hC,eAAexlB,aAAa,QAAS6lB,GAE1CliC,EAAKmiC,UAAY,GAMnBniC,EAAKugC,kBAAoB,SAASD,GAChCtgC,EAAKoiC,UAAY,IAAIloB,EAAMmoB,KACzB/B,EACA,IAAIpmB,EAAMqnB,kBAAkB,CAAEP,UAAW,EAAG30C,MAAO,WAErD2T,EAAKoiC,UAAUvtC,SAAU,EACzBmL,EAAKmpB,MAAMp2B,IAAIiN,EAAKoiC,YAMtBpiC,EAAKwgC,gBAAkB,SAASF,GAC9BtgC,EAAKsiC,WAAa,IAAIpoB,EAAMmoB,KAC1B/B,EACA,IAAIpmB,EAAMqnB,kBAAkB,CAAEP,UAAW,EAAG30C,MAAO,YAErD2T,EAAKmpB,MAAMp2B,IAAIiN,EAAKsiC,YACpBtiC,EAAKuiC,gBAAmC,EAAnBviC,EAAKglB,cAM5BhlB,EAAKygC,cAAgB,SAASH,GAC5BtgC,EAAKwiC,SAAW,IAAItoB,EAAMmoB,KACxB/B,EACA,IAAIpmB,EAAMqnB,kBAAkB,CAAEP,UAAW,EAAG30C,MAAO2T,EAAK5V,SAAU,SAAW,KAE/E4V,EAAKmpB,MAAMp2B,IAAIiN,EAAKwiC,UACpBxiC,EAAKyiC,gBAAgBziC,EAAKgoB,UAM5BhoB,EAAKmnB,YAAc,WACjBnnB,EAAK6qB,OAAOxO,aACV,WACA,IAAInC,EAAMkC,gBAAgB,IAAIX,aAAa,IAAS,IAEtDzb,EAAK6qB,OAAO6X,wBACZ1iC,EAAKmN,UAAY,EAgEjBnN,EAAK2iC,oBA/Dc,SAASC,GAC1B,OAAO,SAAS94B,GAEd,IAAIjN,EAAOE,EADX+M,EAAM2d,iBAEF3d,EAAMgyB,SAAWhyB,EAAMgyB,QAAQ1sC,OAAS,GAE1CyN,EAAQiN,EAAMgyB,QAAQvpC,KAAK,GAAGsK,MAC9BE,EAAQ+M,EAAMgyB,QAAQvpC,KAAK,GAAGwK,QAE9BF,EAAQiN,EAAMjN,MACdE,EAAQ+M,EAAM/M,OAGhB,IAAI8lC,EAAS7iC,EAAKi9B,eAAepgC,EAAOE,EAAO1S,MAC3Cq0B,EAAUmkB,EAAOx1C,EAAI2S,EAAK8a,MAAS,EAAI,EACvC6D,EAAS,EAAKkkB,EAAOv1C,EAAI0S,EAAK6nB,OAAU,EACxCib,EAAgB,IAAI5oB,EAAMqH,QAAQ7C,EAAQC,EAAQ,GACtDmkB,EAAcC,UAAU/iC,EAAKgoB,SAC7B,IAAIgb,EAAMF,EAAc/L,IAAI/2B,EAAKgoB,QAAQjM,UAAUsP,QACnDyX,EAAcG,YAGdjjC,EAAKkjC,4BACHL,EAAOx1C,GAAK2S,EAAK8nB,QAAQhN,OACzB9a,EAAK6nB,OAASgb,EAAOv1C,GAAM0S,EAAK8nB,QAAQD,OAAS7nB,EAAK6mB,gBAAgBQ,WAAWuJ,MAAM6O,cACvFz/B,EAAK6nB,OAASgb,EAAOv1C,GAAK0S,EAAK6mB,gBAAgBQ,WAAWuJ,MAAM6O,aAC9Dz/B,EAAKkjC,8BACPljC,EAAK8nB,QAAQpJ,OAASmkB,EAAOx1C,EAC7B2S,EAAK8nB,QAAQnJ,OAASkkB,EAAOv1C,EAAI0S,EAAK6mB,gBAAgBQ,WAAWuJ,MAAM6O,cAIzE,IAAI0D,EAAY,IAAIjpB,EAAMkpB,UACxBpjC,EAAKgoB,QAAQjM,SACb+mB,GAIE/V,GAAY/sB,EAAKgoB,QAAQjM,SAASP,EAAIwnB,EAAIxnB,EAC1C6nB,EAAMrjC,EAAKgoB,QAAQjM,SACpBsP,QACAt4B,IAAIiwC,EAAIjJ,eAAehN,IAEtB6V,GAAY5iC,EAAKsjC,cAA+B,GAAfx5B,EAAMy5B,QAKzCX,GAAY5iC,EAAKsjC,cACjBx5B,EAAMjX,OAAO4jB,aAAa,mBAE1B3M,EAAMjX,OAAO2wC,SAEb15B,EAAM2d,iBACFmb,GAAY5iC,EAAKsjC,cACnBtjC,EAAKyjC,mBAAmB35B,GAE1B9J,EAAK0jC,iBAAiB55B,EAAOq5B,EAAWE,EAAKT,UAYrD5iC,EAAK0jC,iBAAmB,SAAS55B,EAAOq5B,EAAWE,EAAKT,GACtD,IAAIe,EAAaR,EAAUS,iBAAiB5jC,EAAK7T,MAAMyI,UACvD,GAAI+uC,EAAWv0C,OAAQ,CAErB,IAAIy0C,EAAYF,EAAW,GAAGz+B,OAAOqU,MACrCvZ,EAAK6kB,aAAegf,EACpBjB,EACE5iC,EAAK/U,MAAM6sB,QAAQ+rB,GACnBR,EAAIh2C,EACJg2C,EAAI/1C,EACJwc,EAAMoxB,OACNpxB,EAAMg6B,cAGRlB,EAAS,KAAMS,EAAIh2C,EAAGg2C,EAAI/1C,EAAGwc,EAAMoxB,OAAQpxB,EAAMg6B,UAOrD9jC,EAAK2iC,mBAAqB,SAASoB,GACjC/jC,EAAK8e,QAAQjV,iBACX,YACAk6B,EAAa/jC,EAAKo4B,cAClB,GAEFp4B,EAAK8e,QAAQjV,iBACX,YACAk6B,EAAa/jC,EAAK+3B,cAClB,GAEF/3B,EAAK8e,QAAQjV,iBACX,UACAk6B,EAAa/jC,EAAKq4B,YAClB,GAEFr4B,EAAK8e,QAAQjV,iBACX,UACAk6B,EAAa/jC,EAAKsjC,eAClB,GAEFtjC,EAAK8e,QAAQjV,iBACX,aACAk6B,EAAa/jC,EAAK+3B,cAClB,GAEF/3B,EAAK8e,QAAQjV,iBACX,YACAk6B,EAAa/jC,EAAKo4B,cAClB,GAEFp4B,EAAK8e,QAAQjV,iBACX,WACAk6B,EAAa/jC,EAAKq4B,YAClB,GAEFr4B,EAAK8e,QAAQjV,iBACX,cACAk6B,EAAa/jC,EAAKq4B,YAClB,M,oBC1cN,IAAIpa,EAAM5R,EAAQ,IAAa6R,QACnBD,EAAI/D,MACL+D,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,GACJH,EAAI1iB,GACL8Q,EAAQ,KAEhBgS,EAAOxf,QAAU,SAASmB,GACxBA,EAAKxM,QAAU,SAASR,GACtBgN,EAAK/U,MAAMuI,QAAQR,EAAKE,GAAIF,EAAKyI,MACjC,IAAIuoC,EAAYhkC,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,IAWxC,OAVA8wC,EAAU32C,EAAI2F,EAAK3F,EACnB22C,EAAU12C,EAAI0F,EAAK1F,EACnB02C,EAAU7iB,GAAKnuB,EAAKmuB,GACpB6iB,EAAU5iB,GAAKpuB,EAAKouB,GACpB4iB,EAAUjjB,aAAqBxsB,GAAXvB,EAAKmuB,GACzB6iB,EAAUhjB,aAAqBzsB,GAAXvB,EAAKouB,GACzBphB,EAAK09B,SAASsG,GACdhkC,EAAKikC,SAASD,GACdA,EAAUtzC,MAAQ,GAClBsP,EAAKolB,YAAa,EACX4e,GAGThkC,EAAKkkC,WAAa,SAASlxC,GACpBA,GAASA,EAAKE,KAGnB8M,EAAKmkC,iBAAiBnxC,GACtBgN,EAAKokC,YAAYpxC,GACjBgN,EAAK7T,MAAM6/B,OAAOh5B,EAAK0B,WAAWC,aAClCqL,EAAK/U,MAAMi5C,WAAWlxC,EAAKE,IAC3B8M,EAAKqkC,WAAWrxC,GAChBgN,EAAKmN,WAAa,IAGpBnN,EAAKmkC,iBAAmB,SAASnxC,GAC/B,IAAIsxC,EAAYtkC,EAAK/U,MAAMs5C,SAASvxC,EAAKE,IACrCoxC,GACFA,EAAU3zC,SAAQ,SAASu5B,GACzBlqB,EAAK/U,MAAMu5C,WAAWta,OAK5BlqB,EAAKqkC,WAAa,SAASrxC,GACzB,IAAI7G,EAAQ6T,EAAK6hB,MAAM11B,QACvB,GAAIA,EACF,IAAK,IAAI2L,EAAI,EAAGA,EAAI3L,EAAMiD,OAAQ0I,IAC5B3L,EAAM2L,GAAG5E,IAAMF,EAAKE,KACtB8M,EAAKmpB,MAAM6C,OAAO7/B,EAAM2L,GAAGpD,WAAWC,aACtCxI,EAAM2L,GAAGpD,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQ2lB,QAAS,EAC5Dt4C,EAAM4e,OAAOjT,EAAG,KAMxBkI,EAAKokC,YAAc,SAASpxC,GAI1B,IAHA,IAAIoC,EAAY4K,EAAK9S,MAAM0pB,WAAWmF,SAAS3D,MAC3CsoB,EAAS1gC,EAAK9S,MAAM0pB,WAAWvqB,MAAM+rB,MACrCssB,EAAS,EACJ5sC,EAAI,EAAGA,EAAI4sC,EAAS1kC,EAAK6f,YAAYzwB,OAAQ0I,IACpD,GACEkI,EAAK6f,YAAY/nB,EAAI4sC,GAAQhyC,OAAOQ,IAAMF,EAAKE,IAC/C8M,EAAK6f,YAAY/nB,EAAI4sC,GAAQ7xC,OAAOK,IAAMF,EAAKE,GAC/C,CACA,IAAK,IAAIzC,EAAIqH,EAAI4sC,EAAQj0C,EAAIuP,EAAK6f,YAAYzwB,OAAQqB,IAAK,CACzD,IAAIb,EAAIa,EAAI,EACRb,GAAKoQ,EAAK6f,YAAYzwB,QACxBgG,EAAc,EAAJ3E,GAAS,EACnB2E,EAAc,EAAJ3E,EAAQ,GAAK,EACvB2E,EAAc,EAAJ3E,EAAQ,GAAK,EACvB2E,EAAc,EAAJ3E,EAAQ,GAAK,EACvBiwC,EAAW,EAAJjwC,GAAS,IAChBiwC,EAAW,EAAJjwC,EAAQ,GAAK,IACpBiwC,EAAW,EAAJjwC,EAAQ,GAAK,GACpBiwC,EAAW,EAAJjwC,EAAQ,GAAK,IACpBiwC,EAAW,EAAJjwC,EAAQ,GAAK,IACpBiwC,EAAW,EAAJjwC,EAAQ,GAAK,KAEpBuP,EAAK6f,YAAYpvB,GAAKuP,EAAK6f,YAAYjwB,GACvCoQ,EAAKwkB,YAAgB,EAAJ/zB,GAASuP,EAAKwkB,YAAgB,EAAJ50B,GAC3CoQ,EAAKwkB,YAAgB,EAAJ/zB,EAAQ,GAAKuP,EAAKwkB,YAAgB,EAAJ50B,EAAQ,GACvDwF,EAAc,EAAJ3E,GAAS2E,EAAc,EAAJxF,GAC7BwF,EAAc,EAAJ3E,EAAQ,GAAK2E,EAAc,EAAJxF,EAAQ,GACzCwF,EAAc,EAAJ3E,EAAQ,GAAK2E,EAAc,EAAJxF,EAAQ,GACzCwF,EAAc,EAAJ3E,EAAQ,GAAK2E,EAAc,EAAJxF,EAAQ,GACzC8wC,EAAW,EAAJjwC,GAASiwC,EAAW,EAAJ9wC,GACvB8wC,EAAW,EAAJjwC,EAAQ,GAAKiwC,EAAW,EAAJ9wC,EAAQ,GACnC8wC,EAAW,EAAJjwC,EAAQ,GAAKiwC,EAAW,EAAJ9wC,EAAQ,GACnC8wC,EAAW,EAAJjwC,EAAQ,GAAKiwC,EAAW,EAAJ9wC,EAAQ,GACnC8wC,EAAW,EAAJjwC,EAAQ,GAAKiwC,EAAW,EAAJ9wC,EAAQ,GACnC8wC,EAAW,EAAJjwC,EAAQ,GAAKiwC,EAAW,EAAJ9wC,EAAQ,IAGvCoQ,EAAK6f,YAAYza,MACjBpF,EAAKwkB,YAAYpf,MACjBpF,EAAKwkB,YAAYpf,MACjBpF,EAAKmiC,WAAa,EAClBuC,GAAU,IAMhB1kC,EAAK8X,QAAU,SAAStF,GACtB,OAAOxS,EAAK/U,MAAM6sB,QAAQtF,IAG5BxS,EAAKgN,QAAU,SAASta,EAAQG,GAAyB,IAAjBgC,IAAOye,UAAAlkB,OAAA,QAAAmF,IAAA+e,UAAA,KAAAA,UAAA,GACzCvc,EAAerE,EAAO+I,KAAKzP,IAAI+rB,QAAUllB,EAAO4I,KAAKzP,IAAI+rB,MACzD/gB,EAAgBtE,EAAO+I,KAAKzP,IAAIgsB,SAAWnlB,EAAO4I,KAAKzP,IAAIgsB,OAC3D2sB,EAAU,CACZhuC,YAAajE,EAAO+I,KAAKzP,IAAIsK,KAC7BM,YAAclE,EAAO+I,KAAKzP,IAAIoK,KAC9BS,UAAYhE,EAAO4I,KAAKzP,IAAIsK,KAC5BQ,UAAWjE,EAAO4I,KAAKzP,IAAIoK,KAC3BW,YAAaA,EACbC,aAAcA,GAEhBgJ,EAAK/U,MAAM4I,QAAQnB,EAAOQ,GAAIL,EAAOK,GAAGyxC,GACxC3kC,EAAK4kC,SAAS5kC,EAAK8X,QAAQplB,EAAOQ,IAAK8M,EAAK8X,QAAQjlB,EAAOK,IAAK2B,M,oBC5HpE,IAAIopB,EAAM5R,EAAQ,IAAa6R,QAC3BhE,EAAQ+D,EAAI/D,MACL+D,EAAIzQ,KACJyQ,EAAI3E,KACN2E,EAAIG,GACJH,EAAI1iB,GAEb8iB,EAAOxf,QAAU,SAAUmB,GAIzBA,EAAKihB,cAAgB,SAAUjuB,EAAM6xC,GAAavxB,UAAAlkB,OAAA,QAAAmF,IAAA+e,UAAA,IAAG2K,EAAIyE,gBAezD1iB,EAAKkhB,eAAiB,SAAUluB,EAAM6xC,GAGpC,IAFA,IAAMnkB,EAAQ,GACRC,EAAM,GACH7oB,EAAI,EAAGA,EAAIkI,EAAKxL,UAAUpF,OAAQ0I,IACzC,IAAK,IAAIrH,EAAI,EAAGA,EAAIuP,EAAKxL,UAAUsD,GAAGpH,MAAMtB,OAAQqB,IAC9CuP,EAAKxL,UAAUsD,KACnB4oB,EAAM7vB,KAAKmP,EAAKxL,UAAUsD,GAAGpH,MAAMD,GAAGK,QACtC6vB,EAAI9vB,KAAKmP,EAAKxL,UAAUsD,GAAGpH,MAAMD,GAAGM,OAGxC,GAAI8zC,EAAQ,CACV,IAAS/sC,EAAI,EAAGA,EAAI9E,EAAKtC,MAAMtB,OAAQ0I,IACrC4oB,EAAM7vB,KAAKmC,EAAKtC,MAAMoH,GAAGhH,QACzB6vB,EAAI9vB,KAAKmC,EAAKtC,MAAMoH,GAAG/G,MAEzBiP,EAAK8kC,mBAAmB9xC,EAAM0tB,EAAOC,QAErC3gB,EAAK8kC,mBAAmB9xC,EAAM0tB,EAAOC,IAOzC3gB,EAAK+kC,sBAAwB,SAAUC,GAKrChlC,EAAK/U,MAAM8P,aAAY,SAAUpJ,GAE/BqO,EAAK4f,iBAAiBjuB,EAAG,OAG3BqzC,EAASr0C,SAAQ,SAACqC,GACjBgN,EAAK4f,iBAAiB5sB,EAAM,MAE7BgN,EAAKihB,cAAc+jB,EAAS,IAAI,GAChChlC,EAAKihB,cAAc+jB,EAASA,EAAS51C,OAAS,IAAI,GAMlD,IAAI4wB,EAAM,IAAI9F,EAAM6C,MAAM/xB,SAASC,MAAMiC,MAAMb,OAAO0zB,EAClDE,EAAO,IAAI/F,EAAM6C,MAAM/xB,SAASC,MAAMiC,MAAMb,OAAO0gB,EACnDmT,EAAQ,IAAIhG,EAAM6C,MAAM/xB,SAASC,MAAMiC,MAAMb,OAAOoL,EAGxDuI,EAAK6f,YAAYlvB,SAAQ,SAAUC,GACjCA,EAAKkvB,UAAUC,EAAI/f,EAAK5V,SAAW,IAAO,IAC1CwG,EAAKkvB,UAAU/S,EAAI/M,EAAK5V,SAAW,IAAO,IAC1CwG,EAAKkvB,UAAUroB,EAAIuI,EAAK5V,SAAW,IAAO,OAI5C,IADA,IAAA66C,EAAA,SAAAntC,GAEEkI,EAAK6f,YAAYlvB,SAAQ,SAAUC,IAC5BA,EAAK8B,OAAOQ,IAAM8xC,EAASltC,GAAG5E,IAAMtC,EAAKiC,OAAOK,IAAM8xC,EAASltC,EAAE,GAAG5E,IAAQtC,EAAK8B,OAAOQ,IAAM8xC,EAASltC,EAAE,GAAG5E,IAAMtC,EAAKiC,OAAOK,IAAM8xC,EAASltC,GAAG5E,MACnJtC,EAAKkvB,UAAUC,EAAIC,EACnBpvB,EAAKkvB,UAAU/S,EAAIkT,EACnBrvB,EAAKkvB,UAAUroB,EAAIyoB,OALhBpoB,EAAI,EAAGA,EAAIktC,EAAS51C,OAAO,EAAG0I,IAAGmtC,EAAAntC,IAiB5CkI,EAAK8kC,mBAAqB,SAAU9xC,EAAM0tB,EAAOC,GAC/C3gB,EAAK/U,MAAM8P,aAAY,SAAApJ,IACa,GAA9BqO,EAAKxL,UAAU1E,QAAQ6B,IAAYA,GAAKqB,GAE1CgN,EAAK4f,iBAAiBjuB,EAAG,GACzBqO,EAAKqgB,cAAc1uB,KAKnBqO,EAAKylB,uBACoB,GAAxB/E,EAAM5wB,QAAQ6B,EAAEuB,MAAmC,GAAtBytB,EAAI7wB,QAAQ6B,EAAEuB,IAO3C8M,EAAK0lB,iBACgC,GAAtC1lB,EAAK0lB,eAAe51B,QAAQ6B,EAAEuB,MAE9B8M,EAAK4f,iBAAiBjuB,EAAG,IAEzBqO,EAAKihB,cAActvB,GAAG,EAAOssB,EAAI0E,qBARjC3iB,EAAK4f,iBAAiBjuB,EAAG,OAkC/BqO,EAAKqgB,cAAgB,SAAUrtB,GAC7B,IAAIgtB,EAAM,IAAI9F,EAAM6C,MAAM/xB,SAASC,MAAMiC,MAAMb,OAAO0zB,EAClDE,EAAO,IAAI/F,EAAM6C,MAAM/xB,SAASC,MAAMiC,MAAMb,OAAO0gB,EACnDmT,EAAQ,IAAIhG,EAAM6C,MAAM/xB,SAASC,MAAMiC,MAAMb,OAAOoL,EACnDzE,GAYHgN,EAAK6f,YAAYlvB,SAAQ,SAAUC,GACjCA,EAAKkvB,UAAUC,EAAI/f,EAAK5V,SAAW,IAAO,IAC1CwG,EAAKkvB,UAAU/S,EAAI/M,EAAK5V,SAAW,IAAO,IAC1CwG,EAAKkvB,UAAUroB,EAAIuI,EAAK5V,SAAW,IAAO,OAG5C4V,EAAK6f,YAAYlvB,SAAQ,SAAUC,GAC7BA,EAAK8B,OAAOQ,IAAMF,EAAKE,IAAMtC,EAAKiC,OAAOK,IAAMF,EAAKE,KACtDtC,EAAKkvB,UAAUC,EAAIC,EACnBpvB,EAAKkvB,UAAU/S,EAAIkT,EACnBrvB,EAAKkvB,UAAUroB,EAAIyoB,OAnBvBlgB,EAAK6f,YAAYlvB,SAAQ,SAAUC,GAEjCA,EAAKkvB,UAAUC,EAAIC,EACnBpvB,EAAKkvB,UAAU/S,EAAIkT,EACnBrvB,EAAKkvB,UAAUroB,EAAIyoB,MA4DzBlgB,EAAK4f,iBAAmB,SAAU5sB,EAAMkyC,GACtClyC,EAAK0B,WAAWC,YAAY+oB,SAASV,QAAUkoB,GAEjDllC,EAAK2f,UAAY,SAAU3sB,EAAMkyC,GAC/BlyC,EAAK0B,WAAWC,YAAY+oB,SAASrxB,MAAM84C,OAAOD,M,oBC/NtD,IAAIjnB,EAAM5R,EAAQ,IAAa6R,QAC3BhE,EAAQ+D,EAAI/D,MAOClvB,GANNizB,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,GACJH,EAAI1iB,GACL8Q,EAAQ,KACcA,EAAQ,GAA9B6R,SAERG,EAAOxf,QAAU,SAAUmB,GAOzBA,EAAKo4B,YAAc,SAAU5jC,EAAWkqB,EAAQC,EAAQuc,EAAQkK,GAoC9D,GAlCAplC,EAAK0e,OAASA,EACd1e,EAAK2e,OAASA,EACV3e,EAAKqlC,eAAiBrlC,EAAKmlB,YAC7Bn6B,EAASC,MAAMmc,WAAa,KAIvBpH,EAAKue,WAAkD,GAAtCve,EAAKxL,UAAU1E,QAAQ0E,IAAqB4wC,GAChEplC,EAAKsK,iBAQFtK,EAAKue,UAERve,EAAKqhB,eAAe3C,EAAQC,IAO5B3e,EAAKxL,UAAUpF,OAAS,IAEtB4Q,EAAKue,UACPve,EAAK6hB,MAAM6E,MAAM,GAGnB1mB,EAAKye,gBAAgBC,EAAQC,IAG1B3e,EAAKmlB,UAGH,CAEL,GAAInlB,EAAKkjC,6BAA+BljC,EAAKslB,WAK3C,YAJAtlB,EAAK8nB,QAAQgY,mBACX9/B,EAAK8nB,QAAQpJ,OACb1e,EAAK8nB,QAAQnJ,QAQjB,GAAI3e,EAAKqlC,gBAAkBrlC,EAAKue,SAAU,CACpCve,EAAK+kB,UACP/kB,EAAKoiC,UAAUvtC,SAAU,EACzBmL,EAAK+kB,SAAU,GAEjB/kB,EAAKoiC,UAAUrmB,SAAS1uB,EAAIqxB,EAC5B1e,EAAKoiC,UAAUrmB,SAASzuB,EAAIqxB,EAC5B,IAAIiC,EAAQ5gB,EAAKwhB,WAAWn0B,EAAIqxB,EAC5BmC,EAAQ7gB,EAAKwhB,WAAWl0B,EAAIqxB,EAChC3e,EAAKoiC,UAAU91C,MAAMouB,IAAIkG,EAAOC,EAAO,QAEvC7gB,EAAKoiC,UAAUvtC,SAAU,OA1B3BmL,EAAKslC,QAAQ9wC,GACbwL,EAAKwhB,WAAa,IAAItH,EAAMqH,QAAQ7C,EAAQC,EAAQ,IAiCxD3e,EAAKslC,QAAU,SAAUtyC,GACpBhI,EAASC,MAAMmc,YACfpH,EAAKxL,UAAUpF,OAAO,IACrB4Q,EAAKulC,YAAwD,GAA3CvlC,EAAKxL,UAAU1E,QAAQkQ,EAAKulC,aAChDvlC,EAAKihB,cAAcjhB,EAAKulC,WAAW,GACnCvlC,EAAKulC,UAAU7wC,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQC,QAAS,EAClE/e,EAAKkhB,eAAeluB,GAAM,IAE5BgN,EAAKulC,UAAYvyC,EACbA,GAIFgN,EAAKsgB,mBAAmBttB,GAExBhI,EAASC,MAAMoc,iBAAmBrU,GACA,GAAzBgN,EAAKxL,UAAUpF,SACxB4Q,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrBqO,EAAK4f,iBAAiBjuB,EAAG,GAEzBqO,EAAKihB,cAActvB,GAAG,EAAOssB,EAAI0E,uBAEnC3iB,EAAKqgB,cAAc,MACnBr1B,EAASC,MAAMoc,iBAAmB,QAetC,IAAI7M,EAAY,EACZgrC,EAAU,EAIdxlC,EAAK+3B,YAAc,SAAUvjC,EAAWkqB,EAAQC,EAAQuc,EAAQkK,GAG9D,GAAIplC,EAAKkjC,6BAA+BljC,EAAKslB,WAG3C,OAFAtlB,EAAKmlB,WAAY,OACjBnlB,EAAK8nB,QAAQgY,mBAAmB9/B,EAAK8nB,QAAQpJ,OAAQ1e,EAAK8nB,QAAQnJ,QAOpE,GADA3e,EAAKqlC,eAAgB,EACjBrlC,EAAKqlC,cAAe,CAStB,GARArlC,EAAKmlB,WAAY,EACjBnlB,EAAKwhB,WAAa,IAAItH,EAAMqH,QAAQ7C,EAAQC,EAAQ,GACtC,GAAVuc,GAAgBl7B,EAAKue,WACvBve,EAAK+kB,SAAU,IAKyB,GAAtC/kB,EAAKxL,UAAU1E,QAAQ0E,KAAqB4wC,EAAM,CACpD,IAAK,IAAIttC,EAAI,EAAGA,EAAIkI,EAAKxL,UAAUpF,OAAQ0I,IACzCkI,EAAKxL,UAAUsD,GAAGpD,WAAW8pB,YAAa,EACrCP,EAAIW,kBAQP5e,EAAKxL,UAAUsD,GAAGpD,WAAWC,YAAY+oB,SAASrxB,MAAMquB,IACtD,IAAIR,EAAM6C,MAAM/c,EAAKxL,UAAUsD,GAAGpD,WAAWrI,QAR/C2T,EAAKxL,UACHsD,GACApD,WAAWC,YAAYC,SAAS,GAAGC,SAAU,EASjDmL,EAAKxL,UACHsD,GACApD,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQC,QAAS,EAKvD/e,EAAKxL,UAAY,GAIhBA,IAGDxJ,EAASC,MAAMoP,WAAWiD,sBAAuB,GAYnDmoC,aAAejrC,EACfA,EAAYC,KAAKC,MAGjBgrC,gBAAkBlrC,EAAYirC,aAK1BC,gBAAkB,IACpB1lC,EAAK2lC,eAAgB,EAGrB3lC,EAAK2lC,eAAgB,EAMnBnxC,IACFwL,EAAKue,SAAW/pB,GAC0B,GAAtCwL,EAAKxL,UAAU1E,QAAQ0E,KACzBwL,EAAKxL,UAAU3D,KAAK2D,GACpBA,EAAUE,WAAW8pB,YAAa,IAUlChqB,GACFwL,EAAKue,SAAW/pB,EAEZwL,EAAK2lC,eAIEP,IACTplC,EAAKxL,UAAUuW,OAAO/K,EAAKxL,UAAU1E,QAAQ0E,GAAY,GACzDA,EAAUE,WAAW8pB,YAAa,EAC7BP,EAAIW,kBAIPpqB,EAAUE,WAAWC,YAAY+oB,SAASrxB,MAAMquB,IAC9C,IAAIR,EAAM6C,MAAM/c,EAAKxL,UAAUsD,GAAGpD,WAAWrI,QAJ/CmI,EAAUE,WAAWC,YAAYC,SAAS,GAAGC,SAAU,EAOzDL,EAAUE,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQC,QAAS,EAE7D/e,EAAKue,SAAW,OAGdve,EAAK4lC,aACP5lC,EAAKgL,iBAAiB,IAAI,GAC1BhL,EAAK4lC,gBAAarxC,KAS1ByL,EAAKq4B,UAAY,SAAU7jC,EAAWkqB,EAAQC,EAAQuc,GAYpD,GAXAsK,EAAU/qC,KAAKC,MACfsF,EAAKmlB,WAAY,EAGjBn6B,EAASC,MAAMoP,WAAWiD,sBAAuB,EACjDtS,EAASC,MAAMmc,WAAa,KAC5Bpc,EAASC,MAAMyc,gBAAkB,GACjC1c,EAASC,MAAM0c,eAAgB,EAE/B3H,EAAKqK,yBAEuB,GAAzBrK,EAAKxL,UAAUpF,OAAY,CAC5B,IAAMy2C,EAAU7lC,EAAKxL,UAAU,GAC/BwL,EAAKsgB,mBAAmBulB,GACxB76C,EAASC,MAAMmc,WAAay+B,EAE5B76C,EAASC,MAAMkE,cAAgB6Q,EAAKwgB,0BAA0BqlB,GAMpC,GAAzB7lC,EAAKxL,UAAUpF,SAChBpE,EAASC,MAAMmc,WAAa,MAM5BpH,EAAK+kB,SAAU,EACf/kB,EAAKue,SAAW,KAChBve,EAAKoiC,UAAUvtC,SAAU,EAEzBmL,EAAKzE,GAAGuqC,KAAK,eAAgB9lC,EAAKxL,YAWtCwL,EAAKsjC,aAAe,SAAU9uC,GAE1BwL,EAAK9D,iBADH1H,GAGsB,MAO5BwL,EAAKyjC,mBAAqB,SAAU35B,GAE9B07B,EAAUhrC,EAAY,KACxBwF,EAAKzE,GAAGuqC,KAAK,cAAe,CAC1BjpC,MAAOiN,EAAMjN,MACbE,MAAO+M,EAAM/M,W,oBCjUrB,IAAIkhB,EAAM5R,EAAQ,IAAa6R,QAC3BhE,EAAQ+D,EAAI/D,MACL+D,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,GACJH,EAAI1iB,GAEb8iB,EAAOxf,QAAU,SAASmB,GAIxBA,EAAK+lC,mBAAqB,SAAS51C,GACjC6P,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9BA,EAAK0B,WAAWC,YAAYrI,MAAMouB,IAAIvqB,EAAGA,EAAG,GAC5C,IAAI61C,EAAQ,EAAI/nB,EAAIsF,eAAiBpzB,EACrC6C,EAAK0B,WAAWC,YAAYC,SAAS,GAAGtI,MAAMouB,IAAIsrB,EAAOA,EAAO,OAOpEhmC,EAAKimC,gBAAkB,SAASC,GAC9BlmC,EAAK/U,MAAM8P,aAAY,SAAS/H,GAE9B,GADAmzC,QAAUnzC,EAAK0B,WAAWwxC,GACrBC,QAEE,CACLA,QAAUt0C,KAAKxG,IAAI86C,QAAU,GAC7BnzC,EAAK0B,WAAWC,YAAYrI,MAAMouB,IAAIyrB,QAASA,QAAS,GACxD,IAAIH,EAAQ,EAAI/nB,EAAIsF,eAAiB4iB,QACrCnzC,EAAK0B,WAAWC,YAAYC,SAAS,GAAGtI,MAAMouB,IAAIsrB,EAAOA,EAAO,QALhE56C,QAAQC,IAAI,iCAalB2U,EAAKomC,oBAAsB,SAASC,GAClCrmC,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9BA,EAAK0B,WAAWC,YAAY+oB,SAASrxB,MAAMquB,IACzC,IAAIR,EAAM6C,MAAM,OAASspB,EAAY,iBAElCpoB,EAAIW,mBACP5rB,EAAK0B,WAAWC,YAAYC,SAAS,GAAG8oB,SAASrxB,MAAMquB,IACrD,IAAIR,EAAM6C,MAAM,OAASspB,EAAY,qBAS7CrmC,EAAKsmC,iBAAmB,SAASJ,GAC/B,IAAIpuC,EAAI,EACRV,OAAS,GACTxK,IAAM,KACNC,IAAM,KAENmT,EAAK/U,MAAM8P,aAAY,SAAS/H,IACzBmzC,QAAUnzC,EAAK0B,WAAWwxC,KAClB,MAAPt5C,MAAaA,IAAMu5C,SACZ,MAAPt5C,MAAaA,IAAMs5C,SACnBA,QAAUv5C,IAAKA,IAAMu5C,QAChBA,QAAUt5C,MAAKA,IAAMs5C,SAC9B/uC,OAAOU,GAAKquC,QACZruC,GAAK,GAELV,OAAOU,IAAM,KAIjBA,EAAI,EACJkI,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9B,IAAIqzC,GACc,GAAdjvC,OAAOU,GACTuuC,EAAY,GAEZjvC,OAAOU,IAAMV,OAAOU,GAAKlL,MAAQC,IAAMD,KACvCy5C,EAAwB,IAAZjvC,OAAOU,IAErB9E,EAAK0B,WAAWC,YAAY+oB,SAASrxB,MAAMquB,IACzC,IAAIR,EAAM6C,MAAM,OAASspB,EAAY,iBAElCpoB,EAAIW,mBACP5rB,EAAK0B,WAAWC,YAAYC,SAAS,GAAG8oB,SAASrxB,MAAMquB,IACrD,IAAIR,EAAM6C,MAAM,OAASspB,EAAY,iBAGzCvuC,QAOJkI,EAAKumC,kBAAoB,SAASjoC,GAAwB,IACpD2G,EASAuhC,EAaAC,EAvBqCt6C,EAAKmnB,UAAAlkB,OAAA,QAAAmF,IAAA+e,UAAA,GAAAA,UAAA,GAAG,KAG/CrO,EADgB,UAAd3G,EAAQ,GACJ,SAAAtL,GAAI,OAAKA,EAAKtC,MAAQsC,EAAKtC,MAAMtB,OAAS,EAAI,GAC7B,UAAdkP,EAAQ,GACX,SAAAtL,GAAI,OAAIA,EAAK0B,WAAWC,YAAYrI,MAAMe,GAE1C,SAAA2F,GAAI,OAAIsL,EAAQ,IAKtBkoC,EADgB,UAAdloC,EAAQ,GACJ,SAAA2G,GAAG,OAAIjF,EAAKy+B,YAAYx5B,IACP,QAAd3G,EAAQ,GACX,SAAA2G,GAAG,OAAIA,EAAM3G,EAAQ,GAAG2G,IACP,OAAd3G,EAAQ,GACX,SAAA2G,GAAG,OAAIA,EAAM3G,EAAQ,GAAG2G,IACP,OAAd3G,EAAQ,GACX,SAAA2G,GAAG,OAAIpT,KAAKxG,IAAI4Z,IAEhB,SAAAA,GAAG,OAAIA,GAIG,WAAd3G,EAAQ,GACVmoC,EAAO,SAACzzC,EAAMiS,GACZjS,EAAK0B,WAAWC,YAAYrI,MAAMouB,IAAIzV,EAAKA,EAAK,GAChD,IAAI+gC,EAAQ,EAAI/nB,EAAIsF,eAAiBte,EACrCjS,EAAK0B,WAAWC,YAAYC,SAAS,GAAGtI,MAAMouB,IAAIsrB,EAAOA,EAAO,IAE3C,gBAAd1nC,EAAQ,GACjBmoC,EAAO,SAACzzC,EAAMiS,GACZjS,EAAK0B,WAAWorB,UAAUC,EAAI,EAC9B/sB,EAAK0B,WAAWorB,UAAUroB,EAAI,EAAIwN,EAAM,EACxCjS,EAAK0B,WAAWorB,UAAU/S,EAAI,EAAI9H,EAAM,GAEnB,iBAAd3G,EAAQ,GACjBmoC,EAAO,SAACzzC,EAAMiS,GACZjS,EAAK0B,WAAWorB,UAAUroB,EAAI,EAC9BzE,EAAK0B,WAAWorB,UAAUC,EAAI,EAAI9a,EAAM,EACxCjS,EAAK0B,WAAWorB,UAAU/S,EAAI,EAAI9H,EAAM,GAEnB,kBAAd3G,EAAQ,GACjBmoC,EAAO,SAACzzC,EAAMiS,GACZjS,EAAK0B,WAAWorB,UAAU/S,EAAI,EAC9B/Z,EAAK0B,WAAWorB,UAAUroB,EAAI,EAAIwN,EAAM,EACxCjS,EAAK0B,WAAWorB,UAAUC,EAAI,EAAI9a,EAAM,GAEnB,iBAAd3G,EAAQ,GACjBmoC,EAAO,SAACzzC,EAAMiS,GACZjS,EAAK0B,WAAWC,YAAY+oB,SAASrxB,MAAMoL,EAAI,EAC/CzE,EAAK0B,WAAWC,YAAY+oB,SAASrxB,MAAM0zB,EAAI,EAAI9a,EAAM,EACzDjS,EAAK0B,WAAWC,YAAY+oB,SAASrxB,MAAM0gB,EAAI,EAAI9H,EAAM,GAEpC,UAAd3G,EAAQ,GACjBmoC,EAAO,SAACzzC,EAAMiS,GACZjS,EAAK+tB,QAAU9b,EACfjS,EAAKguB,QAAU/b,GAEM,aAAd3G,EAAQ,GACjBmoC,EAAO,SAACzzC,EAAMiS,GACZjF,EAAK0mC,oBAAoB1zC,EAAMiS,IAEV,eAAd3G,EAAQ,KACjBmoC,EAAO,SAACzzC,EAAMiS,GACZjF,EAAK2mC,kBAAkB3zC,EAAMiS,KAIjCjF,EAAK4mC,YAAY3hC,EAAKuhC,EAAKC,EAAMt6C,IAQnC6T,EAAK6mC,WAAa,SAAS5hC,EAAKuhC,EAAKC,EAAMzzC,GACzC,IAAI8G,EAAImL,EAAIjS,GACZ,QAASuB,GAALuF,EAAgB,CAClB,IAAIimB,EAAIymB,EAAI1sC,QACHvF,GAALwrB,GACF0mB,EAAKzzC,EAAM+sB,KAQjB/f,EAAK4mC,YAAc,SAAS3hC,EAAKuhC,EAAKC,GAAqB,IAAft6C,EAAKmnB,UAAAlkB,OAAA,QAAAmF,IAAA+e,UAAA,GAAAA,UAAA,GAAG,KAClD,GAAa,MAATnnB,EACF6T,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9BgN,EAAK6mC,WAAW5hC,EAAKuhC,EAAKC,EAAMzzC,WAGlC,IAAK,IAAI8E,EAAI,EAAGA,EAAI3L,EAAMiD,OAAQ0I,IAChCkI,EAAK6mC,WAAW5hC,EAAKuhC,EAAKC,EAAMt6C,EAAM2L,KAS5CkI,EAAK2mC,kBAAoB,SAAS3zC,EAAM8zC,GACtC9zC,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQlqB,SAAS,GAAGg8B,MAAM9V,MAC/DgsB,EAASl0C,WAAa,MAO1BoN,EAAK0mC,oBAAsB,SAAS1zC,EAAMrG,GAAyB,IAAnBo6C,EAAYzzB,UAAAlkB,OAAA,QAAAmF,IAAA+e,UAAA,GAAAA,UAAA,GAAG,EAC7D3mB,EAAOA,EAAOo6C,EAAc,GAC5B/zC,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQlqB,SAAS,GAAGg8B,MAAMoW,SAC/Dr6C,EAAKiG,WAAa,MAMtBoN,EAAKuiC,gBAAkB,SAAS51C,GAC9BqT,EAAKglB,YAAcr4B,EACnBqT,EAAKilB,aAAet4B,EACpBqT,EAAKsiC,WAAWh2C,MAAMouB,IAAW,EAAP/tB,EAAiB,EAAPA,EAAU,GAC9CqT,EAAKsiC,WAAWvmB,SAAS1uB,GAAKV,EAC9BqT,EAAKsiC,WAAWvmB,SAASzuB,GAAKX,EAC9BqT,EAAKmmB,SAAS0G,YAAqB,EAAPlgC,EAC5BqT,EAAK8nB,QAAQsB,OAAOrN,SAASP,EAAuB,EAAnBxb,EAAKglB,aAMxChlB,EAAKyiC,gBAAkB,SAASrZ,GAC9B,IAAI2D,EAAW/sB,EAAKgoB,QAAQjM,SAASP,EACjCqM,EACFh2B,KAAKwgC,IAAMjJ,EAAOtE,IAAMjzB,KAAKgiC,GAAM,IAAO,IAAO9G,EAAW,EAAI,EAC9DjS,EAAQ+M,EAASuB,EAAOrB,OAAS,EACrC/nB,EAAKwiC,SAASl2C,MAAMouB,IAAII,EAAO+M,EAAQ,GACvC7nB,EAAKwiC,SAASzmB,SAAS1uB,EAAI+7B,EAAOrN,SAAS1uB,EAAIytB,EAAQ,EACvD9a,EAAKwiC,SAASzmB,SAASzuB,EAAI87B,EAAOrN,SAASzuB,EAAIu6B,EAAS,K,oBCnP5D,IAAI5J,EAAM5R,EAAQ,IAAa6R,QAC3BhE,EAAQ+D,EAAI/D,MAMClvB,GALNizB,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,GACJH,EAAI1iB,GACiB8Q,EAAQ,GAA9B6R,SAGRG,EAAOxf,QAAU,SAASmB,GAIxBA,EAAKinC,oBAAsB,SAASj0C,EAAMk0C,GAGxC,GAAa,WADXl0C,EAAK0B,WAAWyyC,QAAUn0C,EAAK0B,WAAW3H,OAASkxB,EAAIoF,aAEvD,IAAI+jB,EAAYpnC,EAAKw+B,mBAEjB4I,EAAY,IAAIltB,EAAMmtB,eAAe,EAAG,IAG9C,OAAOrnC,EAAKsnC,0BAA0BF,EAAWp0C,EAAMk0C,IAMzDlnC,EAAKsnC,0BAA4B,SAASF,EAAWp0C,EAAMk0C,GACzD,IAAIv6C,EAAOqT,EAAKunC,YAAYv0C,GACxBgzC,EAAQ/nB,EAAIsF,eAEhB2jB,EAAUjpB,EAAI8E,aAAe,KAAOmkB,EACpC,IAAI76C,EAAQ4xB,EAAIgF,eACZ,KACAvL,SAAS1kB,EAAK0B,WAAWmpC,QAAU5f,EAAIyE,gBACvC8kB,EAAY,IAAIttB,EAAM6nB,kBAAkB,CAAE11C,MAAOA,EAAO0D,IAAKm3C,IACjEM,EAAUC,aAAc,EACxB,IAAIC,EAAY,IAAIxtB,EAAM8nB,KAAKoF,EAAWI,GAI1C,OAHAE,EAAU7yC,SAAU,EACpB6yC,EAAUp7C,MAAMouB,IAAI,EAAIsrB,EAAQr5C,EAAM,EAAIq5C,EAAQr5C,EAAM,GACxD+6C,EAAU3rB,SAASP,GAAK,IACjBksB,GAMT1nC,EAAK2nC,eAAiB,SAAS30C,EAAMk0C,GAEnC,GAAa,WADDl0C,EAAK0B,WAAW3H,OAASkxB,EAAImF,YAEvC,IAAIlI,EAAWlb,EAAKw+B,mBAEhBtjB,EAAW,IAAIhB,EAAMmtB,eAAe,EAAG,IAE7C,OAAOrnC,EAAK4nC,qBAAqB1sB,EAAUloB,EAAMk0C,IAMnDlnC,EAAK6nC,cAAgB,SAASl7C,GAC5B,IAAIuuB,EAAWlb,EAAKw+B,cAChBnyC,EAAQ,IAAI6tB,EAAM6C,MAAMkB,EAAIkG,WAC5BzG,EAAW,IAAIxD,EAAM6nB,kBAAkB,CAAE11C,MAAOA,IAChDy7C,EAAU,IAAI5tB,EAAM8nB,KAAK9mB,EAAUwC,GAIvC,OAHAoqB,EAAQx7C,MAAMouB,IAAI,GAAK,GAAK,GAC5BotB,EAAQ/rB,SAASP,EAAI,IACrBssB,EAAQjzC,SAAU,EACXizC,GAMT9nC,EAAK4nC,qBAAuB,SAAS1sB,EAAUloB,EAAMk0C,GACnD,IAAIv6C,EAAOqT,EAAKunC,YAAYv0C,GAE5Bk0C,EAAUjpB,EAAI+E,YAAc,KAAOkkB,EACnC,IAAI76C,EAAQ4xB,EAAIiF,cACZ,KACA,IAAIhJ,EAAM6C,MAAM/pB,EAAK0B,WAAWrI,OAAS4xB,EAAIwE,YAC7C/E,EAAW,IAAIxD,EAAM6nB,kBAAkB,CAAE11C,MAAOA,EAAO0D,IAAKm3C,IAChExpB,EAAS+pB,aAAc,EACvB,IAAI9yC,EAAc,IAAIulB,EAAM8nB,KAAK9mB,EAAUwC,GAE3C,OADA/oB,EAAYrI,MAAMouB,IAAI/tB,EAAMA,EAAM,GAC3BgI,GAMTqL,EAAKunC,YAAc,SAASv0C,GAI1B,OAFIA,EAAK0B,WAAW/H,KAA0BqG,EAAK0B,WAAW/H,MAKhEqT,EAAK+nC,gBAAkB,SAAS/0C,GAC9B,IAAI0qB,EAAW,IAAIxD,EAAM6nB,kBAAkB,CACzC11C,MAAO,EACP27C,WAAW,EACXC,mBAAoB,EACpBptB,KAAMX,EAAMguB,aAEVhtB,EAAW,IAAIhB,EAAMiuB,cAAc,IAAM,KACzCC,EAAWpoC,EAAKqoC,4BAA4BntB,EAAUwC,GACtDjqB,EAAQuM,EAAKsoC,uBAAuBt1C,EAAMo1C,GAC1CvpB,EAAa7e,EAAKuoC,yBAAyB90C,EAAO20C,GACtDp1C,EAAK0B,WAAWmqB,WAAaA,EAC7B7e,EAAKmpB,MAAMp2B,IAAI8rB,IAGjB7e,EAAKqoC,4BAA8B,SAASntB,EAAUwC,GACpD,IAAI0qB,EAAW,IAAIluB,EAAM8nB,KAAK9mB,EAAUwC,GACxC0qB,EAAS97C,MAAMouB,IAAIuD,EAAI4F,UAAW5F,EAAI4F,UAAW,GACjD,IAAI2kB,GAAO,IAAItuB,EAAMuuB,MAAOxd,cAAcmd,GAI1C,OAHAA,EAASrsB,SAAS1uB,IAAMm7C,EAAK37C,IAAIQ,EAAIm7C,EAAK57C,IAAIS,GAAK4wB,EAAI6F,cACvDskB,EAASrsB,SAASzuB,IAAMk7C,EAAK37C,IAAIS,EAAIk7C,EAAK57C,IAAIU,GAAK2wB,EAAI8F,cACvDqkB,EAASvzC,QAAUopB,EAAIiG,eAChBkkB,GAGTpoC,EAAKsoC,uBAAyB,SAASt1C,EAAMo1C,GAC3C,IAAI30C,EAAQuM,EAAK0oC,eAAe11C,GAIhC,OAHAS,EAAMqrB,QAAQ2lB,QAAS,EACvBhxC,EAAMsoB,SAASiC,KAAKoqB,EAASrsB,UAC7BtoB,EAAMnH,MAAM0xB,KAAKoqB,EAAS97C,OACnBmH,GAGTuM,EAAKuoC,yBAA2B,SAAS90C,EAAO20C,GAC9C,IAAIvpB,EAAa,IAAI3E,EAAMyW,SAG3B,OAFA9R,EAAW9rB,IAAIU,GACforB,EAAW9rB,IAAIq1C,GACRvpB,GAMT7e,EAAK0oC,eAAiB,SAAS11C,GAE7B,IAAI8rB,EAAU9e,EAAK2oC,wBACfp0B,EAAUuR,SAAS8iB,eAAe51C,EAAK0B,WAAWjB,OAClDo1C,EAAc7oC,EAAK8oC,yBAIvB,OAHAD,EAAY9iB,YAAYxR,GACxBuK,EAAQiH,YAAY8iB,GACL,IAAI3uB,EAAMwW,YAAY5R,IAOvC9e,EAAK2oC,sBAAwB,WAC3B,IAAI7pB,EAAUgH,SAAS0L,cAAc,OAKrC,OAJA1S,EAAQ8R,MAAM9V,MAAQ,SACtBgE,EAAQ8R,MAAM/I,OAAS,QACvB/I,EAAQ8R,MAAMmY,gBAAkB9qB,EAAI+F,gBACpClF,EAAQ8R,MAAM5T,QAAUiB,EAAIgG,aACrBnF,GAMT9e,EAAK8oC,uBAAyB,WAC5B,IAAID,EAAc/iB,SAAS0L,cAAc,OASzC,OARAqX,EAAYjY,MAAM9V,MAAQ,SAC1B+tB,EAAYjY,MAAM/I,OAAS,MAC3BghB,EAAYjY,MAAMoW,SAAW,OAC7B6B,EAAYjY,MAAMoY,aAAe,WACjCH,EAAYjY,MAAMa,SAAW,SAC7BoX,EAAYjY,MAAMqY,WAAa,MAC/BJ,EAAYjY,MAAMsY,WAAa,SAExBL,GAOT7oC,EAAKmpC,oBAAsB,SAASn2C,EAAMo2C,EAAUlC,GAClD,IAAIvyC,EAAcqL,EAAK2nC,eAAe30C,EAAMk0C,GAG5C,IAAKjpB,EAAIW,kBAAmB,CAC1B,IAAI8oB,EAAY1nC,EAAKinC,oBAAoBj0C,EAAMo2C,GAC/Cz0C,EAAY5B,IAAI20C,GAGlB,IAAII,EAAU9nC,EAAK6nC,gBASnB,OARAlzC,EAAY5B,IAAI+0C,GAEhBnzC,EAAYonB,SAAS1uB,EAAI2F,EAAK0B,WAAWrH,EACzCsH,EAAYonB,SAASzuB,EAAI0F,EAAK0B,WAAWpH,EACzCqH,EAAY4kB,MAAQvmB,EAAKE,GACzByB,EAAY8P,KAAOzR,EAAKE,GACxBF,EAAK0B,WAAWC,YAAcA,EAEvBA,GAMTqL,EAAKikC,SAAW,SAASjxC,GASvB,SAASq2C,EAAcr2C,EAAMo2C,EAAUlC,GAErC,IAAIvyC,EAAcqL,EAAKmpC,oBAAoBn2C,EAAMo2C,EAAUlC,GAG3DlnC,EAAK+nC,gBAAgB/0C,GAErBgN,EAAKmN,WAAa,EAClBnN,EAAK7T,MAAM4G,IAAI4B,GAGbspB,EAAI8E,cAAgB9E,EAAI+E,YAC1BqmB,EAAcr2C,EAAM,KAAM,MAG1BgN,EAAK0kB,cAAc4kB,KACjBt2C,EAAK0B,WAAW60C,QAAUtrB,EAAI4E,cAxBlC,SAAwB7vB,EAAMo2C,GAE5BppC,EAAK0kB,cAAc4kB,KACjBt2C,EAAK0B,WAAW80C,OAASvrB,EAAI6E,aAC7BumB,EAAcI,KAAK,KAAMz2C,EAAMo2C,KAqBhBK,KAAK,KAAMz2C,KAKhC,IAAI02C,EAAW,SAAC9L,GAEd,MADa,4CAA4CE,KAAKF,GAE9D,IAAI1jB,EAAM6C,MAAM/xB,EAASC,MAAMiC,MAAMb,OACnC,MAGN2T,EAAK2pC,0BAA4B,SAAC5xC,EAAMC,EAAMC,EAAMC,GAClD,IAAI7G,EAAI,oBACJ8G,EAAItG,KAAKuG,IACTZ,EAAI,GAAMW,GAAGF,EAAOF,GAAQ1G,GAAG,EAC3B8G,EAAEJ,EAAO1G,GAAK8G,EAAEF,EAAO5G,IACtB,EAAI8G,GAAGD,EAAOF,GAAQ3G,IAAI,EAEnC,OAAO,MAAQQ,KAAKwG,KAAKxG,KAAKyG,KAAKd,KAMnCwI,EAAK4kC,SAAW,SAASlyC,EAAQG,GAAyB,IAAjBgC,IAAOye,UAAAlkB,OAAA,QAAAmF,IAAA+e,UAAA,KAAAA,UAAA,GAC9C,QACoC/e,IAAlC7B,EAAOgC,WAAWC,kBACgBJ,IAAlC1B,EAAO6B,WAAWC,YAFpB,CAOA,IASIi1C,EATArwB,EAAyB,EAAjBvZ,EAAKmiC,UAUjB,GATAniC,EAAKwkB,YAAYjL,EAAQ,GAAK7mB,EAC9BsN,EAAKwkB,YAAYjL,EAAQ,EAAI,GAAK1mB,EAC7BH,EAAOwsB,WACVxsB,EAAOwsB,SAAW,IAEfrsB,EAAOqsB,WACVrsB,EAAOqsB,SAAW,IAGjBxsB,EAAO+I,KAAKzP,IAAIoK,KAAK,CACtB,IAAM4B,EAAOtF,EAAO+I,KAAKzP,IAAIoK,KACvB2B,EAAOrF,EAAO+I,KAAKzP,IAAIsK,KACvB4B,EAAOrF,EAAO4I,KAAKzP,IAAIoK,KACvB6B,EAAOpF,EAAO4I,KAAKzP,IAAIsK,KAC7BszC,EAAW5pC,EAAK2pC,0BAA0B5xC,EAAMC,EAAMC,EAAMC,GAI9D8H,EAAK6f,YAAYhvB,KAAK,CACpB6B,OAAQA,EACRG,OAAQA,EACRg3C,MAAOh1C,EACPirB,UAAW4pB,EAAS1+C,EAASC,MAAMiC,MAAMb,OACzCu9C,SAASA,IAKXl3C,EAAOwsB,SAASruB,KAAKmP,EAAK6f,YAAYtG,EAAQ,IAC9C1mB,EAAOqsB,SAASruB,KAAKmP,EAAK6f,YAAYtG,EAAQ,IAC9CvZ,EAAK8pC,yBAAyBp3C,EAAQG,EAAQ0mB,GAC9CvZ,EAAKmiC,WAAa,OAnChB33B,WAAWxK,EAAK4kC,SAAS6E,KAAK,KAAM/2C,EAAQG,GAAS,KAyCzDmN,EAAK8pC,yBAA2B,SAASp3C,EAAQG,EAAQ0mB,GACvD,IAAInkB,EAAY4K,EAAK9S,MAAM0pB,WAAWmF,SAAS3D,MAC3CsoB,EAAS1gC,EAAK9S,MAAM0pB,WAAWvqB,MAAM+rB,MAErC2xB,EAAQr3C,EAAOgC,WAAWC,YAAYonB,SACtCiuB,EAAQn3C,EAAO6B,WAAWC,YAAYonB,SACtCkuB,EAAUjqC,EAAK6f,YAAYtG,EAAQ,GAAGuG,UACtCoqB,EAAUlqC,EAAK6f,YAAYtG,EAAQ,GAAGuG,UAC1C4gB,EAAOnnB,GAAS0wB,EAAQxyC,EACxBrC,EAAUmkB,KAAWwwB,EAAM18C,EAC3BqzC,EAAOnnB,GAAS0wB,EAAQl9B,EACxB3X,EAAUmkB,KAAWwwB,EAAMz8C,EAC3BozC,EAAOnnB,GAAS0wB,EAAQlqB,EACxB3qB,EAAUmkB,KAAWwwB,EAAMvuB,EAAI,IAC/BklB,EAAOnnB,GAAS2wB,EAAQzyC,EACxBrC,EAAUmkB,KAAWywB,EAAM38C,EAC3BqzC,EAAOnnB,GAAS2wB,EAAQn9B,EACxB3X,EAAUmkB,KAAWywB,EAAM18C,EAC3BozC,EAAOnnB,GAAS2wB,EAAQnqB,EACxB3qB,EAAUmkB,KAAWywB,EAAMxuB,EAAI,O,oBCtUnC,IAAIyC,EAAM5R,EAAQ,IAAa6R,QAC3BhE,EAAQ+D,EAAI/D,MACL+D,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,GACJH,EAAI1iB,GAKb8iB,EAAOxf,QAAU,SAASmB,GAKxBA,EAAKmqC,aAAe,SAAAjiC,GACL,WAATA,GAEFlI,EAAKoqC,UAAY,SACjBpqC,EAAKqqC,iBAAkB,GACL,SAATniC,IAETlI,EAAKoqC,UAAY,OACjBpqC,EAAKqqC,iBAAkB,IAI3BrqC,EAAKsqC,YAAc,WACjBtqC,EAAK5F,QAAS,GAEhBwM,OAAO2jC,MAAQvqC,EAAKsqC,YAEpBtqC,EAAKwqC,aAAe,WAClBxqC,EAAK5F,QAAS,GAGhB4F,EAAKyqC,iBAAmB,WACtBzqC,EAAKumC,kBAAkB,CAAC,SAAU,MAAO,WAAYvmC,EAAKxL,YAG5DwL,EAAK0qC,YAAc,WACjB1qC,EAAKumC,kBAAkB,CAAC,SAAU,MAAO,aAG3CvmC,EAAK/D,iBAAmB,WACtB+D,EAAKumC,kBAAkB,EAAC,EAAM,GAAI,UAAWvmC,EAAKxL,YAGpDwL,EAAKhE,mBAAqB,WACxBgE,EAAKumC,kBAAkB,EAAC,EAAO,GAAI,UAAWvmC,EAAKxL,YAGrDwL,EAAK2qC,iBAAmB,SAAAh+C,GACtBqT,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9BgN,EAAK0mC,oBAAoB1zC,EAAMrG,EAAMqT,EAAKqlB,qBAI5C14B,EAAQA,EAAOqT,EAAKqlB,iBAAkB,EACtCS,SAAS8kB,iBAAiB,eAAej6C,SAAQ,SAAAqC,GAC/CA,EAAK49B,MAAMoW,SAAWr6C,EAAKiG,WAAa,SAK5CoN,EAAKmK,qBAAuB,SAAAxd,GAC1BqT,EAAKqlB,iBAAmB14B,EACxBqT,EAAK2qC,iBAAiB3qC,EAAKhT,YAG7BgT,EAAKoK,eAAiB,SAAA08B,GACpB9mC,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9BgN,EAAK2mC,kBAAkB3zC,EAAM8zC,MAE/BhhB,SAAS8kB,iBAAiB,eAAej6C,SAAQ,SAAAqC,GAC/CA,EAAK49B,MAAM9V,MAAQgsB,EAASl0C,WAAa,SAK7CoN,EAAK6qC,cAAgB,WACf7qC,EAAKslB,WACPtlB,EAAK7U,cAEL6U,EAAK2T,eAIT3T,EAAK2T,YAAc,WACb3T,EAAKslB,aAGTtlB,EAAKslB,YAAa,IAIpBtlB,EAAK7U,YAAc,WACZ6U,EAAKslB,aAGVtlB,EAAKslB,YAAa,IAQpBtlB,EAAK4T,wBAA0B,WACzB5T,EAAKsnB,YAAY6K,WAGrBnyB,EAAK8e,QAAQgS,YAAY9wB,EAAKsnB,YAAYD,YAC1CrnB,EAAKsnB,YAAY6K,UAAW,IAI9BnyB,EAAK8qC,uBAAyB,WACvB9qC,EAAKsnB,YAAY6K,WAGtBnyB,EAAK8e,QAAQiH,YAAY/lB,EAAKsnB,YAAYD,YAC1CrnB,EAAKsnB,YAAY6K,UAAW,IAO9BnyB,EAAK+qC,yBAA2B,WAC9B,IAAI5+C,EAAQ,GACZ6T,EAAK/U,MAAM8P,aAAY,SAAApJ,GACVqO,EAAK/U,MAAM6sB,QAAQnmB,EAAEuB,IACvBwB,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,UACjDnH,EAAM0E,KAAKc,EAAEuB,OAMG,GAAhB/G,EAAMiD,OACR4Q,EAAK4T,0BACO5T,EAAKxL,UAAUpF,OAAS,GAAO4Q,EAAKue,WAAevzB,SAASC,MAAMC,MAAMkP,QAEpF4F,EAAK8qC,yBAGP9qC,EAAKzE,GAAGuqC,KAAK,kBAAmB35C,IAGlC6T,EAAKlE,qBAAuB,WAC1BkE,EAAKgrC,aAAahrC,EAAKxL,UAAUzE,KAAI,SAAA4B,GAAC,OAAIA,EAAEuB,QAG9C8M,EAAKirC,mBAAqB,WACxBnlB,SAASsZ,eAAe,gBAAgBxO,MAAMt1B,QAAQ,OACtDwqB,SAASsZ,eAAe,gBAAgBxO,MAAMt1B,QAAQ,SACtD0E,EAAK0K,WAAW1K,EAAKxL,UAAUzE,KAAI,SAAA4B,GAAC,OAAIA,EAAEuB,QAG5C8M,EAAKkrC,mBAAqB,WACxBplB,SAASsZ,eAAe,gBAAgBxO,MAAMt1B,QAAQ,OACtDwqB,SAASsZ,eAAe,gBAAgBxO,MAAMt1B,QAAQ,SACtD0E,EAAKmrC,WAAWnrC,EAAKxL,UAAUzE,KAAI,SAAA4B,GAAC,OAAIA,EAAEuB,QAG5C8M,EAAKgrC,aAAe,SAAAj2C,GAClBiL,EAAK/U,MAAM8P,aAAY,SAAApJ,GACrB,GAAIoD,EAAQV,SAAS1C,EAAEuB,IAAK,CAC1B,IAAIF,EAAOgN,EAAK/U,MAAM6sB,QAAQnmB,EAAEuB,SAE6BqB,GAA3DvB,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,WAE/CN,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,UAAW,GAE5DN,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,UAAYN,EACxD0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,aAGjD0M,EAAK+qC,4BAGP/qC,EAAK0K,WAAa,SAAA3V,GAChBiL,EAAK/U,MAAM8P,aAAY,SAAApJ,GACjBoD,EAAQV,SAAS1C,EAAEuB,MACV8M,EAAK/U,MAAM6sB,QAAQnmB,EAAEuB,IAC3BwB,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,UAAW,MAG9D0M,EAAK+qC,4BAGP/qC,EAAKmrC,WAAa,SAAAp2C,GAChBiL,EAAK/U,MAAM8P,aAAY,SAAApJ,GACjBoD,EAAQV,SAAS1C,EAAEuB,MACV8M,EAAK/U,MAAM6sB,QAAQnmB,EAAEuB,IAC3BwB,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,UAAW,MAG9D0M,EAAK+qC,4BAGP/qC,EAAKorC,cAAgB,WACnBtlB,SAASsZ,eAAe,WAAWxO,MAAMt1B,QAAQ,OACjDwqB,SAASsZ,eAAe,WAAWxO,MAAMt1B,QAAQ,SACjD0E,EAAK/U,MAAM8P,aAAY,SAAS/H,IAC1BA,EAAOgN,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,KAC9BwB,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,UAAW,KAE5D0M,EAAK+qC,2BAELjlB,SAAS8kB,iBAAiB,eAAej6C,SAAQ,SAAAqC,GAC/CA,EAAK49B,MAAM5T,QAAQ,MAIvBhd,EAAKqrC,cAAgB,WACnBvlB,SAASsZ,eAAe,WAAWxO,MAAMt1B,QAAQ,OACjDwqB,SAASsZ,eAAe,WAAWxO,MAAMt1B,QAAQ,SACjD0E,EAAK/U,MAAM8P,aAAY,SAAS/H,IAC1BA,EAAOgN,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,KAC9BwB,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,UAAW,KAE5D0M,EAAK+qC,2BACLjlB,SAAS8kB,iBAAiB,eAAej6C,SAAQ,SAAAqC,GAC/CA,EAAK49B,MAAM5T,QAAQ,MAIvBhd,EAAKsrC,cAAgB,SAAS3+C,GAC5BqT,EAAKuiC,gBAAgB51C,IAGvBqT,EAAKurC,iBAAmB,SAASx+C,GACF,GAAzBiT,EAAKxL,UAAUpF,OACjB4Q,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9BgN,EAAKwrC,aAAaxrC,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,IAAKnG,MAGjDiT,EAAKxL,UAAU7D,SAAQ,SAASqC,GAC9BgN,EAAKwrC,aAAaxrC,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,IAAKnG,OAKrDiT,EAAKkK,6BAA+B,SAASnd,EAAOwG,GAClDyM,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC1BO,EAAUN,IAAID,EAAKE,KAAOK,EAAUrE,IAAI8D,EAAKE,IAAID,IAAI,SACvD+M,EAAKwrC,aAAaxrC,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,IAAKK,EAAUrE,IAAI8D,EAAKE,IAAIhE,IAAI,UAE1E8Q,EAAKwrC,aAAaxrC,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,IAAKnG,OAKrDiT,EAAKwrC,aAAe,SAASx4C,EAAMjG,GACpB,UAATA,GACFiG,EAAK0B,WAAW3H,MAAQA,EACxBiG,EAAK0B,WAAWC,YAAYumB,SAAWlb,EAAKw+B,cAC5CxrC,EAAK0B,WAAWC,YAAYC,SAAS,GAAGsmB,SAAWlb,EAAKw+B,eACtC,UAATzxC,GACTiG,EAAK0B,WAAW3H,MAAQA,EACxBiG,EAAK0B,WAAWC,YAAYumB,SAAW,IAAIhB,EAAMmtB,eAAe,EAAG,IACnEr0C,EAAK0B,WAAWC,YAAYC,SAAS,GAAGsmB,SAAW,IAAIhB,EAAMmtB,eAC3D,EACA,KAEgB,YAATt6C,GACTiG,EAAK0B,WAAW3H,MAAQA,EACxBiG,EAAK0B,WAAWC,YAAYumB,SAAW,IAAIhB,EAAMmtB,eAAe,EAAG,GACnEr0C,EAAK0B,WAAWC,YAAYC,SAAS,GAAGsmB,SAAW,IAAIhB,EAAMmtB,eAC3D,EACA,IAEgB,YAATt6C,GACTiG,EAAK0B,WAAW3H,MAAQA,EACxBiG,EAAK0B,WAAWC,YAAYumB,SAAW,IAAIhB,EAAMmtB,eAAe,EAAG,GACnEr0C,EAAK0B,WAAWC,YAAYC,SAAS,GAAGsmB,SAAW,IAAIhB,EAAMmtB,eAC3D,EACA,IAEgB,WAATt6C,GACTiG,EAAK0B,WAAW3H,MAAQA,EACxBiG,EAAK0B,WAAWC,YAAYumB,SAAW,IAAIhB,EAAMmtB,eAAe,EAAG,GACnEr0C,EAAK0B,WAAWC,YAAYC,SAAS,GAAGsmB,SAAW,IAAIhB,EAAMmtB,eAC3D,EACA,IAEgB,WAATt6C,IACTiG,EAAK0B,WAAW3H,MAAQA,EACxBiG,EAAK0B,WAAWC,YAAYumB,SAAW,IAAIhB,EAAMmtB,eAAe,EAAG,GACnEr0C,EAAK0B,WAAWC,YAAYC,SAAS,GAAGsmB,SAAW,IAAIhB,EAAMmtB,eAC3D,EACA,KAKNrnC,EAAKyrC,eAAiB,WACpB,OAAIzrC,EAAKxL,UAAUpF,QAAU4Q,EAAK/U,MAAMygD,gBAC/B,EAEF1rC,EAAKxL,UAAUpF,QAGxB4Q,EAAK2rC,WAAa,WAChB3rC,EAAK5V,UAAY4V,EAAK5V,SACtB4V,EAAK4rC,2BAGP5rC,EAAK4rC,wBAA0B,WAC7B5rC,EAAKwiC,SAAS9kB,SAASrxB,MAAQ,IAAI6tB,EAAM6C,MAAO/c,EAAK5V,SAAU,SAAW,IAG5E4V,EAAK6rC,SAAW,WACd,OAAO7rC,EAAK/U,OAGd+U,EAAKvL,YAAc,WACjB,IAAItI,EAAQ,GAIZ,OAHA6T,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9B7G,EAAM0E,KAAKmC,MAEN7G,GAGT6T,EAAK8rC,YAAc,WACjB,IAAI5+C,EAAQ,GAKZ,OAHA8S,EAAK/U,MAAM8gD,aAAY,SAAS7hB,GAC9Bh9B,EAAM2D,KAAKq5B,MAENh9B,GAGT8S,EAAK3K,aAAe,WAClB,IAAI22C,EAAQ,GAIZ,OAHAhsC,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9Bg5C,EAAMh5C,EAAKE,IAAM,CAACF,EAAK3F,EAAG2F,EAAK1F,MAE1B0+C,GAGThsC,EAAKisC,gBAAkB,WACrB,IAAID,EAAQ,GAIZ,OAHAhsC,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9Bg5C,EAAMh5C,EAAKE,IAAM,CAACF,EAAKmuB,GAAInuB,EAAKouB,OAE3B4qB,GAIThsC,EAAKxK,eAAiB,WACpB,IAAIw2C,EAAQ,IAAI15C,IAMhB,OALA0N,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC3BA,EAAK+tB,SAAW/tB,EAAKguB,SACtBgrB,EAAMj5C,IAAIC,EAAKE,OAGZ84C,GAIThsC,EAAKhF,eAAiB,SAASJ,GAC7BoF,EAAKumC,kBAAkB,EAAC,EAAM,GAAI,UAAW3rC,IAG/C,IAAIsxC,GAAQ,EACZlsC,EAAKmsC,YAAc,WAIjBD,GAASA,GAGXlsC,EAAKosC,YAAc,SAAAl5C,GACjB8M,EAAKwlB,SAAWxlB,EAAK/U,MAAM6sB,QAAQ5kB,IAGrC8M,EAAKqsC,aAAe,WAClBrsC,EAAKse,WAAWte,EAAKwlB,WAGvB,IAAIn4B,EAAI,EACR2S,EAAKssC,SAAW,WACdj/C,GAAK,GACL2S,EAAKwmB,SAASmZ,cAActyC,GAC5B2S,EAAK0nB,kBAGP1nB,EAAKusC,wBAA0B,WAC7BvsC,EAAKylB,sBAAwBzlB,EAAKylB,sBAGpCzlB,EAAKgL,iBAAmB,SAASjW,EAAS8vC,GACpC9vC,EAAQ3F,OAAS,GAAKmG,MAAMu1B,QAAQ/1B,EAAQ,MAC9CA,EAAUA,EAAQ,IAWpBiL,EAAK0lB,eAAiB,IASxB1lB,EAAKwsC,eAAiB,WACpB,IAAK,IAAI10C,EAAI,EAAGA,EAAIkI,EAAKxL,UAAUpF,OAAQ0I,IACzCkI,EAAKkkC,WAAWlkC,EAAKxL,UAAUsD,IAEjCkI,EAAKxL,UAAY,IAGnBwL,EAAK9K,iBAAmB,SAASH,GAC/B,IAAK,IAAI+C,EAAI,EAAGA,EAAI/C,EAAQ3F,OAAQ0I,IAAK,CACvC,IAAM9E,EAAOgN,EAAK/U,MAAM6sB,QAAQ/iB,EAAQ+C,IACpC9E,GACFgN,EAAKkkC,WAAWlxC,GAGpBgN,EAAKxL,UAAY,IAGnBwL,EAAKysC,YAAc,WACjB,OAAOzsC,EAAKxL,WAGdwL,EAAK0sC,eAAiB,WACpB,OAAO1sC,EAAKxL,UAAUzE,KAAI,SAAA4B,GAAC,OAAIA,EAAEuB,S,oBCvbrC,IAAI+qB,EAAM5R,EAAQ,IAAa6R,QAC3BhE,EAAQ+D,EAAI/D,MACL+D,EAAIzQ,KACJyQ,EAAI3E,KACK2E,EAAIE,cACfF,EAAIG,GACJH,EAAI1iB,GAEb8iB,EAAOxf,QAAU,SAASmB,GAIxBA,EAAKwoB,YAAc,WACjBxoB,EAAK9S,MAAMy/C,aAAa,EAAG3sC,EAAKmiC,UAAY,GAC5C,IAAIyK,EAAQ5sC,EAAKmiC,UAAY,EACzB/sC,EAAY4K,EAAK9S,MAAM0pB,WAAWmF,SAAS3D,MAC3CsoB,EAAS1gC,EAAK9S,MAAM0pB,WAAWvqB,MAAM+rB,MAIxCpY,EAAK6hC,eAAejrB,WAAWmF,SAAS3D,MAAQ,IAAIqD,aAA8B,EAAjBzb,EAAKykB,WAIvE,IAHC,IAAIooB,EAAgB7sC,EAAK6hC,eAAejrB,WAAWmF,SAAS3D,MAGpDtgB,GAFSkI,EAAK6hC,eAAejrB,WAAWvqB,MAAM+rB,MAE1C,GAAGtgB,EAAI80C,EAAO90C,GAAK,EAC9B,GAAIkI,EAAK6f,YAAY/nB,EAAI,GACvB,GAAIkI,EAAK6f,YAAY/nB,EAAI,GAAG+xC,KAAM,CAChC,IAAIE,EAAQ/pC,EAAKwkB,YAAY1sB,GAAGpD,WAAWC,YAAYonB,SACnDiuB,EAAQhqC,EAAKwkB,YAAY1sB,EAAI,GAAGpD,WAAWC,YAAYonB,SAC3D3mB,EAAc,EAAJ0C,GAASiyC,EAAM18C,EACzB+H,EAAc,EAAJ0C,EAAQ,GAAKiyC,EAAMz8C,EAC7B8H,EAAc,EAAJ0C,EAAQ,GAAKkyC,EAAM38C,EAC7B+H,EAAc,EAAJ0C,EAAQ,GAAKkyC,EAAM18C,EAC7BozC,EAAW,EAAJ5oC,GAAS,IAChB4oC,EAAW,EAAJ5oC,EAAQ,GAAK,IACpB4oC,EAAW,EAAJ5oC,EAAQ,GAAK,IACpB4oC,EAAW,EAAJ5oC,EAAQ,GAAK,IACpB4oC,EAAW,EAAJ5oC,EAAQ,GAAK,IACpB4oC,EAAW,EAAJ5oC,EAAQ,GAAK,QACf,CACDiyC,EAAQ/pC,EAAKwkB,YAAY1sB,GAAGpD,WAAWC,YAAYonB,SACnDiuB,EAAQhqC,EAAKwkB,YAAY1sB,EAAI,GAAGpD,WAAWC,YAAYonB,SAD3D,IAEIkuB,EAAUjqC,EAAK6f,YAAY/nB,EAAI,GAAGgoB,UAClCoqB,EAAUlqC,EAAK6f,YAAY/nB,EAAI,GAAGgoB,UAmBtC,GAlBA1qB,EAAc,EAAJ0C,GAASiyC,EAAM18C,EACzB+H,EAAc,EAAJ0C,EAAQ,GAAKiyC,EAAMz8C,EAC7B8H,EAAc,EAAJ0C,EAAQ,GAAKkyC,EAAM38C,EAC7B+H,EAAc,EAAJ0C,EAAQ,GAAKkyC,EAAM18C,EAC7BozC,EAAW,EAAJ5oC,GAASmyC,EAAQlqB,EACxB2gB,EAAW,EAAJ5oC,EAAQ,GAAKmyC,EAAQl9B,EAC5B2zB,EAAW,EAAJ5oC,EAAQ,GAAKmyC,EAAQxyC,EAC5BipC,EAAW,EAAJ5oC,EAAQ,GAAKoyC,EAAQnqB,EAC5B2gB,EAAW,EAAJ5oC,EAAQ,GAAKoyC,EAAQn9B,EAC5B2zB,EAAW,EAAJ5oC,EAAQ,GAAKoyC,EAAQzyC,EASxBzM,SAASC,MAAM6hD,cAAe,CAChC9sC,EAAKmgB,MAAMtrB,SAAU,EACrB,IAAIk4C,GAAahD,EAAM18C,EAAI28C,EAAM38C,GAAG,EAChC2/C,GAAajD,EAAMz8C,EAAI08C,EAAM18C,GAAG,EAEhC2/C,EAAKjD,EAAM38C,EAAI08C,EAAM18C,EACrB6/C,EAAKlD,EAAM18C,EAAIy8C,EAAMz8C,EAEd,IAAP2/C,IACFA,EAAK,MAEP,IAAIE,EAAet7C,KAAKu7C,KAAKF,EAAKD,GAQlC,GAHAJ,EAAc/0C,EAAI,EAAI,GAAKi1C,EAC3BF,EAAc/0C,EAAI,EAAI,EAAI,GAAKk1C,EAE3BC,GAAM,EAAG,CACX,IAAII,EAAcN,EAAqC,KAAzBl7C,KAAKuG,IAAI+0C,GACnCG,EAAcN,EAAqC,KAAzBn7C,KAAK07C,IAAIJ,GACnCK,EAAmB37C,KAAKgiC,GAAG,EAAIsZ,EACnCN,EAAc/0C,EAAI,EAAI,EAAI,GAAKu1C,EAAc,GAAMx7C,KAAKuG,IAAIo1C,GAC5DX,EAAc/0C,EAAI,EAAI,EAAI,GAAKw1C,EAAc,GAAMz7C,KAAK07C,IAAIC,GAC5DX,EAAc/0C,EAAI,EAAI,EAAI,GAAKu1C,EAAc,GAAMx7C,KAAKuG,IAAIo1C,GAC5DX,EAAc/0C,EAAI,EAAI,EAAI,GAAKw1C,EAAc,GAAMz7C,KAAK07C,IAAIC,OAEvD,CACDH,EAAcN,EAAqC,KAAzBl7C,KAAKuG,IAAI+0C,GACnCG,EAAcN,EAAqC,KAAzBn7C,KAAK07C,IAAIJ,GACnCK,EAAmB37C,KAAKgiC,GAAG,EAAIsZ,EACnCN,EAAc/0C,EAAI,EAAI,EAAI,GAAKu1C,EAAc,GAAMx7C,KAAKuG,IAAIo1C,GAC5DX,EAAc/0C,EAAI,EAAI,EAAI,GAAKw1C,EAAc,GAAMz7C,KAAK07C,IAAIC,GAC5DX,EAAc/0C,EAAI,EAAI,EAAI,GAAKu1C,EAAc,GAAMx7C,KAAKuG,IAAIo1C,GAC5DX,EAAc/0C,EAAI,EAAI,EAAI,GAAKw1C,EAAc,GAAMz7C,KAAK07C,IAAIC,SAG9DxtC,EAAKmgB,MAAMtrB,SAAU,EAK7BmL,EAAK9S,MAAM0pB,WAAWmF,SAASE,aAAc,EAC7Cjc,EAAK9S,MAAM0pB,WAAWvqB,MAAM4vB,aAAc,EAE1Cjc,EAAK6hC,eAAejrB,WAAWmF,SAASE,aAAc,EACtDjc,EAAK6hC,eAAejrB,WAAWvqB,MAAM4vB,aAAc,GAMrDjc,EAAKuoB,aAAe,WAElB,IADA,IAAIp8B,EAAQ6T,EAAK6hB,MAAM11B,QACd2L,EAAI,EAAGA,EAAI3L,EAAMiD,OAAQ0I,IAAK,CACrC,IAAI21C,EAAWztC,EAAK/U,MAAM6sB,QAAQ3rB,EAAM2L,GAAG5E,SACLqB,GAAlCk5C,EAAS/4C,WAAWmqB,aAGnB4uB,EAAS/4C,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,SAIpDm6C,EAAS/4C,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQ2lB,QAAS,EAF5DgJ,EAAS/4C,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQ2lB,QAAS,GAKhEgJ,EAAS/4C,WAAWmqB,WAAW9C,SAAS1uB,EACtCogD,EAAS/4C,WAAW/H,KAAO8gD,EAAS/4C,WAAWC,YAAYonB,SAAS1uB,EACtEogD,EAAS/4C,WAAWmqB,WAAW9C,SAASzuB,EACtCmgD,EAAS/4C,WAAWC,YAAYonB,SAASzuB,IAO/C0S,EAAKsoB,YAAc,WAEjB,GAA2B,UAAvBtoB,EAAK2hB,QAAQC,OACf5hB,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC1BA,EAAK0B,aACP1B,EAAK0B,WAAWC,YAAYonB,SAAS1uB,EAAI2S,EAAK6hB,MAAMC,gBAClD9uB,EAAKE,IACL7F,EACF2F,EAAK0B,WAAWC,YAAYonB,SAASzuB,EAAI0S,EAAK6hB,MAAMC,gBAClD9uB,EAAKE,IACL5F,MAGD0S,EAAK5F,QACR4F,EAAK6hB,MAAM6rB,YAER,GAA2B,MAAvB1tC,EAAK2hB,QAAQC,OAAgB,CAEtC,IADA,IAAIz1B,EAAQ6T,EAAK6hB,MAAM11B,QACd2L,EAAI,EAAGA,EAAI3L,EAAMiD,OAAQ0I,IAAK,CACrC3L,EAAM2L,GAAGzK,EAAIwE,KAAKhF,KACfmT,EAAKglB,YACNnzB,KAAKjF,IAAIoT,EAAKglB,YAAa74B,EAAM2L,GAAGzK,IAEtClB,EAAM2L,GAAGxK,EAAIuE,KAAKhF,KACfmT,EAAKilB,aACNpzB,KAAKjF,IAAIoT,EAAKilB,aAAc94B,EAAM2L,GAAGxK,IAEvC,IAAImgD,EAAWztC,EAAK/U,MAAM6sB,QAAQ3rB,EAAM2L,GAAG5E,IACvCu6C,GAAYA,EAAS/4C,WAAWC,cAC7B84C,EAAS1sB,SAIZ0sB,EAAStsB,GAAKssB,EAASpgD,EACvBogD,EAAS/4C,WAAWC,YAAYC,SAAS,GAAGC,SAAU,IAJtD44C,EAAStsB,GAAK,KACdssB,EAAS/4C,WAAWC,YAAYC,SAAS,GAAGC,SAAU,GAKnD44C,EAASzsB,QAGZysB,EAASrsB,GAAKqsB,EAASngD,EAFvBmgD,EAASrsB,GAAK,KAIhBqsB,EAAS/4C,WAAWC,YAAYonB,SAAS1uB,EAAIlB,EAAM2L,GAAGzK,EACtDogD,EAAS/4C,WAAWC,YAAYonB,SAASzuB,EAAInB,EAAM2L,GAAGxK,GAIrD0S,EAAK5F,QACR4F,EAAK6hB,MAAMkH,SAQjB/oB,EAAKqoB,aAAe,WAClBroB,EAAKmmB,SAAStzB,OAAOxF,GACnB2S,EAAKmmB,SAASjhB,OAAO6W,SAAS1uB,EAC9BwE,KAAKhF,KACFmT,EAAKglB,YACNnzB,KAAKjF,IAAIoT,EAAKglB,YAAahlB,EAAKmmB,SAASjhB,OAAO6W,SAAS1uB,IAE7D2S,EAAKmmB,SAASjhB,OAAO6W,SAAS1uB,GAC5B2S,EAAKmmB,SAASjhB,OAAO6W,SAAS1uB,EAC9BwE,KAAKhF,KACFmT,EAAKglB,YACNnzB,KAAKjF,IAAIoT,EAAKglB,YAAahlB,EAAKmmB,SAASjhB,OAAO6W,SAAS1uB,IAE7D2S,EAAKmmB,SAAStzB,OAAOvF,GACnB0S,EAAKmmB,SAASjhB,OAAO6W,SAASzuB,EAC9BuE,KAAKhF,KACFmT,EAAKilB,aACNpzB,KAAKjF,IAAIoT,EAAKilB,aAAcjlB,EAAKmmB,SAASjhB,OAAO6W,SAASzuB,IAE9D0S,EAAKmmB,SAASjhB,OAAO6W,SAASzuB,GAC5B0S,EAAKmmB,SAASjhB,OAAO6W,SAASzuB,EAC9BuE,KAAKhF,KACFmT,EAAKilB,aACNpzB,KAAKjF,IAAIoT,EAAKilB,aAAcjlB,EAAKmmB,SAASjhB,OAAO6W,SAASzuB,IAE9D0S,EAAKyiC,gBAAgBziC,EAAKgoB,UAM5BhoB,EAAKiK,YAAc,SAAShf,GA2C1B,GAzCAA,EAAM8P,aAAY,SAAS/H,GACzB,IAAI26C,EAAU3tC,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,IACjCy6C,EASH3tC,EAAK4tC,WAAWD,EAAS36C,IARpBgN,EAAK4lC,aACR5lC,EAAK4lC,WAAa,IAEpB5lC,EAAK4lC,WAAW/0C,KAAKmC,EAAKE,IAC1B8M,EAAKxM,QAAQR,GACI,EACjBgN,EAAKwlB,SAAWxlB,EAAK/U,MAAM6sB,QAAQ9kB,EAAKE,QAK5CjI,EAAM8gD,aAAY,SAASn7C,GACpBoP,EAAK/U,MAAM4iD,QAAQj9C,EAAKE,OAAQF,EAAKG,OACxCiP,EAAKgN,QACHhN,EAAK/U,MAAM6sB,QAAQlnB,EAAKE,QACxBkP,EAAK/U,MAAM6sB,QAAQlnB,EAAKG,UAK9BiP,EAAK/U,MAAM8P,aAAY,SAAS/H,GAChB/H,EAAM6sB,QAAQ9kB,EAAKE,KAE/B8M,EAAKkkC,WAAWlxC,MAIpBgN,EAAK6hB,MAAM6E,MAAM,GACjB1mB,EAAK6hB,MAAMrc,OAKTxF,EAAK2oB,cAAe,EAKlB3oB,EAAK4lC,aAEP5lC,EAAKgL,iBAAiBhL,EAAK4lC,YAAY,GAGnC5lC,EAAK4lC,WAAWx2C,OAAS,IAAI,CAC/B,IAAK,IAAI0I,EAAI,EAAGA,EAAIkI,EAAK4lC,WAAWx2C,OAAQ0I,IAC1CkI,EAAKxL,UAAU3D,KAAKmP,EAAK/U,MAAM6sB,QAAQ9X,EAAK4lC,WAAW9tC,KAEzDkI,EAAKzE,GAAGuqC,KAAK,eAAgB9lC,EAAKxL,aAQxCwL,EAAKyK,gBAAkB,SAASrV,GAC9B4K,EAAK/U,MAAM8P,aAAY,SAAS/H,GAC9B,IAAIqwC,EAAMjuC,EAAUpC,EAAKE,IACrBmwC,IACFrwC,EAAK3F,EAAIg2C,EAAI,GACbrwC,EAAK1F,EAAI+1C,EAAI,GACTrwC,EAAK+tB,UACP/tB,EAAKmuB,GAAKkiB,EAAI,IAEZrwC,EAAKguB,UACPhuB,EAAKouB,GAAKiiB,EAAI,SAStBrjC,EAAK4tC,WAAa,SAAS56C,EAAM86C,GAC/B,GAAIA,EAAQryC,KAAM,CAQhB,GAPIzI,EAAKyI,KAAKpP,OAASyhD,EAAQryC,KAAKpP,QAClC2G,EAAKyI,KAAKpP,MAAQyhD,EAAQryC,KAAKpP,MAC/B2G,EAAK0B,WAAWrI,MAAQ2G,EAAKyI,KAAKpP,MAClC2G,EAAK0B,WAAWC,YAAY+oB,SAASrxB,MAAMquB,IACzC,IAAIR,EAAM6C,MAAM/pB,EAAKyI,KAAKpP,SAG1ByhD,EAAQryC,KAAK9O,MAAQmhD,EAAQryC,KAAK9O,KAAO,EAAG,CAC9CqG,EAAKyI,KAAK9O,KAAOmhD,EAAQryC,KAAK9O,KAC9BqG,EAAK0B,WAAW/H,KAAOmhD,EAAQryC,KAAK9O,KACpCqG,EAAK0B,WAAWC,YAAYrI,MAAMouB,IAChCozB,EAAQryC,KAAK9O,KACbmhD,EAAQryC,KAAK9O,KACb,GAEF,IAAIq5C,EAAQ,EAAI/nB,EAAIsF,eAAiBuqB,EAAQryC,KAAK9O,KAClDqG,EAAK0B,WAAWC,YAAYC,SAAS,GAAGtI,MAAMouB,IAAIsrB,EAAOA,EAAO,GAE9D8H,EAAQryC,KAAKhI,QACfT,EAAKyI,KAAKhI,MAAQq6C,EAAQryC,KAAKhI,MAC/BT,EAAK0B,WAAWjB,MAAQT,EAAKyI,KAAKhI,MAClCT,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQivB,WAAW,GAAGC,UAC3Dh7C,EAAKyI,KAAKhI,OAEVq6C,EAAQryC,KAAK1O,QACfiG,EAAKyI,KAAK1O,MAAQ+gD,EAAQryC,KAAK1O,MAC/BiG,EAAK0B,WAAW3H,MAAQiG,EAAKyI,KAAK1O,MAClCiT,EAAKwrC,aAAax4C,EAAMA,EAAKyI,KAAK1O,Y,qRCxQ3BkhD,EA9DdC,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAAH,EAAAE,GAAA,IAAAE,EAAAC,YAAAL,GAAA,SAAAA,IAAA,OAAAvlD,YAAA,KAAAulD,GAAAI,EAAAv1C,MAAA,KAAAwa,WA2DN,OA3DMvpB,YAAAkkD,EAAA,EAAAjkD,IAAA,SAAAC,MAEP,WACE,OACEskD,IAAA/c,cAACgd,IAAM,CACLC,SAAS,MACTC,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQC,KAAO7jD,UAASwb,YAAYpc,WAEvC0kD,OAAQ9jD,UAASwb,YAAYkN,WAC7Bq7B,QAAS,WACP/jD,UAASwb,YAAYkN,YAAa,GAEpCs7B,MAAM,eAENT,IAAA/c,cAAA,OAAKkd,UAAU,kBACbH,IAAA/c,cAACyd,IAAM,CACLx7C,MAAM,YACNy7C,QAASlkD,UAASwb,YAAYpc,SAC9B+kD,SAAU,WACRnkD,UAASwb,YAAYpc,UAAYY,UAASwb,YAAYpc,SACtDY,UAASwb,YAAY4oC,iBACjBpkD,UAASC,MAAMC,OACjBF,UAASC,MAAMC,MAAMygD,gBAK3B4C,IAAA/c,cAACyd,IAAM,CACNx7C,MAAM,UACNy7C,QAASlkD,UAASwb,YAAY5b,eAC9BukD,SAAU,WACTnkD,UAASwb,YAAY5b,gBAAkBI,UAASwb,YAAY5b,eAC5DI,UAASwb,YAAY4oC,iBACjBpkD,UAASC,MAAMC,MACbF,UAASwb,YAAY5b,eACvBI,UAASC,MAAMC,MAAMyoB,cAErB3oB,UAASC,MAAMC,MAAMC,cAGvBC,QAAQC,IAAI,sDAKlBkjD,IAAA/c,cAAA,OAAKkd,UAAU,oBACbH,IAAA/c,cAAA,OAAKkd,UAAU,4BACbH,IAAA/c,cAAC6d,IAAM,CACL7mC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASwb,YAAYkN,YAAa,GAEpC3X,KAAK,gBAMhBkyC,EA3DM,CACuBM,IAAMgB,aAAS9mD,E,8CCJhC,WAAAkR,GAAA,IAAG8K,EAAI9K,EAAJ8K,KAAMqqC,EAAMn1C,EAANm1C,OAAQU,EAAQ71C,EAAR61C,SAAU56C,EAAQ+E,EAAR/E,SAAQ,OAChD25C,IAAA/c,cAAA,WACE+c,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAWC,IAAQa,MAAOb,IAAQc,KAAMd,IAAQe,QAAS,mBACpEC,cAAed,EAAS,aAAe,eACvCjzC,QAAS2zC,GAER/qC,GAEH8pC,IAAA/c,cAACqe,IAAQ,CAACf,OAAQA,GAASl6C,K,iBCVhB,WAAA+E,GAAA,IAAGm2C,EAAWn2C,EAAXm2C,YAAav9C,EAAIoH,EAAJpH,KAAMgI,EAAQZ,EAARY,SAAQ,OAC3Cg0C,IAAA/c,cAACue,IAAQ,CACTtB,SAAUl8C,EAAKnC,OAAO,GAAGC,cAAgBkC,EAAKgT,MAAM,GAAGtV,eAAiB,sBAC5DsC,EAAKnC,OAAO,GAAGC,cAAgBkC,EAAKgT,MAAM,GAAGtV,eAAiB,iBAC9DsC,EAAKnC,OAAO,GAAGC,cAAgBkC,EAAKgT,MAAM,GAAGtV,eAAiB,gBAC9D,QAAU,QACpBy+C,UAAWn0C,EAAWq0C,IAAQoB,OAAS,GACvChmD,IAAKuI,EACLsJ,QAASi0C,EACT/zC,KAAMxJ,EAAKnC,OAAO,GAAGC,cAAgBkC,EAAKgT,MAAM,GAAGtV,iBCPxC,WAAA0J,GAAA,IAAGs2C,EAAKt2C,EAALs2C,MAAOC,EAAQv2C,EAARu2C,SAAUjmD,EAAK0P,EAAL1P,MAAKkmD,EAAAx2C,EAAEy2C,YAAI,IAAAD,GAAQA,EAAA,OACpD5B,IAAA/c,cAAC6e,IAAM,CACLJ,MAAOA,EACPK,aAAcC,EACdC,YAAY,EACZC,aAAcP,GAKV3B,IAAA/c,cAAC6d,IAAM,CAACX,UAAW0B,EAAOxB,IAAQc,KAAO,KAAM3zC,KAAM9R,M,QCmB9CymD,EAlBdxC,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAAsC,EAAAvC,GAAA,IAAAE,EAAAC,YAAAoC,GAAA,SAAAA,IAAA,OAAAhoD,YAAA,KAAAgoD,GAAArC,EAAAv1C,MAAA,KAAAwa,WAeN,OAfMvpB,YAAA2mD,EAAA,EAAA1mD,IAAA,SAAAC,MAEP,WACE,OACEskD,IAAA/c,cAAA,WAAK,sBAEC+c,IAAA/c,cAACmf,EAAY,CACTV,MAAOj8C,OAAOC,KAAKjJ,UAASyb,OAAO9I,4BACnC1T,MAAOe,UAASyb,OAAO1I,kCACvBmyC,SAAU,SAACU,GACP5lD,UAASyb,OAAO1I,kCAAoC6yC,UAKrEF,EAfM,CACuBnC,IAAMgB,aAAS9mD,ECSzCooD,EADL3C,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAAyC,EAAA1C,GAAA,IAAAE,EAAAC,YAAAuC,GAAA,SAAAA,IAAA,OAAAnoD,YAAA,KAAAmoD,GAAAxC,EAAAv1C,MAAA,KAAAwa,WAqBN,OArBMvpB,YAAA8mD,EAAA,EAAA7mD,IAAA,SAAAC,MAEP,WACE,IAAMghB,EAAO5gB,KAAKymD,MAAM7lC,KACxB,OACEsjC,IAAA/c,cAACuf,IAAK,CACJrC,UAAU,uBACVsC,QAAS/lC,EAAK/M,KAAK9O,OACnB6hD,gBAAiBj9C,OAAOoD,OAAO6T,EAAK3M,SACjCvO,KAAI,SAAAyG,GAAE,OAAIyU,EAAK5M,QAAQvO,QAAQ0G,MAC/BzG,KAAI,SAAAyG,GAAE,MAAK,CAAE06C,KAAM,KAAMC,KAAM,CAAC36C,EAAIA,QAEtCyU,EAAK5M,QAAQtO,KAAI,SAAAyG,GAAE,OAClB+3C,IAAA/c,cAAC4f,IAAM,CACLpnD,IAAKwM,EACLiO,KAAMjO,EACN66C,WAAY,SAAAv5C,GAAC,OAAIy2C,IAAA/c,cAAC8f,IAAI,KAAErmC,EAAK/M,KAAKpG,GAAGtB,eAK9Cq6C,EArBM,CACkBtC,IAAMgB,aAAS9mD,EAoQ3B8oD,EA7OdrD,YAAQsD,EAAA,SAAAC,GAAArD,YAAAmD,EAAAE,GAAA,IAAAC,EAAApD,YAAAiD,GAEP,SAAAA,EAAYT,GAAQ,IAADz+C,EAOf,OAPe3J,YAAA,KAAA6oD,IACjBl/C,EAAAq/C,EAAA7wC,KAAA,KAAMiwC,IASRa,gBAAkB,SAAAC,GACZA,IAAgBpgC,mBAClBxmB,UAASyb,OAAO2E,aAAa5M,SAASC,eAAgB,GAExDpM,EAAKw/C,SAAS,CAAEC,UAAWF,KAC5Bv/C,EAED0/C,UAAY,WACV,OAAI1/C,EAAKiQ,MAAMwvC,YAAcvgC,qBAEzBvmB,UAASyb,OAAO2E,aAAa5M,SAASJ,OACtCpT,UAASyb,OAAO2E,aAAapN,SAASI,MAE/B/L,EAAKiQ,MAAMwvC,YAActgC,kBAC3BxmB,UAASyb,OAAO2E,aAAa5M,SAASJ,OAGhD/L,EAED2/C,qBAAuB,WACrB,IAAMh0C,EAAWhT,UAASyb,OAAO2E,aAAapN,SAC9C,OAAI3L,EAAKiQ,MAAMwvC,YAActgC,iBACpB,KAGP+8B,IAAA/c,cAACygB,EAAW,CACVxtC,KAAK,QACLqqC,OAAQz8C,EAAKiQ,MAAM4vC,UACnB1C,SAAU,kBAAMn9C,EAAKw/C,SAAS,CAAEK,WAAY7/C,EAAKiQ,MAAM4vC,cAEvD3D,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQuD,eAAgBvhB,MAAO,CAACwhB,OAAQ,SACnE7D,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQuD,gBACjC5D,IAAA/c,cAAA,OAAKZ,MAAO,CAACyhB,WAAW,QAAS3D,UAAWC,IAAWC,IAAQ0D,YAAa1D,IAAQc,OAClFnB,IAAA/c,cAAA,SACE5wB,KAAK,OACL8tC,UAAWC,IAAWC,IAAQ2D,UAC9BpD,SAAU,SAACrlC,GACLA,EAAMjX,OAAO2/C,MAAMpjD,OAAS,IAGhCpE,UAASyb,OAAOyF,0BAA4BpC,EAAMjX,OAAO2/C,MAAM,UAMvEjE,IAAA/c,cAACyd,IAAM,CACLx7C,MAAM,cACNy7C,QAASlxC,EAASG,WAClBgxC,SAAU,kBAAOnxC,EAASG,YAAcH,EAASG,cAElDH,EAASI,OACRmwC,IAAA/c,cAAA,OAAKkd,UAAU,oBACbH,IAAA/c,cAACqf,EAAY,CAAC5lC,KAAMjN,IAAY,sBAEhCuwC,IAAA/c,cAACmf,EAAY,CACXV,MAAOjyC,EAASK,QAChBpU,MAAO+T,EAASM,QAAQpL,GACxBg9C,SAAU,SAAA15C,GAAE,OAAKwH,EAASM,QAAQpL,GAAKsD,KAEzC+3C,IAAA/c,cAAA,KAAGihB,MAAS,CAACL,OAAQ,UAAUM,QAAS,OAAU,6BAElDnE,IAAA/c,cAACmf,EAAY,CACXV,MAAOjyC,EAASK,QAChBpU,MAAO+T,EAASM,QAAQlI,KACxB85C,SAAU,SAAA15C,GAAE,OAAKwH,EAASM,QAAQlI,KAAOI,KAE3C+3C,IAAA/c,cAAA,KAAGihB,MAAS,CAACL,OAAQ,UAAUM,QAAS,OAAU,4BAElDnE,IAAA/c,cAACmf,EAAY,CACXV,MAAOjyC,EAASK,QAChBpU,MAAO+T,EAASM,QAAQhI,KACxB45C,SAAU,SAAA15C,GAAE,OAAKwH,EAASM,QAAQhI,KAAOE,QAMpDnE,EAEDsgD,qBAAuB,WACrB,IAAMn0C,EAAWxT,UAASyb,OAAO2E,aAAa5M,SAC9C,OACE+vC,IAAA/c,cAACygB,EAAW,CACVxtC,KAAK,QACLqqC,OAAQz8C,EAAKiQ,MAAMswC,UACnBpD,SAAU,kBAAMn9C,EAAKw/C,SAAS,CAAEe,WAAYvgD,EAAKiQ,MAAMswC,cAEvDrE,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQuD,eAAgBvhB,MAAO,CAACwhB,OAAQ,SACjE7D,IAAA/c,cAAA,OAAKZ,MAAO,CAACyhB,WAAW,QAAS3D,UAAWC,IAAWC,IAAQ0D,YAAa1D,IAAQc,OAClFnB,IAAA/c,cAAA,SACE5wB,KAAK,OACL8tC,UAAWC,IAAWC,IAAQ2D,UAC9BpD,SAAU,SAACrlC,GACLA,EAAMjX,OAAO2/C,MAAMpjD,OAAS,IAGhCpE,UAASyb,OAAOyE,0BAA4BpB,EAAMjX,OAAO2/C,MAAM,SAKvEjE,IAAA/c,cAACyd,IAAM,CACLx7C,MAAM,cACNy7C,QAAS1wC,EAASL,WAClBgxC,SAAU,kBAAO3wC,EAASL,YAAcK,EAASL,cAEnDowC,IAAA/c,cAACyd,IAAM,CACLx7C,MAAM,uBACNy7C,QAAS1wC,EAASC,cAClBo0C,SAAUxgD,EAAKiQ,MAAMwvC,YAActgC,iBACnC29B,SAAU,kBAAO3wC,EAASC,eAAiBD,EAASC,iBAErDD,EAASJ,OACRmwC,IAAA/c,cAAA,OAAKkd,UAAU,oBACbH,IAAA/c,cAACqf,EAAY,CAAC5lC,KAAMzM,IAAY,wBAEhC+vC,IAAA/c,cAACmf,EAAY,CACXV,MAAOzxC,EAASH,QAChBpU,MAAOuU,EAASF,QAAQxN,OACxBo/C,SAAU,SAAA15C,GAAE,OAAKgI,EAASF,QAAQxN,OAAS0F,KAC1C,IACH+3C,IAAA/c,cAAA,WAAM,wBAEN+c,IAAA/c,cAACmf,EAAY,CACXV,MAAOzxC,EAASH,QAChBpU,MAAOuU,EAASF,QAAQvN,KACxBm/C,SAAU,SAAA15C,GAAE,OAAKgI,EAASF,QAAQvN,KAAOyF,QAvInDnE,EAAKiQ,MAAQ,CACXwvC,UAAWvgC,qBACX2gC,WAAW,EACXU,WAAW,EACXr0C,UAAW,KACXlM,EAiOH,OAhOAtI,YAAAwnD,EAAA,EAAAvnD,IAAA,kBAAAC,MAyID,SAAiB6oD,GACfzoD,KAAKwnD,SAAS,CAACtzC,UAAWu0C,IAEN,OAAhBA,IACFA,EAAe,MAGjB9nD,UAASyb,OAAO2E,aAAa5M,SAASD,UAAYu0C,EAClD9nD,UAASyb,OAAO2E,aAAapN,SAASO,UAAYu0C,IACnD,CAAA9oD,IAAA,2BAAAC,MAED,WAA4B,IAADkJ,EAAA,KACzB,OACEo7C,IAAA/c,cAAA,OAAKkd,UAAU,oBAAmB,sBAEhCH,IAAA/c,cAACmf,EAAY,CACXV,MAAO,CAAC,IAAK,MAAO,KACpBhmD,MAAOI,KAAKiY,MAAM/D,UAClB2xC,SAAU,SAAA15C,GAAQrD,EAAK4/C,gBAAgBv8C,MACtC,OAGR,CAAAxM,IAAA,SAAAC,MAED,WAAU,IAAD6J,EAAA,KACP,OACEy6C,IAAA/c,cAACgd,IAAM,CACLC,SAAS,SACTC,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQC,KAAO7jD,UAASwb,YAAYpc,WAEvC0kD,OAAQ9jD,UAASyb,OAAOiN,WACxBq7B,QAAS,WACP/jD,UAASyb,OAAOiN,YAAa,GAE/Bs7B,MAAM,cAELhkD,UAASyb,OAAOqB,QACfymC,IAAA/c,cAACwhB,IAAO,MAERzE,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,YAAa,kBAAkB,UAEhE1E,IAAA/c,cAACmf,EAAY,CACXV,MAAO,CAACz+B,iBAAgBD,sBACxBtnB,MAAOI,KAAKiY,MAAMwvC,UAClB5B,SAAU7lD,KAAKsnD,kBAEhBtnD,KAAK2nD,uBACL3nD,KAAKsoD,uBACLtoD,KAAK6oD,2BACN3E,IAAA/c,cAAA,WACA+c,IAAA/c,cAACkf,EAAiB,OAEpBnC,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQ2D,UAAYloD,KAAK0nD,cAE5BvpC,OAAQC,IAAO6mC,QACfzzC,QAAS,WAIP7Q,UAASC,MAAM6J,kBAEfqkB,YAAwB,CACtB1U,KAAMzZ,UAAS2b,QAAQuM,eACvBmgC,aAAa,IAAI54C,MAAO64C,mBAE1BtgC,YACElf,EAAKwO,MAAMwvC,YAAcvgC,qBAAoBvmB,UAASyb,OAAO2E,aAAa5M,SAASD,UAAWvT,UAAS2b,QAAQuM,gBAKjHloB,UAASC,MAAMC,MAAM0oB,2BAEvB7X,KAAK,mBAQpBw1C,EA1OM,CACkBhD,IAAMgB,aAASiC,ECuC3B+B,EAxEdrF,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAAmF,EAAApF,GAAA,IAAAE,EAAAC,YAAAiF,GAAA,SAAAA,IAAA,OAAA7qD,YAAA,KAAA6qD,GAAAlF,EAAAv1C,MAAA,KAAAwa,WAqEN,OArEMvpB,YAAAwpD,EAAA,EAAAvpD,IAAA,qBAAAC,MAGP,WACE,OACEskD,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQ2D,SAAwD,MAA7CvnD,UAASyb,OAAOuS,4BAEtCxQ,OAAQC,IAAO6mC,QACfzzC,QAAS,WAIN7Q,UAASC,MAAM6J,kBAEhB9J,UAASyb,OAAOqB,SAAU,EAC1B+L,eAEF9X,KAAK,eAKd,CAAA/R,IAAA,SAAAC,MAED,WACE,OACEskD,IAAA/c,cAACgd,IAAM,CACLC,SAAS,SACTC,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQC,KAAO7jD,UAASwb,YAAYpc,WAEvC0kD,OAAQ9jD,UAASyb,OAAOuN,eACxB+6B,QAAS,WACP/jD,UAASyb,OAAOuN,gBAAiB,EACjChpB,UAASyb,OAAOqB,SAAU,GAE5BknC,MAAM,eAELhkD,UAASyb,OAAOqB,QACfymC,IAAA/c,cAACwhB,IAAO,MAERzE,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,YAAa,kBAC9C1E,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQuD,gBACjC5D,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQ0D,YAAa1D,IAAQc,OACxDnB,IAAA/c,cAAA,SACE5wB,KAAK,OACL8tC,UAAWC,IAAWC,IAAQ2D,UAC9BpD,SAAU,SAACrlC,GACLA,EAAMjX,OAAO2/C,MAAMpjD,OAAS,IAGhCpE,UAASyb,OAAOuS,0BAA4BlP,EAAMjX,OAAO2/C,MAAM,SAKvEjE,IAAA/c,cAAA,WACA+c,IAAA/c,cAACkf,EAAiB,OAEjBrmD,KAAKmpD,2BAKfD,EArEM,CACsBhF,IAAMgB,aAAS9mD,EC+H/BgrD,EAvHdvF,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAAqF,EAAAtF,GAAA,IAAAE,EAAAC,YAAAmF,GAEP,SAAAA,EAAY3C,GAAQ,IAADz+C,EAMf,OANe3J,YAAA,KAAA+qD,IACjBphD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IAQRiB,UAAY,WACV,OAAI1/C,EAAKiQ,MAAMwvC,YAAcrgC,uBACpBzmB,UAASyb,OAAOoM,WAAa7nB,UAASyb,OAAOmM,UAE7C5nB,UAASyb,OAAOmM,WAG1BvgB,EAEDs/C,gBAAkB,SAAAC,GACZA,IAAgBpgC,mBAClBxmB,UAASyb,OAAO2E,aAAa5M,SAASC,eAAgB,GAExDpM,EAAKw/C,SAAS,CAAEC,UAAWF,KAC5Bv/C,EAEDqhD,kBAAoB,WAClB,OACEnF,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQuD,gBACjC5D,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQ0D,YAAa1D,IAAQc,OACtDnB,IAAA/c,cAAA,SACE5wB,KAAK,OACL8tC,UAAWC,IAAWC,IAAQ2D,SAAU3D,IAAQ+E,OAChDC,YAAY,oBACZC,UAAQ,EACR5pD,MAAOe,UAASyb,OAAOmM,aAG3B27B,IAAA/c,cAAC6d,IAAM,CACPze,MAAO,CAAC/I,OAAO,QACfrf,OAAQC,IAAO6mC,QAASzzC,QAAS4W,KAAwB,iBAK9DpgB,EAEDyhD,kBAAoB,WAClB,OACEvF,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQuD,gBACjC5D,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQ0D,YAAa1D,IAAQc,OACtDnB,IAAA/c,cAAA,SACE5wB,KAAK,OACL8tC,UAAWC,IAAWC,IAAQ2D,SAAU3D,IAAQ+E,OAChDC,YAAY,uBACZC,UAAQ,EACR5pD,MAAOe,UAASyb,OAAOoM,aAG3B07B,IAAA/c,cAAC6d,IAAM,CACPze,MAAO,CAAC/I,OAAO,QACfrf,OAAQC,IAAO6mC,QAASzzC,QAAS6W,KAAwB,iBA1D7DrgB,EAAKiQ,MAAQ,CACXwvC,UAAWpgC,kBACXqiC,cAAe,KACfC,cAAe,MACf3hD,EA4GH,OA3GAtI,YAAA0pD,EAAA,EAAAzpD,IAAA,SAAAC,MA4DD,WACE,OACEskD,IAAA/c,cAACgd,IAAM,CACLC,SAAS,SACTC,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQC,KAAO7jD,UAASwb,YAAYpc,WAEvC0kD,OAAQ9jD,UAASwb,YAAYytC,eAC7BlF,QAAS,WACP/jD,UAASwb,YAAYytC,gBAAiB,GAExCjF,MAAM,aAELhkD,UAASyb,OAAOqB,QACfymC,IAAA/c,cAACwhB,IAAO,MAERzE,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,YAAa,kBAAkB,UAEhE1E,IAAA/c,cAACmf,EAAY,CACXV,MAAO,CAACx+B,uBAAsBC,mBAC9BznB,MAAOI,KAAKiY,MAAMwvC,UAClB5B,SAAU7lD,KAAKsnD,kBAEhBtnD,KAAKqpD,oBACLrpD,KAAKiY,MAAMwvC,YAAcrgC,wBACxBpnB,KAAKypD,qBAETvF,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQ2D,UAAYloD,KAAK0nD,cAE5BvpC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASwb,YAAYytC,gBAAiB,EACtCthC,eAEF5W,KAAK,iBAQpB03C,EApHM,CACgBlF,IAAMgB,aAAS9mD,ECyCzByrD,EAvDdhG,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAA8F,EAAA/F,GAAA,IAAAE,EAAAC,YAAA4F,GAAA,SAAAA,IAAA,OAAAxrD,YAAA,KAAAwrD,GAAA7F,EAAAv1C,MAAA,KAAAwa,WAoDN,OApDMvpB,YAAAmqD,EAAA,EAAAlqD,IAAA,SAAAC,MAGP,WACE,IAAMkqD,EAA4BnpD,UAAS2b,QAAQytC,SAASC,MAAK,SAAAhjD,GAAC,OAAIA,EAAEoT,OAASzZ,UAAS2b,QAAQuM,kBAC5FohC,EAAmE,KAA3CtpD,UAAS2b,QAAQuM,eAAetH,OACxD2oC,IAAgBJ,GAA6BG,GAEnD,OACE/F,IAAA/c,cAACgd,IAAM,CACLC,SAAS,WACTK,OAAQ9jD,UAAS2b,QAAQ6tC,uBACzBzF,QAAS,WACP/jD,UAAS2b,QAAQ6tC,wBAAyB,GAE5CxF,MAAM,sBAENT,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQqE,aACtB1E,IAAA/c,cAAA,SAAOkd,UAAU,sBAAqB,eAEpCH,IAAA/c,cAAA,QAAMkd,UAAU,iBAAgB,cAAYyF,GAA6B,wCACzE5F,IAAA/c,cAAA,SACEkd,UAAU,WACV9tC,KAAK,OACLgzC,YAAY,cACZ5Q,IAAI,OACJ/4C,MAAOe,UAAS2b,QAAQuM,eACxBi8B,SAAU,SAAArlC,GACR9e,UAAS2b,QAAQuM,eAAiBpJ,EAAMjX,OAAO5I,WAKvDskD,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQ2D,UAAYgC,IAEvB/rC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACH04C,IACFvpD,UAAS2b,QAAQ6tC,wBAAyB,EAC1CxpD,UAASyb,OAAOiN,YAAa,IAGjC3X,KAAK,gBAMhBm4C,EApDM,CACsB3F,IAAMgB,aAAS9mD,E,kBC4F/BgsD,GA3FdvG,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAAqG,EAAAtG,GAAA,IAAAE,EAAAC,YAAAmG,GAAA,SAAAA,IAAA,OAAA/rD,YAAA,KAAA+rD,GAAApG,EAAAv1C,MAAA,KAAAwa,WAwFN,OAxFMvpB,YAAA0qD,EAAA,EAAAzqD,IAAA,SAAAC,MAEP,WACE,OACEe,UAAS2b,QAAQ+tC,gBACfnG,IAAA/c,cAACgd,IAAM,CACLC,SAAS,WACTK,OAAQ9jD,UAAS2b,QAAQguC,0BACzB5F,QAAS,WACP/jD,UAAS2b,QAAQguC,2BAA4B,GAE/C3F,MAAK,QAAA1/C,OAAUtE,UAAS2b,QAAQ+tC,eAAejwC,KAAI,aAElDzZ,UAAS2b,QAAQ+tC,eAAeE,aAC/BrG,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQqE,aACtB1E,IAAA/c,cAACqjB,IAAI,CACHC,aAAa,EACbC,UAAWF,IAAKG,cAChBn5C,QAAS,WACP7Q,UAASyb,OAAOmM,UACd5nB,UAAS2b,QAAQ+tC,eAAeO,cAClCjqD,UAAS2b,QAAQguC,2BAA4B,EAC7ChiC,gBAGF47B,IAAA/c,cAAC0jB,KAAI,CAACzG,SAAS,UAAU,oCAE3BF,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,OAAKkd,UAAU,yBAAwB,yBACvCH,IAAA/c,cAAA,WACGxmC,UAAS2b,QAAQ+tC,eAAeS,cAAcplD,KAC7C,SAAAqlD,GACE,OACE7G,IAAA/c,cAAA,OAAKxnC,IAAKorD,GACR7G,IAAA/c,cAACqjB,IAAI,CACHC,aAAa,EACbC,UAAWF,IAAKG,eAGhBzG,IAAA/c,cAAA,UACG4jB,EACE3gC,QAAQ,YAAa,IACrBA,QAAQ,YAAa,KAE1B85B,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAW,CACpBC,IAAQyG,OACRzG,IAAQ0G,iBAEVz5C,QAAS,WACP7Q,UAASyb,OAAOmM,UACd5nB,UAAS2b,QAAQ+tC,eAAeO,cAClCjqD,UAASyb,OAAOoM,UAAYuiC,EAC5BpqD,UAAS2b,QAAQ4uC,oBAAsBH,EACpC3gC,QAAQ,YAAa,IACrBA,QAAQ,YAAa,IACxBzpB,UAAS2b,QAAQguC,2BAA4B,EAC7ChiC,gBAEH,iBAGD47B,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAW,CAACC,IAAQyG,SAC/Bx5C,QAAS,WACLiX,YAAcsiC,GACdpqD,UAAS2b,QAAQ+tC,eAAeS,cAAgBnqD,UAAS2b,QAAQ+tC,eAAeS,cAAcxlD,QAC5F,SAAAsO,GAAI,OAAIA,IAASm3C,OAGxB,iBAWf7G,IAAA/c,cAAA,WAAK,sEAOdijB,EAxFM,CACyBlG,IAAMgB,aAAS9mD,ECyElC+sD,GA/DdtH,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAAoH,EAAArH,GAAA,IAAAE,EAAAC,YAAAkH,GAAA,SAAAA,IAAA,OAAA9sD,YAAA,KAAA8sD,GAAAnH,EAAAv1C,MAAA,KAAAwa,WA4DN,OA5DMvpB,YAAAyrD,EAAA,EAAAxrD,IAAA,SAAAC,MASP,WACE,OACIskD,IAAA/c,cAACgd,IAAM,CACLC,SAAS,WACTK,OAAQ9jD,UAAS2b,QAAQ8uC,yBACzB1G,QAAS,WACP/jD,UAAS2b,QAAQ8uC,0BAA2B,GAE9CzG,MAAK,iBAELT,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,cAajC1E,IAAA/c,cAAA,SAAG,8HACH+c,IAAA/c,cAAA,SAAOt+B,GAAG,oBAAoB0N,KAAK,WAAW3W,MAAOe,UAAS2b,QAAQ+uC,qBAAsB7B,UAAQ,IACpGtF,IAAA/c,cAAA,UACE31B,QAAS,WACPiqB,SAASsZ,eAAe,qBAAqBuW,SAC7C7vB,SAAS8vB,YAAY,UAExB,sBAKHrH,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAGC,CACA7mC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAAS2b,QAAQ8uC,0BAA2B,GAE9C15C,KAAK,gBAMlBy5C,EA5DM,CACwBjH,IAAMgB,aAAS9mD,ECyCjC+sD,GAtDdtH,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAAoH,EAAArH,GAAA,IAAAE,EAAAC,YAAAkH,GAEP,SAAAA,EAAY1E,GAAQ,IAADz+C,EAIf,OAJe3J,YAAA,KAAA8sD,IACjBnjD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,CACXmC,KAAM,IACNpS,EA6CH,OA5CAtI,YAAAyrD,EAAA,EAAAxrD,IAAA,SAAAC,MAED,WAAU,IAADkJ,EAAA,KACP,OACIo7C,IAAA/c,cAACgd,IAAM,CACLC,SAAS,WACTK,OAAQ9jD,UAAS2b,QAAQkvC,2BACzB9G,QAAS,WACP/jD,UAAS2b,QAAQkvC,4BAA6B,GAEhD7G,MAAK,mBAELT,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,cACjC1E,IAAA/c,cAAA,SAAOkd,UAAU,sBAAqB,gBAEpCH,IAAA/c,cAAA,QAAMkd,UAAU,iBAAgB,eAChCH,IAAA/c,cAAA,SACEkd,UAAU,WACV9tC,KAAK,OACLgzC,YAAY,cACZ5Q,IAAI,OACJ/4C,MAAOI,KAAKiY,MAAMmC,KAClB0qC,SAAU,SAAArlC,GAAK,OAAI3W,EAAK0+C,SAAS,CAAEptC,KAAMqF,EAAMjX,OAAO5I,aAK5DskD,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQ2D,UAAYloD,KAAKiY,MAAMmC,OAElC+D,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASC,MAAMuE,SAASyJ,aAAe9F,EAAKmP,MAAMmC,KAClDzZ,UAAS2b,QAAQkvC,4BAA6B,GAEhD95C,KAAK,gBAMlBy5C,EAnDM,CACwBjH,IAAMgB,aAAS9mD,E,SC0EjCqtD,GA9Ed5H,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAA0H,EAAA3H,GAAA,IAAAE,EAAAC,YAAAwH,GAEP,SAAAA,EAAYhF,GAAQ,IAADz+C,EAIf,OAJe3J,YAAA,KAAAotD,IACjBzjD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,CACTyzC,aAAc,MAChB1jD,EAqEH,OApEAtI,YAAA+rD,EAAA,EAAA9rD,IAAA,SAAAC,MAED,WAAU,IAADkJ,EAAA,KACP,OACEo7C,IAAA/c,cAACgd,IAAM,CACLC,SAAS,SACTC,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQC,KAAO7jD,UAASwb,YAAYpc,WAEvC0kD,OAAQ9jD,UAASwb,YAAYwvC,uBAC7BjH,QAAS,WACP/jD,UAASwb,YAAYwvC,wBAAyB,GAEhDhH,MAAM,aAENT,IAAA/c,cAAA,WACI+c,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,cAC/B1E,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQuD,gBAC/B5D,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQ0D,YAAa1D,IAAQc,OACpDnB,IAAA/c,cAAA,SACI5wB,KAAK,OACL8tC,UAAWC,IAAWC,IAAQ2D,UAC9BpD,SAAU,SAACrlC,GACHA,EAAMjX,OAAO2/C,MAAMpjD,OAAS,GAGhC+D,EAAK0+C,SAAS,CACVkE,aAAcjsC,EAAMjX,OAAO2/C,MAAM,WAOzDjE,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAUhgC,YAAC,GACnBigC,IAAQ2D,UAAYloD,KAAKiY,MAAMyzC,eAElCvtC,OAAQC,IAAO6mC,QACfzzC,QAAS,WAEP7Q,UAASwb,YAAYwvC,wBAAyB,EAG9C1tC,KAAQ3L,KAAK,CACT4L,QAAS,yCACTC,OAAQC,IAAO4tB,KACf1tB,QAAS,MAIb,IAAM0C,EAAS,IAAIC,WACnBD,EAAOE,WAAWpY,EAAKmP,MAAMyzC,cAE7B1qC,EAAOG,OAAS,WACZ,IAAMyqC,EAAe5qC,EAAOpJ,OAC5BjX,UAASC,MAAM6d,oBAAoBmtC,KAGzCl6C,KAAK,iBAOpB+5C,EA3EM,CACwBvH,IAAMgB,aAAS9mD,E,0CCXhDmW,GAAA,kBAAAC,GAAA,IAAAA,EAAA,GAAAC,EAAA9K,OAAAzI,UAAAwT,EAAAD,EAAAE,eAAAC,EAAAjL,OAAAiL,gBAAA,SAAAC,EAAAlV,EAAAmV,GAAAD,EAAAlV,GAAAmV,EAAAlV,OAAAmV,EAAA,mBAAAC,cAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAV,EAAAlV,EAAAC,GAAA,OAAA+J,OAAAiL,eAAAC,EAAAlV,EAAA,CAAAC,QAAAyB,YAAA,EAAAD,cAAA,EAAAE,UAAA,IAAAuT,EAAAlV,GAAA,IAAA4V,EAAA,aAAA9N,GAAA8N,EAAA,SAAAV,EAAAlV,EAAAC,GAAA,OAAAiV,EAAAlV,GAAAC,GAAA,SAAA4V,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAAxU,qBAAA4U,EAAAJ,EAAAI,EAAAC,EAAApM,OAAAqM,OAAAH,EAAA3U,WAAA+U,EAAA,IAAAC,EAAAN,GAAA,WAAAhB,EAAAmB,EAAA,WAAAnW,MAAAuW,EAAAV,EAAAE,EAAAM,KAAAF,EAAA,SAAAK,EAAAC,EAAAxB,EAAAyB,GAAA,WAAAC,KAAA,SAAAD,IAAAD,EAAAG,KAAA3B,EAAAyB,IAAA,MAAA7O,GAAA,OAAA8O,KAAA,QAAAD,IAAA7O,IAAA+M,EAAAgB,OAAA,IAAAiB,EAAA,YAAAX,KAAA,SAAAY,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAArB,EAAAqB,EAAA3B,GAAA,8BAAA4B,EAAAlN,OAAAmN,eAAAC,EAAAF,OAAA9J,EAAA,MAAAgK,OAAAtC,GAAAC,EAAA8B,KAAAO,EAAA9B,KAAA2B,EAAAG,GAAA,IAAAC,EAAAL,EAAAzV,UAAA4U,EAAA5U,UAAAyI,OAAAqM,OAAAY,GAAA,SAAAK,EAAA/V,GAAA,0BAAAoF,SAAA,SAAA4Q,GAAA3B,EAAArU,EAAAgW,GAAA,SAAAZ,GAAA,YAAAa,QAAAD,EAAAZ,SAAA,SAAAc,EAAArB,EAAAsB,GAAA,IAAAC,EAAA1C,EAAA,gBAAAhV,MAAA,SAAAsX,EAAAZ,GAAA,SAAAiB,IAAA,WAAAF,GAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAZ,EAAAkB,EAAAC,GAAA,IAAAE,EAAAvB,EAAAL,EAAAmB,GAAAnB,EAAAO,GAAA,aAAAqB,EAAApB,KAAA,KAAAqB,EAAAD,EAAArB,IAAA1W,EAAAgY,EAAAhY,MAAA,OAAAA,GAAA,iBAAAA,GAAA8U,EAAA8B,KAAA5W,EAAA,WAAAyX,EAAAG,QAAA5X,EAAAiY,SAAAC,MAAA,SAAAlY,GAAA8X,EAAA,OAAA9X,EAAA4X,EAAAC,MAAA,SAAAhQ,GAAAiQ,EAAA,QAAAjQ,EAAA+P,EAAAC,MAAAJ,EAAAG,QAAA5X,GAAAkY,MAAA,SAAAC,GAAAH,EAAAhY,MAAAmY,EAAAP,EAAAI,MAAA,SAAAI,GAAA,OAAAN,EAAA,QAAAM,EAAAR,EAAAC,QAAAE,EAAArB,KAAAoB,CAAAR,EAAAZ,EAAAkB,EAAAC,MAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAApB,EAAAV,EAAAE,EAAAM,GAAA,IAAAgC,EAAA,iCAAAf,EAAAZ,GAAA,iBAAA2B,EAAA,UAAAjL,MAAA,iDAAAiL,EAAA,cAAAf,EAAA,MAAAZ,EAAA,OAAA4B,IAAA,IAAAjC,EAAAiB,SAAAjB,EAAAK,QAAA,KAAA6B,EAAAlC,EAAAkC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAAlC,GAAA,GAAAmC,EAAA,IAAAA,IAAA3B,EAAA,gBAAA2B,GAAA,YAAAnC,EAAAiB,OAAAjB,EAAAqC,KAAArC,EAAAsC,MAAAtC,EAAAK,SAAA,aAAAL,EAAAiB,OAAA,uBAAAe,EAAA,MAAAA,EAAA,YAAAhC,EAAAK,IAAAL,EAAAuC,kBAAAvC,EAAAK,SAAA,WAAAL,EAAAiB,QAAAjB,EAAAwC,OAAA,SAAAxC,EAAAK,KAAA2B,EAAA,gBAAAN,EAAAvB,EAAAX,EAAAE,EAAAM,GAAA,cAAA0B,EAAApB,KAAA,IAAA0B,EAAAhC,EAAA1O,KAAA,6BAAAoQ,EAAArB,MAAAG,EAAA,gBAAA7W,MAAA+X,EAAArB,IAAA/O,KAAA0O,EAAA1O,MAAA,UAAAoQ,EAAApB,OAAA0B,EAAA,YAAAhC,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAqB,EAAArB,OAAA,SAAA+B,EAAAF,EAAAlC,GAAA,IAAAyC,EAAAzC,EAAAiB,SAAAiB,EAAAjD,SAAAwD,GAAA,QAAAxO,IAAAgN,EAAA,OAAAjB,EAAAkC,SAAA,eAAAO,GAAAP,EAAAjD,SAAAyD,SAAA1C,EAAAiB,OAAA,SAAAjB,EAAAK,SAAApM,EAAAmO,EAAAF,EAAAlC,GAAA,UAAAA,EAAAiB,SAAA,WAAAwB,IAAAzC,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAsC,UAAA,oCAAAF,EAAA,aAAAjC,EAAA,IAAAkB,EAAAvB,EAAAc,EAAAiB,EAAAjD,SAAAe,EAAAK,KAAA,aAAAqB,EAAApB,KAAA,OAAAN,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAqB,EAAArB,IAAAL,EAAAkC,SAAA,KAAA1B,EAAA,IAAAoC,EAAAlB,EAAArB,IAAA,OAAAuC,IAAAtR,MAAA0O,EAAAkC,EAAAW,YAAAD,EAAAjZ,MAAAqW,EAAA8C,KAAAZ,EAAAa,QAAA,WAAA/C,EAAAiB,SAAAjB,EAAAiB,OAAA,OAAAjB,EAAAK,SAAApM,GAAA+L,EAAAkC,SAAA,KAAA1B,GAAAoC,GAAA5C,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAsC,UAAA,oCAAA3C,EAAAkC,SAAA,KAAA1B,GAAA,SAAAwC,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,SAAAM,WAAAhT,KAAA2S,GAAA,SAAAM,EAAAN,GAAA,IAAAxB,EAAAwB,EAAAO,YAAA,GAAA/B,EAAApB,KAAA,gBAAAoB,EAAArB,IAAA6C,EAAAO,WAAA/B,EAAA,SAAAzB,EAAAN,GAAA,KAAA4D,WAAA,EAAAJ,OAAA,SAAAxD,EAAAtP,QAAA2S,EAAA,WAAAU,OAAA,YAAA5M,EAAA6M,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAA3E,GAAA,GAAA4E,EAAA,OAAAA,EAAArD,KAAAoD,GAAA,sBAAAA,EAAAb,KAAA,OAAAa,EAAA,IAAAE,MAAAF,EAAA7U,QAAA,KAAA0I,GAAA,EAAAsL,EAAA,SAAAA,IAAA,OAAAtL,EAAAmM,EAAA7U,QAAA,GAAA2P,EAAA8B,KAAAoD,EAAAnM,GAAA,OAAAsL,EAAAnZ,MAAAga,EAAAnM,GAAAsL,EAAAxR,MAAA,EAAAwR,EAAA,OAAAA,EAAAnZ,WAAAsK,EAAA6O,EAAAxR,MAAA,EAAAwR,GAAA,OAAAA,UAAA,OAAAA,KAAAb,GAAA,SAAAA,IAAA,OAAAtY,WAAAsK,EAAA3C,MAAA,UAAAmP,EAAAxV,UAAAyV,EAAA/B,EAAAoC,EAAA,eAAApX,MAAA+W,EAAAvV,cAAA,IAAAwT,EAAA+B,EAAA,eAAA/W,MAAA8W,EAAAtV,cAAA,IAAAsV,EAAAqD,YAAAxE,EAAAoB,EAAAtB,EAAA,qBAAAb,EAAAwF,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAE,YAAA,QAAAD,QAAAxD,GAAA,uBAAAwD,EAAAH,aAAAG,EAAAE,QAAA5F,EAAA6F,KAAA,SAAAJ,GAAA,OAAAtQ,OAAA2Q,eAAA3Q,OAAA2Q,eAAAL,EAAAtD,IAAAsD,EAAAM,UAAA5D,EAAApB,EAAA0E,EAAA5E,EAAA,sBAAA4E,EAAA/Y,UAAAyI,OAAAqM,OAAAgB,GAAAiD,GAAAzF,EAAAgG,MAAA,SAAAlE,GAAA,OAAAuB,QAAAvB,IAAAW,EAAAG,EAAAlW,WAAAqU,EAAA6B,EAAAlW,UAAAiU,GAAA,0BAAAX,EAAA4C,gBAAA5C,EAAAiG,MAAA,SAAAhF,EAAAC,EAAAC,EAAAC,EAAAyB,QAAA,IAAAA,MAAAqD,SAAA,IAAAC,EAAA,IAAAvD,EAAA5B,EAAAC,EAAAC,EAAAC,EAAAC,GAAAyB,GAAA,OAAA7C,EAAAwF,oBAAAtE,GAAAiF,IAAA5B,OAAAjB,MAAA,SAAAF,GAAA,OAAAA,EAAArQ,KAAAqQ,EAAAhY,MAAA+a,EAAA5B,WAAA9B,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA/B,GAAA,0BAAAM,EAAAyB,EAAA,qDAAAxC,EAAA5K,KAAA,SAAAgR,GAAA,IAAAC,EAAAlR,OAAAiR,GAAAhR,EAAA,WAAAjK,KAAAkb,EAAAjR,EAAApD,KAAA7G,GAAA,OAAAiK,EAAAkR,UAAA,SAAA/B,IAAA,KAAAnP,EAAA7E,QAAA,KAAApF,EAAAiK,EAAAmR,MAAA,GAAApb,KAAAkb,EAAA,OAAA9B,EAAAnZ,MAAAD,EAAAoZ,EAAAxR,MAAA,EAAAwR,EAAA,OAAAA,EAAAxR,MAAA,EAAAwR,IAAAvE,EAAAzH,SAAAmJ,EAAAhV,UAAA,CAAAiZ,YAAAjE,EAAAyD,MAAA,SAAAqB,GAAA,QAAAC,KAAA,OAAAlC,KAAA,OAAAT,KAAA,KAAAC,WAAArO,EAAA,KAAA3C,MAAA,OAAA4Q,SAAA,UAAAjB,OAAA,YAAAZ,SAAApM,EAAA,KAAAsP,WAAAlT,QAAAmT,IAAAuB,EAAA,QAAAZ,KAAA,WAAAA,EAAArU,OAAA,IAAA2O,EAAA8B,KAAA,KAAA4D,KAAAN,OAAAM,EAAAc,MAAA,WAAAd,QAAAlQ,IAAAiR,KAAA,gBAAA5T,MAAA,MAAA6T,EAAA,KAAA5B,WAAA,GAAAE,WAAA,aAAA0B,EAAA7E,KAAA,MAAA6E,EAAA9E,IAAA,YAAA+E,MAAA7C,kBAAA,SAAA8C,GAAA,QAAA/T,KAAA,MAAA+T,EAAA,IAAArF,EAAA,cAAAsF,EAAAC,EAAAC,GAAA,OAAA9D,EAAApB,KAAA,QAAAoB,EAAArB,IAAAgF,EAAArF,EAAA8C,KAAAyC,EAAAC,IAAAxF,EAAAiB,OAAA,OAAAjB,EAAAK,SAAApM,KAAAuR,EAAA,QAAAhO,EAAA,KAAA+L,WAAAzU,OAAA,EAAA0I,GAAA,IAAAA,EAAA,KAAA0L,EAAA,KAAAK,WAAA/L,GAAAkK,EAAAwB,EAAAO,WAAA,YAAAP,EAAAC,OAAA,OAAAmC,EAAA,UAAApC,EAAAC,QAAA,KAAA6B,KAAA,KAAAS,EAAAhH,EAAA8B,KAAA2C,EAAA,YAAAwC,EAAAjH,EAAA8B,KAAA2C,EAAA,iBAAAuC,GAAAC,EAAA,SAAAV,KAAA9B,EAAAE,SAAA,OAAAkC,EAAApC,EAAAE,UAAA,WAAA4B,KAAA9B,EAAAG,WAAA,OAAAiC,EAAApC,EAAAG,iBAAA,GAAAoC,GAAA,QAAAT,KAAA9B,EAAAE,SAAA,OAAAkC,EAAApC,EAAAE,UAAA,YAAAsC,EAAA,UAAA3O,MAAA,kDAAAiO,KAAA9B,EAAAG,WAAA,OAAAiC,EAAApC,EAAAG,gBAAAb,OAAA,SAAAlC,EAAAD,GAAA,QAAA7I,EAAA,KAAA+L,WAAAzU,OAAA,EAAA0I,GAAA,IAAAA,EAAA,KAAA0L,EAAA,KAAAK,WAAA/L,GAAA,GAAA0L,EAAAC,QAAA,KAAA6B,MAAAvG,EAAA8B,KAAA2C,EAAA,oBAAA8B,KAAA9B,EAAAG,WAAA,KAAAsC,EAAAzC,EAAA,OAAAyC,IAAA,UAAArF,GAAA,aAAAA,IAAAqF,EAAAxC,QAAA9C,MAAAsF,EAAAtC,aAAAsC,EAAA,UAAAjE,EAAAiE,IAAAlC,WAAA,UAAA/B,EAAApB,OAAAoB,EAAArB,MAAAsF,GAAA,KAAA1E,OAAA,YAAA6B,KAAA6C,EAAAtC,WAAA7C,GAAA,KAAAoF,SAAAlE,IAAAkE,SAAA,SAAAlE,EAAA4B,GAAA,aAAA5B,EAAApB,KAAA,MAAAoB,EAAArB,IAAA,gBAAAqB,EAAApB,MAAA,aAAAoB,EAAApB,KAAA,KAAAwC,KAAApB,EAAArB,IAAA,WAAAqB,EAAApB,MAAA,KAAA8E,KAAA,KAAA/E,IAAAqB,EAAArB,IAAA,KAAAY,OAAA,cAAA6B,KAAA,kBAAApB,EAAApB,MAAAgD,IAAA,KAAAR,KAAAQ,GAAA9C,GAAAqF,OAAA,SAAAxC,GAAA,QAAA7L,EAAA,KAAA+L,WAAAzU,OAAA,EAAA0I,GAAA,IAAAA,EAAA,KAAA0L,EAAA,KAAAK,WAAA/L,GAAA,GAAA0L,EAAAG,eAAA,YAAAuC,SAAA1C,EAAAO,WAAAP,EAAAI,UAAAE,EAAAN,GAAA1C,IAAAsF,MAAA,SAAA3C,GAAA,QAAA3L,EAAA,KAAA+L,WAAAzU,OAAA,EAAA0I,GAAA,IAAAA,EAAA,KAAA0L,EAAA,KAAAK,WAAA/L,GAAA,GAAA0L,EAAAC,WAAA,KAAAzB,EAAAwB,EAAAO,WAAA,aAAA/B,EAAApB,KAAA,KAAAyF,EAAArE,EAAArB,IAAAmD,EAAAN,GAAA,OAAA6C,GAAA,UAAAhP,MAAA,0BAAAiP,cAAA,SAAArC,EAAAd,EAAAE,GAAA,YAAAb,SAAA,CAAAjD,SAAAnI,EAAA6M,GAAAd,aAAAE,WAAA,cAAA9B,SAAA,KAAAZ,SAAApM,GAAAuM,IAAAjC,EAgBA,I,yDAAMq3C,GAAS7pC,EAAQ,KA0QR8pC,GAxQdjI,YAAQzlD,EAAA,SAAA0lD,GAAAC,YAAA+H,EAAAhI,GAAA,IAAAE,EAAAC,YAAA6H,GAGL,SAAAA,EAAYrF,GAAQ,IAADz+C,EASoC,OATpC3J,YAAA,KAAAytD,IACf9jD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,CACT8zC,UAAU,EACVC,YAAY,EACZC,UAAW,wBACXC,kBAAkB,GAGtBlkD,EAAKmkD,cAAgBnkD,EAAKmkD,cAAc/M,KAAIgN,aAAApkD,IAAOA,EAyPtD,OAxPAtI,YAAAosD,EAAA,EAAAnsD,IAAA,gBAAAC,MAAA,eAAAysD,EAAAxtC,aAAAtK,KAAA8F,MAKD,SAAAyE,EAAoBpC,GAAI,IAAA4vC,EAAA,OAAA/3C,KAAAiB,MAAA,SAAAwJ,GAAA,cAAAA,EAAA/D,KAAA+D,EAAAjG,MAAA,OAGpB,OADMuzC,EAAU,GAAArnD,OAAM0Y,cAAW,cACjCqB,EAAAjG,KAAA,EACa6E,MAAM0uC,EAAY,CAC3Bp1C,OAAQ,OACR2G,KAAM,OACNopB,MAAO,WACPslB,QAAS,CACL,eAAgB,oBAEpBC,SAAU,cACVxuC,KAAMrS,KAAKC,UAAU,CACjB8Q,OACAsB,KAAMzB,OAAO+C,2BAElBxH,MAAK,SAAAgG,GAAQ,OAAIA,EAAS2uC,MAAI1wC,OAAM,SAAA/D,GACnCiG,KAAQ3L,KAAK,CACT4L,QAAS,yDACTC,OAAQC,IAAOC,OACfC,SAAU,OAEf,KAAD,SAAAU,EAAAvG,OAAA,SAAAuG,EAAA1G,MAAA,wBAAA0G,EAAA7D,UAAA2D,OACL,gBAAA+K,GAAA,OAAAwiC,EAAA59C,MAAA,KAAAwa,YA5BA,IA4BA,CAAAtpB,IAAA,SAAAC,MAED,WAAU,IAADkJ,EAAA,KAIL,OACIo7C,IAAA/c,cAACgd,IAAM,CACHC,SAAS,WACTK,OAAQ9jD,UAASwb,YAAYuwC,gBAC7BhI,QAAS,WACL/jD,UAASwb,YAAYuwC,iBAAkB,EACvC5jD,EAAK0+C,SAAQv9C,0BAAC,GACPnB,EAAKmP,OAAK,IACbi0C,kBAAkB,MAG1BvH,MAAK,uBACLpe,MAAO,CAAE9V,MAAQzwB,KAAKiY,MAAMi0C,iBAAyB,IAAN,MAE/ChI,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,eAE1B5oD,KAAKiY,MAAMi0C,kBACRhI,IAAA/c,cAAA,WACI+c,IAAA/c,cAAA,KAAGZ,MAAO,CAAEt1B,QAAS,SAAU07C,YAAa,SAAU,iCAC9DzI,IAAA/c,cAAA,SAAG,iBAAkB,QAAI+c,IAAA/c,cAAA,SAAG,gBAAiB,UAAM+c,IAAA/c,cAAA,SAAG,6BAEzCnnC,KAAKiY,MAAMi0C,kBACRhI,IAAA/c,cAAC6d,IAAM,CACHX,UAAWC,IAAUhgC,YAAC,GACjBigC,IAAQ2D,SAAWloD,KAAKiY,MAAM+zC,aAEnC7tC,OAAQC,IAAO6mC,QACfzzC,QAAOqN,aAAAtK,KAAA8F,MAAE,SAAAmQ,IAAA,IAAA9N,EAAAuvC,EAAA,OAAA13C,KAAAiB,MAAA,SAAAwW,GAAA,cAAAA,EAAA/Q,KAAA+Q,EAAAjT,MAAA,OAOL,OANAjQ,EAAK0+C,SAAS,CAAEwE,YAAY,IAEtBtvC,EAAOmvC,KAEPI,EAAS,+CAAAhnD,OAAkDyX,GAEjEsP,EAAAjT,KAAA,EAC6BjQ,EAAKqjD,cAAczvC,GAAM,KAAD,EAAjCsP,EAAA1T,KAGhBxP,EAAK0+C,SAAS,CAAEwE,YAAY,EAAOD,UAAU,EAAME,eAGnDnjD,EAAK0+C,SAAS,CAAEwE,YAAY,EAAOD,UAAU,IAC7C9tC,KAAQ3L,KAAK,CACT4L,QAAS,+DACTC,OAAQC,IAAOC,OACfC,SAAU,KAGlBxV,EAAK0+C,SAAQv9C,0BAAC,GACPnB,EAAKmP,OAAK,IACbi0C,kBAAkB,KACnB,wBAAAlgC,EAAA7Q,UAAAqP,OAEP9Y,KAAK,aAIjBwyC,IAAA/c,cAAA,WAEA+c,IAAA/c,cAAA,OAAKkd,UAAU,+BAA+B9d,MAAO,CAACqmB,aAAc,SAChE1I,IAAA/c,cAAA,KAAGkd,UAAU,oBAAmB,8QAAiQH,IAAA/c,cAAA,SAAG,4BAA4B,yBAEpU+c,IAAA/c,cAAA,OAAKkd,UAAU,+BACXH,IAAA/c,cAAA,KAAGkd,UAAU,qBAAoBH,IAAA/c,cAAA,SAAG,cAAc,0NAM9DnnC,KAAKiY,MAAM+zC,YACP9H,IAAA/c,cAAA,KAAGZ,MAAO,CAACsmB,UAAW,SAAS3I,IAAA/c,cAAA,SAAG,wCAItCnnC,KAAKiY,MAAMi0C,kBACPhI,IAAA/c,cAAA,WACsB,2CAElB+c,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,SACIt+B,GAAG,oBACH0N,KAAK,WACL3W,MAAOI,KAAKiY,MAAMg0C,UAClBzC,UAAQ,EACRjjB,MAAO,CACH9V,MAAO,QACPo8B,UAAW,SAGnB3I,IAAA/c,cAAA,UACI31B,QAAS,WACLiqB,SAASsZ,eAAe,qBAAqBuW,SAC7C7vB,SAAS8vB,YAAY,SAEzBlH,UAAU,qBACb,qBAGDH,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,WAEiC,eAC7B+c,IAAA/c,cAAA,SAAG,eAAe,IACtB+c,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,SACIt+B,GAAG,uBACH0N,KAAK,WACL3W,MAAK,gBAAAqF,OAAkBjF,KAAKiY,MAAMg0C,UAAS,wCAC3C1lB,MAAO,CACH9V,MAAO,QACPo8B,UAAW,OAEfrD,UAAQ,IAEZtF,IAAA/c,cAAA,UACI31B,QAAS,WACLiqB,SAASsZ,eAAe,wBAAwBuW,SAChD7vB,SAAS8vB,YAAY,SAEzBlH,UAAU,qBACb,qBAGDH,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,WAE6C,cAC1C+c,IAAA/c,cAAA,SAAG,2BAA2B,IACjC+c,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,YACIt+B,GAAG,0BACHg+C,KAAK,IACLC,KAAK,KACLvgB,MAAO,CACHa,SAAU,SACVylB,UAAW,MACXp8B,MAAO,QACPq8B,OAAQ,QAEZtD,SAAS,OACT5pD,MAAO,uCAA2C,WAAAqF,OAAcjF,KAAKiY,MAAMg0C,UAAS,+BACxF/H,IAAA/c,cAAA,UACI31B,QAAS,WACLiqB,SAASsZ,eAAe,2BAA2BuW,SACnD7vB,SAAS8vB,YAAY,SAEzBlH,UAAU,oBACV9d,MAAO,CACH7U,SAAU,WACVm7B,UAAW,SAElB,uBAQjB3I,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACpB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBAEhB/oD,KAAKiY,MAAMi0C,kBAGPhI,IAAA/c,cAAC6d,IAAM,CACHX,UAAWC,IAAUhgC,YAAC,GACjBigC,IAAQ2D,SAAWloD,KAAKiY,MAAM+zC,aAEnC7tC,OAAQC,IAAO6mC,QACfzzC,QAAOqN,aAAAtK,KAAA8F,MAAE,SAAAsS,IAAA,IAAAjQ,EAAAuvC,EAAA,OAAA13C,KAAAiB,MAAA,SAAAoX,GAAA,cAAAA,EAAA3R,KAAA2R,EAAA7T,MAAA,OAOL,OANAjQ,EAAK0+C,SAAS,CAAEwE,YAAY,EAAMD,UAAU,IAEtCrvC,EAAOmvC,KAEPI,EAAS,+CAAAhnD,OAAkDyX,GAEjEkQ,EAAA7T,KAAA,EAC6BjQ,EAAKqjD,cAAczvC,GAAM,KAAD,EAAjCkQ,EAAAtU,KAGhBxP,EAAK0+C,SAAS,CAAEwE,YAAY,EAAOD,UAAU,EAAME,eAGnDnjD,EAAK0+C,SAAS,CAAEwE,YAAY,EAAOD,UAAU,IAC7C9tC,KAAQ3L,KAAK,CACT4L,QAAS,+DACTC,OAAQC,IAAOC,OACfC,SAAU,KAEjB,wBAAAsO,EAAAzR,UAAAwR,OAGLjb,KAAK,gCASzBwyC,IAAA/c,cAAA,SAAO4lB,wBAAyB,CAC5BC,OAAO,kPAWtBlB,EArQI,CACiB5H,IAAMgB,aAAS9mD,EC2E1B6uD,GAhFdpJ,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAkJ,EAAAnJ,GAAA,IAAAE,EAAAC,YAAAgJ,GAAA,SAAAA,IAAA,OAAA5uD,YAAA,KAAA4uD,GAAAjJ,EAAAv1C,MAAA,KAAAwa,WA6EN,OA7EMvpB,YAAAutD,EAAA,EAAAttD,IAAA,SAAAC,MAMP,WACE,OACIskD,IAAA/c,cAACgd,IAAM,CACLC,SAAS,WACTK,OAAQ9jD,UAASwb,YAAY+wC,qBAC7BxI,QAAS,WACP/jD,UAASwb,YAAY+wC,sBAAuB,GAE9CvI,MAAK,cAELT,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,cACjC1E,IAAA/c,cAAA,SAAOkd,UAAWE,IAAQ4I,MAAO5mB,MAAO,CAAC9V,MAAO,SAC5CyzB,IAAA/c,cAAA,aACI+c,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,cACJ+c,IAAA/c,cAAA,UAAI,WAGZ+c,IAAA/c,cAAA,aACI+c,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,WACJ+c,IAAA/c,cAAA,UAAKxmC,UAASC,MAAMuE,SAAS0J,YAEjCq1C,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,WACJ+c,IAAA/c,cAAA,UAAKxmC,UAASC,MAAMuE,SAAS2J,YAEjCo1C,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,kBACJ+c,IAAA/c,cAAA,UACGxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAMoiB,OAAOoqC,QAAQ,GAAK,kBAGpElJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,iBACJ+c,IAAA/c,cAAA,UACGxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAMysD,QAAQD,QAAQ,GAAK,kBAGrElJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,kBACJ+c,IAAA/c,cAAA,UACGxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAM0sD,SAAW,kBAG3DpJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,0BACJ+c,IAAA/c,cAAA,UAAMxmC,UAASC,MAAM+e,SAAWhf,UAASwb,YAAY+wC,qBAAwBvsD,UAASC,MAAM2hB,kBAAkB6qC,QAAQ,GAAK,kBAE/HlJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,uBACJ+c,IAAA/c,cAAA,UAAMxmC,UAASC,MAAM+e,SAAWhf,UAASwb,YAAY+wC,qBAAwBvsD,UAASC,MAAM2sD,WAAa,qBAOvHrJ,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACL7mC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASwb,YAAY+wC,sBAAuB,GAE9Cx7C,KAAK,gBAMlBu7C,EA7EM,CACsB/I,IAAMgB,aAAS9mD,GC+E/BovD,GAhFd3J,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAyJ,EAAA1J,GAAA,IAAAE,EAAAC,YAAAuJ,GAAA,SAAAA,IAAA,OAAAnvD,YAAA,KAAAmvD,GAAAxJ,EAAAv1C,MAAA,KAAAwa,WA6EN,OA7EMvpB,YAAA8tD,EAAA,EAAA7tD,IAAA,SAAAC,MAMP,WACE,OACIskD,IAAA/c,cAACgd,IAAM,CACLC,SAAS,WACTK,OAAQ9jD,UAASwb,YAAYsxC,iBAC7B/I,QAAS,WACP/jD,UAASwb,YAAYsxC,kBAAmB,GAE1C9I,MAAK,WAELT,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,cACjC1E,IAAA/c,cAAA,SAAOkd,UAAWE,IAAQ4I,MAAO5mB,MAAO,CAAC9V,MAAO,SAC5CyzB,IAAA/c,cAAA,aACI+c,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,cACJ+c,IAAA/c,cAAA,UAAI,WAGZ+c,IAAA/c,cAAA,aACI+c,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,WACJ+c,IAAA/c,cAAA,UAAKxmC,UAASC,MAAMuE,SAAS0J,YAEjCq1C,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,WACJ+c,IAAA/c,cAAA,UAAKxmC,UAASC,MAAMuE,SAAS2J,YAEjCo1C,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,kBACJ+c,IAAA/c,cAAA,UACGxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAMoiB,OAAS,kBAGzDkhC,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,iBACJ+c,IAAA/c,cAAA,UACGxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAMysD,QAAU,kBAG1DnJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,kBACJ+c,IAAA/c,cAAA,UACGxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAM0sD,SAAW,kBAG3DpJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,0BACJ+c,IAAA/c,cAAA,UAAMxmC,UAASC,MAAM+e,SAAWhf,UAASwb,YAAYsxC,iBAAoB9sD,UAASC,MAAM2hB,kBAAoB,kBAEhH2hC,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,uBACJ+c,IAAA/c,cAAA,UAAMxmC,UAASC,MAAM+e,SAAWhf,UAASwb,YAAYsxC,iBAAoB9sD,UAASC,MAAM2sD,WAAa,qBAOnHrJ,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACL7mC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASwb,YAAYsxC,kBAAmB,GAE1C/7C,KAAK,gBAMlB87C,EA7EM,CACkBtJ,IAAMgB,aAAS9mD,GCmF3BsvD,GAxFd7J,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA2J,EAAA5J,GAAA,IAAAE,EAAAC,YAAAyJ,GAAA,SAAAA,IAAA,OAAArvD,YAAA,KAAAqvD,GAAA1J,EAAAv1C,MAAA,KAAAwa,WAqFN,OArFMvpB,YAAAguD,EAAA,EAAA/tD,IAAA,SAAAC,MAGP,WACE,OACIskD,IAAA/c,cAACgd,IAAM,CACLC,SAAS,OACTK,OAAQ9jD,UAASwb,YAAYwxC,eAC7BjJ,QAAS,WACP/jD,UAASwb,YAAYwxC,gBAAiB,GAExChJ,MAAK,QAELT,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,cAAc,qDAE/C1E,IAAA/c,cAAA,OAAKkd,UAAU,wBACbH,IAAA/c,cAAA,SAAOkd,UAAU,+DACfH,IAAA/c,cAAA,aACE+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,mBACJ+c,IAAA/c,cAAA,UAAI,SACJ+c,IAAA/c,cAAA,UAAI,iBAGR+c,IAAA/c,cAAA,aACA+c,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,mBACJ+c,IAAA/c,cAAA,UAAI,+CACJ+c,IAAA/c,cAAA,UAAI,8CAEN+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,QACJ+c,IAAA/c,cAAA,UAAI,eACJ+c,IAAA/c,cAAA,UAAI,0BAEN+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,OACJ+c,IAAA/c,cAAA,UAAI,oHACJ+c,IAAA/c,cAAA,UAAI,uBAEN+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,oBACJ+c,IAAA/c,cAAA,UAAI,+FACJ+c,IAAA/c,cAAA,UAAI,kBAEN+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,4EACJ+c,IAAA/c,cAAA,UAAI,sEACJ+c,IAAA/c,cAAA,UAAI,iDAEN+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,yCACJ+c,IAAA/c,cAAA,UAAI,yGACJ+c,IAAA/c,cAAA,UAAI,oCAEN+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,uBACJ+c,IAAA/c,cAAA,UAAI,2EACJ+c,IAAA/c,cAAA,UAAI,uBAEN+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,+BACJ+c,IAAA/c,cAAA,UAAI,gIACJ+c,IAAA/c,cAAA,UAAI,2BASd+c,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACL7mC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASwb,YAAYwxC,gBAAiB,GAExCj8C,KAAK,gBAMlBg8C,EArFM,CACgBxJ,IAAMgB,aAAS9mD,G,6BC0GzBwvD,GAxGd/J,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA6J,EAAA9J,GAAA,IAAAE,EAAAC,YAAA2J,GAEL,SAAAA,EAAYnH,GAAQ,IAADz+C,EAKb,OALa3J,YAAA,KAAAuvD,IACf5lD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,CACT41C,OAAQ,WACRC,UAAW,cACb9lD,EA8FP,OA7FEtI,YAAAkuD,EAAA,EAAAjuD,IAAA,SAAAC,MAEH,WAAU,IAADkJ,EAAA,KACHilD,EAAgB/tD,KAAKymD,MAAM3kD,MAE/BisD,EAAc7gD,MAAK,SAAC+E,EAAIC,GACpB,IAAM87C,EAAQ/7C,EAAGnJ,EAAKmP,MAAM41C,QACtBI,EAAQ/7C,EAAGpJ,EAAKmP,MAAM41C,QAC5B,GAAIG,GAASC,EAAO,CAEhB,IAAMC,EAAajnD,OAAO+mD,GACpBG,EAAalnD,OAAOgnD,GAC1B,GAAKhnD,OAAO6S,MAAMo0C,IAAgBjnD,OAAO6S,MAAMq0C,GAMxC,CAEH,IAAMC,EAAgBJ,EAAMzlD,WACtB8lD,EAAgBJ,EAAM1lD,WAC5B,OAAiC,eAAzBO,EAAKmP,MAAM61C,WAA8B,EAAI,GAAKM,EAAcE,cAAcD,GARtF,MAA6B,eAAzBvlD,EAAKmP,MAAM61C,UACJK,EAAaD,EAEjBA,EAAaC,EAQ5B,OAAO,KAGX,IAAMI,EAAqB5tD,UAASC,MAAM4tD,qBAAqBlpD,QAAO,SAACC,GAAC,MAAW,aAANA,GAA0B,WAANA,KAEjG,OACQ2+C,IAAA/c,cAAA,OAAKkd,UAAU,wBAAuB,WACzB,IACTH,IAAA/c,cAACmf,EAAY,CACTV,MAAK,CAAG,WAAY,UAAQ3gD,OAAAC,aAAKqpD,IACjC3uD,MAAOI,KAAKiY,MAAM41C,OAClBhI,SAAU,SAACU,GACPz9C,EAAK0+C,SAAS,CAACqG,OAAQtH,OAG/BrC,IAAA/c,cAACmf,EAAY,CACTV,MAAO,CAAC,aAAc,aACtBhmD,MAAOI,KAAKiY,MAAM61C,UAClBjI,SAAU,SAACU,GACPz9C,EAAK0+C,SAAS,CAACsG,UAAWvH,OAGlCrC,IAAA/c,cAAA,SAAOkd,UAAU,+DACbH,IAAA/c,cAAA,aACI+c,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI+c,IAAA/c,cAAA,SAAG,SACP+c,IAAA/c,cAAA,UAAI+c,IAAA/c,cAAA,SAAG,YAEHxmC,UAASC,MAAM4tD,qBAAqB9oD,KAAI,SAACyG,EAAIsB,GACzC,MAAW,OAAPtB,EACO+3C,IAAA/c,cAAA,MAAIxnC,IAAG,GAAAsF,OAAKkH,EAAE,KAAAlH,OAAIwI,IAAMtB,GAE5B,UAKvB+3C,IAAA/c,cAAA,aAEQ4mB,EAAcroD,KAAI,SAACiD,GAAI,OACnBu7C,IAAA/c,cAAA,MAAIxnC,IAAKgJ,EAAKE,IACVq7C,IAAA/c,cAAA,UACI+c,IAAA/c,cAACyd,IAAM,CACHC,SAAUl8C,EAAKK,SACf87C,SAAU,WACFn8C,EAAKK,SACLrI,UAASC,MAAMwR,UAAU,CAACzJ,EAAKE,KAE/BlI,UAASC,MAAM6tD,UAAU,CAAC9lD,EAAKE,SAK/Cq7C,IAAA/c,cAAA,UAAKx+B,EAAKE,IAENlI,UAASC,MAAM4tD,qBAAqB9oD,KAAI,SAACyG,EAAIsB,GACzC,GAAW,OAAPtB,EACA,OAAO+3C,IAAA/c,cAAA,MAAIxnC,IAAG,GAAAsF,OAAKkH,EAAE,KAAAlH,OAAIwI,IAAM9E,EAAKwD,kBAWjFyhD,EArGM,CACe1J,IAAMgB,aAAS9mD,GC+FxBswD,GA/Fd7K,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA2K,EAAA5K,GAAA,IAAAE,EAAAC,YAAAyK,GAEP,SAAAA,EAAYjI,GAAQ,IAADz+C,EAKf,OALe3J,YAAA,KAAAqwD,IACjB1mD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,CACX02C,WAAY,WACZC,YAAa,GACb5mD,EAqFH,OApFAtI,YAAAgvD,EAAA,EAAA/uD,IAAA,SAAAC,MAED,WAAU,IAADkJ,EAAA,KASHilD,EAAgB,GAEpB,GAAIptD,UAASC,MAAMiuD,uBAAwB,CACvC,IAAM1mD,EAAiBxH,UAASC,MAAMiuD,uBAAuBz9C,KAAKzP,IAAIkH,GAAGN,YACzEwlD,EAAgBptD,UAASC,MAAMoR,6BAA6B7J,IAG9C+E,MAdQ,SAAC+E,EAAIC,GAC3B,OAAID,EAAa,UAAKC,EAAa,SACxBA,EAAa,SAAID,EAAa,SAElC,KA4BX,OACIiyC,IAAA/c,cAACgd,IAAM,CACLC,SAAS,QACTK,OAAQ9jD,UAASwb,YAAY2yC,mBAC7BpK,QAAS,WACP/jD,UAASwb,YAAY2yC,oBAAqB,GAE5CnK,MAAM,YACNpe,MAAO,CAACwoB,SAAU,SAElB7K,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,cAEjC1E,IAAA/c,cAAC6nB,KAAW,KACR9K,IAAA/c,cAAC6d,IAAM,CAACxzC,QAAS,WAAO7Q,UAASC,MAAMwR,UAAU27C,EAAcroD,KAAI,SAAA4B,GAAC,OAAIA,EAAEuB,SAAO,YACjFq7C,IAAA/c,cAAC6d,IAAM,CAACxzC,QAAS,WAAO7Q,UAASC,MAAM6tD,UAAUV,EAAcroD,KAAI,SAAA4B,GAAC,OAAIA,EAAEuB,SAAO,aAGrFq7C,IAAA/c,cAAA,WAEA+c,IAAA/c,cAAA,WACE+c,IAAA/c,cAAC6d,IAAM,CACPze,MAAO,CAACt1B,QAAS,UACjBkN,OAAQC,IAAO6mC,QACfvzC,KAAK,OACLF,QAAS,YAvCU,SAACy9C,EAAcC,GAC1C,IAAMC,EAAcpB,EAAczoD,QAAO,SAAAgC,GAAC,OAAIA,EAAE0B,YAChDmmD,EAAYjiD,MAAK,SAAC+E,EAAIC,GACpB,OAAID,EAAGi9C,IAAkBh9C,EAAGg9C,GACjBh9C,EAAGg9C,GAAiBj9C,EAAGi9C,GAE3B,KAGT,IADA,IAAM/8C,EAAM,GACH1E,EAAI,EAAGA,EAAIwhD,GAAgBxhD,EAAI0hD,EAAYpqD,OAAQ0I,IACxD0E,EAAI3L,KAAK2oD,EAAY1hD,GAAG5E,IAE5BlI,UAASC,MAAMwR,UAAUD,GA4Bfi9C,CAAqBtmD,EAAKmP,MAAM22C,YAAa9lD,EAAKmP,MAAM02C,eACrD,IAACzK,IAAA/c,cAACkoB,KAAY,CAACC,cAAe,SAACC,EAAaC,GAAiB1mD,EAAK0+C,SAAS,CAACoH,YAAa3nD,OAAOuoD,MAAiB5vD,MAAOI,KAAKiY,MAAM22C,YAAaroB,MAAO,CAACt1B,QAAS,cAAewf,MAAO,UAAW,IAAE,IAAI,2BACrLyzB,IAAA/c,cAACmf,EAAY,CAACV,MAAO,CAAC,WAAY,UAAWhmD,MAAOI,KAAKiY,MAAM02C,WAAY9I,SAAU,SAACU,GAAcz9C,EAAK0+C,SAAS,CAACmH,WAAYpI,QAGzJrC,IAAA/c,cAAA,WAEA+c,IAAA/c,cAACymB,GAAS,CAAC9rD,MAAOisD,KAGpB7J,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACL7mC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASwb,YAAY2yC,oBAAqB,GAE5Cp9C,KAAK,gBAMlBg9C,EA5FM,CACoBxK,IAAMgB,aAAS9mD,GC+E7BqxD,GA/Ed5L,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA0L,EAAA3L,GAAA,IAAAE,EAAAC,YAAAwL,GAEP,SAAAA,EAAYhJ,GAAQ,IAADz+C,EAKf,OALe3J,YAAA,KAAAoxD,IACjBznD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,CACX02C,WAAY,WACZC,YAAa,GACb5mD,EAqEH,OApEAtI,YAAA+vD,EAAA,EAAA9vD,IAAA,SAAAC,MAED,WAAU,IAADkJ,EAAA,KACHilD,EAAa7oD,aAAOvE,UAASC,MAAM+F,SAAS7E,OAiBhD,OACIoiD,IAAA/c,cAACgd,IAAM,CACLC,SAAS,WACTK,OAAQ9jD,UAASwb,YAAYuzC,oBAC7BhL,QAAS,WACP/jD,UAASwb,YAAYuzC,qBAAsB,GAE7C/K,MAAM,aACNpe,MAAO,CAACwoB,SAAU,SAElB7K,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQqE,cAEjC1E,IAAA/c,cAAC6nB,KAAW,KACR9K,IAAA/c,cAAC6d,IAAM,CAACxzC,QAAS,WAAO7Q,UAASC,MAAMwR,UAAU27C,EAAcroD,KAAI,SAAA4B,GAAC,OAAIA,EAAEuB,SAAO,YACjFq7C,IAAA/c,cAAC6d,IAAM,CAACxzC,QAAS,WAAO7Q,UAASC,MAAM6tD,UAAUV,EAAcroD,KAAI,SAAA4B,GAAC,OAAIA,EAAEuB,SAAO,aAGrFq7C,IAAA/c,cAAA,WAEA+c,IAAA/c,cAAA,WACE+c,IAAA/c,cAAC6d,IAAM,CACPze,MAAO,CAACt1B,QAAS,UACjBkN,OAAQC,IAAO6mC,QACfvzC,KAAK,OACLF,QAAS,YAvCU,SAACy9C,EAAcC,GAC1C,IAAMC,EAAcpB,EAAczoD,QAAO,SAAAgC,GAAC,OAAIA,EAAE0B,YAChDmmD,EAAYjiD,MAAK,SAAC+E,EAAIC,GACpB,OAAID,EAAGi9C,IAAkBh9C,EAAGg9C,GACjBh9C,EAAGg9C,GAAiBj9C,EAAGi9C,GAE3B,KAGT,IADA,IAAM/8C,EAAM,GACH1E,EAAI,EAAGA,EAAIwhD,GAAgBxhD,EAAI0hD,EAAYpqD,OAAQ0I,IACxD0E,EAAI3L,KAAK2oD,EAAY1hD,GAAG5E,IAE5BlI,UAASC,MAAMwR,UAAUD,GA4Bfi9C,CAAqBtmD,EAAKmP,MAAM22C,YAAa9lD,EAAKmP,MAAM02C,eACrD,IAACzK,IAAA/c,cAACkoB,KAAY,CAACC,cAAe,SAACC,EAAaC,GAAiB1mD,EAAK0+C,SAAS,CAACoH,YAAa3nD,OAAOuoD,MAAiB5vD,MAAOI,KAAKiY,MAAM22C,YAAaroB,MAAO,CAACt1B,QAAS,cAAewf,MAAO,UAAW,IAAE,IAAI,2BACrLyzB,IAAA/c,cAACmf,EAAY,CAACV,MAAO,CAAC,WAAY,UAAWhmD,MAAOI,KAAKiY,MAAM02C,WAAY9I,SAAU,SAACU,GAAcz9C,EAAK0+C,SAAS,CAACmH,WAAYpI,QAGzJrC,IAAA/c,cAAA,WAEA+c,IAAA/c,cAACymB,GAAS,CAAC9rD,MAAOisD,KAGpB7J,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQuE,eACtB5E,IAAA/c,cAAA,OAAKkd,UAAWE,IAAQwE,uBACtB7E,IAAA/c,cAAC6d,IAAM,CACL7mC,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASwb,YAAYuzC,qBAAsB,GAE7Ch+C,KAAK,gBAMlB+9C,EA5EM,CACqBvL,IAAMgB,aAAS9mD,G,UCCxBuxD,ICXpB9L,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA6L,EAAA9L,GAAA,IAAAE,EAAAC,YAAA2L,GAEL,SAAAA,EAAYnJ,GAAO,OAAApoD,YAAA,KAAAuxD,GAAA5L,EAAAxtC,KAAA,KACXiwC,GAqEP,OAnEA/mD,YAAAkwD,EAAA,EAAAjwD,IAAA,SAAAC,MAED,WACE,IAAM6xB,EAAIlV,OACV+V,EAAImJ,SACJ/zB,EAAI4qB,EAAEu9B,gBACNntC,EAAI4P,EAAEnG,qBAAqB,QAAQ,GACrBsF,EAAEq+B,YAAcpoD,EAAEyoC,aAAeztB,EAAEytB,YAClC1e,EAAEs+B,aAAeroD,EAAEuoC,cAAgBvtB,EAAEutB,aACpD,OAENiU,IAAA/c,cAAA,OACMkd,UAAW,mCACX9d,MAAO,CAAE9zB,IAAK,EAAGF,KAAM,EAAGmf,SAAU,UAEjCwyB,IAAA/c,cAAC6oB,KAAG,CACLzpB,MAAO,CAACmY,gBAAgB,OACxBuR,OAAQ,OACRp8B,QAAS,CACP7wB,EAAGuZ,OAAOuzC,WAAW,EACrB7sD,EAAGsZ,OAAOwzC,YAAY,EACtBt/B,MAAO,IACP+M,OAAQ,YA6CboyB,EAxEI,CAC8B1L,IAAMgB,YDUjB,SAAApB,GAAAC,YAAA4L,EAAA7L,GAAA,IAAAE,EAAAC,YAAA0L,GAAA,SAAAA,IAAA,OAAAtxD,YAAA,KAAAsxD,GAAA3L,EAAAv1C,MAAA,KAAAwa,WAsBzB,OAtByBvpB,YAAAiwD,EAAA,EAAAhwD,IAAA,SAAAC,MAC1B,WACE,OACEskD,IAAA/c,cAAA,OAAKZ,MAAO,IACV2d,IAAA/c,cAACyc,EAAiB,MAClBM,IAAA/c,cAAC+f,EAAY,MACbhD,IAAA/c,cAAC+hB,EAAgB,MACjBhF,IAAA/c,cAACiiB,EAAU,MACXlF,IAAA/c,cAACskB,GAAkB,MACnBvH,IAAA/c,cAAC0iB,EAAgB,MACjB3F,IAAA/c,cAACijB,GAAmB,MACpBlG,IAAA/c,cAACgkB,GAAkB,MACnBjH,IAAA/c,cAAC+oB,GAAoB,MACrBhM,IAAA/c,cAAC2kB,GAAW,MACZ5H,IAAA/c,cAAC8lB,GAAgB,MAEjB/I,IAAA/c,cAACqmB,GAAY,MACbtJ,IAAA/c,cAACumB,GAAU,MACXxJ,IAAA/c,cAACunB,GAAc,MACfxK,IAAA/c,cAACsoB,GAAe,WAGrBE,EAtByB,CAASzL,IAAMgB,Y,+NEgP5BiL,GApPdtM,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAoM,EAAArM,GAAA,IAAAE,EAAAC,YAAAkM,GAEP,SAAAA,EAAY1J,GAAQ,IAADz+C,EAOf,OAPe3J,YAAA,KAAA8xD,IACjBnoD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,CACXm4C,WAAY,KACZC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,GACjBvoD,EAwOH,OAvOAtI,YAAAywD,EAAA,EAAAxwD,IAAA,SAAAC,MAED,WAAU,IAADkJ,EAAA,KACP,OACEo7C,IAAA/c,cAAA,WAEE+c,IAAA/c,cAACygB,EAAW,CACVxtC,KAAK,QACLqqC,OAAQzkD,KAAKiY,MAAMq4C,gBACnBnL,SAAU,kBACRr8C,EAAK0+C,SAAS,CACZ8I,iBAAkBxnD,EAAKmP,MAAMq4C,oBAIjCpM,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACvCtM,IAAA/c,cAAA,WACI+c,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,cAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UAClBvM,IAAA/c,cAACmf,EAAY,CACXV,MAAOjlD,UAASC,MAAM8vD,cACtB7K,SAAU,SAAA15C,GAAOxL,UAASC,MAAMkB,MAAMC,QAAUoK,EAC9CxL,UAASC,MAAM+vD,gBAAkBhwD,UAASC,MAAM+vD,gBAAkB,GACpE/wD,MAAOe,UAASC,MAAMkB,MAAMC,YAKlCmiD,IAAA/c,cAAA,OAAKZ,MAAO,CAACsmB,UAAU,SACrB3I,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,gBAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UAClBvM,IAAA/c,cAACmf,EAAY,CACXV,MAAOj8C,OAAOC,KAAKhC,UACnBi+C,SAAU,SAAA15C,GAAOxL,UAASC,MAAMkB,MAAME,MAAMC,MAAQkK,EAClDxL,UAASC,MAAM+vD,gBAAkBhwD,UAASC,MAAM+vD,gBAAkB,GACpE/wD,MAAOe,UAASC,MAAMkB,MAAME,MAAMC,UAK1CiiD,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,OAAKZ,MAAO,CAACsmB,UAAU,SACrB3I,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,kBAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UAChBvM,IAAA/c,cAACypB,IAAQ,CACLC,UAAU,SACVC,UAAW,CACPC,gBAAiB,CACf7nB,SAAS,KAIjBgb,IAAA/c,cAAC6d,IAAM,CACLtzC,KAAK,KACL60B,MAAO,CACLyqB,gBAAiB,UACjBtS,gBAAiB/9C,UAASC,MAAMkB,MAAME,MAAME,QAGhDgiD,IAAA/c,cAAC8pB,KAAY,CACXjvD,MAAOrB,UAASC,MAAMkB,MAAME,MAAME,KAClC4iD,SAAU,SAAA34C,GAAOxL,UAASC,MAAMkB,MAAME,MAAME,KAAOiK,EAAGonC,IACpD5yC,UAASC,MAAM+vD,gBAAkBhwD,UAASC,MAAM+vD,gBAAkB,MAE7D,mBAEXzM,IAAA/c,cAACypB,IAAQ,CACTC,UAAU,SACEC,UAAW,CACPC,gBAAiB,CACf7nB,SAAS,KAI3Bgb,IAAA/c,cAAC6d,IAAM,CACLtzC,KAAK,KACL60B,MAAO,CACLyqB,gBAAiB,UACjBtS,gBAAiB/9C,UAASC,MAAMkB,MAAME,MAAMG,MAGhD+hD,IAAA/c,cAAC8pB,KAAY,CACXjvD,MAAOrB,UAASC,MAAMkB,MAAME,MAAMG,GAClC2iD,SAAU,SAAA34C,GAAOxL,UAASC,MAAMkB,MAAME,MAAMG,GAAKgK,EAAGonC,IAClD5yC,UAASC,MAAM+vD,gBAAkBhwD,UAASC,MAAM+vD,gBAAkB,SAM9EzM,IAAA/c,cAAA,OAAKZ,MAAO,CAACsmB,UAAU,SACrB3I,IAAA/c,cAAA,OAAK1W,MAAM,OAAO+M,OAAO,KAAK6mB,UAAU,oBACxCH,IAAA/c,cAAA,YACE+c,IAAA/c,cAAA,kBACE+pB,GAAG,KACHC,GAAG,MACHC,GAAG,OACHC,GAAG,MACHxoD,GAAG,eAEHq7C,IAAA/c,cAAA,QACEmqB,UAAW3wD,UAASC,MAAMkB,MAAME,MAAME,KACtCqvD,YAAY,IACZtlB,OAAO,OAETiY,IAAA/c,cAAA,QACEmqB,UAAW3wD,UAASC,MAAMkB,MAAME,MAAMG,GACtCovD,YAAY,IACZtlB,OAAO,WAIbiY,IAAA/c,cAAA,QACEnkC,EAAE,IACFC,EAAE,IACFwtB,MAAM,OACN+M,OAAO,KACPuoB,KAAK,0BAQb7B,IAAA/c,cAACygB,EAAW,CACVxtC,KAAK,OACLqqC,OAAQzkD,KAAKiY,MAAMo4C,eACnBlL,SAAU,kBACRr8C,EAAK0+C,SAAS,CACZ6I,gBAAiBvnD,EAAKmP,MAAMo4C,mBAKhCnM,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACvCtM,IAAA/c,cAAA,WACI+c,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,aAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UAClBvM,IAAA/c,cAACmf,EAAY,CACXV,MAAOjlD,UAASC,MAAM8vD,cAGtBtK,aAAc,SAAAj6C,GAAE,OAAKxL,UAASC,MAAMkB,MAAMO,OAAS8J,GACnDvM,MAAOe,UAASC,MAAMkB,MAAMO,WAKpC6hD,IAAA/c,cAAA,OAAKZ,MAAO,CAACsmB,UAAU,SACnB3I,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,eAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UAClBvM,IAAA/c,cAACmf,EAAY,CACbV,MAAOj8C,OAAOC,KAAKhC,UACnBq+C,aAAcC,EACdC,YAAY,EACZC,aAAc,SAAAj6C,GAAE,OAAKxL,UAASC,MAAMkB,MAAMQ,KAAKL,MAAQkK,GACvDvM,MAAOe,UAASC,MAAMkB,MAAMQ,KAAKL,UAKvCiiD,IAAA/c,cAAA,OAAKZ,MAAO,CAACsmB,UAAU,SACrB3I,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,eACjCizC,IAAA/c,cAAA,WACA+c,IAAA/c,cAACqqB,KAAW,CACVjvD,IAAK,EACLC,IAAK,GACLivD,SAAU,GACVC,cAAe,EACf5M,SAAU,SAAAx1C,GAAa,IAADC,EAAAC,aAAAF,EAAA,GAAVnC,EAACoC,EAAA,GAAEnC,EAACmC,EAAA,GACd7F,uBAAY,gBAAgB,WAC1B/I,UAASC,MAAMkB,MAAMQ,KAAKC,IAAM4K,EAChCxM,UAASC,MAAMkB,MAAMQ,KAAKE,IAAM4K,MAGpCxN,MAAO,CACLe,UAASC,MAAMkB,MAAMQ,KAAKC,IAC1B5B,UAASC,MAAMkB,MAAMQ,KAAKE,QAI5B0hD,IAAA/c,cAAA,OAAKZ,MAAS,CAAC/I,OAAO,YAQ5B0mB,IAAA/c,cAACygB,EAAW,CACVxtC,KAAK,QACLqqC,OAAQzkD,KAAKiY,MAAMs4C,gBACnBpL,SAAU,kBACRr8C,EAAK0+C,SAAS,CACZ+I,iBAAkBznD,EAAKmP,MAAMs4C,oBAIjCrM,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACzCtM,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,eAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UAClBvM,IAAA/c,cAAC6e,IAAM,CACHJ,MAAO,CACL,SACA,SACA,WACA,WACA,UACA,WAEFK,aAAcC,EACdC,YAAY,EACZC,aAAc,SAAAj6C,GAAE,OAAKxL,UAASC,MAAMkB,MAAMY,MAAQyJ,IAElD+3C,IAAA/c,cAAC6d,IAAM,CAAEtzC,KAAM/Q,UAASC,MAAMkB,MAAMY,aAM5CwhD,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,QAAMZ,MAAO,CAACoW,SAAU,SAErBgV,KAAU,OAAQhxD,UAASC,MAAMsI,UAAU5G,MAAM,GAAM4hD,IAAA/c,cAAA,YAAM,KAAQ,8BAEtE+c,IAAA/c,cAAC6d,IAAM,CAACX,UAAW,WAAY3yC,KAAK,QAAQF,QAAS,kBAAO7Q,UAASC,MAAMsI,UAAY,IAAIkG,aAIlG+gD,EAjPM,CACiBjM,IAAMgB,aAAS9mD,G,UCZ1B,YAAAkR,GAAA,IAAG8K,EAAI9K,EAAJ8K,KAAMqqC,EAAMn1C,EAANm1C,OAAQU,EAAQ71C,EAAR61C,SAAU56C,EAAQ+E,EAAR/E,SAAQ,OAChD25C,IAAA/c,cAAA,WACE+c,IAAA/c,cAACyd,IAAM,CACLx7C,MAAOgR,EACPyqC,QAASJ,EACTK,SAAUK,EACVd,UAAWE,IAAQqN,cAErB1N,IAAA/c,cAACqe,IAAQ,CAACf,OAAQA,GAASl6C,KCuShBsnD,GAtSdhO,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA8N,EAAA/N,GAAA,IAAAE,EAAAC,YAAA4N,GAEP,SAAAA,EAAYpL,GAAQ,IAADz+C,EAOf,OAPe3J,YAAA,KAAAwzD,IACjB7pD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IASRqL,eAAiB,SAACC,EAAQpyD,EAAKC,GACxBe,UAASC,MAAMsI,UAAUN,IAAImpD,IAChCpxD,UAASC,MAAMsI,UAAUmnB,IAAI0hC,EAAQ,IAAI3iD,KAE3C,IAAM4iD,EAAYrxD,UAASC,MAAMsI,UAAUrE,IAAIktD,GACjC,OAAVnyD,EACFoyD,EAAU3hC,IAAI1wB,EAAKC,IAEnBoyD,EAAUC,OAAOtyD,GACM,IAAnBqyD,EAAU1vD,MACZ3B,UAASC,MAAMsI,UAAU+oD,OAAOF,KAGrC/pD,EAEDkqD,oBAAsB,SAACpwD,EAAOnC,EAAKC,GACjC8J,uBAAY,2BAA2B,WACrC5H,EAAMwE,SAAQ,SAAAgB,GAAC,OAAIU,EAAK8pD,eAAexqD,EAAE8J,KAAKzP,IAAIkH,GAAIlJ,EAAKC,UAzB7DoI,EAAKiQ,MAAQ,CACXs4C,iBAAiB,EACjBF,gBAAgB,EAChBC,iBAAiB,EACjB6B,iBAAiB,GACjBnqD,EA0RH,OAzRAtI,YAAAmyD,EAAA,EAAAlyD,IAAA,SAAAC,MAuBD,WAAU,IAADkJ,EAAA,KACP,OACEo7C,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,WACA+c,IAAA/c,cAACirB,GAAiB,CAChBh4C,KAAK,gBACLqqC,OAAQzkD,KAAKiY,MAAMo4C,eACnBlL,SAAU,WACJr8C,EAAKmP,MAAMo4C,eACbvnD,EAAK0+C,SACH,CACE6I,gBAAgB,IAElB,kBACEvnD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,OACA,SAINgE,EAAK0+C,SACH,CACE6I,gBAAgB,IAElB,kBACEvnD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,OACAnE,UAASC,MAAMyxD,eAAe/vD,WAMxC4hD,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACvCtM,IAAA/c,cAACmrB,KAAM,CACL/vD,IAAK,EACLC,IAAK,GACLivD,SAAU,GACVC,cAAe,EACf5M,SAAU,SAAA34C,GACRxL,UAASC,MAAMyxD,eAAe/vD,KAAO6J,EACrCrD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,OACAqH,IAGJvM,MAAOe,UAASC,MAAMyxD,eAAe/vD,SAI3C4hD,IAAA/c,cAAA,WACA+c,IAAA/c,cAACirB,GAAiB,CAChBh4C,KAAK,iBACLqqC,OAAQzkD,KAAKiY,MAAMq4C,gBACnBnL,SAAU,WACJr8C,EAAKmP,MAAMq4C,gBACbxnD,EAAK0+C,SACH,CACE8I,iBAAiB,IAEnB,kBACExnD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACA,SAINgE,EAAK0+C,SACH,CACE8I,iBAAiB,IAEnB,kBACExnD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACAnE,UAASC,MAAMyxD,eAAerwD,YAMxCkiD,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACvCtM,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,iBAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UACtBvM,IAAA/c,cAACypB,IAAQ,CACPC,UAAU,SACVC,UAAW,CACTC,gBAAiB,CACf7nB,SAAS,KAGbgb,IAAA/c,cAAC6d,IAAM,CACLtzC,KAAK,KACL60B,MAAO,CACLyqB,gBAAiB,UACjBtS,gBAAiB/9C,UAASC,MAAMyxD,eAAerwD,SAGnDkiD,IAAA/c,cAAC8pB,KAAY,CACXjvD,MAAOrB,UAASC,MAAMyxD,eAAerwD,MACrC8iD,SAAU,SAAA34C,GACRxL,UAASC,MAAMyxD,eAAerwD,MAAQmK,EAAGonC,IACzCzqC,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACAqH,EAAGonC,aASf2Q,IAAA/c,cAAA,WACA+c,IAAA/c,cAACygB,EAAW,CACAxtC,KAAK,oBACLqqC,OAAQzkD,KAAKiY,MAAMmd,gBACnB+vB,SAAU,kBACNr8C,EAAK0+C,SAAS,CACZpyB,iBAAkBtsB,EAAKmP,MAAMmd,oBAInC8uB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACrCtM,IAAA/c,cAAA,eACI+c,IAAA/c,cAAA,SAAG,4BACH+c,IAAA/c,cAAA,YACA+c,IAAA/c,cAAA,SAAOorB,MAAM,aACbrO,IAAA/c,cAAA,SACK5wB,KAAK,WACLuuC,SAAU,SAAA34C,GACNpL,QAAQC,IAAIL,UAASC,MAAMw0B,iBAC3Bz0B,UAASC,MAAMw0B,iBAAmBz0B,UAASC,MAAMw0B,wBAStE8uB,IAAA/c,cAAA,WACR+c,IAAA/c,cAACirB,GAAiB,CAChBh4C,KAAK,iBACLqqC,OAAQzkD,KAAKiY,MAAMk6C,gBACnBhN,SAAU,WACJr8C,EAAKmP,MAAMk6C,gBACbrpD,EAAK0+C,SACH,CACE2K,iBAAiB,IAEnB,kBACErpD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACA,SAINgE,EAAK0+C,SACH,CACE2K,iBAAiB,IAEnB,kBACErpD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACAnE,UAASC,MAAMyxD,eAAejpD,YAMxC86C,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACvCtM,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,iBAC/BizC,IAAA/c,cAAA,SACEvnC,MAAOe,UAASC,MAAMyxD,eAAejpD,MACrC07C,SAAU,SAAA34C,GACRxL,UAASC,MAAMyxD,eAAejpD,MAAQ+C,EAAG3D,OAAO5I,MAChDkJ,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACAqH,EAAG3D,OAAO5I,YAMpBskD,IAAA/c,cAAA,WACA+c,IAAA/c,cAACirB,GAAiB,CAChBh4C,KAAK,iBACLqqC,OAAQzkD,KAAKiY,MAAMs4C,gBACnBpL,SAAU,WACJr8C,EAAKmP,MAAMs4C,gBACbznD,EAAK0+C,SACH,CACE+I,iBAAiB,IAEnB,kBACEznD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACA,SAINgE,EAAK0+C,SACH,CACE+I,iBAAiB,IAEnB,kBACEznD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACAnE,UAASC,MAAMyxD,eAAe3vD,YAMxCwhD,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACvCtM,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,eAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UAClBvM,IAAA/c,cAAC6e,IAAM,CACPJ,MAAO,CACL,SACA,SACA,WACA,WACA,UACA,WAEFK,aAAcC,EACdC,YAAY,EACZC,aAAc,SAAAj6C,GACZxL,UAASC,MAAMyxD,eAAe3vD,MAAQyJ,EACtCrD,EAAKopD,oBACHvxD,UAASC,MAAMkE,cACf,QACAqH,KAIJ+3C,IAAA/c,cAAC6d,IAAM,CAACtzC,KAAM/Q,UAASC,MAAMyxD,eAAe3vD,kBAQzDmvD,EAnSM,CACoB3N,IAAMgB,aAAS9mD,GC2B7Bo0D,GAjCd3O,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAyO,EAAA1O,GAAA,IAAAE,EAAAC,YAAAuO,GAAA,SAAAA,IAAA,IAAAxqD,EAAA3J,YAAA,KAAAm0D,GAAA,QAAAC,EAAAxpC,UAAAlkB,OAAA2tD,EAAA,IAAAxnD,MAAAunD,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAA1pC,UAAA0pC,GAiBL,OAjBK3qD,EAAAg8C,EAAAxtC,KAAA/H,MAAAu1C,EAAA,OAAA/+C,OAAAytD,KAEPE,iBAAmB,WACjB,OAA4C,IAAxCjyD,UAASC,MAAMkE,cAAcC,OAE7Bm/C,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,QAAMZ,MAAO,CAACoW,SAAS,SAAS,wBAKpCuH,IAAA/c,cAAA,sBAAAliC,OAAiB0sD,KACf,OACAhxD,UAASC,MAAMkE,cAAcC,QAC7B,MAGLiD,EAaA,OAbAtI,YAAA8yD,EAAA,EAAA7yD,IAAA,SAAAC,MAED,WACE,OACEskD,IAAA/c,cAAA,WACGnnC,KAAK4yD,mBACmC,IAAxCjyD,UAASC,MAAMkE,cAAcC,OAC5Bm/C,IAAA/c,cAACgpB,GAAW,MAEZjM,IAAA/c,cAAC0qB,GAAc,WAItBW,EA9BM,CACgBtO,IAAMgB,aAAS9mD,GC0JzBy0D,I,OAvJdhP,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA8O,EAAA/O,GAAA,IAAAE,EAAAC,YAAA4O,GAGL,SAAAA,EAAYpM,GAAQ,IAADz+C,EASb,OATa3J,YAAA,KAAAw0D,IACf7qD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,CACXm4C,WAAY,KAEZE,iBAAgB,EAChBwC,qBAAoB,EAEpBC,qBAAqB,GACrB/qD,EAwIL,OAvIEtI,YAAAmzD,EAAA,EAAAlzD,IAAA,SAAAC,MAEH,WAAU,IAADkJ,EAAA,KACOnI,UAASC,MAAMA,MAC3B,OACIsjD,IAAA/c,cAAA,WACI+c,IAAA/c,cAAA,QAAMZ,MAAO,CAACoW,SAAS,SAAQ,uBAI/BuH,IAAA/c,cAACygB,EAAW,CACRxtC,KAAK,QACLqqC,OAAQzkD,KAAKiY,MAAMq4C,gBACnBnL,SAAU,kBACNr8C,EAAK0+C,SAAS,CACd8I,iBAAkBxnD,EAAKmP,MAAMq4C,oBAIjCpM,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eACrCtM,IAAA/c,cAAA,WACI+c,IAAA/c,cAAA,KAAGZ,MAAO,CAACt1B,QAAS,WAAW,uBAC/BizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACkqB,MAAM,UAChBvM,IAAA/c,cAACypB,IAAQ,CACTC,UAAU,SACVC,UAAW,CACPC,gBAAiB,CACf7nB,SAAS,KAGXgb,IAAA/c,cAAC6d,IAAM,CACPtzC,KAAK,KACL60B,MAAO,CACHyqB,gBAAiB,UACjBtS,gBAAiB/9C,UAASC,MAAMiC,MAAMb,SAG1CkiD,IAAA/c,cAAC8pB,KAAY,CACbjvD,MAAOrB,UAASC,MAAMiC,MAAMb,MAC5B8iD,SAAU,SAAC34C,GACPxL,UAASC,MAAM6P,QAAQ7P,MAAM8P,aAAY,SAAApJ,GAEpC,IAAIquB,EAAM,IAAI9F,MAAM6C,MAAM/xB,UAASC,MAAMiC,MAAMb,OAAO0zB,EAClDE,EAAO,IAAI/F,MAAM6C,MAAM/xB,UAASC,MAAMiC,MAAMb,OAAO0gB,EACnDmT,EAAQ,IAAIhG,MAAM6C,MAAM/xB,UAASC,MAAMiC,MAAMb,OAAOoL,EACxD9F,EAAE+C,WAAWorB,UAAUC,EAAIC,EAC3BruB,EAAE+C,WAAWorB,UAAU/S,EAAIkT,EAC3BtuB,EAAE+C,WAAWorB,UAAUroB,EAAIyoB,KAE/Bl1B,UAASC,MAAMiC,MAAMb,MAAQmK,EAAGonC,IAEjC5yC,UAASC,MAAM6P,QAAQwqC,uBAoF1D4X,EApJI,CACgB3O,IAAMgB,aAAS9mD,ICsFzB40D,GA3FdnP,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAiP,EAAAlP,GAAA,IAAAE,EAAAC,YAAA+O,GAAA,SAAAA,IAAA,OAAA30D,YAAA,KAAA20D,GAAAhP,EAAAv1C,MAAA,KAAAwa,WAwFN,OAxFMvpB,YAAAszD,EAAA,EAAArzD,IAAA,SAAAC,MAEP,WACE,OACEskD,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,QAAMZ,MAAO,CAACt1B,QAAS,iBACvBizC,IAAA/c,cAAC6d,IAAM,CACLze,MAAO,CAELt1B,QAAQ,UACVpI,GAAG,UACHu7C,SAAS,SACTC,UAAWE,IAAQc,KACnB7zC,QAAS,kBAAM7Q,UAASC,MAAMC,MAAMmgD,kBACrC,YAGDkD,IAAA/c,cAAC6d,IAAM,CACLze,MAAO,CAACt1B,QAAQ,QAChBpI,GAAG,UACHu7C,SAAS,UACTC,UAAWE,IAAQc,KACnB7zC,QAAS,kBAAM7Q,UAASC,MAAMC,MAAMkgD,kBACrC,YAIDmD,IAAA/c,cAAC6d,IAAM,CACLze,MAAO,GAIP19B,GAAG,eACHu7C,SAAS,UACTC,UAAWE,IAAQc,KACnB7zC,QAAS,kBAAM7Q,UAASC,MAAMC,MAAMggD,uBACrC,iBAGDqD,IAAA/c,cAAC6d,IAAM,CACLze,MAAO,CAAC9V,MAAM,QAAQwiC,WAAW,OAAOhiD,QAAQ,QAChDpI,GAAG,eACHu7C,SAAS,SACTC,UAAWE,IAAQc,KACnB7zC,QAAS,kBAAM7Q,UAASC,MAAMC,MAAM+/C,uBACrC,kBAIDsD,IAAA/c,cAAA,OAAKZ,MAAO,CAAC/I,OAAQ,UACrB0mB,IAAA/c,cAAA,QAAMkd,UAAU,eAAc,cAC9BH,IAAA/c,cAACmrB,KAAM,CACP/rB,MAAQ,CAACh0B,KAAK,MAAOke,MAAM,OACzBluB,IAAK,EACLC,IAAK,EACLivD,SAAU,GACVC,cAAe,GACf5M,SAAU,SAAAllD,GACRe,UAASC,MAAMkB,MAAMa,UAAY/C,GAEnCA,MAAOe,UAASC,MAAMkB,MAAMa,YAE9BuhD,IAAA/c,cAAA,OAAKZ,MAAO,CAAC/I,OAAQ,UACrB0mB,IAAA/c,cAAA,QAAMkd,UAAU,eAAc,gBAC9BH,IAAA/c,cAACmrB,KAAM,CACP/rB,MAAQ,CAACh0B,KAAK,MAAOke,MAAM,OACzBluB,IAAK,EACLC,IAAK,GAELivD,SAAU,EACVC,cAAe,EACf5M,SAAU,SAAAllD,GACRe,UAASC,MAAMkB,MAAMc,YAAchD,GAErCA,MAAOe,UAASC,MAAMkB,MAAMc,cAE9BshD,IAAA/c,cAAA,OAAKZ,MAAO,CAAC/I,OAAQ,UACrB0mB,IAAA/c,cAAA,QAAMkd,UAAU,eAAc,YAC9BH,IAAA/c,cAAC6e,IAAM,CACLJ,MAAOjlD,UAASC,MAAM8vD,cACtBzK,aAAcC,EACdC,YAAY,EACZC,aAAc,SAAAj6C,GAAE,OAAKxL,UAASC,MAAMkB,MAAMW,QAAU0J,IAEpD+3C,IAAA/c,cAAC6d,IAAM,CAACtzC,KAAM/Q,UAASC,MAAMkB,MAAMW,gBAI1CuwD,EAxFM,CACiB9O,IAAMgB,aAAS9mD,GCH1B,YAAAkR,GAA8D,IAA3Ds2C,EAAKt2C,EAALs2C,MAAOC,EAAQv2C,EAARu2C,SAAUjmD,EAAK0P,EAAL1P,MAAsBszD,GAAjB5jD,EAAEy2C,KAAkBz2C,EAAH4jD,KAAIC,EAAQ7jD,EAAR6jD,SAExCnO,IAKrB,OAEEd,IAAA/c,cAACisB,IAAW,CACZC,aAAc,CACZC,iBAAkB,gBAElBC,cAAe,OAGjBC,eAAe,EACb5N,MAAOA,EACPK,aAAcC,EACdC,YAAY,EACZC,aAAcP,EACd4N,YAAeP,EACfQ,cAAiB9zD,EACjB+zD,cAAiBR,K,oBCwQNS,GAtRd/P,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA6P,EAAA9P,GAAA,IAAAE,EAAAC,YAAA2P,GAEP,SAAAA,EAAYnN,GAAQ,IAADz+C,EAgBjB,OAhBiB3J,YAAA,KAAAu1D,IACjB5rD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IACDxuC,MAAQ,GAGbtX,UAASC,MAAM8vD,cAAcpqD,SAAQ,SAAA6F,GACnCnE,EAAKiQ,MAAM9L,EAAK,WAAY,EAC5BnE,EAAKiQ,MAAM9L,EAAK,eAAiB,MASnCnE,EAiQD,OA/ODtI,YAAAk0D,EAAA,EAAAj0D,IAAA,SAAAC,MAEA,WAAU,IAADkJ,EAAA,KACP,OACEo7C,IAAA/c,cAAA,WACGxmC,UAASC,MAAM8vD,cAAchrD,KAAI,SAACyG,EAAIsB,GAAC,OACtCy2C,IAAA/c,cAACygB,EAAW,CACVxtC,KAAMjO,EACNs4C,OAAQ37C,EAAKmP,MAAM9L,EAAK,UACxBg5C,SAAU,kBACRr8C,EAAK0+C,SAAQljC,YAAC,GACXnY,EAAK,UAAYrD,EAAKmP,MAAM9L,EAAK,cAItC+3C,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,eAC7B,cAAPrkD,GAAsB2N,MAAMnZ,UAASC,MAAM+F,SAAS7E,MAAM,GAAGqK,IAC9D+3C,IAAA/c,cAAC0sB,GAAY,CACXjO,MAAK1gD,aAAM,IAAI+C,IAAItH,UAASC,MAAM+F,SAAS7E,MAAM4D,KAAI,SAAA4B,GAAC,OAAIA,EAAE6E,QAC5D05C,SAAU,SAAAiO,GAERhrD,EAAK0+C,SAAQljC,YAAC,GACXnY,EAAK,cAAgBrD,EAAKmP,MAAM9L,EAAK,eAAc,GAAAlH,OAAAC,aAAO4D,EAAKmP,MAAM9L,EAAK,gBAAc,CAAE2nD,IAAY,CAACA,KAE1GnzD,UAASC,MAAM0E,OAAO6G,GAAMxL,UAASC,MAAM0E,OAAO6G,GAAI3F,KAAKstD,GAAYnzD,UAASC,MAAM0E,OAAO6G,GAAM,CAAC2nD,GACpGnzD,UAASC,MAAMmzD,eAMjBb,IAAK,SAAAY,GAAc,OAAOA,GAC1Bl0D,MAAOkJ,EAAKmP,MAAM9L,EAAK,eACvBgnD,SAAU,CACRpN,MAAK,EACLiO,SAAU,SAAAF,GAEahrD,EAAKmP,MAAM9L,EAAK,eAAe1G,QAAQquD,IACtC,GACpBhrD,EAAK0+C,SAAQljC,YAAC,GACXnY,EAAK,cAAerD,EAAKmP,MAAM9L,EAAK,eAAe7G,QAAO,SAAA4C,GAAI,OAAIA,IAAS4rD,OAM3DnzD,UAASC,MAAM0E,OAAO6G,GAAI1G,QAAQquD,IACjC,IACpBnzD,UAASC,MAAM0E,OAAO6G,GAAMxL,UAASC,MAAM0E,OAAO6G,GAAI7G,QAAO,SAAA4C,GAAI,OAAIA,IAAS4rD,KAG9EnzD,UAASC,MAAMmzD,eAIjBhzD,QAAQC,IAAI8H,EAAKmP,MAAM9L,EAAK,oBAQlC+3C,IAAA/c,cAACqqB,KAAW,CACVjvD,IAAKiF,KAAKjF,IAAGkM,MAARjH,KAAItC,aAASvE,UAASC,MAAM+F,SAAS7E,MAAM4D,KAAI,SAAA4B,GAAC,OAAIA,EAAE6E,QAC3D3J,IAAKgF,KAAKhF,IAAGiM,MAARjH,KAAItC,aAASvE,UAASC,MAAM+F,SAAS7E,MAAM4D,KAAI,SAAA4B,GAAC,OAAIA,EAAE6E,QAC3DslD,SAAU,EACVC,cAAe,GACfrN,UAAU,yBACVS,SAAU,SAAAx1C,GAAa,IAADC,EAAAC,aAAAF,EAAA,GAAVnC,EAACoC,EAAA,GAAEnC,EAACmC,EAAA,GACd7F,uBAAY,gBAAgB,WAC1BZ,EAAK0+C,SAAQljC,YAAC,GACXnY,EAAK,cAAgB,CACpB,IAAMgB,EACN,IAAMC,KAGVzM,UAASC,MAAM0E,OAAO6G,GAAK,CACzB,IAAMgB,EACN,IAAMC,OAKZ6mD,UAAW,SAAAC,GAAa,IAADC,EAAA3kD,aAAA0kD,EAAA,GAAV/mD,EAACgnD,EAAA,GAAE/mD,EAAC+mD,EAAA,GAEjBrrD,EAAK0+C,SAAQljC,YAAC,GACXnY,EAAK,cAAgB,CACpB,IAAMgB,EACN,IAAMC,KAGVzM,UAASC,MAAM0E,OAAO6G,GAAK,CACzB,IAAMgB,EACN,IAAMC,GAERzM,UAASC,MAAMmzD,eAKjBn0D,MAAQe,UAASC,MAAM0E,OAAO6G,IAAOxL,UAASC,MAAM0E,OAAO6G,GAAS,IACpE,CACExL,UAASC,MAAM0E,OAAO6G,GAAS,IAC/BxL,UAASC,MAAM0E,OAAO6G,GAAS,KAEnC,CACE3E,KAAKjF,IAAGkM,MAARjH,KAAItC,aAASvE,UAASC,MAAM+F,SAAS7E,MAAM4D,KAAI,SAAA4B,GAAC,OAAIA,EAAE6E,QACtD3E,KAAKhF,IAAGiM,MAARjH,KAAItC,aAASvE,UAASC,MAAM+F,SAAS7E,MAAM4D,KAAI,SAAA4B,GAAC,OAAIA,EAAE6E,qBAmInEynD,EAnRM,CACsB1P,IAAMgB,aAAS9mD,GC4BxCg2D,GADLvQ,aAAQsD,GAAA,SAAArD,GAAAC,YAAAqQ,EAAAtQ,GAAA,IAAAE,EAAAC,YAAAmQ,GAAA,SAAAA,IAAA,IAAApsD,EAAA3J,YAAA,KAAA+1D,GAAA,QAAA3B,EAAAxpC,UAAAlkB,OAAA2tD,EAAA,IAAAxnD,MAAAunD,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAA1pC,UAAA0pC,GAoPN,OApPM3qD,EAAAg8C,EAAAxtC,KAAA/H,MAAAu1C,EAAA,OAAA/+C,OAAAytD,IAAAp0D,aAAA0J,EAAA,aAAAzJ,GAAA6tD,aAAApkD,IAUPA,EAGAqsD,aAAe,WACb1zD,UAASC,MAAM+b,eAAiB,GAEhC,IAMI23C,EAAY,CACd,KAAQ,WACR,QAAW,CACT,KAAQ,aAEV,aAXiB3zD,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GACpD,OAAOA,EAAKv3B,aAWZ,WATe3H,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAClD,OAAOA,EAAKp3B,cAUd8rD,KAAMC,KAAK,+CAAgDF,GAAWx8C,MACpE,SAACgG,GACC,IAAI22C,EAAgB32C,EAAS1M,KAAK8M,QAClClW,EAAK4U,WAAakB,EAAS1M,KAAKwL,WAChCjc,UAASC,MAAM+F,SAAS7E,MAAMwE,SAAQ,SAACqC,GACrCA,EAAK+rD,UAAYD,EAAc9rD,EAAKE,IAAM4rD,EAAc9rD,EAAKE,KAAO,KAEtE,IAAMiD,EAAWnL,UAASC,MAAM+F,SAAS7E,MACnCsM,EAAczE,OAAOC,KAAKkC,EAAS,IACnC/B,EAAoB,GAC1BqE,EAAY9H,SAAQ,SAAUf,GAC5BwE,EAAkBxE,UAAauG,EAAS,GAAGvG,MAE7C,IAAM8I,EAAc,GACpBD,EAAY9H,SAAQ,SAAUf,EAAGkI,GAE/B,GAA4B,UAAxB1D,EAAkBxE,GACpB8I,EAAY9I,GAAEL,aAAO,IAAI+C,IAAI6D,EAASpG,KAAI,SAAAwC,GAAI,OAAIA,EAAK3C,YAClD,CACL,IAAM+I,EAASxC,EAASpG,KAAI,SAAU6I,GAAM,OAAOA,EAAGhJ,MAChDiJ,EAAOhH,KAAKjF,IAAGkM,MAARjH,KAAItC,aAAQoJ,IACnBI,EAAOlH,KAAKhF,IAAGiM,MAARjH,KAAItC,aAAQoJ,IACzBD,EAAY9I,GAAK,CAACiJ,EAAME,OAG5B/N,UAASC,MAAMuE,SAASkJ,YAAcA,EACtC1N,UAASC,MAAMuE,SAASC,eAAiBgJ,EACzCzN,UAASC,MAAMuE,SAAS4E,kBAAoBA,EAC5CpJ,UAASC,MAAMkB,MAAMC,QAAU,YAC/BpB,UAASC,MAAMkB,MAAME,MAAMC,MAAQ,mBAGrC,SAAC+V,GACCjX,QAAQC,IAAIgX,OAGjBhQ,EAED2sD,YAAc,WAEZ,IAMIL,EAAY,CACd,KAAQ,WACR,QAAW,CACT,KAAQ,UAEV,aAXiB3zD,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GACpD,OAAOA,EAAKv3B,aAWZ,WATe3H,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAClD,OAAOA,EAAKp3B,cAUd8rD,KAAMC,KAAK,6CAA8CF,GAAWx8C,MAClE,SAACgG,GACC,IAAI82C,EAAU92C,EAAS1M,KAAK8M,QAC5Bnd,QAAQC,IAAI4zD,MA2Bd,SAAC58C,GACCjX,QAAQC,IAAIgX,OAGjBhQ,EAED6sD,WAAa,SAACC,GAEOn0D,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GACpD,OAAOA,EAAKv3B,aAEG3H,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAClD,OAAOA,EAAKp3B,aAJd,IAMI6rD,EAAY,CACd,KAAQ,WACR,QAAW,CACT,KAAQ,UAEV,MAASQ,EACT,MAASn0D,UAASC,MAAM+F,SAAS7E,OAGnCyyD,KAAMC,KAAK,gDAAiDF,GAAWx8C,MACrE,SAACgG,GACC,IAAIi3C,EAAWppD,KAAKuD,MAAM4O,EAAS1M,MAC/B4jD,EAAaD,EAAS72C,QAG1Bvd,UAASC,MAAM+F,SAAS7E,MAAMwE,SAAQ,SAACqC,GACrCA,EAAKssD,SAAWD,EAAWrsD,EAAKE,OAElC,IAAMiD,EAAWnL,UAASC,MAAM+F,SAAS7E,MACnCsM,EAAczE,OAAOC,KAAKkC,EAAS,IACnC/B,EAAoB,GAC1BqE,EAAY9H,SAAQ,SAAUf,GAC5BwE,EAAkBxE,UAAauG,EAAS,GAAGvG,MAE7C,IAAM8I,EAAc,GACpBD,EAAY9H,SAAQ,SAAUf,EAAGkI,GAE/B,GAA4B,UAAxB1D,EAAkBxE,GACpB8I,EAAY9I,GAAEL,aAAO,IAAI+C,IAAI6D,EAASpG,KAAI,SAAAwC,GAAI,OAAIA,EAAK3C,YAClD,CACL,IAAM+I,EAASxC,EAASpG,KAAI,SAAU6I,GAAM,OAAOA,EAAGhJ,MAChDiJ,EAAOhH,KAAKjF,IAAGkM,MAARjH,KAAItC,aAAQoJ,IACnBI,EAAOlH,KAAKhF,IAAGiM,MAARjH,KAAItC,aAAQoJ,IACzBD,EAAY9I,GAAK,CAACiJ,EAAME,OAG5B/N,UAASC,MAAMuE,SAASkJ,YAAcA,EACtC1N,UAASC,MAAMuE,SAASC,eAAiBgJ,EACzCzN,UAASC,MAAMuE,SAAS4E,kBAAoBA,EAU5CpJ,UAASC,MAAM+b,eAAiBo4C,EAASG,aACzCn0D,QAAQC,IAAIL,UAASC,MAAM+b,mBAoB7B,SAAC3E,GACCjX,QAAQC,IAAIgX,OAGjBhQ,EAGDmtD,iBAAmB,SAACL,GAQlB,IAAIR,EAAY,CACd,KAAQ,WACR,QAAW,CACT,KAAQ,oBAEV,MAASQ,EACT,MAASn0D,UAASC,MAAM+F,SAAS7E,MACjC,MAASnB,UAASC,MAAM+F,SAAS9D,OAInC0xD,KAAMC,KAAK,oDAAqDF,GAAWx8C,MACzE,SAACgG,GACC,IAAIi3C,EAAWppD,KAAKuD,MAAM4O,EAAS1M,MAGnCzQ,UAASC,MAAMuE,SAASE,aAAamB,KAAK,qBAC1C7F,UAASC,MAAMuE,SAASE,aAAamB,KAAK,mBAI1C7F,UAASC,MAAMuc,gBAAkB43C,EAASI,iBAC1Cx0D,UAASC,MAAMmC,YAAYE,EAAI,oBAC/BtC,UAASC,MAAMmC,YAAYC,EAAI,kBAC/BrC,UAASC,MAAMkc,QAAUg4C,KAI3B,SAAC98C,GACCjX,QAAQC,IAAIgX,OAGjBhQ,EAiTA,OAjTAtI,YAAA00D,EAAA,EAAAz0D,IAAA,SAAAC,MACD,WAAU,IAADkJ,EAAA,KACP,OACEo7C,IAAA/c,cAAA,OAAKkd,UAAWC,IAAW,CAACC,IAAQ6Q,QAAS,eAAgB7uB,MAAO,CAACt1B,QAAQ,QAASusB,OAAO,QAC3F0mB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAW,CAACC,IAAQ8Q,aAAc9Q,IAAQ+Q,aAAc/uB,MAAO,CAAC/I,OAAO,SACrF0mB,IAAA/c,cAAA,KAAGouB,KAAMzxC,WAAUtb,OAAO,UACxB07C,IAAA/c,cAAA,OAAKwd,MAAM,SAAS97C,GAAG,cACrBknB,IAAKpvB,UAASwb,YAAYpc,SAAWy1D,KAAgBC,KACrDj4B,OAAO,UAEX0mB,IAAA/c,cAAA,YAAM,UACN+c,IAAA/c,cAAA,OAAKkd,UAAWC,IAAW,CAACC,IAAQmR,iBAAkBnvB,MAAO,CAAC/I,OAAO,UAcrE0mB,IAAA/c,cAACwuB,KAAO,CACNzrC,QACEg6B,IAAA/c,cAACyuB,KAAI,KACH1R,IAAA/c,cAACue,IAAQ,CAACh0C,KAAK,cAAc0yC,SAAS,SAElC/kC,yBAAuB3Z,KAAI,SAACmwD,GAC1B,IAAMC,EAAsBD,EAAO,GAC7BE,EAA2BF,EAAO,GAExC,OACE3R,IAAA/c,cAACue,IAAQ,CACPnf,MAAO,CAAE9V,MAAO,SAChB9wB,IAAKm2D,EACL1R,SAAS,QACT1yC,KAAMokD,EACNtkD,QAAS,WACP+K,OAAOE,iCAAiCs5C,UAQpD7R,IAAA/c,cAAC6uB,KAAW,MACZ9R,IAAA/c,cAACue,IAAQ,CACPtB,SAAS,SACT1yC,KAAK,qBACLF,QAAS,kBAAO7Q,UAASyb,OAAOiN,YAAa,KAE/C66B,IAAA/c,cAACue,IAAQ,CACPtB,SAAS,SACT1yC,KAAK,sBACLF,QAAS,kBAAO7Q,UAASyb,OAAOuN,gBAAiB,KAEnDu6B,IAAA/c,cAACue,IAAQ,CACPtB,SAAS,wBACT1yC,KAAK,gBACLF,QAAS,WAAQ7Q,UAASwb,YAAYwvC,wBAAyB,KAEjEzH,IAAA/c,cAAC6uB,KAAW,MACZ9R,IAAA/c,cAACue,IAAQ,CACPtB,SAAS,WACT1yC,KAAK,gBACLF,QAAS,WACP7Q,UAAS2b,QAAQ+uC,qBAAuB1qD,UAASC,MAAM2e,sBACvD5e,UAAS2b,QAAQ8uC,0BAA2B,KAGhDlH,IAAA/c,cAACue,IAAQ,CACPtB,SAAS,yBACT1yC,KAAK,6BACLF,QAAS,WAAQ7Q,UAASwb,YAAYuwC,iBAAkB,MAI9Dh7B,SAAUsG,KAASyS,OACnBlE,MAAO,CAAC/I,OAAO,SAEf0mB,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAW,CAACC,IAAQyG,OAAQzG,IAAQe,UAC/C/e,MAAO,CAAC/I,OAAO,QACf4mB,SAAS,YACV,SAIHF,IAAA/c,cAACwuB,KAAO,CACNzrC,QACEg6B,IAAA/c,cAACyuB,KAAI,KACH1R,IAAA/c,cAACue,IAAQ,CACPh0C,KAAK,aACL0yC,SAAS,mBACT5yC,QAAS,WACP7Q,UAASC,MAAMC,MAAMo/C,cACrBt/C,UAASwb,YAAYuzC,qBAAsB,EAC3C5mD,EAAKmtD,iBAGT/R,IAAA/c,cAACue,IAAQ,CACPh0C,KAAK,aACL0yC,SAAS,6BACT5yC,QAAS,WAAQ7Q,UAASwb,YAAY+wC,sBAAuB,MAsDnEx7B,SAAUsG,KAASyS,QAEnByZ,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAW,CAACC,IAAQyG,OAAQzG,IAAQe,UAC/ClB,SAAS,kBACV,UAKLF,IAAA/c,cAAA,OAAKkd,UAAWC,IAAW,CAACC,IAAQ8Q,aAAc9Q,IAAQ+Q,aAAe/uB,MAAO,CAAC/I,OAAO,SACtF0mB,IAAA/c,cAAA,QAAMkd,UAAWE,IAAQ2R,eAAgB3vB,MAAO,CAAC/I,OAAO,UACvD78B,UAASC,MAAM+e,UAAYhf,UAASC,MAAMC,OACzCqjD,IAAA/c,cAAA,OAAKZ,MAAO,CAAEt1B,QAAS,WAGnB,WACA,IAAI0E,EAAO7M,EACXqtD,aAAY,WACV,IAAIC,EAAUhmD,KAAKC,MAEf1P,UAASC,MAAMoP,WAAWC,cAAcC,UACtCkmD,EAAUz1D,UAASC,MAAMoP,WAAWC,cAAcE,UAAYxP,UAASC,MAAMoP,WAAWC,cAAc+C,UACrGrS,UAASC,MAAMoP,WAAWiD,wBAC7BtS,UAASC,MAAMoP,WAAWC,cAAcC,UAAW,IAIhDvP,UAASC,MAAMC,MAAMkP,QACvBpP,UAASC,MAAMoP,WAAWiD,uBAC3BtS,UAASC,MAAMC,MAAMo/C,cACrBt/C,UAASC,MAAMC,MAAMkP,QAAS,EAC9BpP,UAASC,MAAMoP,WAAWM,aAAc,EACxCqF,EAAKsgD,eAeHt1D,UAASC,MAAMoP,WAAWM,aAAe3P,UAASC,MAAMoP,WAAWiD,uBACrEtS,UAASC,MAAMC,MAAMs/C,eACrBx/C,UAASC,MAAMC,MAAMkP,QAAS,EAC9BpP,UAASC,MAAMoP,WAAWM,aAAc,EACxCqF,EAAKsgD,kBAGR,IAvCH,GA0Cf/R,IAAA/c,cAACkvB,KAAO,CACOnsC,QAAUvpB,UAASC,MAAMC,MAAMkP,OAAU,0BAA4B,yBACrE2hB,SAAUsG,KAASyS,QAEnByZ,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAW,CAACC,IAAQyG,OAAQzG,IAAQe,UAC/ClB,UAAYzjD,UAASC,MAAMoP,WAAWM,aAAe3P,UAASC,MAAMC,MAAMkP,OAAU,OAAS,QAC7F2B,MAAQ/Q,UAASC,MAAMoP,WAAWM,aAAe3P,UAASC,MAAMC,MAAMkP,OAAU,+BAAiC,8BACjHyB,QAAS,WACH7Q,UAASC,MAAMC,MAAMkP,SAAWpP,UAASC,MAAMoP,WAAWM,aAI5D3P,UAASC,MAAM6J,kBAEf9J,UAASC,MAAMC,MAAMs/C,eACrBr3C,EAAKmtD,eAEIt1D,UAASC,MAAMoP,WAAWM,aAEnC3P,UAASC,MAAMC,MAAMkP,QAAS,EAC9BpP,UAASC,MAAMoP,WAAWM,aAAc,IAGxC3P,UAASC,MAAMC,MAAMo/C,cACrBn3C,EAAKmtD,qBAUnB/R,IAAA/c,cAAA,OACEkd,UAAWC,IAAW,CAACC,IAAQ8Q,aAAc9Q,IAAQqN,cAAerrB,MAAO,CAAC/I,OAAO,SAWnF0mB,IAAA/c,cAAA,QAAMkd,UAAWE,IAAQ2R,iBAQzBhS,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAW,CAACC,IAAQyG,OAAQzG,IAAQe,UAC/C/e,MAAO,CAAC/I,OAAO,QACf4mB,SAAS,OACT5yC,QAAS,WACP7Q,UAASwb,YAAYwxC,gBAAiB,KAG1CzJ,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAW,CAACC,IAAQyG,OAAQzG,IAAQe,UAC/C/e,MAAO,CAAC/I,OAAO,QACf4mB,SAAS,WACT5yC,QAAS,WACP7Q,UAASwb,YAAYm6C,uBAGzBpS,IAAA/c,cAAA,QAAMkd,UAAWE,IAAQ2R,eAAgB3vB,MAAO,CAAC/I,OAAO,UACxD0mB,IAAA/c,cAAA,KACEouB,KAAMxxC,aACNvb,OAAO,SACP+9B,MAAO,CACLvkC,MAAOrB,UAASwb,YAAYpc,SAAW,QAAU,QACjD48C,SAAU,OACV4Z,eAAgB,SAGlBrS,IAAA/c,cAACqvB,KAAe,CAACC,KAAMC,cAKhCtC,EAriBM,CACmBlQ,IAAMgB,WAAS3mD,GAAA0C,aAAAkmD,GAAAjmD,UAAA,cACxCC,eAAU,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAFJnD,GAE2B+oD,MAAA/oD,GAuiB9Bu4D,GADL9S,YAAQ+S,GAAA,SAAAxP,GAAArD,YAAA4S,EAAAvP,GAAA,IAAAC,EAAApD,YAAA0S,GAAA,SAAAA,IAAA,OAAAt4D,YAAA,KAAAs4D,GAAAtP,EAAA54C,MAAA,KAAAwa,WAmEN,OAnEMvpB,YAAAi3D,EAAA,EAAAh3D,IAAA,SAAAC,MAEP,WAAU,IAAD6J,EAAA,KACP,OAAO9I,UAASC,MAAMC,OACpBqjD,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,OACEkd,UAAWC,IAAW,uBACtB/d,MAAO,CACLmY,gBAAiB/9C,UAASwb,YAAYpc,SAAW,UAAY,YAG/DmkD,IAAA/c,cAACkvB,KAAO,CACNnsC,QAAUvpB,UAASC,MAAMC,MAAMkP,OAAU,0BAA4B,yBACrE2hB,SAAUsG,KAASyS,QAElByZ,IAAA/c,cAAA,OAAKkd,UAAU,mBAChBH,IAAA/c,cAAA,KACEkd,UAAWC,IAAW,8BAAgC3jD,UAASC,MAAMoP,WAAWM,aAAe3P,UAASC,MAAMC,MAAMkP,OAAU,eAAiB,iBAC/I8mD,KAAK,SACLrlD,QAAS,WACH7Q,UAASC,MAAMC,MAAMkP,SAAWpP,UAASC,MAAMoP,WAAWM,aAI5D3P,UAASC,MAAM6J,kBAEf9J,UAASC,MAAMC,MAAMs/C,eACrB12C,EAAKwsD,eAEIt1D,UAASC,MAAMoP,WAAWM,aAEnC3P,UAASC,MAAMC,MAAMkP,QAAS,EAC9BpP,UAASC,MAAMoP,WAAWM,aAAc,IAGxC3P,UAASC,MAAMC,MAAMo/C,cACrBx2C,EAAKwsD,qBAiBf/R,IAAA/c,cAAA,OACEkd,UAAWC,IAAW,wBACtB/d,MAAO,CACLmY,gBAAiB/9C,UAASwb,YAAYpc,SAAW,UAAY,YAG/DmkD,IAAA/c,cAAA,OAAKkd,UAAU,mBACbH,IAAA/c,cAAA,KAAGkd,UAAU,6BAA8BwS,KAAK,SAASrlD,QAAS,kBAAM7Q,UAASwb,YAAY26C,wBAC7F5S,IAAA/c,cAAA,KAAGkd,UAAU,yBAA0BwS,KAAK,SAASrlD,QAAS,kBAAM7Q,UAASwb,YAAYwxC,gBAAiB,KAC1GzJ,IAAA/c,cAAA,KAAGkd,UAAU,kCAAmCwS,KAAK,SAAStB,KAAMh5C,OAAO0C,SAAUzW,OAAO,kBAKrGmuD,EAnEM,CACmBzS,IAAMgB,aAAS0R,GA4E5BG,GAPdlT,YAAQmT,GAAA,SAAAC,GAAAlT,YAAAgT,EAAAE,GAAA,IAAAC,EAAAjT,YAAA8S,GAAA,SAAAA,IAAA,OAAA14D,YAAA,KAAA04D,GAAAG,EAAAzoD,MAAA,KAAAwa,WAIN,OAJMvpB,YAAAq3D,EAAA,EAAAp3D,IAAA,SAAAC,MAEP,WACE,OAAOe,UAASwb,YAAY1b,sBAAwByjD,IAAA/c,cAACwvB,GAAa,MAAMzS,IAAA/c,cAACitB,GAAa,UACvF2C,EAJM,CACoB7S,IAAMgB,aAAS8R,GC1kB7BG,GA9DdtT,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAoT,EAAArT,GAAA,IAAAE,EAAAC,YAAAkT,GAAA,SAAAA,IAAA,OAAA94D,YAAA,KAAA84D,GAAAnT,EAAAv1C,MAAA,KAAAwa,WA2DN,OA3DMvpB,YAAAy3D,EAAA,EAAAx3D,IAAA,SAAAC,MAEP,WACE,OACEskD,IAAA/c,cAAA,OAAKkd,UAAU,aAkDbH,IAAA/c,cAAA,OAAKZ,MAAO,CAAE6wB,UAAW,SAAU55B,OAAQ,UACzC0mB,IAAA/c,cAACwhB,IAAO,YAIfwO,EA3DM,CACmBjT,IAAMgB,aAAS9mD,GCbtBi5D,GAAU,SAAAvT,GAAAC,YAAAsT,EAAAvT,GAAA,IAAAE,EAAAC,YAAAoT,GAAA,SAAAA,IAAA,OAAAh5D,YAAA,KAAAg5D,GAAArT,EAAAv1C,MAAA,KAAAwa,WAqB5B,OArB4BvpB,YAAA23D,EAAA,EAAA13D,IAAA,oBAAAC,MAC7B,WACEe,UAASC,MAAMwoB,eAChB,CAAAzpB,IAAA,SAAAC,MAED,WACE,OACEskD,IAAA/c,cAAA,OACEt+B,GAAG,kBACH09B,MAAO,CACL9V,MAAO,OACP+M,OAAQ,cAUf65B,EArB4B,CAASnT,IAAMgB,W,iJCApCljC,EAAQ,IAAiC6R,QAGpC,SAASyjC,KAAc,IAADtvD,EAAA,KAC7BtC,EAAM+sB,eAkFZ,OAhFA8kC,qBAAU,WACR,GAAK7xD,EAAI8xD,WAAT,CAEA9xD,EAAI8xD,WAAWC,SAEf/xD,EAAIyL,GAAG,mBAAmB,SAACzJ,GAQvB/G,UAASC,MAAMC,MAAMsJ,UAAY,GACjCxJ,UAASC,MAAMkE,cAAgB,GAC/BnE,UAASC,MAAMwc,cAAgB,MAMnC1X,EAAIyL,GAAG,gBAAgB,SAACzJ,GACtB3G,QAAQC,IAAI0G,EAAEuoD,OAAOyH,gBACrBC,KAAEC,UAAUlwD,EAAEuoD,OAAQ,CAAEjuD,MAAO,OAAQ61D,OAAQ,IAuB/C,IAAMC,EAAgBn3D,UAASC,MAAMC,MAAMuJ,cAAc9E,QAAO,SAAAqD,GAAI,OAClEjB,EAAEuoD,OAAO8H,SAASJ,KAAEK,OAAOrvD,EAAKyI,KAAKzP,IAAIsK,KAAMtD,EAAKyI,KAAKzP,IAAIoK,UAY/DpL,UAASC,MAAMkE,cAAgB,GAC/BnE,UAASC,MAAMkE,cAAgBgzD,EAC/Bn3D,UAASC,MAAMC,MAAMsJ,UAAY2tD,EACjCn3D,UAASC,MAAMC,MAAMmf,4BAQvB,IAAMiwC,EAASvqD,EAAIuyD,YAAYC,KAAK,KAEpCxyD,EAAI8xD,WAAWW,aAAY,SAACC,GAC1B,OAAOnI,EAAO8H,SAAS/vD,EAAKqwD,KAAKC,mBAAmBF,OAItD1yD,EAAI8xD,WAAWW,iBACd,IAEI,K,0BClFyBjU,IAAMgB,UCHjC,SAASqT,KACZ,IAAM7yD,EAAM+sB,eAEG+lC,mBAAQ,WACnB,GAAI73D,UAASC,MAAM63D,SAAnB,CACA,GAA4C,GAAxC93D,UAASC,MAAMC,MAAMsJ,UAAUpF,OAAY,CAE3C,IAAM2zD,EAAU/3D,UAASC,MAAMC,MAAMuJ,cAAc1E,KAAI,SAASiD,GAC9D,MAAO,CAACqD,WAAWrD,EAAKyI,KAAKzP,IAAIsK,MAAQD,WAAWrD,EAAKyI,KAAKzP,IAAIoK,UAE9DqB,EAAIurD,0BASZ,OARED,EAAQpyD,SAAQ,SAAAkyC,GACZprC,EAAEwrD,OAAOpgB,MAEV7uC,OAAOC,KAAKwD,GAAGrI,OAAS,GACzBW,EAAImzD,UAAUzrD,GAIX,KAET,GAA4C,GAAxCzM,UAASC,MAAMC,MAAMsJ,UAAUpF,OAAnC,CAEA,IAAM2zD,EAAU/3D,UAASC,MAAMC,MAAMsJ,UAAUzE,KAAI,SAASiD,GACxD,MAAO,CAACqD,WAAWrD,EAAKyI,KAAKzP,IAAIsK,MAAQD,WAAWrD,EAAKyI,KAAKzP,IAAIoK,UAGhEqB,EAAIurD,0BACVD,EAAQpyD,SAAQ,SAAAkyC,GACZprC,EAAEwrD,OAAOpgB,MAEV7uC,OAAOC,KAAKwD,GAAGrI,OAAS,GACzBW,EAAImzD,UAAUzrD,OAEjB,CAACzM,UAASC,MAAMC,MAAMsJ,YAEzB,OAAO,KAIJ,SAAS2uD,KAEAC,aAAa,CACvBC,MAAK,SAACtxD,GACE/G,UAAS6b,mBACX7b,UAAS6b,oBAAqB,GAE9B7b,UAASC,MAAMC,MAAMsJ,UAAY,GACrCxJ,UAASC,MAAMkE,cAAgB,GAC/BnE,UAASC,MAAMwc,cAAgB,GAC/Bzc,UAASC,MAAMmc,WAAa,KAE5Bpc,UAASC,MAAMC,MAAMmf,6BAOzB,OAAO,K,gGC1CIi5C,GAlBD,SAACxS,GACX,IAAMxwC,EAAUijD,eACTtlD,EAAiB6yC,EAAjB7yC,KAAM0jB,EAAWmvB,EAAXnvB,QAYb,OAVAigC,qBAAU,WACN,IAAM4B,EAAQ,IAAIxB,KAAEsB,MAAMrlD,EAAM0jB,GAC1B8hC,EAAYnjD,EAAQojD,gBAAkBpjD,EAAQvQ,IAGpD,OAFA0zD,EAAUE,SAASH,GAEZ,WACHC,EAAUG,YAAYJ,OAIvB,MCMPvlC,GAAM5R,EAAQ,IAAiC6R,QAoqBpC2lC,IAnqBN5lC,GAAIG,GAOZ8vB,aAAQsD,GAAA,SAAArD,GAAAC,YAAAyV,EAAA1V,GAAA,IAAAE,EAAAC,YAAAuV,GAMP,SAAAA,EAAY/S,GAAQ,IAADz+C,EAoYlB,OApYkB3J,YAAA,KAAAm7D,IACjBxxD,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IA2JRgT,cAAgB,SAACC,GACf,MAAO,MAAQA,EAAM,OAASnxD,SAAS,IAAIoxD,QAAQ,GAAG3zD,eACvDgC,EAED4xD,WAAa,SAAClyD,GACZ3G,QAAQC,IAAI,aAAc0G,IAC3BM,EAKD6xD,kBAAoB,SAACh6B,GACnB,IAAKl/B,UAASC,MAAMk5D,YAClB,MAAO,CAAEnnC,QAAS,KAKpB,GAA4C,IAAxChyB,UAASC,MAAMwc,cAAcrY,OAE/B,OAAuC,IADlBiD,EAAK+xD,gBACTt0D,QAAQo6B,EAAKh3B,IACrB,CAAE7G,MAAOrB,UAASC,MAAMiC,MAAMC,WAAY+0D,OAAQ,MAAOllC,QAAS,KAOlE,CAAE3wB,MAAOrB,UAASC,MAAMiC,MAAMb,MAAO61D,OAAQ,OAAQllC,QAAS,KAMzE,GAAIhyB,UAASC,MAAMmc,WACjB,OAAI8iB,EAAKp5B,QAAU9F,UAASC,MAAMmc,WAAWlU,IAAMg3B,EAAKn5B,MAAQ/F,UAASC,MAAMmc,WAAWlU,GACjF,CAAE7G,MAAOrB,UAASC,MAAMiC,MAAMC,WAAY+0D,OAAQ,MAAOllC,QAAS,KAElE,CAAE3wB,MAAOrB,UAASC,MAAMiC,MAAMb,MAAO61D,OAAQ,OAAQllC,QAAS,KAKzE,IAAKhyB,UAASC,MAAMoc,kBAA2D,GAAvCrc,UAASC,MAAMkE,cAAcC,SAAgBpE,UAASC,MAAMmc,aAAepc,UAASC,MAAMsc,YAChI,MAAO,CAAElb,MAAOrB,UAASC,MAAMiC,MAAMb,MAAO61D,OAAQ,IAAKllC,QAAS,KAKpE,GAAIhyB,UAASC,MAAMkE,cAAcC,OAAS,EAExC,OAAmD,IAA/CiD,EAAKgyD,gBAAgBv0D,QAAQo6B,EAAKp5B,UAA+D,IAA7CuB,EAAKgyD,gBAAgBv0D,QAAQo6B,EAAKn5B,MACjF,CAAE1E,MAAOrB,UAASC,MAAMiC,MAAMb,MAAO61D,OAAQ,MAAOllC,QAAS,KAE7D,CAAE3wB,MAAOrB,UAASC,MAAMiC,MAAMb,MAAO61D,OAAQ,OAAQllC,QAAS,KAazE,GAAIhyB,UAASC,MAAMoc,iBACjB,OAAI6iB,EAAKp5B,QAAU9F,UAASC,MAAMoc,iBAAiBnU,IAAMg3B,EAAKn5B,MAAQ/F,UAASC,MAAMoc,iBAAiBnU,GAC7F,CAAE7G,MAAOrB,UAASC,MAAMiC,MAAMC,WAAY+0D,OAAQ,MAAOllC,QAAS,KAElE,CAAE3wB,MAAOrB,UAASC,MAAMiC,MAAMb,MAAO61D,OAAQ,OAAQllC,QAAS,KAIzE,GAAIhyB,UAASC,MAAMsc,aAAevc,UAASC,MAAMsc,YAAsB,SAAEnY,OAAS,EAAG,CAEnF,IADA,IAAM41C,EAAWh6C,UAASC,MAAMsc,YAAsB,SAC7CzP,EAAI,EAAGA,EAAIktC,EAAS51C,OAAS,EAAG0I,IACvC,GAAKoyB,EAAKp5B,QAAUk0C,EAASltC,GAAG5E,IAAMg3B,EAAKn5B,MAAQi0C,EAASltC,EAAI,GAAG5E,IAAQg3B,EAAKp5B,QAAUk0C,EAASltC,EAAI,GAAG5E,IAAMg3B,EAAKn5B,MAAQi0C,EAASltC,GAAG5E,GACvI,MAAO,CAAE7G,MAAOrB,UAASC,MAAMiC,MAAMC,WAAY+0D,OAAQ,MAAOllC,QAAS,KAG7E,MAAO,CAAE3wB,MAAOrB,UAASC,MAAMiC,MAAMb,MAAO61D,OAAQ,OAAQllC,QAAS,OAMxE3qB,EAGDiyD,cAAgB,SAACtxD,GACf,GAAIhI,UAASC,MAAMC,OAASF,UAASC,MAAMkB,MAAMQ,KAAKE,IAEpD,OAAOmG,EAAKyI,KAAK9O,MAEpB0F,EAEDkyD,kBAAoB,SAACvxD,GAUnB,GAHA5H,QAAQC,IAAIL,UAASC,MAAM+vD,iBAGxBhwD,UAASC,MAAMyc,gBAAgBtY,OAAO,EACvC,OAAqD,GAAjDpE,UAASC,MAAMyc,gBAAgB5X,QAAQkD,GAClC,CAAEwxD,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOhlB,OAAQ,QAG7E,CAAE8kB,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOr4D,MAAO,SAAUqzC,OAAQ,SAIzG,GAAG10C,UAASC,MAAM0c,eAAwD,GAAvC3c,UAASC,MAAMyc,gBAAgBtY,OAChE,MAAO,CAAEo1D,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOhlB,OAAQ,QAItF,GAAI10C,UAASC,MAAMqc,YAAYlY,OAAS,EACtC,OAAiD,GAA7CpE,UAASC,MAAMqc,YAAYxX,QAAQkD,GAC9B,CAAEwxD,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOhlB,OAAQ,QAG7E,CAAE8kB,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOr4D,MAAO,SAAUqzC,OAAQ,SAGzG,IAAK10C,UAASC,MAAMoc,kBAA2D,GAAvCrc,UAASC,MAAMkE,cAAcC,SAAgBpE,UAASC,MAAMmc,aAAepc,UAASC,MAAMsc,YAChI,MAAO,CAAEi9C,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOhlB,OAAQ,QAKtF,GAAI10C,UAASC,MAAMoc,iBAEjB,OAAIrU,EAAKE,KAAOlI,UAASC,MAAMoc,iBAAiBnU,GACvC,CAAEsxD,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOr4D,MAAO,SAAUqzC,OAAQ,UACjD,IAA3CrtC,EAAKsyD,gBAAgB70D,QAAQkD,EAAKE,IACpC,CAAEsxD,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOhlB,OAAQ,SAE7E,CAAE8kB,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOhlB,OAAQ,QAIxF,GAAI10C,UAASC,MAAMmc,WAEjB,OAAIpU,EAAKE,KAAOlI,UAASC,MAAMmc,WAAWlU,KAEY,IAA3Cb,EAAKsyD,gBAAgB70D,QAAQkD,EAAKE,IADpC,CAAEsxD,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOr4D,MAAO,SAAUqzC,OAAQ,SAI9F,CAAE8kB,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOhlB,OAAQ,QAKxF,GAAI10C,UAASC,MAAMsc,aAAevc,UAASC,MAAMsc,YAAsB,SAAEnY,OAAS,EAChF,OAAI4D,EAAKE,IAAMlI,UAASC,MAAMsc,YAAsB,UAAKvU,EAAKE,IAAMlI,UAASC,MAAMsc,YAAsB,SAChG,CAAEi9C,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAMr4D,MAAO,QAASqzC,OAAQ,UAEnC,GAAzD10C,UAASC,MAAMsc,YAAsB,SAAEzX,QAAQkD,GAC/C,CAAEwxD,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOhlB,OAAQ,QAG7E,CAAE8kB,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOr4D,MAAO,SAAUqzC,OAAQ,SAOzG,GAAI10C,UAASC,MAAMkE,cAAcC,OAAS,EAAG,CAC3C,IAAMoB,EAAcxF,UAASC,MAAM25D,oBACnC,OAA+C,IAA3CvyD,EAAKgyD,gBAAgBv0D,QAAQkD,EAAKE,IAC7B,CAAEsxD,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOr4D,MAAO,SAAUqzC,OAAQ,UAE3D,IAAlClvC,EAAYV,QAAQkD,EAAKE,IAC1B,CAAEsxD,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOr4D,MAAO,SAAUqzC,OAAQ,SAI9F,CAAE8kB,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,IAAMC,QAAQ,EAAOhlB,OAAQ,QAKvF,MAAO,CAAE8kB,UAAWxxD,EAAK0B,WAAWrI,MAAOo4D,YAAa,GAAKC,QAAQ,EAAOr4D,MAAO,SAAUqzC,OAAQ,UAGxGrtC,EAEDwyD,eAAiB,SAACC,EAASC,GACzB,OAAI/5D,UAASC,MAAM+5D,oBAAsBh6D,UAASC,MAAM4c,gCAAgCzY,OAAS,EAC3FpE,UAASC,MAAM4c,gCAAgCxT,SAAS0wD,GACnD,CAAEP,UAAWx5D,UAASC,MAAM0I,eAAeoxD,GAAKN,YAAa,GAAKznC,QAAS,IAG3E,CAAEwnC,UAAWx5D,UAASC,MAAM0I,eAAeoxD,GAAKN,YAAa,EAAGznC,QAAS,GAIhFhyB,UAASC,MAAM+5D,mBACV,CAAER,UAAWx5D,UAASC,MAAM0I,eAAeoxD,GAAKN,YAAa,GAAKznC,QAAS,IAE3E,CAAEwnC,UAAWx5D,UAASC,MAAM0I,eAAeoxD,GAAKN,YAAa,EAAGznC,QAAS,IAsBpF3qB,EACA4yD,SAAW,SAAClzD,GACV3G,QAAQC,IAAI0G,IACbM,EA+QA,OA9nBDtI,YAAA85D,EAAA,EAAA75D,IAAA,oBAAAC,MAzBA,cAEC,CAAAD,IAAA,kBAAAkF,IA2BD,WAEE,IAAMsB,EAAc,GAEpB,GAAIxF,UAASC,MAAMoc,kBAAoBrc,UAASC,MAAMoc,iBAAiB3W,MACrE,IAAK,IAAID,EAAI,EAAGA,EAAIzF,UAASC,MAAMoc,iBAAiB3W,MAAMtB,OAAQqB,IAChED,EAAYK,KAAK7F,UAASC,MAAMoc,iBAAiB3W,MAAMD,GAAGK,QAC1DN,EAAYK,KAAK7F,UAASC,MAAMoc,iBAAiB3W,MAAMD,GAAGM,MAI9D,GAAI/F,UAASC,MAAMmc,WACjB,IAAS3W,EAAI,EAAGA,EAAIzF,UAASC,MAAMmc,WAAW1W,MAAMtB,OAAQqB,IAC1DD,EAAYK,KAAK7F,UAASC,MAAMmc,WAAW1W,MAAMD,GAAGK,QACpDN,EAAYK,KAAK7F,UAASC,MAAMmc,WAAW1W,MAAMD,GAAGM,MAGxD,OAAOP,IACR,CAAAxG,IAAA,kBAAAkF,IAED,WAEE,IAAIg2D,EAAe,GAEfl6D,UAASC,MAAMkE,cAAcC,OAAS,IAExC81D,EADmBl6D,UAASC,MAAMkE,cAAcQ,QAAO,SAACgC,GAAC,YAAW4C,IAAN5C,KACpC5B,KAAI,SAAUiD,GACtC,OAAOA,EAAKE,OAGhB,OAAOgyD,IACR,CAAAl7D,IAAA,kBAAAkF,IAED,WAUE,OALoBlE,UAASC,MAAMwc,cAAc1X,KAAI,SAAUm6B,GAC3D,MAAM,GAAN56B,OAAU46B,EAAKx3B,OAAOQ,GAAE,iBAAA5D,OAAM46B,EAAKr3B,OAAOK,SAK/C,CAAAlJ,IAAA,SAAAC,MAkUD,WAAU,IAADkJ,EAAA,KAIP,OAAOo7C,IAAA/c,cAAA,OAAKt+B,GAAG,MACb09B,MAAO,CACL9V,MAAO,OACP+M,OAAQ,OACRs9B,KAAM,UACNzlB,OAAQ,OAOV6O,IAAA/c,cAAC4zB,KAAG,CAAC1W,UAAU,WAAU,OAEzBH,IAAA/c,cAAC6zB,KAAY,CACXz0B,MAAO,CAAE/I,OAAQ,OAAQ/M,MAAO,QAChC2a,KAAM,EACNiH,OAAQ,CAAC,MAAO,OAGhB6R,IAAA/c,cAAC8zB,KAAa,CAACvpC,SAAS,YACtBwyB,IAAA/c,cAAC8zB,KAAcC,UAAS,CAAC9gD,KAAK,gBAAgByqC,QAAQ,QACpDX,IAAA/c,cAACg0B,KAAS,CAACz9C,IAAI,uHAEjBwmC,IAAA/c,cAAC8zB,KAAcC,UAAS,CAAC9gD,KAAK,qBAC5B8pC,IAAA/c,cAACg0B,KAAS,CAACz9C,IAAI,+EAEjBwmC,IAAA/c,cAAC8zB,KAAcC,UAAS,CAAC9gD,KAAK,aAC5B8pC,IAAA/c,cAACg0B,KAAS,CAACz9C,IAAI,6GAEjBwmC,IAAA/c,cAAC8zB,KAAcG,QAAO,CAAChhD,KAAK,UAC1B8pC,IAAA/c,cAACg0B,KAAS,CAACz9C,IAAI,gEACbpb,KAAM,YAGV4hD,IAAA/c,cAAC8zB,KAAcG,QAAO,CAAChhD,KAAK,YAE1B8pC,IAAA/c,cAACk0B,KAAO,CAACjqD,KAAMkqD,MAGjBpX,IAAA/c,cAAC8zB,KAAcG,QAAO,CAAChhD,KAAK,aAE1B8pC,IAAA/c,cAACk0B,KAAO,CAACjqD,KAAMmqD,MAGjBrX,IAAA/c,cAAC8zB,KAAcG,QAAO,CAAChhD,KAAK,oBAE1B8pC,IAAA/c,cAACk0B,KAAO,CAACjqD,KAAMoqD,OAOnBtX,IAAA/c,cAACmwB,GAAU,MACXpT,IAAA/c,cAACoxB,GAAO,MACRrU,IAAA/c,cAAC2xB,GAAQ,MAGT5U,IAAA/c,cAACs0B,KAAI,CAACrhD,KAAK,WAAWmsB,MAAO,CAAE8O,OAAQ,WAIanrC,IAAjDvJ,UAASC,MAAM+F,SAAS9D,MAAM,GAAGyJ,aAA8E,MAAjD3L,UAASC,MAAM+F,SAAS9D,MAAM,GAAGyJ,aAE9F3L,UAASC,MAAMC,OAASF,UAASC,MAAMC,MAAM4gD,cAAc/7C,KAAI,SAACm6B,EAAMpyB,GAGpE,IAAIiuD,EAAgB,CAAC,CAAC77B,EAAKzuB,KAAK9E,YAAauzB,EAAKzuB,KAAK7E,aAAc,CAACszB,EAAKzuB,KAAK5E,UAAWqzB,EAAKzuB,KAAK3E,YACrG,OAQEy3C,IAAA/c,cAAC8xB,GAAK,CAACrlD,KAAM,CAAC,IAAK8nD,EAAc,GAAI,IAAKA,EAAc,IAC9DpkC,QAASxuB,EAAK+wD,kBAAkBh6B,SAejCl/B,UAASC,MAAM+b,eAAejX,KAAI,SAAC+0D,EAAShtD,GAC3C,IAAIinD,EAAY+F,EAAQ/F,UACpBiH,EAAclB,EAAQj6B,OAAO96B,KAAI,SAACsB,GACpC,MAAO,CAACA,EAAE,GAAIA,EAAE,OAIlB,OAAOk9C,IAAA/c,cAACy0B,KAAO,CAACC,YAAa/yD,EAAK0xD,eAAeC,EAAS/F,GAAY3pD,UAAW4wD,OAUnFzX,IAAA/c,cAACs0B,KAAI,CAACrhD,KAAK,SAASmsB,MAAO,CAAE8O,OAAQ,WACQnrC,IAA1CvJ,UAASC,MAAM+F,SAAS7E,MAAM,GAAGmK,WAAgE/B,IAA1CvJ,UAASC,MAAM+F,SAAS7E,MAAM,GAAGiK,MACvFpL,UAASC,MAAMC,OAASF,UAASC,MAAMC,MAAMuJ,cAAc1E,KAAI,SAACiD,EAAM8E,GAEpE,OACEy2C,IAAA/c,cAAC20B,KAAY,CACXn8D,IAAKgJ,EAAKE,GACVwpC,OAAQ,CAAC1pC,EAAKyI,KAAKzP,IAAIsK,KAAMtD,EAAKyI,KAAKzP,IAAIoK,MAC3CihC,OAAmC,IAA3BlkC,EAAKmxD,cAActxD,GAC3BkzD,YAAa/yD,EAAKoxD,kBAAkBvxD,GAGpCyI,KAAMzI,EACNozD,cAAe,CACb/C,MAAO,SAACtxD,GAEN,GADAA,EAAEs0D,cAAcC,KAAKtE,EAAEuE,SAAS7qB,gBAAgB3pC,GAC3C/G,UAASC,MAAMmc,WAUlBpc,UAASC,MAAMmc,WAAa,KAC5Bpc,UAASC,MAAMC,MAAMsJ,UAAY,GACjCxJ,UAASC,MAAMkE,cAAgB,GAC/BnE,UAASC,MAAMwc,cAAgB,OAbD,CAC9B,IAAMo+B,EAAU9zC,EAAEc,OAAO8uB,QAAQlmB,KACjCzQ,UAASC,MAAMmc,WAAay+B,EAK5B76C,UAASC,MAAMkE,cAAgBnE,UAASC,MAAMC,MAAMs1B,0BAA0BqlB,GAC9E76C,UAASC,MAAMC,MAAMo1B,mBAAmBulB,KAU5C2gB,UAAW,SAACz0D,GAEV,IAAI/G,UAASC,MAAMmc,YAAwD,IAA1Cpc,UAASC,MAAMC,MAAMsJ,UAAUpF,OAAhE,CAMApE,UAASC,MAAMoc,iBAAmBtV,EAAEc,OAAO8uB,QAAQlmB,KAGnD,IAAMoqC,EAAU9zC,EAAEc,OAAO8uB,QAAQlmB,KAGjCzQ,UAASC,MAAMC,MAAMo1B,mBAAmBulB,KAS1C4gB,SAAU,SAAC10D,GAEL/G,UAASC,MAAMmc,YAAwD,IAA1Cpc,UAASC,MAAMC,MAAMsJ,UAAUpF,SAEhEpE,UAASC,MAAMC,MAAMD,MAAM8P,aAAY,SAAUpJ,GAE/C3G,UAASC,MAAMC,MAAM00B,iBAAiBjuB,EAAG,GAEzC3G,UAASC,MAAMC,MAAM+1B,cAActvB,GAAG,EAAOssB,GAAI0E,uBAInD33B,UAASC,MAAMC,MAAMm1B,cAAc,MACnCr1B,UAASC,MAAMoc,iBAAmB,SAuBpCrc,UAASC,MAAMC,OAAS8H,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQxrB,SACvEi7C,IAAA/c,cAACkvB,KAAO,CACN5lC,MAAO9nB,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQlqB,SAAS,GAAGg8B,MAAM9V,MACxEksB,SAAUh0C,EAAK0B,WAAWmqB,WAAWjqB,SAAS,GAAGkqB,QAAQlqB,SAAS,GAAGg8B,MAAMoW,SAC3E0H,UAAU,aAAagY,UAAU,QAAQpwB,OAAQ,CAAC,EAAG,GAAItZ,QAAS,EAAG2pC,WAAS,GAAE3zD,EAAK0B,WAAWjB,OAAmB86C,IAAA/c,cAACkvB,KAAO,CAAChS,UAAU,aAAagY,UAAU,QAAQpwB,OAAQ,CAAC,EAAG,GAAItZ,QAAS,EAAG2pC,WAAS,GAAE3zD,EAAK0B,WAAWjB,YAW1O86C,IAAA/c,cAAA,WACA+c,IAAA/c,cAACyd,IAAM,CAACre,MAAO,CAAE7U,SAAU,QAASjf,IAAK,MAAOF,KAAM,OAAQ8iC,OAAQ,QACpEknB,eAAgB57D,UAASC,MAAMk5D,YAE/BhV,SAAU,SAACllD,GACTe,UAASC,MAAMk5D,YAAcl6D,EAAM4I,OAAOq8C,WAI9CX,IAAA/c,cAAA,QAAMZ,MAAO,CAAEoW,SAAU,OAAQjrB,SAAU,QAASjf,IAAK,MAAO2kB,MAAO,MAAOie,OAAQ,SAAU,eAGhG6O,IAAA/c,cAACyd,IAAM,CAACre,MAAO,CAAE7U,SAAU,QAASjf,IAAK,MAAOF,KAAM,OAAQ8iC,OAAQ,QACpEknB,eAAgB57D,UAASC,MAAM+5D,mBAE/B7V,SAAU,SAACllD,GACTe,UAASC,MAAM+5D,mBAAqB/6D,EAAM4I,OAAOq8C,WAIrDX,IAAA/c,cAAA,QAAMZ,MAAO,CAAEoW,SAAU,OAAQjrB,SAAU,QAASjf,IAAK,MAAO2kB,MAAO,MAAOie,OAAQ,SAAU,+BAEhG6O,IAAA/c,cAACyd,IAAM,CAACre,MAAO,CAAE7U,SAAU,QAASjf,IAAK,OAAQF,KAAM,OAAQ8iC,OAAQ,QACrEknB,eAAgB57D,UAASC,MAAM63D,SAE/B3T,SAAU,SAACllD,GACTe,UAASC,MAAM63D,SAAW74D,EAAM4I,OAAOq8C,WAI3CX,IAAA/c,cAAA,QAAMZ,MAAO,CAAEoW,SAAU,OAAQjrB,SAAU,QAASjf,IAAK,OAAQ2kB,MAAO,MAAOie,OAAQ,SAAU,0BAgBtGmkB,EAzpBM,CACatV,IAAMgB,WAASjkD,aAAAkmD,GAAAjmD,UAAA,mBA8BlCgS,aAAQvJ,OAAAwJ,yBAAAg0C,GAAAjmD,UAAA,mBAAAimD,GAAAjmD,WAAAD,aAAAkmD,GAAAjmD,UAAA,mBAoBRgS,aAAQvJ,OAAAwJ,yBAAAg0C,GAAAjmD,UAAA,mBAAAimD,GAAAjmD,WAAAD,aAAAkmD,GAAAjmD,UAAA,mBAaRgS,aAAQvJ,OAAAwJ,yBAAAg0C,GAAAjmD,UAAA,mBAAAimD,GAAAjmD,WAhEF9C,GAgEE+oD,MAAA/oD,I,kCC1FVylD,oBAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAyY,EAAA1Y,GAAA,IAAAE,EAAAC,YAAAuY,GAAA,SAAAA,IAAA,OAAAn+D,YAAA,KAAAm+D,GAAAxY,EAAAv1C,MAAA,KAAAwa,WAoDN,OApDMvpB,YAAA88D,EAAA,EAAA78D,IAAA,SAAAC,MAEP,WAAU,IAADoI,EAAA,KAcP,OACEk8C,IAAA/c,cAAA,OACEkd,UAAWC,IAET,qBACA,sBAGFJ,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,uBACvCtM,IAAA/c,cAAA,SACEkd,UAAWC,IAAWC,IAAQ4I,MAAO5I,IAAQkY,cAAe,8BAC5Dl2B,MAAO,CACL9V,MAAO,OACP43B,QAAS,IACT1L,SAAU,SAIZuH,IAAA/c,cAAA,aACE+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,UAAI,YACJ+c,IAAA/c,cAAA,UAAI,WAGR+c,IAAA/c,cAAA,aACGxmC,UAASC,MAAM4tD,qBAAqB9oD,KAAI,SAACyG,EAAIsB,GAAC,OAC7Cy2C,IAAA/c,cAAA,MAAIxnC,IAAG,GAAAsF,OAAKkH,EAAE,KAAAlH,OAAIwI,IAChBy2C,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAel8C,GACrC+3C,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,WAAYxJ,WAAY,WAtCpC,SAAC6d,GACvB,IAAMC,EAAM11D,OAAOy1D,GACnB,OAAIz1D,OAAO6S,MAAM6iD,IAAQA,EAAM,GAAKA,EAAM,EAEjCD,EAGFz1D,OAAO+E,WAAW2wD,GAAKC,YAAY,GA+B6BC,CAAgB70D,EAAKy+C,MAAM99C,KAAKwD,iBAQ1GqwD,EApDM,CACgBtY,IAAMgB,Y,wEC+nChB4X,I,OApnCdjZ,oBAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA+Y,EAAAhZ,GAAA,IAAAE,EAAAC,YAAA6Y,GAAA,SAAAA,IAAA,IAAA90D,EAAA3J,YAAA,KAAAy+D,GAAA,QAAArK,EAAAxpC,UAAAlkB,OAAA2tD,EAAA,IAAAxnD,MAAAunD,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAA1pC,UAAA0pC,GA8ZN,OA9ZM3qD,EAAAg8C,EAAAxtC,KAAA/H,MAAAu1C,EAAA,OAAA/+C,OAAAytD,KAIP3K,OAAS,CAAEt1C,IAAK,GAAI2kB,MAAO,GAAIgZ,OAAQ,GAAI79B,KAAM,IACjDvK,EACAgtC,aAAevZ,SAASwZ,cAAc,oBAAmBjtC,EACzD+0D,SAAW/0D,EAAKgtC,aAAaE,YAAc,EAACltC,EAC5Cg1D,UAAYh1D,EAAKgtC,aAAaG,aAAc,EAACntC,EAC7CyoB,MAAQzoB,EAAK+0D,SAAW/0D,EAAK+/C,OAAOx1C,KAAOvK,EAAK+/C,OAAO3wB,MAAKpvB,EAC5Dw1B,OAASx1B,EAAKg1D,UAAYh1D,EAAK+/C,OAAOt1C,IAAMzK,EAAK+/C,OAAO3X,OAAMpoC,EAC9Di1D,YAAcj1D,EAAK+/C,OAAM//C,EACzBk1D,WAAal1D,EAAKyoB,MAAKzoB,EACvBm1D,YAAc,GAAEn1D,EAChBo1D,cAAgB,GAAEp1D,EAClBq1D,cAAgB,GAAEr1D,EAGlBs1D,8BAAgC,WAC9B,IAAMC,EAAc58D,UAASC,MAAMkE,cAC7BgpB,EAAU,SAACC,GAAK,OAAKA,EAAMC,QAAO,SAAC7gB,EAAGC,GAAC,OAAKD,EAAIC,KAAK2gB,EAAMhpB,QAEjE,GAAIpE,UAASC,MAAMmc,WAAY,CAE7B,IAAMsgD,EAAgB18D,UAASC,MAAMmc,WAAW8X,SAChD,IAAKwoC,GAAyC,GAAxBA,EAAct4D,OAAa,MAAO,CAAC,KAAM,IAC/DiD,EAAKq1D,cAAgBA,EACrB,IAAMG,EAAeH,EAAc33D,KAAI,SAAAgC,GACrC,OAAGA,EAAE63C,SAAU,EACN73C,EAAE63C,SAEF,KAIX,MAAO,CAACzxB,EAAQ0vC,GAAcpQ,QAAQ,GAAIoQ,GAI5C,GAAID,EAAYx4D,OAAS,EAAG,CAE1B,IAAMs4D,EAAgB18D,UAASC,MAAMC,MAAMi0B,iCAAiCn0B,UAASC,MAAMkE,eAC3F,GAA4B,GAAxBu4D,EAAct4D,OAAa,MAAO,CAAC,KAAM,IAC7CiD,EAAKq1D,cAAgBA,EACrB,IAAMG,EAAeH,EAAc33D,KAAI,SAAAgC,GACrC,OAAGA,EAAE63C,SAAU,EACN73C,EAAE63C,SAEF,KAIX,MAAO,CAACzxB,EAAQ0vC,GAAcpQ,QAAQ,GAAIoQ,GA+B1C,IAAIH,EAAgB,GAQpB,GAPA18D,UAASC,MAAMC,MAAMuJ,cAAc9D,SAAQ,SAAAqC,GACtCA,EAAKksB,UAAYlsB,EAAKksB,SAAS9vB,OAAO,GACvCs4D,EAAc72D,KAAIiI,MAAlB4uD,EAAan4D,aAASyD,EAAKksB,cAK3BwoC,EAAct4D,OAAS,EAAG,CAC5B,IAAI04D,EAAoBz4D,KAAKq4D,GAE7B,GADAr1D,EAAKq1D,cAAgBI,EACjBA,EAAkB14D,OAAS,EAAG,CAChC,IAAIy4D,EAAeC,EAAkB/3D,KAAI,SAAAgC,GACvC,OAAGA,EAAE63C,SAAU,EACN73C,EAAE63C,SAEF,KAKX,MAAO,CAACzxB,EAAQ0vC,GAAcpQ,QAAQ,GAAIoQ,GAG1C,MAAO,CAAC,KAAM,IAIhB,MAAO,CAAC,KAAM,KAOnBx1D,EAED01D,iBAAmB,WAIrB,GAAG/8D,UAASC,MAAMkE,cAAcC,OAAS,EAAE,CACzC,IAAMs4D,EAAgB18D,UAASC,MAAMC,MAAMi0B,iCAAiCn0B,UAASC,MAAMkE,eAEzF,GAA4B,GAAxBu4D,EAAct4D,OAAa,OAAO,EAGtC,IAAM44D,EAAah9D,UAASC,MAAMkE,cAAcC,OAEhD,OADsBs4D,EAAct4D,QAAU44D,GAAcA,EAAa,IAAO,GAC5DvQ,QAAQ,GAC1B,GAA2C,GAAvCzsD,UAASC,MAAMkE,cAAcC,QAAepE,UAASC,MAAMkE,cAAc,GAAG,CACpF,IAAM02C,EAAU76C,UAASC,MAAMkE,cAAc,GACvC84D,EAAkBj9D,UAASC,MAAMC,MAAMs1B,0BAA0BqlB,GACjE6hB,EAAgB18D,UAASC,MAAMC,MAAMi0B,iCAAiC8oC,GAE1E,GAA4B,GAAxBP,EAAct4D,OAAa,OAAO,EAGtC,IAAM44D,EAAaC,EAAgB74D,OAEnC,OADsBs4D,EAAct4D,QAAU44D,GAAcA,EAAa,IAAO,GAC5DvQ,QAAQ,KAM9BplD,EAGA61D,iBAAmB,SAAAvuD,GAASA,EAAN9G,OAAY8G,EAAJiH,KAAejH,EAATnF,UAAsBmF,EAAXwuD,YAG7Cn9D,UAASC,MAAMwc,cAAgB,IAEhCpV,EACD+1D,YAAc,SAAAxuD,GAASA,EAAN/G,OAAY+G,EAAJgH,KAAehH,EAATpF,UAAsBoF,EAAXuuD,aAEzC91D,EACDg2D,eAAiB,SAAA9J,GAASA,EAAN1rD,OAAY0rD,EAAJ39C,KAAoC,IAA9BpM,EAAS+pD,EAAT/pD,UAC1B8zD,GADgD/J,EAAX4J,YACnB,IAElBI,EADa5S,kBAAOtjD,EAAKm2D,SACNC,UAAU,WAC7BC,EACAl0D,EAAU,GAAG,GAAKnC,EAAKi1D,YAAY1qD,KADnC8rD,EAEAl0D,EAAU,GAAG,GAAKnC,EAAKi1D,YAAY1qD,KACnCpI,EAAU,GAAG,GACbA,EAAU,GAAG,GAGnB+zD,EAAMI,MAAK,SAAUhsC,EAAG7kB,GACtB,IAAM8wD,EAAQvyD,WAAWs/C,kBAAOtrD,MAAMo8C,KAAK,MAEvCmiB,GAASF,GAAkBE,GAASF,GACtCJ,EAAgBz3D,KAAKiH,MAUzB,IAAM+wD,EAAiBx2D,EAAKm1D,YAAY73D,QAAO,SAACgtB,EAAG7kB,GAAC,OAAqC,IAAhCwwD,EAAgBx4D,QAAQgI,MAE3EgxD,EAAiBl8D,eAAIi8D,EAAe94D,KAAI,SAAC4sB,GAAC,OAAKA,EAAEosC,SACjDC,EAAiBn8D,eAAIg8D,EAAe94D,KAAI,SAAC4sB,GAAC,OAAKA,EAAEssC,SAEjDC,EAAa72D,EAAKq1D,cAAc/3D,QAAO,SAAAu6B,GAAI,OAAKA,EAAK0f,UAAYkf,GAAkB5+B,EAAK0f,UAAYof,KAG1Gh+D,UAASC,MAAMwc,cAAgByhD,EAa/B99D,QAAQC,IAAIL,UAASC,MAAMwc,gBAI5BpV,EAED82D,gBAAkB,kBAChB5a,IAAA/c,cAAC43B,KAGC,CACAC,OACE,CAAC,CAACh3D,EAAK+/C,OAAOx1C,KAAMvK,EAAKi1D,YAAYxqD,KAAM,CAACzK,EAAK+0D,SAAW/0D,EAAKi1D,YAAY7lC,MAAOpvB,EAAKg1D,UAAYh1D,EAAKi1D,YAAY7sB,SAIxH6uB,cAAe,SAAAx/C,GACb,IAAQkxB,EAAqBlxB,EAArBkxB,QAASC,EAAYnxB,EAAZmxB,QACjBsuB,EAAsBl3D,EAAKm2D,QAAQ5gC,wBAA3BhrB,EAAI2sD,EAAJ3sD,KAAME,EAAGysD,EAAHzsD,IAEd,OAAKk+B,EAAUp+B,EAAQ,GACrBxR,QAAQC,IAAI,QACL,CAAC,EAAG4vC,EAAUn+B,IAEhB,CAACk+B,EAAUp+B,EAAMq+B,EAAUn+B,IAEpC0sD,UAAU,IACVC,aAAcp3D,EAAK61D,iBACnBwB,QAASr3D,EAAK+1D,YACduB,WAAYt3D,EAAKg2D,kBAEpBh2D,EAEDu3D,mBAAqB,SAAApL,GAASA,EAAN3rD,OAAY2rD,EAAJ59C,KAAe49C,EAAThqD,UAAsBgqD,EAAX2J,aAUhD91D,EACDw3D,cAAgB,SAAAC,GAASA,EAANj3D,OAAYi3D,EAAJlpD,KAAekpD,EAATt1D,UAAsBs1D,EAAX3B,aAE3C91D,EACD03D,uBAAyB,SAAAC,GAASA,EAANn3D,OAAYm3D,EAAJppD,KAAoC,IAA9BpM,EAASw1D,EAATx1D,UAClC8zD,GADwD0B,EAAX7B,YAC3B,IAElBI,EADa5S,kBAAOtjD,EAAK43D,WACNxB,UAAU,WACnC,GAAIj0D,EAAU,CACZ,IAAMk0D,EAAc,CAClBwB,GAAI11D,EAAU,GAAG,GAAKnC,EAAK+/C,OAAOx1C,KAClC2+C,GAAI/mD,EAAU,GAAG,GAAKnC,EAAK+/C,OAAOx1C,KAClCutD,GAAI31D,EAAU,GAAG,GACjBgnD,GAAIhnD,EAAU,GAAG,IAGnB+zD,EAAMI,MAAK,SAAUhsC,EAAG7kB,GACtB,IAAM8wD,EAAQvyD,WAAWs/C,kBAAOtrD,MAAMo8C,KAAK,MAEvCmiB,GAASF,EAAYwB,IAAMtB,GAASF,EAAYnN,IAClD+M,EAAgBz3D,KAAKiH,MAQzB,IAAMsyD,EAAmB/3D,EAAKo1D,cAAc93D,QAAO,SAACgtB,EAAG7kB,GAAC,OAAqC,IAAhCwwD,EAAgBx4D,QAAQgI,MAC/EuyD,EAAmBz9D,eAAIw9D,EAAiBr6D,KAAI,SAAC4sB,GAAC,OAAKA,EAAEosC,SACrDuB,EAAmBz9D,eAAIu9D,EAAiBr6D,KAAI,SAAC4sB,GAAC,OAAKA,EAAEssC,SAErD9G,EAAgBn3D,UAASC,MAAMC,MAAMuJ,cAAc9E,QAAO,SAAAqD,GAAI,OAClEA,EAAKyI,KAAKzP,IAAIqhB,QAAQg9C,GAAoBr3D,EAAKyI,KAAKzP,IAAIqhB,QAAQi9C,KAIlEt/D,UAASC,MAAMC,MAAMs0B,gBAAkB2iC,EACvCn3D,UAASC,MAAMC,MAAMq0B,0BACrBv0B,UAASC,MAAMyc,gBAAkBy6C,EACjCn3D,UAASC,MAAM0c,eAAgB,OAE/B3c,UAASC,MAAMC,MAAMsJ,UAAY,GACjCxJ,UAASC,MAAMC,MAAMmf,yBACrBrf,UAASC,MAAMyc,gBAAkB,GACjC1c,UAASC,MAAM0c,eAAgB,GAMlCtV,EAEDk4D,uBAAyB,SAAAC,GAASA,EAAN33D,OAAY23D,EAAJ5pD,KAAoC,IAA9BpM,EAASg2D,EAATh2D,UAClC8zD,GADwDkC,EAAXrC,YAC3B,IAElBI,EADa5S,kBAAOtjD,EAAK43D,WACNxB,UAAU,WACnC,GAAIj0D,EAAU,CACd,IAAMk0D,EAAc,CAClBwB,GAAI11D,EAAU,GAAG,GAAKnC,EAAK+/C,OAAOx1C,KAClC2+C,GAAI/mD,EAAU,GAAG,GAAKnC,EAAK+/C,OAAOx1C,KAClCutD,GAAI31D,EAAU,GAAG,GACjBgnD,GAAIhnD,EAAU,GAAG,IAGnB+zD,EAAMI,MAAK,SAAUhsC,EAAG7kB,GACtB,IAAM8wD,EAAQvyD,WAAWs/C,kBAAOtrD,MAAMo8C,KAAK,MAEvCmiB,GAASF,EAAYwB,IAAMtB,GAASF,EAAYnN,IAClD+M,EAAgBz3D,KAAKiH,MAQzB,IAIIqqD,EAJEiI,EAAmB/3D,EAAKo1D,cAAc93D,QAAO,SAACgtB,EAAG7kB,GAAC,OAAqC,IAAhCwwD,EAAgBx4D,QAAQgI,MAC/EuyD,EAAmBz9D,eAAIw9D,EAAiBr6D,KAAI,SAAC4sB,GAAC,OAAKA,EAAEosC,SACrDuB,EAAmBz9D,eAAIu9D,EAAiBr6D,KAAI,SAAC4sB,GAAC,OAAKA,EAAEssC,SAG3D,GAAGj+D,UAASC,MAAMkE,cAAcC,OAAQ,EACtC+yD,EAAgBn3D,UAASC,MAAMkE,cAAcQ,QAAO,SAAAqD,GAAI,OACtDA,EAAKyI,KAAKzP,IAAIqhB,QAAQg9C,GAAoBr3D,EAAKyI,KAAKzP,IAAIqhB,QAAQi9C,UAE9D,GAA2C,GAAvCt/D,UAASC,MAAMkE,cAAcC,QAAepE,UAASC,MAAMkE,cAAc,GAAG,CACpF,IAAM02C,EAAU76C,UAASC,MAAMkE,cAAc,GAE7CgzD,EADwBn3D,UAASC,MAAMC,MAAMs1B,0BAA0BqlB,GACvCl2C,QAAO,SAAAqD,GAAI,OACzCA,EAAKyI,KAAKzP,IAAIqhB,QAAQg9C,GAAoBr3D,EAAKyI,KAAKzP,IAAIqhB,QAAQi9C,KAKpEt/D,UAASC,MAAMC,MAAMs0B,gBAAkB2iC,EACrCn3D,UAASC,MAAMC,MAAMq0B,0BACrBv0B,UAASC,MAAMyc,gBAAkBy6C,EACjCn3D,UAASC,MAAM0c,eAAgB,OAG/B,GAAG3c,UAASC,MAAMkE,cAAcC,OAAQ,EACxCpE,UAASC,MAAMC,MAAMsJ,UAAYxJ,UAASC,MAAMkE,cAChDnE,UAASC,MAAMC,MAAMmf,yBACrBrf,UAASC,MAAMyc,gBAAkB,GACjC1c,UAASC,MAAM0c,eAAgB,OAC1B,GAA2C,GAAvC3c,UAASC,MAAMkE,cAAcC,QAAepE,UAASC,MAAMkE,cAAc,GAAG,CACnF,IAAM02C,EAAU76C,UAASC,MAAMkE,cAAc,GACvCgzD,EAAgBn3D,UAASC,MAAMC,MAAMs1B,0BAA0BqlB,GACrE76C,UAASC,MAAMC,MAAMs0B,gBAAkB2iC,EACvCn3D,UAASC,MAAMC,MAAMq0B,0BACrBv0B,UAASC,MAAMyc,gBAAkBy6C,EACjCn3D,UAASC,MAAM0c,eAAgB,IAMpCtV,EAEDo4D,wBAA0B,kBACxBlc,IAAA/c,cAAC43B,KAGC,CACAC,OACE,CAAC,CAACh3D,EAAK+/C,OAAOx1C,KAAMvK,EAAKi1D,YAAYxqD,KAAM,CAACzK,EAAK+0D,SAAW/0D,EAAKi1D,YAAY7lC,MAAOpvB,EAAKg1D,UAAYh1D,EAAKi1D,YAAY7sB,SAIxH6uB,cAAe,SAAAx/C,GACb,IAAQkxB,EAAqBlxB,EAArBkxB,QAASC,EAAYnxB,EAAZmxB,QACjByvB,EAAsBr4D,EAAK43D,UAAUriC,wBAErC,MAAO,CAACoT,EAFI0vB,EAAJ9tD,KAEgBq+B,EAFPyvB,EAAH5tD,MAIhB0sD,UAAU,IACVC,aAAcp3D,EAAKu3D,mBACnBF,QAASr3D,EAAKw3D,cACdF,WAAYt3D,EAAK03D,0BAEpB13D,EAEDs4D,wBAA0B,kBACxBpc,IAAA/c,cAAC43B,KAGC,CACAC,OACE,CAAC,CAACh3D,EAAK+/C,OAAOx1C,KAAMvK,EAAKi1D,YAAYxqD,KAAM,CAACzK,EAAK+0D,SAAW/0D,EAAKi1D,YAAY7lC,MAAOpvB,EAAKg1D,UAAYh1D,EAAKi1D,YAAY7sB,SAIxH6uB,cAAe,SAAAx/C,GACb,IAAQkxB,EAAqBlxB,EAArBkxB,QAASC,EAAYnxB,EAAZmxB,QACjB2vB,EAAsBv4D,EAAK43D,UAAUriC,wBAErC,MAAO,CAACoT,EAFI4vB,EAAJhuD,KAEgBq+B,EAFP2vB,EAAH9tD,MAIhB0sD,UAAU,IACVC,aAAcp3D,EAAKu3D,mBACnBF,QAASr3D,EAAKw3D,cACdF,WAAYt3D,EAAKk4D,0BAEpBl4D,EAmtBA,OAntBAtI,YAAAo9D,EAAA,EAAAn9D,IAAA,SAAAC,MAMD,WAAU,IAADkJ,EAAA,KASP,GALA9I,KAAKwgE,SAAW,GAChBxgE,KAAKygE,cAAgB,GACrBzgE,KAAK0gE,eAAiB,EACtB1gE,KAAK2gE,iBAAkB,EAEnBhgE,UAASC,MAAMkE,cAAcC,OAAS,GAAK/E,KAAKs9D,iCAAmCt9D,KAAKs9D,gCAAgC,GAM1H,OACEpZ,IAAA/c,cAAA,OACEkd,UAAWC,MAKX/d,MAAO,CAEL/I,OAAQ,SAKV0mB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,uBACvCtM,IAAA/c,cAAA,SACEkd,UAAWC,IAAWC,IAAQ4I,MAAO5I,IAAQkY,cAAe,8BAC5Dl2B,MAAO,CACL9V,MAAO,OACP43B,QAAS,IACT1L,SAAU,SAIZuH,IAAA/c,cAAA,cAOA+c,IAAA/c,cAAA,aACE+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAE1nD,UAASC,MAAMkE,cAAcC,OAAS,wBAG9Em/C,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAE,2BAA6BroD,KAAKs9D,gCAAgC,GAAK,QAG/GpZ,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAE,+CAAiDroD,KAAK09D,wBAUpGxZ,IAAA/c,cAAA,OAAKZ,MAAO,CAAE/I,OAAQ,SAElB0mB,IAAA/c,cAAA,OACE1W,MAAO,MACP+M,OAAQ,OAER30B,GAAG,UACHlH,IAAK,SAAAi/D,GAAK,OAAK93D,EAAKq1D,QAAUyC,IAG9B1c,IAAA/c,cAAA,QAAMnkC,EAAE,MAAMC,EAAE,MAAM49D,cAAY,SAASlkB,SAAS,OAAOmkB,eAAe,WAAU,8BACpF5c,IAAA/c,cAAC45B,KAAS,CACRC,UAAU,eACVC,YAAY,WACZ73D,MAAM,6BACNo0B,OAAQx9B,KAAKg9D,UACbvsC,MAAOzwB,KAAK+8D,SACZmE,YAAY,EACZC,YAAY,EACZC,SAAU,GACVrZ,OAAQ/nD,KAAK+nD,OACbsZ,cAAe,SAACC,GAEd,OAAOA,GAETC,QAAQ,WAGRrd,IAAA/c,cAACq6B,KAAS,CACRC,UAAU,EACVC,QAAS1hE,KAAKs9D,gCAAgC,GAC9CvX,KAAM,SAACzzB,EAAG7kB,GAyBR,OAxBU,IAANA,IACF3E,EAAK63D,iBAAmB,EACxB73D,EAAKq0D,YAAc,IAEjB7qC,EAAElhB,KAAKrM,OAAS+D,EAAK63D,mBACvB73D,EAAK63D,iBAAmBruC,EAAElhB,KAAKrM,QAE7ButB,EAAElhB,KAAKrM,OAAS,EAClB+D,EAAKq0D,YAAY32D,KAAK,CACpBk4D,KAAMn8D,eAAI+vB,EAAElhB,MACZwtD,KAAMp8D,eAAI8vB,EAAElhB,QAGdtI,EAAKq0D,YAAY32D,KAAK,CACpBk4D,KAAMt1B,IACNw1B,MAAO,IASJ,aAGX1a,IAAA/c,cAACw6B,KAAK,CAACC,SAAU,EAAGx4D,MAAM,qBAAqBuzC,SAAS,OAAOklB,eAAgB,SAACvvC,EAAG7kB,GAAC,MAAM,CAAE4hC,MAAO,OAClGrvC,KAAKs9D,gCAAgC,GAAGv4D,OAAS,GAChDm/C,IAAA/c,cAAC26B,KAAK,CAAC14D,MAAM,YAAYuzC,SAAS,OAAOolB,WACvC,SAACrjC,EAAMsjC,GAEL,OADAjhE,QAAQC,IAAI09B,EAAM51B,EAAK63D,iBAAiB,GACpCtzC,SAASqR,GAAMn2B,YAAcO,EAAK03D,SAC7B,IAGP13D,EAAK03D,SAAWnzC,SAASqR,GAAMn2B,WACxB8kB,SAASqR,GAAMn2B,eAO5B27C,IAAA/c,cAAC26B,KAAK,CAAC14D,MAAM,YAAYuzC,SAAS,OAAOolB,WACvC,SAACrjC,EAAMsjC,GACH,OAAO30C,SAASqR,GAAMn2B,eAS/BvI,KAAK8+D,mBAER5a,IAAA/c,cAAA,OACE1W,MAAO,MACP+M,OAAQ,OAER30B,GAAG,YACHlH,IAAK,SAAAi/D,GAAK,OAAK93D,EAAK82D,UAAYgB,IAIhC1c,IAAA/c,cAAA,QAAMnkC,EAAE,MAAMC,EAAE,MAAM49D,cAAY,SAASlkB,SAAS,OAAOmkB,eAAe,WAAU,4BACpF5c,IAAA/c,cAAC45B,KAAS,CACRC,UAAU,aACVC,YAAY,WACZzjC,OAAQx9B,KAAKg9D,UACbvsC,MAAOzwB,KAAK+8D,SACZhV,OAAQ/nD,KAAK+nD,OACbmZ,YAAY,EACZC,YAAY,EACZC,SAAU,GACVC,cAAe,SAACC,GAAK,OAAKA,GAC1BC,QAAQ,WAERrd,IAAA/c,cAACq6B,KAAS,CACRzb,KAAM,SAACzzB,EAAG7kB,GAyBR,OAxBU,IAANA,IACF3E,EAAK63D,iBAAmB,EACxB73D,EAAKs0D,cAAgB,IAEnB9qC,EAAElhB,KAAKrM,OAAS+D,EAAK63D,mBACvB73D,EAAK63D,iBAAmBruC,EAAElhB,KAAKrM,QAE7ButB,EAAElhB,KAAKrM,OAAS,EAClB+D,EAAKs0D,cAAc52D,KAAK,CACtBk4D,KAAMn8D,eAAI+vB,EAAElhB,MACZwtD,KAAMp8D,eAAI8vB,EAAElhB,QAGdtI,EAAKs0D,cAAc52D,KAAK,CACtBk4D,KAAMt1B,IACNw1B,MAAO,IASJ,WAET6C,UAAU,EACVC,QAAS/gE,UAASC,MAAMkE,cAAcY,KAAI,SAACiD,EAAM8E,GAgB/C,OAfS,GAALA,IACF3E,EAAK43D,eAAiB,GAEpB/3D,EAAKyI,KAAKzP,IAAIqhB,UAAUla,EAAK23D,eAC/B33D,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,SAAW,EACxCla,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,QAAUla,EAAK43D,iBAClD53D,EAAK43D,eAAiB53D,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,WAGzDla,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,QAAU,EACvCla,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,QAAUla,EAAK43D,iBAClD53D,EAAK43D,eAAiB53D,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,UAIxDra,EAAKyI,KAAKzP,IAAIqhB,OAAO,EACfra,EAAKyI,KAAKzP,IAAIqhB,OAEd,OAIbkhC,IAAA/c,cAACw6B,KAAK,CAACC,SAAU,EAAGx4D,MAAM,SAASuzC,SAAS,OAAOklB,eAAgB,SAACvvC,EAAG7kB,GAAC,MAAM,CAAE4hC,MAAO,OACtFrvC,KAAKs9D,gCAAgC,GAAGv4D,OAAS,GAChDm/C,IAAA/c,cAAC26B,KAAK,CAAC14D,MAAM,YAAYuzC,SAAS,OAAOolB,WACvC,SAACrjC,EAAMsjC,GAEL,OADAjhE,QAAQC,IAAI09B,EAAM51B,EAAK03D,UACnBnzC,SAASqR,GAAMn2B,YAAcO,EAAK03D,SAC7B,IAGP13D,EAAK03D,SAAWnzC,SAASqR,GAAMn2B,WACxB8kB,SAASqR,GAAMn2B,eAO5B27C,IAAA/c,cAAC26B,KAAK,CAAC14D,MAAM,YAAYuzC,SAAS,OAAOolB,WACvC,SAACrjC,EAAMsjC,GAEH,OAAI30C,SAASqR,GAAMn2B,YAAcO,EAAK03D,SAC7B,IAGP13D,EAAK03D,SAAWnzC,SAASqR,GAAMn2B,WACxB8kB,SAASqR,GAAMn2B,gBAOjCvI,KAAKsgE,6BAQb,GAAyC,GAAtC3/D,UAASC,MAAMkE,cAAcC,QAAcpE,UAASC,MAAMkE,cAAc,IAAM9E,KAAKs9D,iCAAmCt9D,KAAKs9D,gCAAgC,GAAG,CACpK,IAAM9hB,EAAU76C,UAASC,MAAMkE,cAAc,GACvC84D,EAAkBj9D,UAASC,MAAMC,MAAMs1B,0BAA0BqlB,GAEvE,OAAGoiB,EAAgB74D,OAAQ,EAGvBm/C,IAAA/c,cAAA,OACEkd,UAAWC,MAKX/d,MAAO,CAEL/I,OAAQ,SAKV0mB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,uBACvCtM,IAAA/c,cAAA,SACEkd,UAAWC,IAAWC,IAAQ4I,MAAO5I,IAAQkY,cAAe,8BAC5Dl2B,MAAO,CACL9V,MAAO,OACP43B,QAAS,IACT1L,SAAU,SAIZuH,IAAA/c,cAAA,cAOA+c,IAAA/c,cAAA,aACE+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAEuV,EAAgB74D,OAAS,wBAGjEm/C,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAE,2BAA6BroD,KAAKs9D,gCAAgC,GAAK,QAG/GpZ,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAE,+CAAiDroD,KAAK09D,wBAUpGxZ,IAAA/c,cAAA,OAAKZ,MAAO,CAAE/I,OAAQ,SAElB0mB,IAAA/c,cAAA,OACE1W,MAAO,MACP+M,OAAQ,OAER30B,GAAG,UACHlH,IAAK,SAAAi/D,GAAK,OAAK93D,EAAKq1D,QAAUyC,IAG9B1c,IAAA/c,cAAA,QAAMnkC,EAAE,MAAMC,EAAE,MAAM49D,cAAY,SAASlkB,SAAS,OAAOmkB,eAAe,WAAU,8BACpF5c,IAAA/c,cAAC45B,KAAS,CACRC,UAAU,eACVC,YAAY,WACZ73D,MAAM,6BACNo0B,OAAQx9B,KAAKg9D,UACbvsC,MAAOzwB,KAAK+8D,SACZmE,YAAY,EACZC,YAAY,EACZC,SAAU,GACVrZ,OAAQ/nD,KAAK+nD,OACbsZ,cAAe,SAACC,GAEd,OAAOA,GAETC,QAAQ,WAGRrd,IAAA/c,cAACq6B,KAAS,CACRC,UAAU,EACVC,QAAS1hE,KAAKs9D,gCAAgC,GAC9CvX,KAAM,SAACzzB,EAAG7kB,GAyBR,OAxBU,IAANA,IACF3E,EAAK63D,iBAAmB,EACxB73D,EAAKq0D,YAAc,IAEjB7qC,EAAElhB,KAAKrM,OAAS+D,EAAK63D,mBACvB73D,EAAK63D,iBAAmBruC,EAAElhB,KAAKrM,QAE7ButB,EAAElhB,KAAKrM,OAAS,EAClB+D,EAAKq0D,YAAY32D,KAAK,CACpBk4D,KAAMn8D,eAAI+vB,EAAElhB,MACZwtD,KAAMp8D,eAAI8vB,EAAElhB,QAGdtI,EAAKq0D,YAAY32D,KAAK,CACpBk4D,KAAMt1B,IACNw1B,MAAO,IASJ,aAGX1a,IAAA/c,cAACw6B,KAAK,CAACC,SAAU,EAAGx4D,MAAM,qBAAqBuzC,SAAS,OAAOklB,eAAgB,SAACvvC,EAAG7kB,GAAC,MAAM,CAAE4hC,MAAO,OAClGrvC,KAAKs9D,gCAAgC,GAAGv4D,OAAS,GAChDm/C,IAAA/c,cAAC26B,KAAK,CAAC14D,MAAM,YAAYuzC,SAAS,OAAOolB,WACvC,SAACrjC,EAAMsjC,GAEL,OADAjhE,QAAQC,IAAI09B,EAAM51B,EAAK63D,iBAAiB,GACpCtzC,SAASqR,GAAMn2B,YAAcO,EAAK03D,SAC7B,IAGP13D,EAAK03D,SAAWnzC,SAASqR,GAAMn2B,WACxB8kB,SAASqR,GAAMn2B,eAO5B27C,IAAA/c,cAAC26B,KAAK,CAAC14D,MAAM,YAAYuzC,SAAS,OAAOolB,WACvC,SAACrjC,EAAMsjC,GACH,OAAO30C,SAASqR,GAAMn2B,eAS/BvI,KAAK8+D,mBAER5a,IAAA/c,cAAA,OACE1W,MAAO,MACP+M,OAAQ,OAER30B,GAAG,YACHlH,IAAK,SAAAi/D,GAAK,OAAK93D,EAAK82D,UAAYgB,IAIhC1c,IAAA/c,cAAA,QAAMnkC,EAAE,MAAMC,EAAE,MAAM49D,cAAY,SAASlkB,SAAS,OAAOmkB,eAAe,WAAU,4BACpF5c,IAAA/c,cAAC45B,KAAS,CACRC,UAAU,aACVC,YAAY,WACZzjC,OAAQx9B,KAAKg9D,UACbvsC,MAAOzwB,KAAK+8D,SACZhV,OAAQ/nD,KAAK+nD,OACbmZ,YAAY,EACZC,YAAY,EACZC,SAAU,GACVC,cAAe,SAACC,GAAK,OAAKA,GAC1BC,QAAQ,WAERrd,IAAA/c,cAACq6B,KAAS,CACRzb,KAAM,SAACzzB,EAAG7kB,GAyBR,OAxBU,IAANA,IACF3E,EAAK63D,iBAAmB,EACxB73D,EAAKs0D,cAAgB,IAEnB9qC,EAAElhB,KAAKrM,OAAS+D,EAAK63D,mBACvB73D,EAAK63D,iBAAmBruC,EAAElhB,KAAKrM,QAE7ButB,EAAElhB,KAAKrM,OAAS,EAClB+D,EAAKs0D,cAAc52D,KAAK,CACtBk4D,KAAMn8D,eAAI+vB,EAAElhB,MACZwtD,KAAMp8D,eAAI8vB,EAAElhB,QAGdtI,EAAKs0D,cAAc52D,KAAK,CACtBk4D,KAAMt1B,IACNw1B,MAAO,IASJ,WAET6C,UAAU,EACVC,QAAS9D,EAAgBl4D,KAAI,SAACiD,EAAM8E,GAgBlC,OAfS,GAALA,IACF3E,EAAK43D,eAAiB,GAEpB/3D,EAAKyI,KAAKzP,IAAIqhB,UAAUla,EAAK23D,eAC/B33D,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,SAAW,EACxCla,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,QAAUla,EAAK43D,iBAClD53D,EAAK43D,eAAiB53D,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,WAGzDla,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,QAAU,EACvCla,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,QAAUla,EAAK43D,iBAClD53D,EAAK43D,eAAiB53D,EAAK23D,cAAc93D,EAAKyI,KAAKzP,IAAIqhB,UAIxDra,EAAKyI,KAAKzP,IAAIqhB,OAAO,EACfra,EAAKyI,KAAKzP,IAAIqhB,OAEd,OAIbkhC,IAAA/c,cAACw6B,KAAK,CAACC,SAAU,EAAGx4D,MAAM,SAASuzC,SAAS,OAAOklB,eAAgB,SAACvvC,EAAG7kB,GAAC,MAAM,CAAE4hC,MAAO,QACtFrvC,KAAKs9D,gCAAgC,GAAGv4D,OACvCm/C,IAAA/c,cAAC26B,KAAK,CAAC14D,MAAM,YAAYuzC,SAAS,OAAOolB,WACvC,SAACrjC,EAAMsjC,GAEL,OAAI30C,SAASqR,GAAMn2B,YAAcO,EAAK03D,SAC7B,IAGP13D,EAAK03D,SAAWnzC,SAASqR,GAAMn2B,WACxB8kB,SAASqR,GAAMn2B,iBAsB/BvI,KAAKsgE,6BAQTpc,IAAA/c,cAAA,YAIN,OAAInnC,KAAKs9D,iCAAmCt9D,KAAKs9D,gCAAgC,GAC7EpZ,IAAA/c,cAAA,OACLkd,UAAWC,MAKX/d,MAAO,CAEL/I,OAAQ,SAKV0mB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAM,uBACvCtM,IAAA/c,cAAA,SACEkd,UAAWC,IAAWC,IAAQ4I,MAAO5I,IAAQkY,cAAe,8BAC5Dl2B,MAAO,CACL9V,MAAO,OACP43B,QAAS,IACT1L,SAAU,SAIZuH,IAAA/c,cAAA,cAGA+c,IAAA/c,cAAA,aAGE+c,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAE,sBAAsB,MAAG,WAAApjD,OAAYtE,UAASC,MAAM+e,SAAWhf,UAASC,MAAMkB,MAAMO,OAAS,QAAS,MAAG,YAAA4C,OAAatE,UAASC,MAAM+e,SAAWhf,UAASC,MAAMkB,MAAMC,QAAU,UAEvNmiD,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAC,yBAAApjD,OAA0BtE,UAASC,MAAM+e,SAAWhf,UAASC,MAAMoiB,OAAOoqC,QAAQ,GAAK,UAE9HlJ,IAAA/c,cAAA,UACE+c,IAAA/c,cAAA,MAAIZ,MAAO,CAAE8hB,QAAS,aAAc,IAAC,0BAAApjD,OAA2BtE,UAASC,MAAM+e,SAAYhf,UAASC,MAAMysD,QAAUD,QAAQ,GAAK,aAOzIlJ,IAAA/c,cAAA,OAAKZ,MAAO,CAAE/I,OAAQ,SAGlB0mB,IAAA/c,cAAA,OACE1W,MAAO,MACP+M,OAAQ,OAER30B,GAAG,UACHlH,IAAK,SAAAi/D,GAAK,OAAK93D,EAAKq1D,QAAUyC,IAG9B1c,IAAA/c,cAAA,QAAMnkC,EAAE,MAAMC,EAAE,MAAM49D,cAAY,SAASlkB,SAAS,OAAOmkB,eAAe,WAAU,8BACpF5c,IAAA/c,cAAC45B,KAAS,CACRC,UAAU,eACVC,YAAY,WACZzjC,OAAQx9B,KAAKg9D,UACbvsC,MAAOzwB,KAAK+8D,SACZmE,YAAY,EACZC,YAAY,EACZC,SAAU,GACVrZ,OAAQ/nD,KAAK+nD,OACbsZ,cAAe,SAACC,GAEd,OAAOA,GAETC,QAAQ,WAGRrd,IAAA/c,cAACq6B,KAAS,CACRC,UAAU,EACVC,QAAS1hE,KAAKs9D,gCAAgC,GAC9CvX,KAAM,SAACzzB,EAAG7kB,GAgBR,OAfU,IAANA,IACF3E,EAAKq0D,YAAc,IAGjB7qC,EAAElhB,KAAKrM,OAAS,EAClB+D,EAAKq0D,YAAY32D,KAAK,CACpBk4D,KAAMn8D,eAAI+vB,EAAElhB,MACZwtD,KAAMp8D,eAAI8vB,EAAElhB,QAGdtI,EAAKq0D,YAAY32D,KAAK,CACpBk4D,KAAMt1B,IACNw1B,MAAO,IAGJ,aAGX1a,IAAA/c,cAACw6B,KAAK,CAACC,SAAU,EAAGx4D,MAAM,qBAAqBuzC,SAAS,OAAOklB,eAAgB,SAACvvC,EAAG7kB,GAAC,MAAM,CAAE4hC,MAAO,OACnG6U,IAAA/c,cAAC26B,KAAK,CAAC14D,MAAM,YAAYuzC,SAAS,OAAOolB,WACvC,SAACrjC,EAAMsjC,GAEL,OAAO30C,SAASqR,EAAO51B,EAAKw0D,gCAAgC,GAAGv4D,QAAQwD,eAK5EvI,KAAK8+D,mBAKR5a,IAAA/c,cAAA,OACE1W,MAAO,MACP+M,OAAQ,OAER30B,GAAG,YACHlH,IAAK,SAAAi/D,GAAK,OAAK93D,EAAK82D,UAAYgB,IAIhC1c,IAAA/c,cAAA,QAAMnkC,EAAE,MAAMC,EAAE,MAAM49D,cAAY,SAASlkB,SAAS,OAAOmkB,eAAe,WAAU,4BACpF5c,IAAA/c,cAAC45B,KAAS,CACRC,UAAU,aACVC,YAAY,WACZzjC,OAAQx9B,KAAKg9D,UACbvsC,MAAOzwB,KAAK+8D,SACZmE,YAAY,EACZC,YAAY,EACZC,SAAU,GACVrZ,OAAQ/nD,KAAK+nD,OACbsZ,cAAe,SAACC,GACd,OAAOA,GAETC,QAAQ,WAGRrd,IAAA/c,cAACq6B,KAAS,CACRzb,KAAM,SAACzzB,EAAG7kB,GAgBR,OAfU,IAANA,IACF3E,EAAKs0D,cAAgB,IAGnB9qC,EAAElhB,KAAKrM,OAAS,EAClB+D,EAAKs0D,cAAc52D,KAAK,CACtBk4D,KAAMn8D,eAAI+vB,EAAElhB,MACZwtD,KAAMp8D,eAAI8vB,EAAElhB,QAGdtI,EAAKs0D,cAAc52D,KAAK,CACtBk4D,KAAMt1B,IACNw1B,MAAO,IAGJ,WAET6C,UAAU,EACVC,QAAS/gE,UAASC,MAAMC,MAAMuJ,cAAc1E,KAAI,SAACiD,GAC/C,OAAGA,EAAKyI,KAAKzP,IAAIqhB,OAAO,EACfra,EAAKyI,KAAKzP,IAAIqhB,OAEd,OAKbkhC,IAAA/c,cAACw6B,KAAK,CAACC,SAAU,EAAGx4D,MAAM,SAASuzC,SAAS,OAAOklB,eAAgB,SAACvvC,EAAG7kB,GAAC,MAAM,CAAE4hC,MAAO,OAEvF6U,IAAA/c,cAAC26B,KAAK,CAACF,SAAU,EAAGx4D,MAAM,YAAYuzC,SAAS,OAC7ColB,WACE,SAACrjC,EAAMsjC,GACL,OAAO30C,SAASqR,EAAO/9B,UAASC,MAAMC,MAAMuJ,cAAcrF,QAAQwD,eAIzEvI,KAAKogE,6BAMPlc,IAAA/c,cAAA,gBAOV21B,EAjnCM,CACqB5Y,IAAMgB,aAAS9mD,ICf9B,I,OAAA,SAAAkR,GAAA,IAAGs2C,EAAKt2C,EAALs2C,MAAOC,EAAQv2C,EAARu2C,SAAUjmD,EAAK0P,EAAL1P,MAAKkmD,EAAAx2C,EAAEy2C,YAAI,IAAAD,GAAQA,EAAA,OACpD5B,IAAA/c,cAAC6e,IAAM,CACLJ,MAAOA,EACPK,aAAcC,EACdC,YAAY,EACZC,aAAcP,GAEV3B,IAAA/c,cAAC6d,IAAM,CAACX,UAAS,eAAAp/C,OAAiB8gD,EAAOxB,IAAQc,KAAO,MAAQ3zC,KAAM9R,O,yCCK1Eg0B,GAAM5R,EAAQ,IAAoC6R,QAehDouC,GADLpe,qBAAQsD,GAAA,SAAArD,GAAAC,YAAAke,EAAAne,GAAA,IAAAE,EAAAC,YAAAge,GAeP,SAAAA,EAAYxb,GAAQ,IAADz+C,EAGY,OAHZ3J,YAAA,KAAA4jE,GACjBj6D,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,GAAMnoD,aAAA0J,EAAA,OAAAzJ,GAAA6tD,aAAApkD,MAXd+/C,OAAS,CAAEt1C,IAAK,GAAI2kB,MAAO,GAAIgZ,OAAQ,GAAI79B,KAAM,IAAIvK,EAErDyoB,MAA4B,IAApBlU,OAAOuzC,WAAoB9nD,EAAK+/C,OAAOx1C,KAAOvK,EAAK+/C,OAAO3wB,MAAKpvB,EACvEw1B,OAA8B,IAArBjhB,OAAOwzC,YAAqB/nD,EAAK+/C,OAAOt1C,IAAMzK,EAAK+/C,OAAO3X,OAAMpoC,EACzEk6D,GAAK,EAACl6D,EACNm6D,YAASj4D,EAASlC,EAClBo6D,YAAc,GAAEp6D,EAChBq6D,YAAc,GAAEr6D,EAShBs6D,YAAc,WAEZ,IAAIC,EAASC,EADb7hE,UAASC,MAAMC,MAAMuJ,cAAc9E,QAAO,SAAAqD,GAAI,OAAKmR,MAAM9N,WAAWrD,EAAKyI,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYC,OAAS8W,MAAM9N,WAAWrD,EAAKyI,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYE,QAGhL,IAAIw/D,EAAS,GACbz6D,EAAKw/C,SAAS,CACZkb,SAAU,KAGyB,kBAAjC/hE,UAASC,MAAMmC,YAAYC,GAC7Bu/D,EAAUv6D,EAAKq6D,YACfI,EAAOj8D,KAAK,kBAC8B,kBAAjC7F,UAASC,MAAMmC,YAAYC,GACpCu/D,EAAU5hE,UAASC,MAAM+F,SAASgI,MAAMjJ,KAAI,SAACkO,EAAMnG,GACjD,OAAOzB,WAAW4H,EAAe,aAEnC6uD,EAAOj8D,KAAK,mBAEZi8D,EAAOj8D,KAAK7F,UAASC,MAAMmC,YAAYC,GACvCu/D,EAAU5hE,UAASC,MAAMC,MAAMuJ,cAAc1E,KAAI,SAAC4sB,GAChD,OAAOtmB,WAAWsmB,EAAElhB,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYC,QAIvB,kBAAjCrC,UAASC,MAAMmC,YAAYE,GAC7Bu/D,EAAUx6D,EAAKq6D,YACfI,EAAOj8D,KAAK,kBAC8B,kBAAjC7F,UAASC,MAAMmC,YAAYE,GACpCu/D,EAAU7hE,UAASC,MAAM+F,SAASgI,MAAMjJ,KAAI,SAACkO,EAAMnG,GACjD,OAAOzB,WAAW4H,EAAe,aAEnC6uD,EAAOj8D,KAAK,mBAEZi8D,EAAOj8D,KAAK7F,UAASC,MAAMmC,YAAYE,GACvCu/D,EAAU7hE,UAASC,MAAMC,MAAMuJ,cAAc1E,KAAI,SAAC4sB,GAChD,OAAOtmB,WAAWsmB,EAAElhB,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYE,QAI5D,IAAIggB,EAAO,GACXA,EAAKzc,KAAKi8D,GACV,IAAK,IAAIh1D,EAAI,EAAGA,EAAI+0D,EAAQz9D,QAAU0I,EAAI80D,EAAQx9D,OAAQ0I,IACxDwV,EAAKzc,KAAK,CAAC+7D,EAAQ90D,GAAI+0D,EAAQ/0D,KAEjCzF,EAAKw/C,SAAS,CACZkb,SAAUz/C,KAIbjb,EAEDo3D,aAAe,SAAA9vD,GAASA,EAAN9G,OAAY8G,EAAJiH,KAAejH,EAATnF,UAAsBmF,EAAXwuD,YACzCn9D,UAASC,MAAMC,MAAMsJ,UAAY,GACjCxJ,UAASC,MAAMkE,cAAgB,GAC/BnE,UAASC,MAAMwc,cAAgB,IAEhCpV,EACDq3D,QAAU,SAAA9vD,GAASA,EAAN/G,OAAY+G,EAAJgH,KAAehH,EAATpF,UAAsBoF,EAAXuuD,aAErC91D,EACDs3D,WAAa,SAAApL,GAASA,EAAN1rD,OAAY0rD,EAAJ39C,KAAoC,IAA9BpM,EAAS+pD,EAAT/pD,UAAsB+pD,EAAX4J,YACvCn9D,UAASC,MAAMkE,cAAgB,GAC/B,IAAM69D,EAAkB,GAElBC,EADatX,kBAAOtjD,EAAK66D,KACJzE,UAAU,UACrC,GAAgB,MAAbj0D,EAAmB,CACpB,IAAMk0D,EAAc,CAClBwB,GAAI11D,EAAU,GAAG,GAAKnC,EAAK+/C,OAAOx1C,KAClC2+C,GAAI/mD,EAAU,GAAG,GAAKnC,EAAK+/C,OAAOx1C,KAClCutD,GAAI31D,EAAU,GAAG,GAAKnC,EAAK+/C,OAAOt1C,IAAMzK,EAAKk6D,GAC7C/Q,GAAIhnD,EAAU,GAAG,GAAKnC,EAAK+/C,OAAOt1C,IAAMzK,EAAKk6D,IAE/CnhE,QAAQC,IAAImJ,EAAU,GAAG,GAAIA,EAAU,GAAG,GAAGk0D,EAAYlN,GAAIkN,EAAYyB,IAEzE8C,EAAQtE,MAAK,SAAUhsC,EAAG7kB,GACxB,IAAMq1D,EAAS92D,WAAWs/C,kBAAOtrD,MAAMo8C,KAAK,OACtC2mB,EAAS/2D,WAAWs/C,kBAAOtrD,MAAMo8C,KAAK,OAC5Cr7C,QAAQC,IAAI8hE,EAAQC,GAChBD,GAAUzE,EAAYwB,IAAMiD,GAAUzE,EAAYnN,IAAM6R,GAAU1E,EAAYyB,IAAMiD,GAAU1E,EAAYlN,IAC5GwR,EAAgBn8D,KAAK8kD,kBAAOtrD,MAAMo8C,KAAK,UAQ3C,IAAM0b,EAAgBn3D,UAASC,MAAMC,MAAMuJ,cAAc9E,QAAO,SAAAqD,GAAI,OAElEg6D,EAAgB34D,SAASrB,EAAKE,OAGhClI,UAASC,MAAMC,MAAMsJ,UAAY2tD,EACjCn3D,UAASC,MAAMkE,cAAgBgzD,EAI/Bn3D,UAASC,MAAMC,MAAMmf,2BAIxBhY,EACDg7D,YAAc,kBACZ9e,IAAA/c,cAAC43B,KAIC,CAEAC,OACE,CAAC,CAACh3D,EAAK+/C,OAAOx1C,KAAOvK,EAAK+/C,OAAOt1C,KAAM,CAACzK,EAAKyoB,MAAQzoB,EAAK+/C,OAAOx1C,KAAMvK,EAAKw1B,OAASx1B,EAAK+/C,OAAOt1C,MAInGwsD,cAAe,SAAAx/C,GACb,IAAQkxB,EAAqBlxB,EAArBkxB,QAASC,EAAYnxB,EAAZmxB,QACjBqyB,EAAsBj7D,EAAK66D,IAAItlC,wBAE/B,MAAO,CAACoT,EAFIsyB,EAAJ1wD,KAEgBq+B,EAFPqyB,EAAHxwD,MAIhB0sD,UAAU,KACVC,aAAcp3D,EAAKo3D,aACnBC,QAASr3D,EAAKq3D,QACdC,WAAYt3D,EAAKs3D,cA/HnBt3D,EAAK46D,QAAU1e,IAAMgf,YACrBl7D,EAAKiQ,MAAQ,CAAEyqD,SAAU,IAAI16D,EAmY9B,OAlYAtI,YAAAuiE,EAAA,EAAAtiE,IAAA,SAAAC,MAgJD,WAAU,IAADkJ,EAAA,KAGP,GAAInI,UAASC,MAAM+e,SAAU,CAC3B,IAAI3c,EAAGC,EACP,GAAqC,oBAAjCtC,UAASC,MAAMmC,YAAYC,GAA4D,sBAAjCrC,UAASC,MAAMmC,YAAYC,EACnFA,EAAImgE,yBACDt7D,OAAO,CACN,EACArF,eAAI7B,UAASC,MAAMuc,iBAAiB,SAAUmV,GAC5C,OAAOtmB,WAAWsmB,EAAE3xB,UAASC,MAAMmC,YAAYC,SAGlD+E,MAAM,CAAC,EAAG/H,KAAKywB,aAEf,GAAqC,kBAAjC9vB,UAASC,MAAMmC,YAAYC,EAAuB,CACzD,IAAMogE,EAAeziE,UAASC,MAAM+F,SAASgI,MAAMjJ,KAAI,SAAUkO,EAAMnG,GACrE,OAAOmG,EAAW,KAAE7O,OAAS,KAE/Bq+D,EAAal2D,OACblN,KAAKmiE,OAASiB,EAAaA,EAAar+D,OAAS,GAEjD/E,KAAKqiE,YAAce,EAAa19D,KAAI,SAAC29D,EAAS51D,GAC5C,OAAgB,GAAZ41D,EACKv6D,EAAKq5D,OAAS,EAEdkB,KAGXrjE,KAAKqiE,YAAYn1D,OAUjBlK,EAAIsgE,wBACDz7D,OAAO7H,KAAKqiE,aACZt6D,MAAM,CAAC,EAAG/H,KAAKywB,aAGb,GAAqC,kBAAjC9vB,UAASC,MAAMmC,YAAYC,EAAuB,CAC3D,IAAMugE,EAAe5iE,UAASC,MAAM+F,SAASgI,MAAMjJ,KAAI,SAACkO,EAAMnG,GAC5D,OAAOzB,WAAW4H,EAAe,aAEnC5Q,EAAImgE,yBACDt7D,OAAO,CACN,EACArF,eAAI+gE,KAELx7D,MAAM,CAAC,EAAG/H,KAAKywB,aAIlBztB,EAAImgE,yBACDt7D,OAAO,CACN,EACArF,eAAI7B,UAASC,MAAMC,MAAMuJ,eAAe,SAAUkoB,GAChD,OAAOtmB,WAAWsmB,EAAElhB,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYC,SAG3D+E,MAAM,CAAC,EAAG/H,KAAKywB,QAGpB,GAAqC,oBAAjC9vB,UAASC,MAAMmC,YAAYE,GAA4D,sBAAjCtC,UAASC,MAAMmC,YAAYE,EACnFA,EAAIkgE,yBACDt7D,OAAO,CACN,EACArF,eAAI7B,UAASC,MAAMuc,iBAAiB,SAAUmV,GAC5C,OAAOtmB,WAAWsmB,EAAE3xB,UAASC,MAAMmC,YAAYE,SAGlD8E,MAAM,CAAC/H,KAAKw9B,OAAQ,SAEpB,GAAqC,kBAAjC78B,UAASC,MAAMmC,YAAYE,EAAuB,CAGzD,IAAMmgE,EAAeziE,UAASC,MAAM+F,SAASgI,MAAMjJ,KAAI,SAAUkO,EAAMnG,GACrE,OAAOmG,EAAW,KAAE7O,OAAS,KAE/Bq+D,EAAal2D,OACblN,KAAKmiE,OAASiB,EAAaA,EAAar+D,OAAS,GAEjD/E,KAAKqiE,YAAce,EAAa19D,KAAI,SAAC29D,EAAS51D,GAC5C,OAAgB,GAAZ41D,EACKv6D,EAAKq5D,OAAS,EAEdkB,KAGXrjE,KAAKqiE,YAAYn1D,OAAO4N,UAExB7X,EAAIqgE,wBACDz7D,OAAO7H,KAAKqiE,aACZt6D,MAAM,CAAC,EAAG/H,KAAKw9B,cAEb,GAAqC,kBAAjC78B,UAASC,MAAMmC,YAAYE,EAAuB,CAC3D,IAAMsgE,EAAe5iE,UAASC,MAAM+F,SAASgI,MAAMjJ,KAAI,SAAUkO,EAAMnG,GACrE,OAAOzB,WAAW4H,EAAe,aAEnC3Q,EAAIkgE,yBACDt7D,OAAO,CACN,EACArF,eAAI+gE,KAELx7D,MAAM,CAAC/H,KAAKw9B,OAAQ,SAGvBv6B,EAAIkgE,yBACDt7D,OAAO,CACN,EACArF,eAAI7B,UAASC,MAAMC,MAAMuJ,eAAe,SAAUkoB,GAChD,OAAOtmB,WAAWsmB,EAAElhB,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYE,SAG3D8E,MAAM,CAAC/H,KAAKw9B,OAAQ,IAKzB,OACE0mB,IAAA/c,cAAA,WAIE+c,IAAA/c,cAAA,OAAKZ,MAAO,CAAEt1B,QAAS,WACrBizC,IAAA/c,cAAA,KAAGkd,UAAU,oBAAoB9d,MAAO,CAAEt1B,QAAS,SAAU0rC,SAAS,SAAS,UAC/EuH,IAAA/c,cAAA,YACE+c,IAAA/c,cAAEq8B,GAAQ,CAACnf,UAAU,oBAAoB9d,MAAO,CAAEt1B,QAAS,UACzD20C,MAAOjlD,UAASC,MAAM6iE,6BACtB5d,SAAU,SAAA15C,GAAE,OAAKxL,UAASC,MAAMmC,YAAYC,EAAImJ,EAAGtG,MAAM,KAAKH,KAAI,SAACI,GAAC,OAAKA,EAAEC,OAAO,GAAGH,cAAgBE,EAAEG,UAAU,MAAIC,KAAK,MAC1HtG,MAAOe,UAASC,MAAMmC,YAAYC,EAAE4C,cAAcC,MAAM,KAAKH,KAAI,SAACI,GAAC,OAAKA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,UAAU,MAAIC,KAAK,QAEtH,mBAEPg+C,IAAA/c,cAAA,KAAGkd,UAAU,oBAAoB9d,MAAO,CAAEt1B,QAAS,SAAU0rC,SAAS,SAAU,UAChFuH,IAAA/c,cAAA,YACE+c,IAAA/c,cAACq8B,GAAQ,CACPnf,UAAU,oBACVuB,MAAOjlD,UAASC,MAAM6iE,6BACtB5d,SAAU,SAAA15C,GAAE,OAAKxL,UAASC,MAAMmC,YAAYE,EAAIkJ,EAAGtG,MAAM,KAAKH,KAAI,SAACI,GAAC,OAAKA,EAAEC,OAAO,GAAGH,cAAgBE,EAAEG,UAAU,MAAIC,KAAK,MAC1HtG,MAAOe,UAASC,MAAMmC,YAAYE,EAAE2C,cAAcC,MAAM,KAAKH,KAAI,SAACI,GAAC,OAAKA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,UAAU,MAAIC,KAAK,SAK/Hg+C,IAAA/c,cAAA,OAAKZ,MAAO,CAAEt1B,QAAS,YAIvBizC,IAAA/c,cAAA,WAEE+c,IAAA/c,cAAA,OACE1W,MAAOzwB,KAAKywB,MAAQzwB,KAAK+nD,OAAO3wB,MAAQp3B,KAAK+nD,OAAOx1C,KAAO,GAC3DirB,OAAQx9B,KAAKw9B,OAASx9B,KAAK+nD,OAAOt1C,IAAMzS,KAAK+nD,OAAO3X,OACpDiU,UAAU,eACVx7C,GAAG,cACHlH,IAAK,SAAAi/D,GAAK,OAAK93D,EAAK+5D,IAAMjC,IAG1B1c,IAAA/c,cAAA,KACE0B,UAAW,aAAe7oC,KAAK+nD,OAAOx1C,KAAO,IAAMvS,KAAK+nD,OAAOt1C,IAAM,IACrEge,MAAOzwB,KAAKywB,MACZ+M,OAAQx9B,KAAKw9B,OACb6mB,UAAU,QAET1jD,UAASC,MAAM+e,UAAYukC,IAAA/c,cAACu8B,GAAa,CAACzhE,MAAO,CAAEe,IAAGC,KAAKi/D,GAAIliE,KAAKkiE,GAAIvgE,IAAK3B,KAAK4iE,QAAST,OAAQniE,KAAKmiE,OAAQE,YAAariE,KAAKqiE,cACnIne,IAAA/c,cAAA,QAAMZ,MAAO,CAAEsC,UAAW,yBAA2B8T,SAAS,QAA0C,sBAAjCh8C,UAASC,MAAMmC,YAAYC,EAA6B,yBAA2BrC,UAASC,MAAMmC,YAAYC,EAAE4C,cAAcC,MAAM,KAAKH,KAAI,SAACI,GAAC,OAAKA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,UAAU,MAAIC,KAAK,MAC5Qg+C,IAAA/c,cAACw8B,GAAI,CACHC,KAAK,IACL/6B,UAAW,eAAiB7oC,KAAKw9B,OAAS,IAC1Cv7B,MAAyC,kBAAjCtB,UAASC,MAAMmC,YAAYC,EACjC6gE,wBAAa5hE,MAAMe,GAAG++D,YAAW,SAAC34D,GAChC,OAAIikB,SAASjkB,IAAWN,EAAKq5D,OAAS,EAC7B,OAEA/4D,KAGNy6D,wBAAa5hE,MAAMe,KAG5BkhD,IAAA/c,cAAA,QACE0B,UAAW,kCACX8T,SAAS,QACyB,sBAAjCh8C,UAASC,MAAMmC,YAAYE,EAA6B,yBAA2BtC,UAASC,MAAMmC,YAAYE,EAAE2C,cAAcC,MAAM,KAAKH,KAAI,SAACI,GAAC,OAAKA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,UAAU,MAAIC,KAAK,MACxMg+C,IAAA/c,cAACw8B,GAAI,CACHC,KAAK,IACL/6B,UAAU,iBACV5mC,MAAyC,kBAAjCtB,UAASC,MAAMmC,YAAYE,EACjC6gE,sBAAW7hE,MAAMgB,GAAG8+D,YAAW,SAAC34D,GAC9B,OAAIikB,SAASjkB,IAAWN,EAAKq5D,OAAS,EAC7B,OAEA/4D,KAIT06D,sBAAW7hE,MAAMgB,MAUU,kBAAjCtC,UAASC,MAAMmC,YAAYE,GAA4D,kBAAjCtC,UAASC,MAAMmC,YAAYC,GAC/C,oBAAjCrC,UAASC,MAAMmC,YAAYE,GAA8D,sBAAjCtC,UAASC,MAAMmC,YAAYC,GAClD,sBAAjCrC,UAASC,MAAMmC,YAAYE,GAAgE,oBAAjCtC,UAASC,MAAMmC,YAAYC,GACpD,kBAAjCrC,UAASC,MAAMmC,YAAYE,GAA4D,kBAAjCtC,UAASC,MAAMmC,YAAYC,GAClFhD,KAAKgjE,gBAGX9e,IAAA/c,cAAC6d,IAAM,CACLX,UAAU,aACV9d,MAAO,CAAEsC,UAAW,2BACpBr3B,QAAS,WACP,IAAIuyD,EAAW,IAAIC,GACfnB,EAAMpnC,SAASwZ,cAAc,gBACjC8uB,EAASE,MAAMpB,KACd,kBAIH3e,IAAA/c,cAAC+8B,WAAO,CAAC9yD,KAAMpR,KAAKiY,MAAMyqD,SAAUlxD,QAASxR,KAAKsiE,YAAa6B,cAAc,EAAMC,SAAS,eAC1FlgB,IAAA/c,cAAC6d,IAAM,CACLX,UAAU,aACV9d,MAAO,CAAEsC,UAAW,4BAErB,uBAQZo5B,EArZM,CACiB/d,IAAMgB,WAAS3mD,GAAA0C,aAAAkmD,GAAAjmD,UAAA,QAEtCC,eAAU,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAAQZ,UAASC,MAAMC,MAAMuJ,cAAc9E,QAAO,SAAAqD,GAAI,OAAKmR,MAAM9N,WAAWrD,EAAKyI,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYC,OAAS8W,MAAM9N,WAAWrD,EAAKyI,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYE,WAH5L7E,GAGiM+oD,MAAA/oD,GAsZpMulE,GADL9f,oBAAQ+S,GAAA,SAAAxP,GAAArD,YAAA4f,EAAAvc,GAAA,IAAAC,EAAApD,YAAA0f,GAAA,SAAAA,IAAA,OAAAtlE,YAAA,KAAAslE,GAAAtc,EAAA54C,MAAA,KAAAwa,WAmCN,OAnCMvpB,YAAAikE,EAAA,EAAAhkE,IAAA,oBAAAC,MAIP,WACE,IAAM+I,EAAO3I,KAAKqkE,KAAKrkE,KAAKymD,MAAMmd,MAClCtY,kBAAO3iD,GAAM6N,KAAKxW,KAAKymD,MAAMxkD,SAE9B,CAAAtC,IAAA,SAAAC,MAED,WACE,GAAIe,UAASC,MAAM+e,SAAU,CAC3B,IAAMhX,EAAO3I,KAAKqkE,KAAKrkE,KAAKymD,MAAMmd,MAGlC,OAFAtY,kBAAO3iD,GAAM6N,KAAKxW,KAAKymD,MAAMxkD,OAEN,KAAnBjC,KAAKymD,MAAMmd,KAEX1f,IAAA/c,cAAA,KACEkd,UAAU,QACVxb,UAAW7oC,KAAKymD,MAAM5d,UACtBlnC,IAAK3B,KAAKymD,MAAMmd,OAKlB1f,IAAA/c,cAAA,KAEE0B,UAAW7oC,KAAKymD,MAAM5d,UACtBlnC,IAAK3B,KAAKymD,MAAMmd,YAOzBD,EAnCM,CACUzf,IAAMgB,aAAS0R,GAsC5B8M,GADL7f,oBAAQmT,GAAA,SAAAC,GAAAlT,YAAA2f,EAAAzM,GAAA,IAAAC,EAAAjT,YAAAyf,GAAA,SAAAA,IAAA,IAAAj6D,EAAApL,YAAA,KAAAqlE,GAAA,QAAAjR,EAAAxpC,UAAAlkB,OAAA2tD,EAAA,IAAAxnD,MAAAunD,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAA1pC,UAAA0pC,GA+HN,OA/HMlpD,EAAAytD,EAAA1gD,KAAA/H,MAAAyoD,EAAA,OAAAjyD,OAAAytD,KAEP4R,gBAAkB,SAAC37D,EAAM47D,GASvB,MAAsC,kBAAjC5jE,UAASC,MAAMmC,YAAYE,GAA4D,kBAAjCtC,UAASC,MAAMmC,YAAYC,GAC/C,kBAAjCrC,UAASC,MAAMmC,YAAYE,GAA4D,kBAAjCtC,UAASC,MAAMmC,YAAYC,GAChD,sBAAjCrC,UAASC,MAAMmC,YAAYE,GAAgE,sBAAjCtC,UAASC,MAAMmC,YAAYC,GACpD,oBAAjCrC,UAASC,MAAMmC,YAAYE,GAA8D,oBAAjCtC,UAASC,MAAMmC,YAAYC,EAyC5C,mBAAhCrC,UAASC,MAAMmC,YAAYE,GAA4D,qBAAhCtC,UAASC,MAAMmC,YAAYC,GAC3D,qBAAhCrC,UAASC,MAAMmC,YAAYE,GAA8D,mBAAhCtC,UAASC,MAAMmC,YAAYC,EAiCxB,IAA1DrC,UAASC,MAAM4c,gCAAgCzY,OAC7CpE,UAASC,MAAM4c,gCAAgCxT,SAASw6D,OAAO77D,EAAW,OACrE,CACLo9C,KAAMplD,UAASC,MAAM0I,eAAeX,EAAW,MAC/C0sC,OAAQ,QACRglB,OAAQzmC,GAAIyE,eACZ+hC,YAAa,IAIR,CACLrU,KAAMplD,UAASC,MAAM0I,eAAeX,EAAW,MAC/C0sC,OAAQ,IACRglB,QAAQ,EACRD,YAAa,IAMR,CACLrU,KAAMplD,UAASC,MAAM0I,eAAeX,EAAW,MAC/C0sC,OAAQ,IACRglB,QAAQ,EACRD,YAAa,IAKZ,CAELrU,KAAMplD,UAASC,MAAMiC,MAAMb,MAC3BqzC,OAAQ,IACRglB,QAAQ,EACRD,YAAa,IA5GVz5D,UAASC,MAAMoc,kBAA2D,GAAvCrc,UAASC,MAAMkE,cAAcC,OAO1DpE,UAASC,MAAMoc,iBACpBrU,EAAKE,KAAOlI,UAASC,MAAMoc,iBAAiBnU,GACvC,CACLk9C,KAAMp9C,EAAK0B,WAAWrI,MACtBqzC,OAAQ,QACRglB,OAAQzmC,GAAIyE,eACZ+hC,YAAa,IAGR,CACLrU,KAAMp9C,EAAK0B,WAAWrI,MACtBqzC,OAAQ,IACRglB,QAAQ,EACRD,YAAa,IAGRz5D,UAASC,MAAMkE,cAAcC,OAAS,GACI,GAA/CpE,UAASC,MAAMkE,cAAcW,QAAQkD,GAChC,CACLo9C,KAAMp9C,EAAK0B,WAAWrI,MACtBqzC,OAAQ,IACRglB,QAAQ,EACRD,YAAa,IAGR,CACLrU,KAAMp9C,EAAK0B,WAAWrI,MACtBqzC,OAAQ,QACRglB,OAAQzmC,GAAIyE,eACZ+hC,YAAa,SAbZ,EAtBE,CACLrU,KAAMp9C,EAAK0B,WAAWrI,MACtBqzC,OAAQ,IACRglB,QAAQ,EACRD,YAAa,KA2GpB3wD,EAwPA,OAxPA/J,YAAAgkE,EAAA,EAAA/jE,IAAA,SAAAC,MAKD,WAAU,IAAD+K,EAAA,KACDsjB,EAAara,KAAKsa,QAAQvtB,UAASC,MAAMmQ,eAC/C,GAAIpQ,UAASC,MAAM+e,SAAU,CAC3B,IAAI8kD,EAAgB,GA8OpB,MA3OuC,oBAAjC9jE,UAASC,MAAMmC,YAAYC,GAA8D,sBAAjCrC,UAASC,MAAMmC,YAAYE,GACpD,sBAAjCtC,UAASC,MAAMmC,YAAYC,GAAgE,oBAAjCrC,UAASC,MAAMmC,YAAYE,EAIvFwhE,EAAgB9jE,UAASC,MAAMuc,gBAAgBjQ,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE9K,KAAO6K,EAAE7K,QAAMoD,KAAI,SAACg/D,EAASC,GAAE,OAE7FzgB,IAAA/c,cAAA,SACE+c,IAAA/c,cAAA,UACEy9B,GAAIj6D,EAAK87C,MAAMxkD,MAAMe,EAAE0hE,EAAQ/jE,UAASC,MAAMmC,YAAYC,IAC1D6hE,GAAIl6D,EAAK87C,MAAMxkD,MAAMgB,EAAEyhE,EAAQ/jE,UAASC,MAAMmC,YAAYE,IAC1DyyB,EAAGgvC,EAAc,KAAI,GAAK,GAAKA,EAAc,KAAI,EACjDn+B,MAAO57B,EAAK25D,gBAAgBI,EAASC,GACrC97D,GAAE,GAAA5D,OAAKy/D,EAAQtqD,MAsCf5I,QAAS,SAAC9J,GACJ/G,UAASC,MAAM4c,gCAAgCxT,SAAStC,EAAEc,OAAO4jB,aAAa,OAChFzrB,UAASC,MAAM4c,gCAAkC7c,UAASC,MAAM4c,gCAAgClY,QAAO,SAAAqD,GAAI,OACzGA,IAAUjB,EAAEc,OAAO4jB,aAAa,SAIlCzrB,UAASC,MAAM4c,gCAAgChX,KAAKkB,EAAEc,OAAO4jB,aAAa,OAG5E,IAAM0rC,EAAgBn3D,UAASC,MAAMC,MAAMuJ,cAAc9E,QAAO,SAAAqD,GAAI,OAElEhI,UAASC,MAAM4c,gCAAgCxT,SAASw6D,OAAO77D,EAAKyI,KAAKzP,IAAIhB,UAASC,MAAMkc,cAG9Fnc,UAASC,MAAMC,MAAMsJ,UAAY2tD,EACjCn3D,UAASC,MAAMkE,cAAgBgzD,EAI/Bn3D,UAASC,MAAMC,MAAMmf,0BAEvBrgB,IAAKglE,IAEPzgB,IAAA/c,cAAA,QAAMkd,UAAU,oBACdrhD,EAAG2H,EAAK87C,MAAMxkD,MAAMe,EAAE0hE,EAAQ/jE,UAASC,MAAMmC,YAAYC,IACzDC,EAAG0H,EAAK87C,MAAMxkD,MAAMgB,EAAEyhE,EAAQ/jE,UAASC,MAAMmC,YAAYE,KACxDyhE,EAAQtqD,UAM0B,kBAAjCzZ,UAASC,MAAMmC,YAAYC,GAA4D,kBAAjCrC,UAASC,MAAMmC,YAAYE,EAEzFwhE,EAAgB9jE,UAASC,MAAM+F,SAASgI,MAAMjJ,KAAI,SAACkO,EAAMnG,GAAC,OACxDy2C,IAAA/c,cAAA,UACEy9B,GAA2B,GAAvBhxD,EAAW,KAAE7O,OAAc4F,EAAK87C,MAAMxkD,MAAMe,EAAE2H,EAAK87C,MAAM0b,OAAS,GAAKx3D,EAAK87C,MAAMxkD,MAAMe,EAAE4Q,EAAW,KAAE7O,OAAS,GACpH8/D,GAAIl6D,EAAK87C,MAAMxkD,MAAMgB,EAAE+I,WAAW4H,EAAe,WACjD8hB,EAAG/qB,EAAK87C,MAAMyb,GACd37B,MAAO57B,EAAK25D,gBAAgB1wD,GAC5B/K,GAAE,GAAA5D,OAAK2O,EAAKvL,OAAM,gBAAApD,OAAK2O,EAAKpL,QAC5B4I,KAAMwC,EACNkxD,YAAa,SAACp9D,GAEZ,IAAAq9D,EAA6Br9D,EAAEc,OAAO4jB,aAAa,MAAMvmB,MAAM,gBAAKm/D,EAAAx1D,aAAAu1D,EAAA,GAA7DE,EAAQD,EAAA,GAAEE,EAAQF,EAAA,GAEzBt9D,EAAEc,OAAO+9B,MAAMwf,KAAO,sBAGtB,IACMpL,EADU1sB,EAAWK,KAAK22C,EAAUC,GACjBx/D,KAAI,SAACiD,GAC5B,OAAOhI,UAASC,MAAMC,MAAM4sB,QAAQ9kB,EAAKE,OAG3ClI,UAASC,MAAMsc,YAAc,CAC3B,SAAY+nD,EACZ,SAAYC,EACZ,SAAYvqB,GAGdh6C,UAASC,MAAMC,MAAM65C,sBAAsBC,IAK7CwqB,aAAc,SAACz9D,GAEbA,EAAEc,OAAO+9B,MAAMwf,KAAOplD,UAASC,MAAMiC,MAAMb,MAE3CrB,UAASC,MAAMC,MAAMD,MAAM8P,aAAY,SAAUpJ,GAE/C3G,UAASC,MAAMC,MAAM00B,iBAAiBjuB,EAAG,GAEzC3G,UAASC,MAAMC,MAAM+1B,cAActvB,GAAG,EAAOssB,GAAI0E,uBAInD33B,UAASC,MAAMC,MAAMm1B,cAAc,MACnCr1B,UAASC,MAAMsc,YAAc,MAI/Bvd,IAAK8N,OAKkC,kBAAjC9M,UAASC,MAAMmC,YAAYE,GAA4D,kBAAjCtC,UAASC,MAAMmC,YAAYC,EAC3FyhE,EAAgB9jE,UAASC,MAAM+F,SAASgI,MAAMjJ,KAAI,SAACkO,EAAMnG,GAAC,OACxDy2C,IAAA/c,cAAA,UACE09B,GAA2B,GAAvBjxD,EAAW,KAAE7O,OAAc4F,EAAK87C,MAAMxkD,MAAMgB,EAAE0H,EAAK87C,MAAM0b,OAAS,GAAKx3D,EAAK87C,MAAMxkD,MAAMgB,EAAE2Q,EAAW,KAAE7O,OAAS,GACpH6/D,GAAIj6D,EAAK87C,MAAMxkD,MAAMe,EAAEgJ,WAAW4H,EAAe,WACjD8hB,EAAG/qB,EAAK87C,MAAMyb,GACd37B,MAAO57B,EAAK25D,gBAAgB1wD,GAC5B/K,GAAE,GAAA5D,OAAK2O,EAAKvL,OAAM,gBAAApD,OAAK2O,EAAKpL,QAE5Bs8D,YAAa,SAACp9D,GAEZ,IAAA09D,EAA6B19D,EAAEc,OAAO4jB,aAAa,MAAMvmB,MAAM,gBAAKw/D,EAAA71D,aAAA41D,EAAA,GAA7DH,EAAQI,EAAA,GAAEH,EAAQG,EAAA,GAEzB39D,EAAEc,OAAO+9B,MAAMwf,KAAO,sBAGtB,IACMpL,EADU1sB,EAAWK,KAAK22C,EAAUC,GACjBx/D,KAAI,SAACiD,GAC5B,OAAOhI,UAASC,MAAMC,MAAM4sB,QAAQ9kB,EAAKE,OAG3ClI,UAASC,MAAMsc,YAAc,CAC3B,SAAY+nD,EACZ,SAAYC,EACZ,SAAYvqB,GAGdh6C,UAASC,MAAMC,MAAM65C,sBAAsBC,IAK7CwqB,aAAc,SAACz9D,GAEbA,EAAEc,OAAO+9B,MAAMwf,KAAOplD,UAASC,MAAMiC,MAAMb,MAC3CrB,UAASC,MAAMC,MAAMD,MAAM8P,aAAY,SAAUpJ,GAE/C3G,UAASC,MAAMC,MAAM00B,iBAAiBjuB,EAAG,GAEzC3G,UAASC,MAAMC,MAAM+1B,cAActvB,GAAG,EAAOssB,GAAI0E,uBAInD33B,UAASC,MAAMC,MAAMm1B,cAAc,MACnCr1B,UAASC,MAAMsc,YAAc,MAI/Bvd,IAAK8N,OAGkC,kBAAjC9M,UAASC,MAAMmC,YAAYE,GAA4D,kBAAjCtC,UAASC,MAAMmC,YAAYC,GACtD,kBAAjCrC,UAASC,MAAMmC,YAAYE,GAA4D,kBAAjCtC,UAASC,MAAMmC,YAAYC,IACrFyhE,EAAgB9jE,UAASC,MAAMC,MAAMuJ,cAAc1E,KAAI,SAACiD,EAAM8E,GAAC,OAC7Dy2C,IAAA/c,cAAA,UACEy9B,GAAIj6D,EAAK87C,MAAMxkD,MAAMe,EAAEgJ,WAAWrD,EAAKyI,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYC,KAC3E6hE,GAAIl6D,EAAK87C,MAAMxkD,MAAMgB,EAAE+I,WAAWrD,EAAKyI,KAAKzP,IAAIhB,UAASC,MAAMmC,YAAYE,KAC3EyyB,EAAG/qB,EAAK87C,MAAMyb,GACd37B,MAAO57B,EAAK25D,gBAAgB37D,GAC5BE,GAAIF,EAAKE,GACTuI,KAAMzI,EACNm8D,YAAa,SAACp9D,GAEZ,IAAM8zC,EAAU76C,UAASC,MAAMC,MAAM4sB,QAAQ/lB,EAAEc,OAAO88D,QAAQz8D,IAC9DlI,UAASC,MAAMoc,iBAAmBw+B,EAClC76C,UAASC,MAAMC,MAAM+1B,cAAc4kB,GAAS,GAC5C76C,UAASC,MAAMC,MAAMg2B,eAAe2kB,GAAS,IAG/C2pB,aAAc,SAACz9D,GACT/G,UAASC,MAAMmc,aAEnBpc,UAASC,MAAMC,MAAMD,MAAM8P,aAAY,SAAUpJ,GAE/C3G,UAASC,MAAMC,MAAM00B,iBAAiBjuB,EAAG,GAEzC3G,UAASC,MAAMC,MAAM+1B,cAActvB,GAAG,EAAOssB,GAAI0E,uBAInD33B,UAASC,MAAMC,MAAMm1B,cAAc,MACnCr1B,UAASC,MAAMoc,iBAAmB,OAUpCrd,IAAK8N,QAKJy2C,IAAA/c,cAAA,SAAIs9B,QAEdf,EAvXM,CACmBxf,IAAMgB,aAAS8R,GAyX5BiL,MCjzBApe,I,wBAAAA,gBA/Bf,WACE,OACEK,IAAA/c,cAAA,OAAKkd,UAAU,UAAU9d,MAAO,CAACpT,WAAYxyB,UAASwb,YAAYzb,gBAAkB,UAAY,eCsGrF6kE,IC1Gd1hB,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAyhB,EAAA1hB,GAAA,IAAAE,EAAAC,YAAAuhB,GAAA,SAAAA,IAAA,OAAAnnE,YAAA,KAAAmnE,GAAAxhB,EAAAv1C,MAAA,KAAAwa,WAeJ,OAfIvpB,YAAA8lE,EAAA,EAAA7lE,IAAA,SAAAC,MAEL,WACI,OACIskD,IAAA/c,cAAA,OACIkd,UAAWC,IAAW,qBACtB/d,MAAO,CACHmY,gBAAiB/9C,UAASwb,YAAYpc,SAAW,UAAY,UAC7DozB,WAAYxyB,UAASwb,YAAY3b,mBAAoB,UAAY,WAGrE0jD,IAAA/c,cAAA,OAAKkd,UAAWC,IAAW,4BAA6B3jD,UAASC,MAAMuE,SAAS0J,WAAalO,UAASC,MAAMuE,SAAS2J,WAAS,gBAAA7J,OAAoBtE,UAASC,MAAMuE,SAAS0J,UAAS,mBAAA5J,OAAkBtE,UAASC,MAAMuE,SAAS2J,UAAS,KAAI,kBAAgBnO,UAASC,MAAM6kE,gBACzQvhB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAW,6BAA6B,aAAW3jD,UAASC,MAAMkB,MAAMC,QAAQ,KAAGpB,UAASC,MAAMkB,MAAME,MAAMC,MAAM,eAAatB,UAASC,MAAMkB,MAAMO,OAAO,KAAG1B,UAASC,MAAMkB,MAAMQ,KAAKL,MAAM,UAG3NujE,EAfI,CACethB,IAAMgB,YDA7BrB,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAwhB,EAAAzhB,GAAA,IAAAE,EAAAC,YAAAshB,GAAA,SAAAA,IAAA,OAAAlnE,YAAA,KAAAknE,GAAAvhB,EAAAv1C,MAAA,KAAAwa,WAsGN,OAtGMvpB,YAAA6lE,EAAA,EAAA5lE,IAAA,SAAAC,MAEP,WAAU,IAADoI,EAAA,KAGD09D,EAAoB,EACxB,GAA4C,IAAxC/kE,UAASC,MAAMkE,cAAcC,QAC3BpE,UAASC,MAAMiuD,uBAAwB,CACvC,IAAM1mD,EAAiBxH,UAASC,MAAMiuD,uBAAuBz9C,KAAKzP,IAAIkH,GAAGN,WACzEm9D,EAAoB/kE,UAASC,MAAMoR,6BAA6B7J,GAAgB7C,QAAO,SAAAgC,GAAC,OAAIA,EAAE0B,YAAUjE,OAI9G,OACEm/C,IAAA/c,cAAA,OACIkd,UAAU,8BACV9d,MAAO,CACHmY,gBAAiB/9C,UAASwb,YAAYpc,SAAW,UAAY,YAGjEmkD,IAAA/c,cAACkvB,KAAO,CACJnsC,QAAQ,qBACRwH,SAAUsG,KAASyS,QAEnByZ,IAAA/c,cAAC6d,IAAM,CACHX,UAAWC,IAAW,CACtBC,IAAQyG,OACRzG,IAAQe,UAERlB,SAAS,MACT1yC,KAAK,MACLyM,OAAQC,IAAO6mC,QACfzzC,QAAS,WACT7Q,UAASC,MAAMC,MAAM+Q,mBACrB5J,EAAKiuD,kBAIb/R,IAAA/c,cAACkvB,KAAO,CACJnsC,QAAQ,uBACRwH,SAAUsG,KAASyS,QAEnByZ,IAAA/c,cAAC6d,IAAM,CACHX,UAAWC,IAAW,CACtBC,IAAQyG,OACRzG,IAAQe,UAERlB,SAAS,QACT1yC,KAAK,QACLyM,OAAQC,IAAOunD,QACfn0D,QAAS,WACT7Q,UAASC,MAAMC,MAAM8Q,qBACrB3J,EAAKiuD,kBAIb/R,IAAA/c,cAACkvB,KAAO,CACJnsC,QAAQ,sBACRwH,SAAUsG,KAASyS,QAEnByZ,IAAA/c,cAAC6d,IAAM,CACHX,UAAWC,IAAW,CACtBC,IAAQyG,OACRzG,IAAQe,UAERlB,SAAS,SACT1yC,KAAK,OACLyM,OAAQC,IAAOC,OACf7M,QAAS,WACT7Q,UAASC,MAAM6tD,UACX9tD,UAASC,MAAMC,MAAMwhD,kBAEzBr6C,EAAKiuD,kBAK6B,IAAxCt1D,UAASC,MAAMkE,cAAcC,QAC3Bm/C,IAAA/c,cAAA,OAAKZ,MAAO,CAAEt1B,QAAS,WACrBizC,IAAA/c,cAACkvB,KAAO,CACNnsC,QAAQ,uBACRwH,SAAUsG,KAASyS,QAEnByZ,IAAA/c,cAAC6d,IAAM,CACLX,UAAWC,IAAW,CACpBC,IAAQyG,OACRzG,IAAQe,UAEVlB,SAAS,QACT1yC,KAAI,cAAAzM,OAAgBygE,EAAiB,YACrCvnD,OAAQC,IAAO6mC,QACfzzC,QAAS,WACP7Q,UAASC,MAAMC,MAAMo/C,cACrBt/C,UAASwb,YAAY2yC,oBAAqB,EAC1C9mD,EAAKiuD,wBAQ1BsP,EAtGM,CAC0BrhB,IAAMgB,aAAS9mD,IE0EnCwnE,I,OA1Dd/hB,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA6hB,EAAA9hB,GAAA,IAAAE,EAAAC,YAAA2hB,GAAA,SAAAA,IAAA,OAAAvnE,YAAA,KAAAunE,GAAA5hB,EAAAv1C,MAAA,KAAAwa,WAuDN,OAvDMvpB,YAAAkmE,EAAA,EAAAjmE,IAAA,SAAAC,MAEP,WACE,OACEskD,IAAA/c,cAAA,OAAKkd,UAAWC,IACd,iBAEEJ,IAAA/c,cAAC6d,IAAM,CACLze,MAAO,CAACqmB,aAAc,OACtBvI,UAAWC,IAAW,CAACC,IAAQyG,SAC/B5G,SAAS,OACT5yC,QAAS,WACQ7Q,UAASm7B,SACfwU,QAAQ,QAKnB4T,IAAA/c,cAAA,WAGA+c,IAAA/c,cAAC6d,IAAM,CACPze,MAAO,CAACqmB,aAAc,OACtBvI,UAAWC,IAAW,CAACC,IAAQyG,SAC/B5G,SAAS,QACT5yC,QAAS,WACQ7Q,UAASm7B,SACfwU,QAAQ,OAInB4T,IAAA/c,cAAA,WAGA+c,IAAA/c,cAAC6d,IAAM,CACPze,MAAO,CAACqmB,aAAc,OACtBvI,UAAWC,IAAW,CAACC,IAAQyG,SAC/B5G,SAAS,OACT5yC,QAAS,WACQ7Q,UAASm7B,SACfniB,gBAepBisD,EAvDM,CACe1hB,IAAMgB,aAAS9mD,ICDjCynE,GADLhiB,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAA8hB,EAAA/hB,GAAA,IAAAE,EAAAC,YAAA4hB,GAAA,SAAAA,IAAA,OAAAxnE,YAAA,KAAAwnE,GAAA7hB,EAAAv1C,MAAA,KAAAwa,WAeN,OAfMvpB,YAAAmmE,EAAA,EAAAlmE,IAAA,SAAAC,MAEP,WACE,OACEskD,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,UAAI,eACJ+c,IAAA/c,cAAC2+B,KAAK,CAAClqC,SAAO,EAAC/yB,GAAG,iBAChBq7C,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,QAAQ87C,MAAM,QAAQqhB,MAAO9hB,IAAA/c,cAACqrB,GAAU,QACjDtO,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,QAAQ87C,MAAM,QAAQqhB,MAAO9hB,IAAA/c,cAAC0rB,GAAU,QACjD3O,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,SAAS87C,MAAM,SAASqhB,MAAO9hB,IAAA/c,cAAC6rB,GAAW,QAEpD9O,IAAA/c,cAAC2+B,KAAMG,SAAQ,YAItBJ,EAfM,CACuB3hB,IAAMgB,aAAS9mD,GAkBzC8nE,GADLriB,YAAQsD,GAAA,SAAAC,GAAArD,YAAAmiB,EAAA9e,GAAA,IAAAC,EAAApD,YAAAiiB,GAAA,SAAAA,IAAA,OAAA7nE,YAAA,KAAA6nE,GAAA7e,EAAA54C,MAAA,KAAAwa,WAcN,OAdMvpB,YAAAwmE,EAAA,EAAAvmE,IAAA,SAAAC,MAEP,WACE,OACEskD,IAAA/c,cAAA,WACE+c,IAAA/c,cAAA,UAAI,kBACJ+c,IAAA/c,cAAC2+B,KAAK,CAAClqC,SAAO,EAAC/yB,GAAG,kBAChBq7C,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,QAAQ87C,MAAM,QAAQqhB,MAAO9hB,IAAA/c,cAACysB,GAAgB,QACvD1P,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,QAAQ87C,MAAM,QAAQqhB,MAAO9hB,IAAA/c,cAAC0rB,GAAU,QAEjD3O,IAAA/c,cAAC2+B,KAAMG,SAAQ,YAItBC,EAdM,CACuBhiB,IAAMgB,aAASiC,G,IAmB9CtD,YAAQsiB,GAAA,SAAAlP,GAAAlT,YAAAqiB,EAAAnP,GAAA,IAAAC,EAAAjT,YAAAmiB,GAAA,SAAAA,IAAA,IAAAp+D,EAAA3J,YAAA,KAAA+nE,GAAA,QAAA3T,EAAAxpC,UAAAlkB,OAAA2tD,EAAA,IAAAxnD,MAAAunD,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAA1pC,UAAA0pC,GAiDL,OAjDK3qD,EAAAkvD,EAAA1gD,KAAA/H,MAAAyoD,EAAA,OAAAjyD,OAAAytD,KAEP2T,eAAiB,CACf9zD,KAAM,OACPvK,EACDs+D,iBAAmB,CACjB/zD,KAAM,SACPvK,EACDu+D,cAAgB,CACdtT,WAAY,QACbjrD,EACDw+D,cAAgB,CACdvT,WAAY,SACbjrD,EACDy+D,cAAgB,WACd9lE,UAASwb,YAAY/b,2BAA6BO,UAASwb,YAAY/b,2BACxE4H,EAED0+D,eAAiB,CACfn0D,KAAM,OACPvK,EACD2+D,iBAAmB,CACjBp0D,KAAM,SACPvK,EACD4+D,oBAAsB,CACpB3T,WAAY,QACbjrD,EACD6+D,oBAAsB,CACpB5T,WAAY,SACbjrD,EACD8+D,oBAAsB,WACpBnmE,UAASwb,YAAY9b,2BAA6BM,UAASwb,YAAY9b,2BACxE2H,EAED++D,eAAiB,CACf3vC,MAAO,OACRpvB,EACDg/D,iBAAmB,CACjB5vC,MAAO,SACRpvB,EACDi/D,qBAAuB,CACrBhU,WAAY,OACbjrD,EACDk/D,qBAAuB,CACrBjU,WAAY,QACbjrD,EAEDm/D,qBAAuB,WACrBxmE,UAASwb,YAAY7b,yBAA2BK,UAASwb,YAAY7b,yBACtE0H,EA6TA,OA7TAtI,YAAA0mE,EAAA,EAAAzmE,IAAA,SAAAC,MACD,WACE,OACEskD,IAAA/c,cAAA,OAAKkd,UAAU,oBACbH,IAAA/c,cAAA,OAAKkd,UAAU,aAAa9d,MAAO,CAAC8O,OAAQ,SACzC10C,UAAS0b,OAAOmE,WACf0jC,IAAA/c,cAAA,OACEkd,UAAWC,IACTC,IAAQiM,KACRjM,IAAQ6iB,YACR,eACA,sBAGFljB,IAAA/c,cAAA,OACEZ,MAAO,CACLt1B,QAAS,OACTo2D,eAAgB,OAChBC,WAAY,SAGdpjB,IAAA/c,cAAA,MAAIZ,MAAO,CAAE9V,MAAO,MACjB9vB,UAAS0b,OAAOkrD,cAAc,YAEjCrjB,IAAA/c,cAAA,OAAKZ,MAAO,CAAE9V,MAAO,MACrByzB,IAAA/c,cAAA,UAAI,SACJ+c,IAAA/c,cAAA,OAAKZ,MAAO,CAAE9V,MAAO,KACrByzB,IAAA/c,cAACmf,EAAY,CACX/f,MAAO,CAAE,gBAAiB,IAC1Bqf,MAAK,GAAA3gD,OAAAC,aAAMvE,UAASC,MAAMuE,SAASE,cAAY,CAAE,YACjDwgD,SAAU,SAAA15C,GAAE,OAAKxL,UAASC,MAAMguB,YAAcziB,GAC9CvM,MAAOe,UAASC,MAAMguB,eAG1Bs1B,IAAA/c,cAAA,SACEkd,UAAWC,IACTC,IAAQ4I,MACR5I,IAAQkY,cACRlY,IAAQijB,aAEVjhC,MAAO,CACL9V,MAAO,OACPmuB,WAAY,SAGdsF,IAAA/c,cAAA,aACGxmC,UAAS0b,OAAOoE,WAAW/a,KAAI,SAACiD,EAAM8E,GAAC,OACtCy2C,IAAA/c,cAAA,MACExnC,IAAK8N,EACLq3D,YAAa,kBACXnkE,UAASC,MAAMC,MAAM8f,iBACnB,CAAChY,EAAKwf,UACN,IAGJulB,YAAa,kBAAMvkC,YAAQR,EAAKwf,UAChCg9C,aAAc,kBACZxkE,UAASC,MAAMC,MAAM8f,iBACnB,CAAChY,EAAKwf,UACN,KAIJ+7B,IAAA/c,cAAA,UAAKx+B,EAAKhI,UAASC,MAAMkB,MAAMW,gBAKvCyhD,IAAA/c,cAAA,cACE+c,IAAA/c,cAAA,KACEuG,YAAa,WACP/sC,UAAS0b,OAAOorD,QAAU,IAC5B9mE,UAAS0b,OAAOorD,SAAW,EAC3B9mE,UAAS0b,OAAOoE,WAAa9f,UAAS0b,OAAOqrD,SAASxsD,MACpDva,UAAS0b,OAAOorD,QAAU9mE,UAAS0b,OAAOsrD,UACzChnE,UAAS0b,OAAOorD,QAAU,GAAK9mE,UAAS0b,OAAOsrD,aAIvD,YAEG,OAEyB,IAA5BhnE,UAAS0b,OAAOorD,QACfvjB,IAAA/c,cAAA,KACEuG,YAAa,WACX/sC,UAAS0b,OAAOorD,QAAU,EAC1B9mE,UAAS0b,OAAOoE,WAAa9f,UAAS0b,OAAOqrD,SAASxsD,MACpDva,UAAS0b,OAAOorD,QAAU9mE,UAAS0b,OAAOsrD,UACzChnE,UAAS0b,OAAOorD,QAAU,GAAK9mE,UAAS0b,OAAOsrD,YAGrD,SAIDzjB,IAAA/c,cAAA,KACEZ,MAAO,CACLvkC,MAAO,UACP4lE,cAAe,OACfC,OAAQ,YAGTlnE,UAAS0b,OAAOorD,QAAU,EAAE,QAE/B,MACCvjB,IAAA/c,cAAA,SAAG,QACLxmC,UAAS0b,OAAOyrD,MAAMpiE,KAAI,SAAA+H,GACzB,OACO,GAALA,GACAA,GAAK9M,UAAS0b,OAAO0rD,SACrBt6D,GAAK9M,UAAS0b,OAAOorD,QAGnBvjB,IAAA/c,cAAA,KACExnC,IAAK8N,EACL84B,MAAO,CACLvkC,MAAO,UACP4lE,cAAe,OACfC,OAAQ,YAGTlnE,UAAS0b,OAAOorD,QAAU,EAAE,QAI5B,GAALh6D,GACAA,GAAK9M,UAAS0b,OAAO0rD,UACnBt6D,EAAI9M,UAAS0b,OAAOorD,QAAU,GAC9Bh6D,EAAI9M,UAAS0b,OAAOorD,QAAU,GAC7B9mE,UAAS0b,OAAOorD,QAAU,GAAKh6D,EAAI,GACnC9M,UAAS0b,OAAOorD,QAAU9mE,UAAS0b,OAAO0rD,QAAU,GACnDt6D,EAAI9M,UAAS0b,OAAO0rD,QAAU,GAGhC7jB,IAAA/c,cAAA,KACExnC,IAAK8N,EACLigC,YAAa,WACX/sC,UAAS0b,OAAOorD,QAAUh6D,EAC1B9M,UAAS0b,OAAOoE,WAAa9f,UAAS0b,OAAOqrD,SAASxsD,MACpDva,UAAS0b,OAAOorD,QAAU9mE,UAAS0b,OAAOsrD,UACzChnE,UAAS0b,OAAOorD,QAAU,GAC3B9mE,UAAS0b,OAAOsrD,YAInBl6D,EAAI,EAAE,aArBN,KAyBN,UAEF9M,UAAS0b,OAAOorD,UAAY9mE,UAAS0b,OAAO0rD,QAC3C7jB,IAAA/c,cAAA,KACEuG,YAAa,WACX/sC,UAAS0b,OAAOorD,QAAU9mE,UAAS0b,OAAO0rD,QAC1CpnE,UAAS0b,OAAOoE,WAAa9f,UAAS0b,OAAOqrD,SAASxsD,MACpDva,UAAS0b,OAAOorD,QAAU9mE,UAAS0b,OAAOsrD,UACzChnE,UAAS0b,OAAOorD,QAAU,GAAK9mE,UAAS0b,OAAOsrD,YAInDhnE,UAAS0b,OAAO0rD,QAAU,EAAE,QAG/B7jB,IAAA/c,cAAA,KACEZ,MAAO,CACLvkC,MAAO,UACP4lE,cAAe,OACfC,OAAQ,YAGTlnE,UAAS0b,OAAOorD,QAAU,GAE7B,OAEFvjB,IAAA/c,cAAA,KACEuG,YAAa,WACP/sC,UAAS0b,OAAOorD,QAAU9mE,UAAS0b,OAAO0rD,UAC5CpnE,UAAS0b,OAAOorD,SAAW,EAC3B9mE,UAAS0b,OAAOoE,WAAa9f,UAAS0b,OAAOqrD,SAASxsD,MACpDva,UAAS0b,OAAOorD,QAAU9mE,UAAS0b,OAAOsrD,UACzChnE,UAAS0b,OAAOorD,QAAU,GAAK9mE,UAAS0b,OAAOsrD,aAIvD,QAGDzjB,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,WACA+c,IAAA/c,cAAA,UAAI,QAAMxmC,UAAS0b,OAAOorD,QAAU,KAI1CvjB,IAAA/c,cAAA,OACEkd,UAAWC,IACTC,IAAQiM,KACRjM,IAAQ6iB,YACR,eACA,oBACA,oBACA,aACA,gBAEF7gC,MAAO5lC,UAASwb,YAAY/b,0BAA4BJ,KAAKsmE,iBAAmBtmE,KAAKqmE,gBAErFniB,IAAA/c,cAAA,UAAQkd,UAAU,WAAW7yC,QAASxR,KAAKymE,eAAe,WAE1DviB,IAAA/c,cAAA,WACA+c,IAAA/c,cAAC0+B,GAAiB,OAKpB3hB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAMjM,IAAQ6iB,YAAa,eAC5D,qBAAsB7gC,MAAO,CAAE9V,MAAO,MAAOu3C,WAAY,MAAOC,aAAc,QAASC,cAAe,QAASjV,WAAY,WAC3H/O,IAAA/c,cAAA,UAAQkd,UAAU,UAAU7yC,QAASxR,KAAKymE,cAAelgC,MAAO5lC,UAASwb,YAAY/b,0BAA4BJ,KAAKumE,cAAgBvmE,KAAKwmE,eAAe,YA2C9JtiB,IAAA/c,cAAA,OAAKkd,UAAW,aAAc9d,MAAO,CAAEsmB,UAAU,QAC/C3I,IAAA/c,cAAA,OAGEkd,UAAWC,IACTC,IAAQiM,KACRjM,IAAQ6iB,YACR,eACA,oBACA,oBACA,aACA,iBAEF7gC,MAAO5lC,UAASwb,YAAY9b,0BAA4BL,KAAK2mE,iBAAmB3mE,KAAK0mE,gBAErFxiB,IAAA/c,cAAA,UAAQkd,UAAU,WAAW7yC,QAASxR,KAAK8mE,qBAAqB,WAEhE5iB,IAAA/c,cAAA,WACA+c,IAAA/c,cAAC++B,GAAiB,OAIpBhiB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAWC,IAAQiM,KAAMjM,IAAQ6iB,YAAa,eAC5D,qBAAsB7gC,MAAO,CAAE9V,MAAO,MAAOu3C,WAAY,MAAOC,aAAc,QAASC,cAAe,QAASjV,WAAY,WAC3H/O,IAAA/c,cAAA,UAAQkd,UAAU,UAAU7yC,QAASxR,KAAK8mE,oBAAqBvgC,MAAO5lC,UAASwb,YAAY9b,0BAA4BL,KAAK4mE,oBAAsB5mE,KAAK6mE,qBAAqB,YAwBhL3iB,IAAA/c,cAACghC,GAAO,MAGNxnE,UAASC,MAAMkE,cAAcC,OAAS,IAAMpE,UAASwb,YAAY1b,uBAAyByjD,IAAA/c,cAACo+B,GAAoB,MAGjHrhB,IAAA/c,cAACy+B,GAAS,WAGfQ,EA9WM,CACmBliB,IAAMgB,Y,sCC6WnBkjB,GA/YdvkB,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAqkB,EAAAtkB,GAAA,IAAAE,EAAAC,YAAAmkB,GAGL,SAAAA,EAAY3hB,GAAQ,IAADz+C,EAIb,OAJa3J,YAAA,KAAA+pE,IACfpgE,EAAAg8C,EAAAxtC,KAAA,KAAMiwC,IAOV4N,aAAe,WACX1zD,UAASC,MAAM+b,eAAiB,GAEhC,IAMI23C,EAAY,CACZ,KAAQ,WACR,QAAW,CACP,KAAQ,aAEZ,aAXe3zD,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAClD,OAAOA,EAAKv3B,aAWZ,WATa3H,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAChD,OAAOA,EAAKp3B,cAUhB8rD,KAAMC,KAAK,+CAAgDF,GAAWx8C,MAElE,SAACgG,GACG,IAAI22C,EAAgB32C,EAAS1M,KAAK8M,QAClCvd,UAASC,MAAMgc,WAAakB,EAAS1M,KAAKwL,WAC1Cjc,UAASC,MAAM+F,SAAS7E,MAAMwE,SAAQ,SAACqC,GACnCA,EAAK+rD,UAAYD,EAAc9rD,EAAKE,IAAM27D,OAAO6D,aAAa5T,EAAc9rD,EAAKE,IAAM,IAAO,OAElG,IAAMiD,EAAWnL,UAASC,MAAM+F,SAAS7E,MACnCsM,EAAczE,OAAOC,KAAKkC,EAAS,IACnC/B,EAAoB,GAC1BqE,EAAY9H,SAAQ,SAAUf,GAC1BwE,EAAkBxE,UAAauG,EAAS,GAAGvG,MAE/C,IAAM8I,EAAc,GACpBD,EAAY9H,SAAQ,SAAUf,EAAGkI,GAE7B,GAA4B,UAAxB1D,EAAkBxE,GAClB8I,EAAY9I,GAAEL,aAAO,IAAI+C,IAAI6D,EAASpG,KAAI,SAAAwC,GAAI,OAAIA,EAAK3C,YACpD,CACH,IAAM+I,EAASxC,EAASpG,KAAI,SAAU6I,GAAM,OAAOA,EAAGhJ,MAChDiJ,EAAOhH,KAAKjF,IAAGkM,MAARjH,KAAItC,aAAQoJ,IACnBI,EAAOlH,KAAKhF,IAAGiM,MAARjH,KAAItC,aAAQoJ,IACzBD,EAAY9I,GAAK,CAACiJ,EAAME,OAGhC/N,UAASC,MAAMuE,SAAS4E,kBAAoBA,EAC5CpJ,UAASC,MAAMuE,SAASkJ,YAAcA,EACtC1N,UAASC,MAAMuE,SAASC,eAAiBgJ,EAEzCzN,UAASC,MAAMkB,MAAME,MAAMC,MAAQ,gBACnCtB,UAASC,MAAMkB,MAAMC,QAAU,YAE/BpB,UAASC,MAAMkB,MAAM+a,aAAe,YACpClc,UAASC,MAAMkB,MAAMgb,QAAU,YAC/Bnc,UAASC,MAAM+vD,gBAAkBhwD,UAASC,MAAM+vD,gBAAkB,KAKtE,SAAC34C,GACGjX,QAAQC,IAAIgX,OAGvBhQ,EAEDsgE,gBAAkB,WAGd,IAUM1nE,EAAQmI,OAGdpI,UAASC,MAAM+F,SAAS7E,MAAMwE,SAAQ,SAAAqC,GAAI,OAAI/H,EAAMuI,QAAQR,EAAS,GAAEJ,WAAa,CAAE0D,KAAMD,WAAWrD,EAAW,MAAGoD,KAAMC,WAAWrD,EAAW,WACjJhI,UAASC,MAAM+F,SAAS9D,MAAMyD,SAAQ,SAAAu5B,GAAI,OAAIj/B,EAAM4I,QAAQq2B,EAAgB,UAAGA,EAAgB,cA+C7Fl/B,UAASC,MAAM+F,SAASgI,MA7CA,WACtB,IAAIsf,EAAara,KAAKsa,QAAQttB,GACxBssB,EAAW,GACXiB,EAAW,IAAIlmB,IAuCrB,OAnCArH,EAAM8P,aAAY,SAAUtE,GAE1BxL,EAAM8P,aAAY,SAAUrE,GAC1B,GAAID,EAASvD,KAAOwD,EAAOxD,GAAI,CAC7B,IAAMulB,EAAQ,GAAAnpB,OAAMmH,EAASvD,GAAE,gBAAA5D,OAAKoH,EAAOxD,IACrCwlB,EAAQ,GAAAppB,OAAMoH,EAAOxD,GAAE,gBAAA5D,OAAKmH,EAASvD,IAIvC0/D,GAHa5nE,UAASC,MAAM+F,SAAS9D,MAAMyC,QAAO,SAACu6B,GACrD,OAAQA,EAAKv3B,YAAc8D,EAASvD,IAAMg3B,EAAKp3B,YAAc4D,EAAOxD,MA9B9C,SAAC6E,EAAMC,EAAMC,EAAMC,GACjD,IAAI7G,EAAI,oBACJ8G,EAAItG,KAAKuG,IACTZ,EAAI,GAAMW,GAAGF,EAAOF,GAAQ1G,GAAK,EACnC8G,EAAEJ,EAAO1G,GAAK8G,EAAEF,EAAO5G,IACtB,EAAI8G,GAAGD,EAAOF,GAAQ3G,IAAM,EAE/B,OAAO,MAAQQ,KAAKwG,KAAKxG,KAAKyG,KAAKd,IAyBde,CAA0B9B,EAASgF,KAAKnF,KAAMG,EAASgF,KAAKrF,KAAMM,EAAO+E,KAAKnF,KAAMI,EAAO+E,KAAKrF,OAMzGoiB,EAASvlB,IAAIwlB,IAAgBD,EAASvlB,IAAIylB,KAC9CF,EAASzlB,IAAI0lB,GACbD,EAASzlB,IAAI2lB,GACbnB,EAAS1mB,KAAK,CACb,OAAS4F,EAASvD,GAClB,OAASwD,EAAOxD,GACjB,KAAQolB,EAAWK,KAAKliB,EAASvD,GAAIwD,EAAOxD,IAC5C,SAAY0/D,YAabr7C,EAGuBD,GAChCtsB,UAASC,MAAMuE,SAASE,aAAamB,KAAK,iBACxC7F,UAASC,MAAMuE,SAASE,aAAamB,KAAK,iBAC1C7F,UAASC,MAAMmC,YAAYC,EAAI,gBAC/BrC,UAASC,MAAMmC,YAAYE,EAAI,iBAEtC+E,EAED2sD,YAAc,WAEV,IAMIL,EAAY,CACZ,KAAQ,WACR,QAAW,CACP,KAAQ,UAEZ,aAXe3zD,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAClD,OAAOA,EAAKv3B,aAWZ,WATa3H,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAChD,OAAOA,EAAKp3B,cAUhB8rD,KAAMC,KAAK,6CAA8CF,GAAWx8C,MAChE,SAACgG,GACG,IAAI82C,EAAU92C,EAAS1M,KAAK8M,QAC5Bnd,QAAQC,IAAI4zD,MA4BhB,SAAC58C,GACGjX,QAAQC,IAAIgX,OAGvBhQ,EAED6sD,WAAa,SAACC,GAESn0D,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAClD,OAAOA,EAAKv3B,aAEC3H,UAASC,MAAM+F,SAAS9D,MAAM6C,KAAI,SAACm6B,GAChD,OAAOA,EAAKp3B,aAJhB,IAMI6rD,EAAY,CACZ,KAAQ,WACR,QAAW,CACP,KAAQ,UAEZ,MAASQ,EACT,MAASn0D,UAASC,MAAM+F,SAAS7E,OAGrCyyD,KAAMC,KAAK,gDAAiDF,GAAWx8C,MAGnE,SAACgG,GACG,IAAIi3C,EAAWppD,KAAKuD,MAAM4O,EAAS1M,MAC/B4jD,EAAaD,EAAS72C,QAG1Bvd,UAASC,MAAM+F,SAAS7E,MAAMwE,SAAQ,SAACqC,GACnCA,EAAKssD,SAAWD,EAAWrsD,EAAKE,OAEpC,IAAMiD,EAAWnL,UAASC,MAAM+F,SAAS7E,MACnCsM,EAAczE,OAAOC,KAAKkC,EAAS,IACnC/B,EAAoB,GAC1BqE,EAAY9H,SAAQ,SAAUf,GAC1BwE,EAAkBxE,UAAauG,EAAS,GAAGvG,MAE/C,IAAM8I,EAAc,GACpBD,EAAY9H,SAAQ,SAAUf,EAAGkI,GAE7B,GAA4B,UAAxB1D,EAAkBxE,GAClB8I,EAAY9I,GAAEL,aAAO,IAAI+C,IAAI6D,EAASpG,KAAI,SAAAwC,GAAI,OAAIA,EAAK3C,YACpD,CACH,IAAM+I,EAASxC,EAASpG,KAAI,SAAU6I,GAAM,OAAOA,EAAGhJ,MAChDiJ,EAAOhH,KAAKjF,IAAGkM,MAARjH,KAAItC,aAAQoJ,IACnBI,EAAOlH,KAAKhF,IAAGiM,MAARjH,KAAItC,aAAQoJ,IACzBD,EAAY9I,GAAK,CAACiJ,EAAME,OAGhC/N,UAASC,MAAMuE,SAAS4E,kBAAoBA,EAC5CpJ,UAASC,MAAMuE,SAASkJ,YAAcA,EACtC1N,UAASC,MAAMuE,SAASC,eAAiBgJ,EAGzCzN,UAASC,MAAMkB,MAAME,MAAMC,MAAQ,gBACnCtB,UAASC,MAAMkB,MAAMC,QAAU+yD,EAC/Bn0D,UAASC,MAAM+5D,oBAAqB,EACpCh6D,UAASC,MAAM+vD,gBAAkBhwD,UAASC,MAAM+vD,gBAAkB,EASlEhwD,UAASC,MAAM+b,eAAiBo4C,EAASG,aACzCn0D,QAAQC,IAAIL,UAASC,MAAM+b,mBAoB/B,SAAC3E,GACGjX,QAAQC,IAAIgX,OAGvBhQ,EAGDmtD,iBAAmB,SAACL,GAQhB,IAAIR,EAAY,CACZ,KAAQ,WACR,QAAW,CACP,KAAQ,oBAEZ,MAASQ,EACT,MAASn0D,UAASC,MAAM+F,SAAS7E,MACjC,MAASnB,UAASC,MAAM+F,SAAS9D,OAIrC0xD,KAAMC,KAAK,qDAAsDF,GAAWx8C,MACxE,SAACgG,GACG,IAAIi3C,EAAWppD,KAAKuD,MAAM4O,EAAS1M,MAGnCzQ,UAASC,MAAMuE,SAASE,aAAamB,KAAK,qBAC1C7F,UAASC,MAAMuE,SAASE,aAAamB,KAAK,mBAE1C7F,UAASC,MAAMuc,gBAAkB43C,EAASI,iBAC1Cx0D,UAASC,MAAMmC,YAAYE,EAAI,oBAC/BtC,UAASC,MAAMmC,YAAYC,EAAI,kBAC/BrC,UAASC,MAAMkc,QAAUg4C,EACzBn0D,UAASC,MAAMkB,MAAMC,QAAU+yD,EAC/Bn0D,UAASC,MAAMkB,MAAME,MAAMC,MAAQ,gBACnCtB,UAASC,MAAM+vD,gBAAkBhwD,UAASC,MAAM+vD,gBAAkB,KAItE,SAAC34C,GACGjX,QAAQC,IAAIgX,OAnUpBhQ,EAAKiQ,MAAQ,GAEXjQ,EAqYL,OApYAtI,YAAA0oE,EAAA,EAAAzoE,IAAA,SAAAC,MAsUD,WAAU,IAADkJ,EAAA,KAEL,OAEQo7C,IAAA/c,cAAA,WACI+c,IAAA/c,cAAC6d,IAAM,CACHX,UAAU,aACV9d,MAAO,CAAE8O,OAAQ,QACjB7jC,QAASxR,KAAKsoE,iBAAiB,qBACnCpkB,IAAA/c,cAAC6d,IAAM,CACHX,UAAU,aACV9d,MAAO,CAAE8O,OAAQ,QACjB7jC,QAASxR,KAAKq0D,cAAc,iBAI/B1zD,UAASC,MAAMgc,WAAYsnC,IAAA/c,cAAA,QAAMkd,UAAU,iBAAiB9d,MAAO,CAACoW,SAAU,QAAW,YAAc3wC,WAAWrL,UAASC,MAAMgc,YAAYwwC,QAAQ,IAAY,KAelKlJ,IAAA/c,cAAA,WACI+c,IAAA/c,cAAA,KAAGZ,MAAO,CAAEt1B,QAAS,SAAW0rC,SAAS,SAAU,oBACnDuH,IAAA/c,cAAA,QAAMZ,MAAO,IACT2d,IAAA/c,cAACmf,EAAY,CACTV,MAAOjlD,UAASC,MAAM8vD,cACtB7K,SAAU,SAAA15C,GACNxL,UAASC,MAAMic,aAAe1Q,EAC9BrD,EAAK+rD,WAAW1oD,GAChBxL,UAASC,MAAM+5D,oBAAqB,GAExC/6D,MAAOe,UAASC,MAAMic,iBAIlCqnC,IAAA/c,cAAA,WACI+c,IAAA/c,cAAA,KAAGZ,MAAO,CAAEt1B,QAAS,SAAW0rC,SAAS,SAAU,gBACnDuH,IAAA/c,cAAA,QAAMZ,MAAO,IACT2d,IAAA/c,cAACmf,EAAY,CACTV,MAAOjlD,UAASC,MAAM8vD,cACtB7K,SAAU,SAAA15C,GACNxL,UAASC,MAAMkc,QAAU3Q,EACzBrD,EAAKqsD,iBAAiBhpD,IAE1BvM,MAAOe,UAASC,MAAMkc,iBAQjDsrD,EA5YI,CACoBlkB,IAAMgB,aAAS9mD,GCmF3BoqE,GAlGJ,SAAA1kB,GAAAC,YAAAykB,EAAA1kB,GAAA,IAAAE,EAAAC,YAAAukB,GAAA,SAAAA,IAAA,OAAAnqE,YAAA,KAAAmqE,GAAAxkB,EAAAv1C,MAAA,KAAAwa,WA+FR,OA/FQvpB,YAAA8oE,EAAA,EAAA7oE,IAAA,WAAAC,MACT,SAAS6oE,GACL,IAAIh7D,EACAzK,EAAIy4B,SAASitC,uBAAuB,QACxC,IAAKj7D,EAAI,EAAGA,EAAIzK,EAAE+B,OAAQ0I,IACxBzK,EAAEyK,GAAG84B,MAAMt1B,QAAU,OAEvBwqB,SAASsZ,eAAe0zB,GAAUliC,MAAMt1B,QAAU,UACrD,CAAAtR,IAAA,SAAAC,MAED,WACE,OAAOe,UAASC,MAAMC,OACpBqjD,IAAA/c,cAACwhC,KAAW,KACRzkB,IAAA/c,cAAA,OAAKorB,MAAM,qBACPrO,IAAA/c,cAAA,OAAKorB,MAAM,mBACPrO,IAAA/c,cAAA,UAAQorB,MAAM,yDAAyD/gD,QAASxR,KAAK4oE,SAASxpB,KAAKp/C,KAAM,eAAe,cACxHkkD,IAAA/c,cAAA,UAAQorB,MAAM,yDAAyD/gD,QAASxR,KAAK4oE,SAASxpB,KAAKp/C,KAAM,WAAW,UACpHkkD,IAAA/c,cAAA,UAAQorB,MAAM,yDAAyD/gD,QAASxR,KAAK4oE,SAASxpB,KAAKp/C,KAAM,eAAe,eAE5HkkD,IAAA/c,cAAA,OAAKt+B,GAAG,aAAa0pD,MAAM,QACvBrO,IAAA/c,cAAA,QAAMZ,MAAO,CAACoW,SAAU,SAAS,eACjCuH,IAAA/c,cAAC2+B,KAAK,CAAClqC,SAAO,EAAC/yB,GAAG,iBAClBq7C,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,UAAU87C,MAAM,QAAQqhB,MAAO9hB,IAAA/c,cAACqrB,GAAU,QACnDtO,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,UAAU87C,MAAM,QAAQqhB,MAAO9hB,IAAA/c,cAAC0rB,GAAU,QACnD3O,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,WAAW87C,MAAM,SAASqhB,MAAO9hB,IAAA/c,cAAC6rB,GAAW,QAEtD9O,IAAA/c,cAAC2+B,KAAMG,SAAQ,QAGnB/hB,IAAA/c,cAAA,OAAKt+B,GAAG,SAAS0pD,MAAM,OAAOhsB,MAAO,CAACt1B,QAAQ,SAC9CizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACoW,SAAU,SAAS,kBAC7BuH,IAAA/c,cAAC2+B,KAAK,CAAClqC,SAAO,EAAC/yB,GAAG,kBAClBq7C,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,UAAU87C,MAAM,QAAQqhB,MAAO9hB,IAAA/c,cAACysB,GAAgB,QAGzD1P,IAAA/c,cAAC2+B,KAAMG,SAAQ,QAGnB/hB,IAAA/c,cAAA,OAAKt+B,GAAG,aAAa0pD,MAAM,OAAOhsB,MAAO,CAACt1B,QAAQ,SAClDizC,IAAA/c,cAAA,QAAMZ,MAAO,CAACoW,SAAU,SAAS,cAC7BuH,IAAA/c,cAAC2+B,KAAK,CAAClqC,SAAO,EAAC/yB,GAAG,kBAClBq7C,IAAA/c,cAAC4+B,KAAI,CAACl9D,GAAG,WAAW87C,MAAM,SAASqhB,MAAO9hB,IAAA/c,cAACihC,GAAc,QACzDlkB,IAAA/c,cAAC2+B,KAAMG,SAAQ,QAGnB/hB,IAAA/c,cAAA,OAAKt+B,GAAG,YAAYw7C,UAAWC,IAAWC,IAAQqE,cAC9C1E,IAAA/c,cAAA,SAAOkd,UAAWE,IAAQ4I,MAAO5mB,MAAO,CAAC9V,MAAO,SAC5CyzB,IAAA/c,cAAA,aACI+c,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,MAAI0hC,QAAQ,IAAItiC,MAAO,CAAC6wB,UAAW,WAAWlT,IAAA/c,cAAC4zB,KAAG,KAAC,iBAI3D7W,IAAA/c,cAAA,aACI+c,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,WACJ+c,IAAA/c,cAAA,UAAKxmC,UAASC,MAAMuE,SAAS0J,YAEjCq1C,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,WACJ+c,IAAA/c,cAAA,UAAKxmC,UAASC,MAAMuE,SAAS2J,YAEjCo1C,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,kBACJ+c,IAAA/c,cAAA,UACCxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAMoiB,OAAOoqC,QAAQ,GAAK,kBAGlElJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,mBACJ+c,IAAA/c,cAAA,UACCxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAMysD,QAAQD,QAAQ,GAAK,kBAGnElJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,oBACJ+c,IAAA/c,cAAA,UACCxmC,UAASC,MAAM+e,SAAWhf,UAASC,MAAM0sD,SAAW,kBAGzDpJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,aAAU+c,IAAA/c,cAAA,WAAS,eACvB+c,IAAA/c,cAAA,UAAMxmC,UAASC,MAAM+e,SAAYhf,UAASC,MAAM2hB,kBAAkB6qC,QAAQ,GAAK,kBAEnFlJ,IAAA/c,cAAA,UACI+c,IAAA/c,cAAA,UAAI,aAAU+c,IAAA/c,cAAA,WAAS,aACvB+c,IAAA/c,cAAA,UAAMxmC,UAASC,MAAM+e,SAAYhf,UAASC,MAAM2sD,WAAa,2BASxFib,EA/FQ,CAAStkB,IAAMgB,WCuB5Bh9B,cACA4gD,IAAkBC,sBAElBl6C,cAEAluB,UAASwb,YAAY6sD,iBAErB,IAAQC,GAA4BC,KAA5BD,OAAQE,GAAoBD,KAApBC,UAAWC,GAASF,KAATE,EAAGC,GAAMH,KAANG,EAG9B,SAASC,KACF3oE,UAASC,MAAMC,OAIhB0b,OAAOuzC,WAAa9rC,uBAAuBzH,OAAOwzC,YAAc9rC,yBAClEtjB,UAASwb,YAAYm6C,oBAJrB/5C,OAAO4D,WAAWmpD,GAAiB,KASvCA,KAEA/sD,OAAOiD,iBAAiB,SAAU8pD,IAAiB,IAuNpCC,GArNdC,aAAOprE,GACPylD,YAAQzlD,GAAA,SAAA0lD,GAAAC,YAAAwlB,EAAAzlB,GAAA,IAAAE,EAAAC,YAAAslB,GAAA,SAAAA,IAAA,OAAAlrE,YAAA,KAAAkrE,GAAAvlB,EAAAv1C,MAAA,KAAAwa,WAiNN,OAjNMvpB,YAAA6pE,EAAA,EAAA5pE,IAAA,4BAAAC,MAKP,SAAA0P,GAAwC,IAAZk6D,EAAOl6D,EAAPk6D,QACtBA,EAAQ/pD,QACN+pD,EAAQ/pD,MAAMy5B,QAAU+vB,IAAUO,EAAQ/pD,MAAMy5B,QAAUiwB,GACxDxoE,WAAYA,UAASC,OAASD,UAASC,MAAMC,QAC/CF,UAASC,MAAM6tD,UAAU9tD,UAASC,MAAMC,MAAMwhD,kBAC9CriD,KAAKi2D,eAEEuT,EAAQ/pD,MAAMy5B,QAAUkwB,GAC7BzoE,WAAYA,UAASC,OAASD,UAASC,MAAMC,OAC/CF,UAASC,MAAMC,MAAM+Q,mBAEd43D,EAAQ/pD,MAAMy5B,QAAUmwB,IAC7B1oE,WAAYA,UAASC,OAASD,UAASC,MAAMC,OAC/CF,UAASC,MAAMC,MAAM8Q,wBAI5B,CAAAhS,IAAA,SAAAC,MACD,WA0HE,OAzHA67B,SAASjc,iBAAiB,oBAAoB,WAE5C,IAAMiqD,EAAUhuC,SAASsZ,eAAe,YAClC20B,EAAWD,EAAQE,uBACnBC,EAAYH,EAAQI,mBAItB5mE,EAAI,EACJ6mE,EAAW,EAeTC,EAAmB,SAAUriE,GAEtBA,EAAEipC,QAAb,IACMiB,EAAKlqC,EAAEkpC,QAAU3tC,EAEjB+mE,EAAmC,KAAjBF,EAAWl4B,GAAa63B,EAAQjjC,WAAWjJ,wBAAwBC,OAC3FksC,EAASnjC,MAAM/I,OAAM,GAAAv4B,OAAM+kE,EAAa,KAExCP,EAAQljC,MAAMshC,OAAS,aACvBpsC,SAASzd,KAAKuoB,MAAMshC,OAAS,aAE7B6B,EAASnjC,MAAMqY,WAAa,OAC5B8qB,EAASnjC,MAAMqhC,cAAgB,OAE/BgC,EAAUrjC,MAAMqY,WAAa,OAC7BgrB,EAAUrjC,MAAMqhC,cAAgB,QAG5BqC,EAAiB,SAAjBA,IACJR,EAAQljC,MAAM2jC,eAAe,UAC7BzuC,SAASzd,KAAKuoB,MAAM2jC,eAAe,UAEnCR,EAASnjC,MAAM2jC,eAAe,eAC9BR,EAASnjC,MAAM2jC,eAAe,kBAE9BN,EAAUrjC,MAAM2jC,eAAe,eAC/BN,EAAUrjC,MAAM2jC,eAAe,kBAG/BzuC,SAAS+R,oBAAoB,YAAau8B,GAC1CtuC,SAAS+R,oBAAoB,UAAWy8B,IAI1CR,EAAQjqD,iBAAiB,aA7CA,SAAU9X,GAE7BA,EAAEipC,QACN1tC,EAAIyE,EAAEkpC,QACNk5B,EAAWJ,EAASnsC,wBAAwBC,OAG5C/B,SAASjc,iBAAiB,YAAauqD,GACvCtuC,SAASjc,iBAAiB,UAAWyqD,SAuCzCxuC,SAASjc,iBAAiB,oBAAoB,WAE5C,IAAMiqD,EAAUhuC,SAASsZ,eAAe,UAClC20B,EAAWD,EAAQE,uBACnBC,EAAYH,EAAQI,mBAGtB7mE,EAAI,EAEJmnE,EAAY,EAeVJ,EAAmB,SAAUriE,GAEjC,IAAMiqC,EAAKjqC,EAAEipC,QAAU3tC,EAGjBonE,GAFK1iE,EAAEkpC,QAE4B,KAAlBu5B,EAAYx4B,GAAa83B,EAAQjjC,WAAWjJ,wBAAwB9M,OAC3Fi5C,EAASnjC,MAAM9V,MAAK,GAAAxrB,OAAMmlE,EAAY,KAEtCX,EAAQljC,MAAMshC,OAAS,aACvBpsC,SAASzd,KAAKuoB,MAAMshC,OAAS,aAE7B6B,EAASnjC,MAAMqY,WAAa,OAC5B8qB,EAASnjC,MAAMqhC,cAAgB,OAE/BgC,EAAUrjC,MAAMqY,WAAa,OAC7BgrB,EAAUrjC,MAAMqhC,cAAgB,QAG5BqC,EAAiB,SAAjBA,IACJR,EAAQljC,MAAM2jC,eAAe,UAC7BzuC,SAASzd,KAAKuoB,MAAM2jC,eAAe,UAEnCR,EAASnjC,MAAM2jC,eAAe,eAC9BR,EAASnjC,MAAM2jC,eAAe,kBAE9BN,EAAUrjC,MAAM2jC,eAAe,eAC/BN,EAAUrjC,MAAM2jC,eAAe,kBAG/BzuC,SAAS+R,oBAAoB,YAAau8B,GAC1CtuC,SAAS+R,oBAAoB,UAAWy8B,IAI1CR,EAAQjqD,iBAAiB,aA7CA,SAAU9X,GAEjC1E,EAAI0E,EAAEipC,QACFjpC,EAAEkpC,QACNu5B,EAAYT,EAASnsC,wBAAwB9M,MAG7CgL,SAASjc,iBAAiB,YAAauqD,GACvCtuC,SAASjc,iBAAiB,UAAWyqD,SAyCvC/lB,IAAA/c,cAAA,OAAKkd,UAAWC,IAAW,CACzB,eAAe,IACb/d,MAAO,CAACt1B,QAAS,SACnBizC,IAAA/c,cAAA,WACA+c,IAAA/c,cAAC4vB,GAAc,OAEf7S,IAAA/c,cAAA,OAAKorB,MAAM,YAAYhsB,MAAO,CAACyhC,WAAW,MAAOqC,SAAS,QAAS7sC,OAAO,SACxE0mB,IAAA/c,cAAA,OAAKorB,MAAM,YAAYhsB,MAAO,CAAC/I,OAAO,SACpC0mB,IAAA/c,cAACqhC,GAAO,MAERtkB,IAAA/c,cAAA,OAAKorB,MAAM,mBACTrO,IAAA/c,cAAA,OAAKorB,MAAM,0BACTrO,IAAA/c,cAAA,OAAKorB,MAAM,mBACN5xD,UAASC,MAAM+e,UAAYukC,IAAA/c,cAAC4zB,KAAG,CAAC1W,UAAU,eAAc,WACzDH,IAAA/c,cAAA,QAAMkd,UAAU,QACZ1jD,UAASC,MAAM+e,WAAchf,UAASyb,OAAOqB,QAC7CymC,IAAA/c,cAACkwB,GAAU,MAEXnT,IAAA/c,cAACgwB,GAAa,OAIlBjT,IAAA/c,cAACwoB,GAAO,OAEZzL,IAAA/c,cAAA,OAAKorB,MAAM,UAAU1pD,GAAG,WACxBq7C,IAAA/c,cAAA,OAAKorB,MAAM,oBACP5xD,UAASC,MAAM+e,WAAchf,UAASyb,OAAOqB,QAC7CymC,IAAA/c,cAACqyB,GAAO,MAERtV,IAAA/c,cAACgwB,GAAa,QAKpBjT,IAAA/c,cAAA,OAAKorB,MAAM,aAAa1pD,GAAG,aAC3Bq7C,IAAA/c,cAAA,OAAKorB,MAAM,2BAA2B1pD,GAAG,WACvCq7C,IAAA/c,cAAA,OAAKZ,MAAO,CACVt1B,QAAS,OAAQusB,OAAQ,OAAO/M,MAAO,SAKtC9vB,UAASC,MAAMC,OAAUqjD,IAAA/c,cAAC21B,GAAe,OAE5C5Y,IAAA/c,cAAA,OAAKZ,MAAO,CACVt1B,QAAS,OAAQusB,OAAQ,SAMzB0mB,IAAA/c,cAAA,OAAKt+B,GAAG,gBACLlI,UAASC,MAAM+e,UAAYhf,UAASC,MAAMC,YAAsDqJ,IAA5CvJ,UAASC,MAAM+F,SAAS7E,MAAM,GAAGkhB,QAAwBkhC,IAAA/c,cAAE86B,GAAW,iBAW5IsH,EAjNM,CACSrlB,IAAMgB,aAAS9mD,Q,mCCnD7BksE,IAAStuC,OAAOkoB,IAAA/c,cAACoiC,GAAG,MAAI9tC,SAASsZ,eAAe,W","file":"static/js/main.95c7a78c.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter } from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor: [\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot: {\r\n      x: 'degree',\r\n      y: 'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  @observable filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable autoZoom = true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on \r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\"pagerank\", \"degree\", 'centrality', 'distance to center', 'betweeness centrality', 'closeness centrality', 'distance to group center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  @observable\r\n  degreeselection = []\r\n\r\n  @observable\r\n  degreebrushed = false\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = []\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden', 'id', 'Longitude', 'Latitude', 'LatY', 'LonX', 'dist to center', 'dist_to_center', 'centrality', 'shortest path', 'pair distance', 'node_id', 'standard distance', 'network density']\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n\r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return u.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')\r\n    })\r\n    return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n\r\n\r\n\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j]) continue\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        })\r\n\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([\r\n          ...neighborIDs\r\n        ])\r\n        return uniqNeighborIDs\r\n      } else {\r\n        return []\r\n      }\r\n    } else {\r\n      return []\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      const nominalColor =  [\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n        .range(nominalColor);\r\n    } else { //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() {\r\n    runInAction('filter nodes', () => {\r\n      if (Object.keys(this.filter).length !== 0) {\r\n\r\n\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == 'string') {\r\n              if (this.filter[fkey].length > 0 && (!this.filter[fkey].includes(n[fkey]))) {\r\n                satisfy = false\r\n              }\r\n            } else {  // number range \r\n              if (this.filter[fkey] && (n[fkey] < this.filter[fkey]['min'] || n[fkey] > this.filter[fkey]['max'])) {\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n      }\r\n\r\n    });\r\n    if (this.selectedNodes.length > 0) {\r\n      this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n\r\n    if (this.frame.selection.length > 0) {\r\n      this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n    this.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n    this.runActiveLayout()\r\n\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\"\r\n    const toId = \"target_id\"\r\n    const mapId = \"ID\"\r\n    const mapLon = \"LonX\"\r\n    const mapLat = \"LatY\"\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr =\r\n    initialgraph.rawGraph.nodes.map(\r\n        n => ({ ...n, LonX: parseFloat(n[\"LonX\"]), LatY: parseFloat(n[\"LatY\"]) }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n  \r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n  \r\n    // const edgesSet = new Set();\r\n  \r\n    // const edgesArr = [];\r\n  \r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n  \r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n  \r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n  \r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n      edgesArr.forEach(it => {\r\n        const fromnode = nodesArr.filter((node)=>{return node.id === it[fromId].toString()})\r\n        const tonode = nodesArr.filter((node)=>{return node.id === it[toId].toString()})\r\n        const Nonloc = 360\r\n        if(fromnode.length > 0 && tonode.length >0){\r\n        it.fromlocLatY = parseFloat(fromnode[0].LatY)\r\n        it.fromlocLonX = parseFloat(fromnode[0].LonX)\r\n        it.tolocLatY = parseFloat(tonode[0].LatY)\r\n        it.tolocLonX = parseFloat(tonode[0].LonX) }\r\n        else{\r\n        it.fromlocLatY = Nonloc\r\n        it.fromlocLonX = Nonloc\r\n        it.tolocLatY = Nonloc\r\n        it.tolocLonX = Nonloc\r\n        }// observable array???\r\n        it.withinState = true\r\n        it.withinFamily = true\r\n        \r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n        \r\n      });\r\n    } \r\n\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295;    // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n        c(lat1 * p) * c(lat2 * p) *\r\n        (1 - c((lon2 - lon1) * p)) / 2;\r\n  \r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n  \r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n  \r\n  \r\n    const calMedianCenter = ()=>{\r\n      const latlist = nodesArr.map(n => parseFloat(n['LatY']))\r\n      const lonlist = nodesArr.map(n => parseFloat(n['LonX']))\r\n      const medianCenter = (values)=>{\r\n        if(values.length ===0) throw new Error(\"No inputs\");\r\n  \r\n        const result1 = [...values].sort((a, b) => a - b)\r\n      \r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n      \r\n        var half = Math.floor(result1.length / 2);\r\n        \r\n        if (result1.length % 2)\r\n          return result1[half];\r\n        \r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      }\r\n  \r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist)\r\n        const medianLon = medianCenter(lonlist)\r\n        nodesArr.forEach(function (n, i) {\r\n          n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n        })\r\n      }\r\n  \r\n  \r\n    }\r\n  \r\n    if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n      // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  \r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n      // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n  \r\n  \r\n  \r\n    //   graph.forEachNode(function (fromnode) {\r\n  \r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph \r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n            \r\n    //          })\r\n    //         }\r\n             \r\n    //         //directed graph: \r\n    //       }\r\n  \r\n    //     })\r\n  \r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n  \r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n  \r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0])\r\n    const nodePropertyTypes = {}\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n    })\r\n    const uniqueValue = {}\r\n    nodekeyList.forEach(function (k, i) {\r\n  \r\n      if (nodePropertyTypes[k] == 'string') {\r\n        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        const minv = Math.min(...valuea)\r\n        const maxv = Math.max(...valuea)\r\n        uniqueValue[k] = [minv, maxv]\r\n      }\r\n    })\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: 'Untitled Graph',\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: ['pagerank', 'degree', 'distance to center'],\r\n        edgeProperties: ['source_id', 'target_id'],\r\n       \r\n      },\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    \r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph \r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n    \r\n  \r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = 'degree';\r\n    this.scatterplot.y = 'distance to center';\r\n\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n  //   appState.graph.frame.paused = false;\r\n  // appState.graph.frame.resumeLayout();\r\n  //                 this.forceUpdate();\r\n  \r\n\r\n                      // this.frame.resumeLayout();\r\n                      // this.forceUpdate();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout  () {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n    \r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size >0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  get averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  get components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n}","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true\r\n \r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    appState.graph.frame.selection = []\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  \r\n  appState.graph.runActiveLayout();\r\n  setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  // appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length>0){  //dehilight border when innitially load \r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n  }\r\n  if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n    this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  }\r\n})\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","const jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    const result = jsnx.averageClustering(jsnxGraph);\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    return cc.componentCount();\r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    return dia;\r\n}\r\n ","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"8b1fa770-a1d0-43f0-b798-def14744dd8c\"],   \r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  [\"Mafia Family Network\", \"c43890f8-1cfb-4599-a0d3-8f47303691fc\"],\r\n  [\"US flight Network\", '9cf82a47-e5b6-4d45-87aa-fae9e4ca66fa'],\r\n  ['US 117th House Vote Network',\"1b34e961-34d6-4482-b8da-cf5fd2dc9d65\"]\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  // appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        \r\n      }\r\n      appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] ) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr , paths: pathsArr},\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1 )&& link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = []\r\n    const edgekeys = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && edgekeys.indexOf(key1) == -1) {\r\n            withinEdges.push(link)\r\n            edgekeys.push(key1)\r\n            edgekeys.push(key2)\r\n            // edgecount = edgecount+1\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n //highlight nodes and edges within selection\r\n self.updateDegreeHistOpacity = function () {\r\n  if (self.degreehighlight.length > 0) {\r\n    if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n      const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n        var p = 0.017453292519943295;    // Math.PI / 180\r\n        var c = Math.cos;\r\n        var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n          c(lat1 * p) * c(lat2 * p) *\r\n          (1 - c((lon2 - lon1) * p)) / 2;\r\n    \r\n        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n      }\r\n      var sumOfAllDistance = 0;\r\n      var n = 0;\r\n      var max = 0;\r\n      self.graph.forEachNode(n => {\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX)\r\n        if (dist > max) {\r\n          max = dist;\r\n        }\r\n      })\r\n      self.graph.forEachNode(n => {  \r\n        // self.colorNodeColor(n, \"#0000FF\");\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX);\r\n        console.log(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0]['LatY'],self.degreehighlight[0]['LatX'])\r\n        self.colorNode(n, 0x0000FF);\r\n        if (dist == 0) {\r\n          self.colorNodeOpacity(n, 1);\r\n        } else if (dist < max/4) {\r\n          self.colorNodeOpacity(n, 0.2);\r\n        }else if (dist < (2*max)/4) {\r\n          self.colorNodeOpacity(n, 0.4);\r\n        }else if (dist < (3*max)/4) {\r\n          self.colorNodeOpacity(n, 0.6);\r\n        }\r\n        else {\r\n          self.colorNodeOpacity(n, 0.8);\r\n        }\r\n        \r\n        \r\n      });\r\n    }\r\n    else {\r\n    self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })  \r\n\r\n    //hilight within edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    const withinEdges = self.getEdgeWithinSelection(self.degreehighlight)\r\n\r\n    for (var i = 0; i < withinEdges.length; i++) {\r\n      withinEdges[i].linecolor.r = red;\r\n      withinEdges[i].linecolor.g = blue;\r\n      withinEdges[i].linecolor.b = green;\r\n    }\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //highlight nodes \r\n    for (var i = 0; i < self.degreehighlight.length; i++) {\r\n      self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n    }\r\n\r\n  } \r\n  }else {        //when no nodes satisfying the condition, all 0.2 opacity \r\n    self.graph.forEachNode(n => {\r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    self.colorNodeEdge(null);\r\n  }\r\n}\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n      \r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {  \r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX,self.selection[0]['LatY'],self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max/4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          }else if (dist < (2*max)/4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          }else if (dist < (3*max)/4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n          \r\n          \r\n        });\r\n      }\r\n      else {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } \r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n   //highlight clicked nodes and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node ) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n    //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //   //fisrt dehighlight all the edges\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })  \r\n\r\n    //   //hilight neighbor edges\r\n    //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n    //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //   const withinEdges = node.linkObjs\r\n\r\n    //   for (var i = 0; i < withinEdges.length; i++) {\r\n    //     withinEdges[i].linecolor.r = red;\r\n    //     withinEdges[i].linecolor.g = blue;\r\n    //     withinEdges[i].linecolor.b = green;\r\n    //   }\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n    // } else {        //when no nodes are given, all 1 opacity \r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n        \r\n    //   });\r\n    //   self.colorNodeEdge(null);\r\n    // }\r\n   \r\n\r\n    // self.highlightNode(node, true);\r\n    // node.renderData.textHolder.children[0].element.hideme = false;\r\n    self.colorNodeEdge(node);\r\n  }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (!node) return \r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null\r\n      \r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"square\",\r\n  NODE_HSHAPE: \"square\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if(!self.selection[i]) continue\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n      // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    }\r\n\r\n  // };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  }\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null\r\n      // appState.graph.networkClicked = null\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n      \r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node)\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      \r\n      \r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n        \r\n        \r\n      }\r\n\r\n\r\n\r\n      \r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 500) {\r\n        self.doubleClicked = true;\r\n        \r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null\r\n    appState.graph.degreeselection = []\r\n    appState.graph.degreebrushed = false\r\n    \r\n    self.updateSelectionOpacity();\r\n\r\n    if(self.selection.length == 1){\r\n      const thenode = self.selection[0]\r\n      self.highlightClickNode(thenode)\r\n      appState.graph.mapClicked = thenode\r\n      // self.selection = self.getNeighborNodesFromGraph(thenode);\r\n      appState.graph.selectedNodes = self.getNeighborNodesFromGraph(thenode);\r\n        \r\n      \r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if(self.selection.length == 0){\r\n      appState.graph.mapClicked = null\r\n    }\r\n    \r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *13;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize *2 ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    document.getElementById(\"showSelected\").style.display=\"none\";\r\n    document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    document.getElementById(\"hideAll\").style.display=\"none\";\r\n    document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    document.getElementById(\"showAll\").style.display=\"none\";\r\n    document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function() {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n     //directed arrows\r\n     self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n     var arrowPosition = self.directedArrows.attributes.position.array;\r\n     var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x)/2;\r\n            var midPointY = (v1pos.y + v2pos.y)/2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          } \r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function() {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function() {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function(node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function() {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function(graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function(node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function(link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n    });\r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        self.ee.emit(\"select-nodes\", self.selection);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function(positions) {\r\n    self.graph.forEachNode(function(node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function(node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  <MenuItem\r\n  iconName={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Distance to center\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Shortest path\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Pair distance\"\r\n            ? \"globe\" : \"graph\"}\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        />\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        />\r\n        <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        />\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderDelimiterSelection()}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree.toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density.toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering.toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            Argo supports both mouse/trackpad and touchscreen.\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.filterKeyList}\r\n                    onSelect={it => {appState.graph.nodes.colorBy = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => {appState.graph.nodes.color.scale = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => {appState.graph.nodes.color.from = it.hex\r\n                          appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => {appState.graph.nodes.color.to = it.hex\r\n                        appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={appState.graph.filterKeyList}\r\n                    // itemRenderer={CommonItemRenderer}\r\n                    // filterable={false}\r\n                    onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                    value={appState.graph.nodes.sizeBy}\r\n                    />\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                  />\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n              <div style = {{height:\"15px\"}}>\r\n\r\n              </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <text style={{fontSize: \"12px\"}}>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable>\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"12px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"none\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\",display:\"none\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={20}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => (appState.graph.nodes.labelBy = it)}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: this.state[it + '_filterlist'] ? [...this.state[it + '_filterlist'], selectit] : [selectit]\r\n                    })\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={this.state[it + '_filterlist']}\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      if (deselectIndex0 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:this.state[it + '_filterlist'].filter(item => item !== selectit)\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it] && appState.graph.filter[it][\"min\"])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                />\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                />\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                />\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      appState.graph.selectedNodes = []\r\n      appState.graph.selectedNodes = selectionNode\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if(!appState.graph.autoZoom) return;\r\n        if (appState.graph.frame.selection.length ==0) {\r\n          // if (appState.graph.frame.getNodeList() >0){\r\n            const nodeLoc = appState.graph.frame.getNodeList().map(function(node){\r\n              return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n            })\r\n            const b = latLngBounds() // seemed to work without having to pass init arg\r\n            nodeLoc.forEach(coords => {\r\n                b.extend(coords)\r\n            })\r\n            if(Object.keys(b).length > 0){\r\n              map.fitBounds(b)\r\n            }\r\n            \r\n          // }\r\n          return null;\r\n        }   //no selection \r\n        if (appState.graph.frame.selection.length ==1) return;  // only one node is selected \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        if(Object.keys(b).length > 0){\r\n          map.fitBounds(b)\r\n        }\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n          if (appState.useToolbartoSelect) {\r\n            appState.useToolbartoSelect = false\r\n          } else {\r\n            appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        \r\n          }\r\n        \r\n        \r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\n\r\n  ","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON, FeatureGroup, Circle } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\"\r\nimport { ZoomMap, MapClick } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\"\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\"\r\n\r\nimport Curve from \"../components/Curve\"\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered && appState.graph.currentlyHovered.links) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n        return `${edge.source.id}👉 ${edge.target.id}`\r\n      })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n    console.log(appState.graph.watchAppearance)\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if(appState.graph.degreeselection.length>0){\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n    if(appState.graph.degreebrushed && appState.graph.degreeselection.length==0){\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const neighborIDs = appState.graph.selectedNeighborIDs\r\n      if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if(neighborIDs.indexOf(node.id) !== -1){\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      }\r\n      else {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.03, stroke: false, zIndex: 'auto' }\r\n\r\n      }\r\n    }\r\n    else {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyClicked.length > 0) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    \r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"100%\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n        \r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n        \r\n\r\n        {/* <ReactLeafletToolbar /> */}\r\n        \r\n        <AreaSelect />\r\n        <ZoomMap /> \r\n        <MapClick />\r\n\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n            {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n              return (\r\n                // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                //   data={edge}\r\n                // // eventHandlers={{\r\n                // //   click: (e) => {\r\n                // //     console.log(e.target.options.data)\r\n                // //   }}}\r\n                // />\r\n                <Curve path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n          options={this.setEdgePathOption(edge)}\r\n            />\r\n                \r\n                \r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                        appState.graph.edgeselection = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.fontSize}\r\n                      className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> : <Tooltip className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <div>\r\n        <Switch style={{ position: 'fixed', top: '5vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.mapEdgeShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.mapEdgeShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '5vh', right: '4vw', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n        <Switch style={{ position: 'fixed', top: '8vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.convexPolygonsShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '8vh', right: '4vw', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n        <Switch style={{ position: 'fixed', top: '11vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.autoZoom}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.autoZoom = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '11vh', right: '4vw', zIndex: '1000' }}> Automatic Zoom</span>\r\n        </div>\r\n        \r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n      \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 64, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n  const thenode = appState.graph.selectedNodes[0]\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n    \r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n  \r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n  \r\n  \r\n      })\r\n  \r\n      \r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n      \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n\r\n      // when no node statisfy, should dehighlight \r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n    \r\n    \r\n  \r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n    \r\n  \r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n    \r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      selectionNode = selectneighbors.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }\r\n\r\n    \r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                  \r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.selectedNodes.length ==1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n  \r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                   \r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                    \r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n  \r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n  \r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                    \r\n  \r\n  \r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n  \r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            } \r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n  \r\n  \r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n     \r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree.toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            \r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n                \r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 50, left: 50 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // this.state.;\r\n    if (appState.graph.scatterplot.x === 'shortest path') {\r\n      column1 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n      column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.x)\r\n      column1 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n      })\r\n    }\r\n\r\n    if (appState.graph.scatterplot.y === 'shortest path') {\r\n      column2 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n      column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.y)\r\n      column2 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n      })\r\n    }\r\n\r\n    let temp = []\r\n    temp.push(header)\r\n    for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n      temp.push([column1[i], column2[i]]);\r\n    }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = []\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    if(selection != null) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      }\r\n      console.log(selection[0][1], selection[1][1],brushBounds.y1, brushBounds.y0);\r\n  \r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n        console.log(nodecx, nodecy);\r\n        if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n          selectionNodeID.push(select(this).attr(\"id\"))\r\n        }\r\n  \r\n  \r\n  \r\n      })\r\n  \r\n  \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n  \r\n      )\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.selectedNodes = selectionNode\r\n  \r\n  \r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity()\r\n    }\r\n    \r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n\r\n      extent={\r\n        [[this.margin.left,  this.margin.top], [this.width + this.margin.left, this.height + this.margin.top ]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\"}}>X By: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                <text style={{ transform: 'translate(20vw, 27vh)' }} fontSize=\"12px\">{(appState.graph.scatterplot.x === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text\r\n                  transform={\"translate(-40, 120) rotate(-90)\"}\r\n                  fontSize=\"12px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(35vw, -0.5vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(12vw, -0.5vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n      // density distance node style\r\n\r\n      // //hover on one group \r\n      // if (appState.graph.distanceDensityCurrentlyHovered) {\r\n\r\n      //   if (String(node['name']) === String(appState.graph.distanceDensityCurrentlyHovered)) {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"10000\",\r\n      //       stroke: def.NODE_HIGHLIGHT,\r\n      //       fillOpacity: 0.8\r\n      //     }\r\n      //   } else {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"0\",\r\n      //       stroke: false,\r\n      //       fillOpacity: 0.1\r\n      //     }\r\n      //   }\r\n\r\n      // } else {// no hover \r\n      //   return {\r\n      //     fill: appState.graph.nodeColorScale(node['name']),\r\n      //     zIndex: \"0\",\r\n      //     stroke: false,\r\n      //     fillOpacity: 0.8\r\n      //   }\r\n\r\n      // }\r\n      \r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (appState.graph.distanceDensityCurrentlyClicked.includes(String(node['name']))) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } \r\n        else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n      }\r\n    }\r\n    else { //path node style \r\n      return {\r\n        \r\n        fill: appState.graph.edges.color,\r\n        zIndex: \"0\",\r\n        stroke: false,\r\n        fillOpacity: 0.8\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              // onMouseOver={(e) => {\r\n              //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n              //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n              //     // console.log(node)\r\n              //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n              //   )\r\n              //   appState.graph.frame.selection = selectionNode\r\n              //   appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n              //   // console.log(selectionNode)\r\n              //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              // }}\r\n              // onMouseLeave={(e) => {\r\n\r\n              //   if (appState.graph.mapClicked) return;\r\n              //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n              //   appState.graph.frame.selection = []\r\n              //   appState.graph.selectedNodes = []\r\n              //   appState.graph.edgeselection = []\r\n\r\n              //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              //     // if (n !== appState.graph.mapClicked) {\r\n              //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              //     // }\r\n              //   }\r\n              //   );\r\n\r\n\r\n              // }}\r\n              onClick={(e) => {\r\n                if (appState.graph.distanceDensityCurrentlyClicked.includes(e.target.getAttribute('id'))) {\r\n                  appState.graph.distanceDensityCurrentlyClicked = appState.graph.distanceDensityCurrentlyClicked.filter(node => \r\n                    node !==  e.target.getAttribute('id')\r\n                  )\r\n                }\r\n                else {\r\n                  appState.graph.distanceDensityCurrentlyClicked.push(e.target.getAttribute('id'));\r\n                }\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  appState.graph.distanceDensityCurrentlyClicked.includes(String(node.data.ref[appState.graph.groupby]))\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\" \r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              // e.target.getAttribute('fill') node.renderData.color,\r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              \r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport SelectionDetail from \"./panels/SelectionDetail\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        {/* {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 1 && <SelectionDetail />\r\n        } */}\r\n        {/* {appState.graph.selectedNodes.length === 1 && (\r\n          <NodeDetail node={appState.graph.selectedNodes[0].data.ref} />\r\n        )} */}\r\n\r\n        {/* {appState.graph.selectedNodes.length !== 1 && appState.graph.currentlyHovered && (\r\n          <NodeDetail node={appState.graph.currentlyHovered.data.ref} />\r\n        )} */}\r\n\r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from 'ngraph.graph';\r\nimport path from 'ngraph.path';\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    \r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                appState.graph.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? String.fromCharCode(communityDict[node.id] + 97)  : 'a'\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n               \r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n\r\n                appState.graph.nodes.convexhullby = \"community\"\r\n                appState.graph.nodes.groupby = \"community\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    runShortestPath = () =>{\r\n        \r\n\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n            var p = 0.017453292519943295;    // Math.PI / 180\r\n            var c = Math.cos;\r\n            var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n              c(lat1 * p) * c(lat2 * p) *\r\n              (1 - c((lon2 - lon1) * p)) / 2;\r\n        \r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n          }\r\n        \r\n        const graph = createGraph();\r\n        \r\n        // hardcode LatY and LonX for sample dataset \r\n        appState.graph.rawGraph.nodes.forEach(node => graph.addNode(node[\"id\"].toString(),  { LatY: parseFloat(node[\"LatY\"]),LonX: parseFloat(node[\"LonX\"]) }))\r\n        appState.graph.rawGraph.edges.forEach(edge => graph.addLink(edge[\"source_id\"], edge[\"target_id\"]));\r\n\r\n        const shortestPathPairs = () => {\r\n            let pathFinder = path.aGreedy(graph);\r\n            const pathsArr = []\r\n            const pathsSet = new Set();\r\n        \r\n        \r\n        \r\n            graph.forEachNode(function (fromnode) {\r\n        \r\n              graph.forEachNode(function (tonode) {\r\n                if (fromnode.id !== tonode.id) {\r\n                  const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n                  const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n                  const edgeinfo = appState.graph.rawGraph.edges.filter((edge)=>{\r\n                    return (edge.source_id === fromnode.id && edge.target_id === tonode.id)\r\n                  })\r\n                  let pairdist = calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n                  \r\n                  \r\n                  \r\n                  // undirected graph:\r\n                  // only add once for undirected graph \r\n                  if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n                    pathsSet.add(pathKey1);\r\n                    pathsSet.add(pathKey2);\r\n                    pathsArr.push({\r\n                     \"source\":fromnode.id,\r\n                     \"target\":tonode.id,\r\n                    \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n                    \"distance\": pairdist\r\n                  \r\n                   })\r\n                  }\r\n                   \r\n                  //directed graph: \r\n                }\r\n                \r\n              })\r\n        \r\n            })\r\n            // console.log(nodesArr.length)\r\n            // console.log(pathsArr.length)\r\n            return pathsArr\r\n        \r\n          }\r\n          appState.graph.rawGraph.paths = shortestPathPairs();\r\n          appState.graph.metadata.nodeComputed.push('shortest path')\r\n            appState.graph.metadata.nodeComputed.push('pair distance')\r\n            appState.graph.scatterplot.x = 'pair distance'\r\n            appState.graph.scatterplot.y = 'shortest path'\r\n\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n          \r\n        // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                \r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes,\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runShortestPath}>Run Shortest Path</Button>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community</Button>\r\n                        {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n                    {appState.graph.modularity? <text className=\"modularity-tag\" style={{fontSize: \"8px\"} } >{\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}</text>: null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"12px\" }}>Convex Hull By: </p>\r\n                        <span style={{ }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                    appState.graph.convexPolygonsShow = true\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"12px\" }}>Cluster By: </p>\r\n                        <span style={{  }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\n\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n          x[i].style.display = \"none\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n      return appState.graph.frame && (\r\n        <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n                <div class=\"w3-bar w3-black\">\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                </div> \r\n                <div id=\"Appearance\" class=\"city\">\r\n                    <text style={{fontSize: \"12px\"}}>Appearance </text>\r\n                    <Tabs2 animate id=\"graph-options\">\r\n                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Filter\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Filter Options</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"f_nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Statistics\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Statistics</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"s_layout\" title=\"Groups\" panel={<StatGroupPanel />} />\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                    <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colspan=\"2\" style={{textAlign: \"center\"}}><Tag>Statistics</Tag></th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td># Nodes</td>\r\n                                <td>{appState.graph.metadata.fullNodes}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td># Edges</td>\r\n                                <td>{appState.graph.metadata.fullEdges}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Average Degree</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.degree.toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Density</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.density.toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Diameter</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Clustering<br></br>Coefficient</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.averageClustering.toFixed(3) : 'loading graph'}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Connected <br></br>Component</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </SidebarMenu>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n      })} style={{display: \"flex\"}}>\r\n        <div>\r\n        <NavbarSelector />\r\n        </div>\r\n        <div class=\"container\" style={{paddingTop:\"5vh\", maxWidth:\"100vw\", height:\"100%\"}}>\r\n          <div class=\"container\" style={{height:\"100%\"}}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                    {appState.graph.hasGraph && <Tag className=\"network-tag\">Network</Tag>}\r\n                    <main className=\"main\">\r\n                      {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                        <ThreeJSVis />\r\n                      ) : (\r\n                        <WorkspaceView />\r\n                      )}\r\n                    </main>\r\n                    {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                    <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div class=\"container__right\">\r\n                  {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",width: '40vw'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame &&  <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame  && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}