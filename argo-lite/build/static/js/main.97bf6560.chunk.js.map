{"version":3,"sources":["stores/PreferencesStore.js","services/AlgorithmUtils.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/panels/SelectionDetail.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","jsnx","require","jsgraphs","averageClusteringCoefficient","snapshot","keydown","clusteringco","jsnxGraph","Graph","addNodesFrom","rawGraph","nodes","map","n","id","addEdgesFrom","edges","e","source_id","target_id","convertToJsnx","averageClustering","selectedNodes","length","filter","x","undefined","selection","connectedComponents","connectcom","cc","ConnectedComponents","i","idDict","g","forEach","addEdge","convertToJSGraph","componentCount","exactGraphDiameter","graphDiameter","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","Math","max","GraphStore","_dec","ref","_dec2","initialGlobalConfig","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","labelBy","shape","labelSize","labelLength","crossColor","scatterplot","y","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_lastSelectedSingleNode","nodesShowingLabels","_descriptor27","_descriptor28","_descriptor29","_descriptor30","_descriptor31","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_descriptor36","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","_descriptor42","_descriptor43","_descriptor44","hasGraphLoaded","get","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","k","removeList","indexOf","u","toLowerCase","split","s","charAt","toUpperCase","substring","join","neighborIDs","j","links","link","push","fromId","toId","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","done","err","scales","domain","minMax","range","_this","Set","item","selectedNodeId","setOfNeighborIds","source","toString","target","add","node","has","_this2","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","_this3","runInAction","getNodeList","renderData","draw_object","children","visible","Object","keys","_objectSpread","satisfy","fkey","nodePropertyTypes","includes","nodeids","_this4","_this5","removeNodesByIds","_this6","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","a","b","half","floor","medianLat","medianLon","lat1","lon1","lat2","lon2","c","cos","asin","sqrt","calDistanceFromLatLonInKm","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","edgeProperties","savedStatesStr","runActiveLayout","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this7","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","nodeCount","graphDensity","sum","degree","averageDegree","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","convexhullby","groupby","mapClicked","currentlyHovered","convexNodes","pathHovered","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","clearBrush","mapEdgeShow","autoZoom","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","clearSelection","pinNodes","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","replace","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","shortestPathPairs","pathsArr","rank","_context4","parseInt","centrality","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","array","reduce","pathFinder","aGreedy","pathsSet","pathKey1","pathKey2","find","pageRank","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","linkObjs","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightClickNode","neighborNodes","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","edge","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","_loop","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","thenode","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","fontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","edgeDist","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","newDelimiter","updateDelimiter","DIALOG_BODY","TABLE","href","Spinner","renderExampleDataset","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","toFixed","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","class","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","marginLeft","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","deselectIndex1","onRelease","_ref3","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","role","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","DetectKeyPress","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","edgeSelectionID","nodesSelectedID","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","neighborNodesID","selectedNeighborIDs","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","flex","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","mouseover","mouseout","direction","permanent","defaultChecked","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","edgeSelection","SelectionDistanceFromLatLonIn","selectNodes","edgeDistance","uniqEdgeSelection","SelectionDensity","nodelength","selectneighbors","onEdgeBrushStart","sourceEvent","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","selectAll","brushBounds","each","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","SVGBrush","extent","getEventMouse","_this$edgesvg$getBoun","brushType","onBrushStart","onBrush","onBrushEnd","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","x0","y0","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","input","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","tickFormat","ti","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","column1","column2","header","csvarray","selectionNodeID","circles","svg","nodecx","nodecy","renderBrush","_this$svg$getBounding","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","XYSelect","allComputedPropertiesKeyList","RenderCircles","Axis","axis","axisBottom","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","renderCircles","cluster","ci","cx","cy","onMouseOver","_e$target$getAttribut","_e$target$getAttribut2","sourceid","targetid","onMouseLeave","_e$target$getAttribut3","_e$target$getAttribut4","dataset","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","StatGroupPanel","fromCharCode","runShortestPath","pairdist","Sidebar","cityName","getElementsByClassName","SidebarMenu","openCity","colspan","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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","file":"static/js/main.97bf6560.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import appState from '../stores';\r\n\r\nconst jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.clusteringco\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    appState.graph.clusteringco = jsnx.averageClustering(jsnxGraph);\r\n    // const result = 0\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    return appState.graph.clusteringco;\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.connectcom\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    console.log('compute connected copoenent')\r\n    appState.graph.connectcom = cc.componentCount()\r\n    return appState.graph.connectcom;\r\n   \r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.graphDiameter\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    appState.graph.graphDiameter = dia\r\n    return dia;\r\n}\r\n ","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter } from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor: [\"#0015bc\", \"#ff0000\",\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot: {\r\n      x: 'degree',\r\n      y: 'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n  @observable keydown = false;\r\n  clusteringco = 0;\r\n  graphDiameter = 0;\r\n  connectcom = 0;\r\n\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable autoZoom = true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n  @observable clearBrush = false;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on \r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\"pagerank\", \"degree\", 'centrality', 'distance to center', 'betweeness centrality', 'closeness centrality', 'distance to group center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  @observable\r\n  degreeselection = []\r\n\r\n  @observable\r\n  degreebrushed = false\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = []\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden', 'id', 'Longitude', 'Latitude', 'LatY', 'LonX', 'dist to center', 'dist_to_center', 'centrality', 'shortest path', 'pair distance', 'node_id', 'standard distance', 'network density']\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n\r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return u.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')\r\n    })\r\n    return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n\r\n\r\n\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j] || !this.selectedNodes[j].links) continue\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        })\r\n\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([\r\n          ...neighborIDs\r\n        ])\r\n        return uniqNeighborIDs\r\n      } else {\r\n        return []\r\n      }\r\n    } else {\r\n      return []\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      const nominalColor =  [\"#0015bc\", \"#ff0000\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n        .range(nominalColor);\r\n    } else { //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() {\r\n    runInAction('filter nodes', () => {\r\n      if (this.selectedNodes.length > 0) {\r\n      this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n\r\n    if (this.frame.selection.length > 0) {\r\n      this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n    this.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n   \r\n      if (Object.keys(this.filter).length === 0){\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {return { ...n, isHidden: false }});\r\n      }\r\n\r\n      if (Object.keys(this.filter).length !== 0) {\r\n\r\n\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == 'string') {\r\n              if (this.filter[fkey].length > 0 && (!this.filter[fkey].includes(n[fkey]))) {\r\n                satisfy = false\r\n              }\r\n            } else {  // number range \r\n              if (this.filter[fkey] && (n[fkey] < this.filter[fkey]['min'] || n[fkey] > this.filter[fkey]['max'])) {\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n      }\r\n\r\n    });\r\n     // this.runActiveLayout()\r\n\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\"\r\n    const toId = \"target_id\"\r\n    const mapId = \"ID\"\r\n    const mapLon = \"LonX\"\r\n    const mapLat = \"LatY\"\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr =\r\n    initialgraph.rawGraph.nodes.map(\r\n        n => ({ ...n, LonX: parseFloat(n[\"LonX\"]), LatY: parseFloat(n[\"LatY\"]) }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n  \r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n  \r\n    // const edgesSet = new Set();\r\n  \r\n    // const edgesArr = [];\r\n  \r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n  \r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n  \r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n  \r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n      edgesArr.forEach(it => {\r\n        const fromnode = nodesArr.filter((node)=>{return node.id === it[fromId].toString()})\r\n        const tonode = nodesArr.filter((node)=>{return node.id === it[toId].toString()})\r\n        const Nonloc = 360\r\n        if(fromnode.length > 0 && tonode.length >0){\r\n        it.fromlocLatY = parseFloat(fromnode[0].LatY)\r\n        it.fromlocLonX = parseFloat(fromnode[0].LonX)\r\n        it.tolocLatY = parseFloat(tonode[0].LatY)\r\n        it.tolocLonX = parseFloat(tonode[0].LonX) }\r\n        else{\r\n        it.fromlocLatY = Nonloc\r\n        it.fromlocLonX = Nonloc\r\n        it.tolocLatY = Nonloc\r\n        it.tolocLonX = Nonloc\r\n        }// observable array???\r\n        it.withinState = true\r\n        it.withinFamily = true\r\n        \r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n        \r\n      });\r\n    } \r\n\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295;    // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n        c(lat1 * p) * c(lat2 * p) *\r\n        (1 - c((lon2 - lon1) * p)) / 2;\r\n  \r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n  \r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n  \r\n  \r\n    const calMedianCenter = ()=>{\r\n      const latlist = nodesArr.map(n => parseFloat(n['LatY']))\r\n      const lonlist = nodesArr.map(n => parseFloat(n['LonX']))\r\n      const medianCenter = (values)=>{\r\n        if(values.length ===0) throw new Error(\"No inputs\");\r\n  \r\n        const result1 = [...values].sort((a, b) => a - b)\r\n      \r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n      \r\n        var half = Math.floor(result1.length / 2);\r\n        \r\n        if (result1.length % 2)\r\n          return result1[half];\r\n        \r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      }\r\n  \r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist)\r\n        const medianLon = medianCenter(lonlist)\r\n        nodesArr.forEach(function (n, i) {\r\n          n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n        })\r\n      }\r\n  \r\n  \r\n    }\r\n  \r\n    if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n      // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  \r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n      // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n  \r\n  \r\n  \r\n    //   graph.forEachNode(function (fromnode) {\r\n  \r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph \r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n            \r\n    //          })\r\n    //         }\r\n             \r\n    //         //directed graph: \r\n    //       }\r\n  \r\n    //     })\r\n  \r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n  \r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n  \r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0])\r\n    const nodePropertyTypes = {}\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n    })\r\n    const uniqueValue = {}\r\n    nodekeyList.forEach(function (k, i) {\r\n  \r\n      if (nodePropertyTypes[k] == 'string') {\r\n        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        const minv = Math.min(...valuea)\r\n        const maxv = Math.max(...valuea)\r\n        uniqueValue[k] = [minv, maxv]\r\n      }\r\n    })\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: 'Untitled Graph',\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: ['pagerank', 'degree', 'distance to center'],\r\n        edgeProperties: ['source_id', 'target_id'],\r\n       \r\n      },\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    \r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph \r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n    \r\n  \r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = 'degree';\r\n    this.scatterplot.y = 'distance to center';\r\n\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n  //   appState.graph.frame.paused = false;\r\n  // appState.graph.frame.resumeLayout();\r\n  //                 this.forceUpdate();\r\n  \r\n\r\n                      // this.frame.resumeLayout();\r\n                      // this.forceUpdate();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout  () {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n    \r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size >0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n \r\n  density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n \r\n  degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n\r\n  diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n}","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n \r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    // appState.graph.frame.selection = []\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  \r\n  // appState.graph.runActiveLayout();\r\n  // setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length>0){  //dehilight border when innitially load \r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n  }\r\n  if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n    this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  }\r\n})\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"8b1fa770-a1d0-43f0-b798-def14744dd8c\"],   \r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  [\"Mafia Family Network\", \"c43890f8-1cfb-4599-a0d3-8f47303691fc\"],\r\n  [\"US flight Network\", '9cf82a47-e5b6-4d45-87aa-fae9e4ca66fa'],\r\n  ['US 117th House Vote Network',\"5c1c6b89-24cd-4dff-9748-6cf6ad8a43a1\"]\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  // appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        \r\n      }\r\n      appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] ) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr , paths: pathsArr},\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1 )&& link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = []\r\n    const edgekeys = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && edgekeys.indexOf(key1) == -1) {\r\n            withinEdges.push(link)\r\n            edgekeys.push(key1)\r\n            edgekeys.push(key2)\r\n            // edgecount = edgecount+1\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n //highlight nodes and edges within selection\r\n self.updateDegreeHistOpacity = function () {\r\n  if (self.degreehighlight.length > 0) {\r\n    if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n      const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n        var p = 0.017453292519943295;    // Math.PI / 180\r\n        var c = Math.cos;\r\n        var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n          c(lat1 * p) * c(lat2 * p) *\r\n          (1 - c((lon2 - lon1) * p)) / 2;\r\n    \r\n        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n      }\r\n      var sumOfAllDistance = 0;\r\n      var n = 0;\r\n      var max = 0;\r\n      self.graph.forEachNode(n => {\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX)\r\n        if (dist > max) {\r\n          max = dist;\r\n        }\r\n      })\r\n      self.graph.forEachNode(n => {  \r\n        // self.colorNodeColor(n, \"#0000FF\");\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX);\r\n        console.log(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0]['LatY'],self.degreehighlight[0]['LatX'])\r\n        self.colorNode(n, 0x0000FF);\r\n        if (dist == 0) {\r\n          self.colorNodeOpacity(n, 1);\r\n        } else if (dist < max/4) {\r\n          self.colorNodeOpacity(n, 0.2);\r\n        }else if (dist < (2*max)/4) {\r\n          self.colorNodeOpacity(n, 0.4);\r\n        }else if (dist < (3*max)/4) {\r\n          self.colorNodeOpacity(n, 0.6);\r\n        }\r\n        else {\r\n          self.colorNodeOpacity(n, 0.8);\r\n        }\r\n        \r\n        \r\n      });\r\n    }\r\n    else {\r\n    self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })  \r\n\r\n    //hilight within edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    const withinEdges = self.getEdgeWithinSelection(self.degreehighlight)\r\n\r\n    for (var i = 0; i < withinEdges.length; i++) {\r\n      withinEdges[i].linecolor.r = red;\r\n      withinEdges[i].linecolor.g = blue;\r\n      withinEdges[i].linecolor.b = green;\r\n    }\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //highlight nodes \r\n    for (var i = 0; i < self.degreehighlight.length; i++) {\r\n      self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n    }\r\n\r\n  } \r\n  }else {        //when no nodes satisfying the condition, all 0.2 opacity \r\n    self.graph.forEachNode(n => {\r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    self.colorNodeEdge(null);\r\n  }\r\n}\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n      \r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {  \r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX,self.selection[0]['LatY'],self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max/4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          }else if (dist < (2*max)/4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          }else if (dist < (3*max)/4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n          \r\n          \r\n        });\r\n      }\r\n      else {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } \r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n   //highlight clicked nodes and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node ) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n    //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //   //fisrt dehighlight all the edges\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })  \r\n\r\n    //   //hilight neighbor edges\r\n    //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n    //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //   const withinEdges = node.linkObjs\r\n\r\n    //   for (var i = 0; i < withinEdges.length; i++) {\r\n    //     withinEdges[i].linecolor.r = red;\r\n    //     withinEdges[i].linecolor.g = blue;\r\n    //     withinEdges[i].linecolor.b = green;\r\n    //   }\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n    // } else {        //when no nodes are given, all 1 opacity \r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n        \r\n    //   });\r\n    //   self.colorNodeEdge(null);\r\n    // }\r\n   \r\n\r\n    // self.highlightNode(node, true);\r\n    // node.renderData.textHolder.children[0].element.hideme = false;\r\n    self.colorNodeEdge(node);\r\n  }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (!node) return \r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null\r\n      \r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"square\",\r\n  NODE_HSHAPE: \"square\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if(!self.selection[i]) continue\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n      // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    }\r\n\r\n  // };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  }\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null\r\n      // appState.graph.networkClicked = null\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n      \r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node)\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      \r\n      \r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n        \r\n        \r\n      }\r\n\r\n\r\n\r\n      \r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 500) {\r\n        self.doubleClicked = true;\r\n        \r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null\r\n    appState.graph.degreeselection = []\r\n    appState.graph.degreebrushed = false\r\n    \r\n    self.updateSelectionOpacity();\r\n\r\n    if(self.selection.length == 1){\r\n      const thenode = self.selection[0]\r\n      self.highlightClickNode(thenode)\r\n      appState.graph.mapClicked = thenode\r\n      // self.selection = self.getNeighborNodesFromGraph(thenode);\r\n      appState.graph.selectedNodes = self.getNeighborNodesFromGraph(thenode);\r\n        \r\n      \r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if(self.selection.length == 0){\r\n      appState.graph.mapClicked = null\r\n    }\r\n    \r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *13;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize *2 ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    document.getElementById(\"showSelected\").style.display=\"none\";\r\n    document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    document.getElementById(\"hideAll\").style.display=\"none\";\r\n    document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    document.getElementById(\"showAll\").style.display=\"none\";\r\n    document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function() {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n     //directed arrows\r\n     self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n     var arrowPosition = self.directedArrows.attributes.position.array;\r\n     var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x)/2;\r\n            var midPointY = (v1pos.y + v2pos.y)/2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          } \r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function() {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function() {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function(node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function() {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function(graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function(node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function(link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n    });\r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        self.ee.emit(\"select-nodes\", self.selection);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function(positions) {\r\n    self.graph.forEachNode(function(node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function(node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  <MenuItem\r\n  iconName={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Distance to center\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Shortest path\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Pair distance\"\r\n            ? \"globe\" : \"graph\"}\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        />\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        />\r\n        {/* <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        /> */}\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderExampleDataset(){\r\n    return(\r\n      <div id=\"exampleTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n        <p>Required attributes for nodelist.csv. Each row of the node table should represent attributes of a node, including at least a unique node ID and the node's longitude and latitude. </p>\r\n                    <table id=\"exampleNodeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead >\r\n                            <tr>\r\n                                <th > ID (unique node ID field) </th>\r\n                                <th> LonX (node longitude ) </th>\r\n                                <th> LatY (node latitude ) </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>67.2391</td>\r\n                                <td>-102.3472</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Required attributes for edgelist.csv. Each row of the edge table should represent attributes of an edge, including at least a source and target column corresponding to the node ID. </p>\r\n                    <table id = \"exampleEdgeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th > Source </th>\r\n                                <th> Target </th>\r\n                              \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>\"FWL\"</td>\r\n                \r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Example Dateset:</p>\r\n                    <a className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1_OIDSbUyM9gTqziVdcqU_NsGxkk6HMTo/view?usp=share_link\"> US_airport_nodelist.csv</a>\r\n                    <a className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1cvOUir8gKDlS_hhNGL0qQOn2eNHCDsOU/view?usp=share_link\"> US_airport_edgelist.csv</a>\r\n                </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderExampleDataset()}\r\n              {this.renderDelimiterSelection()}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            Argo supports both mouse/trackpad and touchscreen.\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.filterKeyList}\r\n                    onSelect={it => {appState.graph.nodes.colorBy = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => {appState.graph.nodes.color.scale = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => {appState.graph.nodes.color.from = it.hex\r\n                          appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => {appState.graph.nodes.color.to = it.hex\r\n                        appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={appState.graph.filterKeyList}\r\n                    // itemRenderer={CommonItemRenderer}\r\n                    // filterable={false}\r\n                    onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                    value={appState.graph.nodes.sizeBy}\r\n                    />\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                  />\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n              <div style = {{height:\"15px\"}}>\r\n\r\n              </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <text style={{fontSize: \"12px\"}}>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable>\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"12px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"none\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\",display:\"none\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={20}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => {appState.graph.nodes.labelBy = it; appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: appState.graph.filter[it]\r\n                    })\r\n                    \r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={(Object.keys(appState.graph.filter).length === 0) ? []:appState.graph.filter[it]}\r\n\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    placeholder: '  ',\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      // var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n                      if (deselectIndex1 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:appState.graph.filter[it]\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      // var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      // if (deselectIndex1 > -1) {\r\n                      //   appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                      //   // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                      //   appState.graph.filterNodes()\r\n                      // }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it] && appState.graph.filter[it][\"min\"])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                {/* <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                /> */}\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                />\r\n                <MenuDivider />\r\n                {/* <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                /> */}\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                />\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                />\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n              {/* {                    {appState.graph.hasGraph && <Button className={\"pt-small\"} text=\"Clear Selection and Filter\" onClick={() => (appState.graph.overrides = new Map())} />}} */}\r\n              <div className=\"pt-button-group\">\r\n              <a className=\"pt-button pt-icon-refresh\"  role=\"button\" onClick={() => {\r\n                appState.graph.mapClicked = undefined;\r\n                appState.graph.selectedNodes = [];\r\n                appState.graph.frame.selection = []\r\n                appState.graph.filter  = {}\r\n                appState.graph.currentlyHovered = undefined;\r\n                // appState.graph.mapClicked = undefined;\r\n                appState.graph.edgeselection = [];\r\n                appState.graph.degreeselection = [];\r\n                appState.graph.degreebrushed = false;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n                appState.graph.distanceDensityCurrentlyClicked = [];\r\n                appState.graph.clearBrush = true;\r\n                appState.graph.filterNodes()\r\n                appState.graph.frame.updateSelectionOpacity()\r\n                // this.forceUpdate();\r\n              }}> Clear All Selections and Filters</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      // appState.graph.selectedNodes = []\r\n      if (selectionNode.length === 0) return \r\n      appState.graph.selectedNodes = selectionNode\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if(!appState.graph.autoZoom) return;\r\n        if (appState.graph.frame.selection.length ==0) {\r\n          // if (appState.graph.frame.getNodeList() >0){\r\n            const nodeLoc = appState.graph.frame.getNodeList().map(function(node){\r\n              return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n            })\r\n            const b = latLngBounds() // seemed to work without having to pass init arg\r\n            nodeLoc.forEach(coords => {\r\n                b.extend(coords)\r\n            })\r\n            if(Object.keys(b).length > 0){\r\n              map.fitBounds(b)\r\n            }\r\n            \r\n          // }\r\n          return null;\r\n        }   //no selection \r\n        if (appState.graph.frame.selection.length ==1) return;  // only one node is selected \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        if(Object.keys(b).length > 0){\r\n          map.fitBounds(b)\r\n        }\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n          if (appState.useToolbartoSelect) {\r\n            appState.useToolbartoSelect = false\r\n          } else {\r\n            appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        \r\n          }\r\n        \r\n        \r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\nexport function DetectKeyPress(){\r\n  document.addEventListener('keydown', (event) => {\r\n    appState.graph.keydown = true\r\n  }, false);\r\n  document.addEventListener('keyup', (event) => {\r\n    appState.graph.keydown = false\r\n  }, false);\r\n  return null;\r\n}\r\n\r\n\r\n  ","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON, FeatureGroup, Circle } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\"\r\nimport { ZoomMap, MapClick, DetectKeyPress } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\"\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\"\r\n\r\nimport Curve from \"../components/Curve\"\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered && appState.graph.currentlyHovered.links) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n        return `${edge.source.id}👉 ${edge.target.id}`\r\n      })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n    console.log(appState.graph.watchAppearance)\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if(appState.graph.degreeselection.length>0){\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n    if(appState.graph.degreebrushed && appState.graph.degreeselection.length==0){\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const neighborIDs = appState.graph.selectedNeighborIDs\r\n      if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if(neighborIDs.indexOf(node.id) !== -1){\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      }\r\n      else {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.03, stroke: false, zIndex: 'auto' }\r\n\r\n      }\r\n    }\r\n    else {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyClicked.length > 0) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    \r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"100%\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n        \r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n        \r\n\r\n        {/* <ReactLeafletToolbar /> */}\r\n        \r\n        <AreaSelect />\r\n        <ZoomMap /> \r\n        <MapClick />\r\n        <DetectKeyPress />\r\n\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n            {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n              return (\r\n                // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                //   data={edge}\r\n                // // eventHandlers={{\r\n                // //   click: (e) => {\r\n                // //     console.log(e.target.options.data)\r\n                // //   }}}\r\n                // />\r\n                <Curve path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n          options={this.setEdgePathOption(edge)}\r\n            />\r\n                \r\n                \r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                        appState.graph.edgeselection = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.fontSize}\r\n                      className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> : <Tooltip className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <div>\r\n        <Switch style={{ position: 'fixed', top: '5vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.mapEdgeShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.mapEdgeShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '5vh', right: '4vw', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n        <Switch style={{ position: 'fixed', top: '8vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.convexPolygonsShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '8vh', right: '4vw', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n        <Switch style={{ position: 'fixed', top: '11vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.autoZoom}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.autoZoom = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '11vh', right: '4vw', zIndex: '1000' }}> Automatic Zoom</span>\r\n        </div>\r\n        \r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n      \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 64, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n  const thenode = appState.graph.selectedNodes[0]\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n    \r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n  \r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n  \r\n  \r\n      })\r\n  \r\n      \r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n      \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n\r\n      // when no node statisfy, should dehighlight \r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n    \r\n    \r\n  \r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n    \r\n  \r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n    \r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      selectionNode = selectneighbors.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }\r\n\r\n    \r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                  \r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.selectedNodes.length ==1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n  \r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                   \r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                    \r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n  \r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n  \r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                    \r\n  \r\n  \r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n  \r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            } \r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n  \r\n  \r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n     \r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density() ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            \r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n                \r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 50, left: 50 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // this.state.;\r\n    if (appState.graph.scatterplot.x === 'shortest path') {\r\n      column1 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n      column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.x)\r\n      column1 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n      })\r\n    }\r\n\r\n    if (appState.graph.scatterplot.y === 'shortest path') {\r\n      column2 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n      column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.y)\r\n      column2 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n      })\r\n    }\r\n\r\n    let temp = []\r\n    temp.push(header)\r\n    for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n      temp.push([column1[i], column2[i]]);\r\n    }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false;\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = []\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    if(selection ) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      }\r\n      console.log(selection[0][1], selection[1][1],brushBounds.y1, brushBounds.y0);\r\n  \r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n        console.log(nodecx, nodecy);\r\n        if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n          selectionNodeID.push(select(this).attr(\"id\"))\r\n        }\r\n  \r\n  \r\n  \r\n      })\r\n  \r\n  \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n  \r\n      )\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.selectedNodes = selectionNode\r\n  \r\n  \r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity()\r\n    }else{   //click to clear selection \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n    }\r\n    \r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left,  this.margin.top], [this.width + this.margin.left, this.height + this.margin.top ]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\"}}>X By: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                <text style={{ transform: 'translate(20vw, 28vh)' }} fontSize=\"12px\">{(appState.graph.scatterplot.x === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text \r\n                 style={{ transform: \"translate(-3vw, 21vh) rotate(-90deg)\", }}\r\n                  // transform={\"translate(-3vw, 21vh) rotate(-90deg)\"}\r\n                  fontSize=\"12px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(35vw, 1vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(12vw, 1.0vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n      // density distance node style\r\n\r\n      // //hover on one group \r\n      // if (appState.graph.distanceDensityCurrentlyHovered) {\r\n\r\n      //   if (String(node['name']) === String(appState.graph.distanceDensityCurrentlyHovered)) {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"10000\",\r\n      //       stroke: def.NODE_HIGHLIGHT,\r\n      //       fillOpacity: 0.8\r\n      //     }\r\n      //   } else {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"0\",\r\n      //       stroke: false,\r\n      //       fillOpacity: 0.1\r\n      //     }\r\n      //   }\r\n\r\n      // } else {// no hover \r\n      //   return {\r\n      //     fill: appState.graph.nodeColorScale(node['name']),\r\n      //     zIndex: \"0\",\r\n      //     stroke: false,\r\n      //     fillOpacity: 0.8\r\n      //   }\r\n\r\n      // }\r\n      \r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (appState.graph.distanceDensityCurrentlyClicked.includes(String(node['name']))) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } \r\n        else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n      }\r\n    }\r\n    else { //path node style \r\n      return {\r\n        \r\n        fill: appState.graph.edges.color,\r\n        zIndex: \"0\",\r\n        stroke: false,\r\n        fillOpacity: 0.8\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              // onMouseOver={(e) => {\r\n              //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n              //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n              //     // console.log(node)\r\n              //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n              //   )\r\n              //   appState.graph.frame.selection = selectionNode\r\n              //   appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n              //   // console.log(selectionNode)\r\n              //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              // }}\r\n              // onMouseLeave={(e) => {\r\n\r\n              //   if (appState.graph.mapClicked) return;\r\n              //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n              //   appState.graph.frame.selection = []\r\n              //   appState.graph.selectedNodes = []\r\n              //   appState.graph.edgeselection = []\r\n\r\n              //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              //     // if (n !== appState.graph.mapClicked) {\r\n              //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              //     // }\r\n              //   }\r\n              //   );\r\n\r\n\r\n              // }}\r\n              onClick={(e) => {\r\n                if (appState.graph.distanceDensityCurrentlyClicked.includes(e.target.getAttribute('id'))) {\r\n                  appState.graph.distanceDensityCurrentlyClicked = appState.graph.distanceDensityCurrentlyClicked.filter(node => \r\n                    node !==  e.target.getAttribute('id')\r\n                  )\r\n                }\r\n                else {\r\n                  appState.graph.distanceDensityCurrentlyClicked.push(e.target.getAttribute('id'));\r\n                }\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  appState.graph.distanceDensityCurrentlyClicked.includes(String(node.data.ref[appState.graph.groupby]))\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\" \r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              // e.target.getAttribute('fill') node.renderData.color,\r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              \r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\n// import { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport SelectionDetail from \"./panels/SelectionDetail\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        {/* {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 1 && <SelectionDetail />\r\n        } */}\r\n        {/* {appState.graph.selectedNodes.length === 1 && (\r\n          <NodeDetail node={appState.graph.selectedNodes[0].data.ref} />\r\n        )} */}\r\n\r\n        {/* {appState.graph.selectedNodes.length !== 1 && appState.graph.currentlyHovered && (\r\n          <NodeDetail node={appState.graph.currentlyHovered.data.ref} />\r\n        )} */}\r\n\r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from 'ngraph.graph';\r\nimport path from 'ngraph.path';\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    \r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                appState.graph.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? String.fromCharCode(communityDict[node.id] + 97)  : 'a'\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n               \r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n\r\n                appState.graph.nodes.convexhullby = \"community\"\r\n                appState.graph.nodes.groupby = \"community\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    runShortestPath = () =>{\r\n        \r\n\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n            var p = 0.017453292519943295;    // Math.PI / 180\r\n            var c = Math.cos;\r\n            var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n              c(lat1 * p) * c(lat2 * p) *\r\n              (1 - c((lon2 - lon1) * p)) / 2;\r\n        \r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n          }\r\n        \r\n        const graph = createGraph();\r\n        \r\n        // hardcode LatY and LonX for sample dataset \r\n        appState.graph.rawGraph.nodes.forEach(node => graph.addNode(node[\"id\"].toString(),  { LatY: parseFloat(node[\"LatY\"]),LonX: parseFloat(node[\"LonX\"]) }))\r\n        appState.graph.rawGraph.edges.forEach(edge => graph.addLink(edge[\"source_id\"], edge[\"target_id\"]));\r\n\r\n        const shortestPathPairs = () => {\r\n            let pathFinder = path.aGreedy(graph);\r\n            const pathsArr = []\r\n            const pathsSet = new Set();\r\n        \r\n        \r\n        \r\n            graph.forEachNode(function (fromnode) {\r\n        \r\n              graph.forEachNode(function (tonode) {\r\n                if (fromnode.id !== tonode.id) {\r\n                  const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n                  const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n                  const edgeinfo = appState.graph.rawGraph.edges.filter((edge)=>{\r\n                    return (edge.source_id === fromnode.id && edge.target_id === tonode.id)\r\n                  })\r\n                  let pairdist = calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n                  \r\n                  \r\n                  \r\n                  // undirected graph:\r\n                  // only add once for undirected graph \r\n                  if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n                    pathsSet.add(pathKey1);\r\n                    pathsSet.add(pathKey2);\r\n                    pathsArr.push({\r\n                     \"source\":fromnode.id,\r\n                     \"target\":tonode.id,\r\n                    \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n                    \"distance\": pairdist\r\n                  \r\n                   })\r\n                  }\r\n                   \r\n                  //directed graph: \r\n                }\r\n                \r\n              })\r\n        \r\n            })\r\n            // console.log(nodesArr.length)\r\n            // console.log(pathsArr.length)\r\n            return pathsArr\r\n        \r\n          }\r\n          appState.graph.rawGraph.paths = shortestPathPairs();\r\n          appState.graph.metadata.nodeComputed.push('shortest path')\r\n            appState.graph.metadata.nodeComputed.push('pair distance')\r\n            appState.graph.scatterplot.x = 'pair distance'\r\n            appState.graph.scatterplot.y = 'shortest path'\r\n\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n          \r\n        // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                \r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes,\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runShortestPath}>Run Shortest Path</Button>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community</Button>\r\n                        {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n                    {appState.graph.modularity? <text className=\"modularity-tag\" style={{fontSize: \"8px\"} } >{\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}</text>: null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"12px\" }}>Convex Hull By: </p>\r\n                        <span style={{ }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                    appState.graph.convexPolygonsShow = true\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"12px\" }}>Cluster By: </p>\r\n                        <span style={{  }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\n\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n          x[i].style.display = \"none\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n      return appState.graph.frame && (\r\n        <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n                <div class=\"w3-bar w3-black\">\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                </div> \r\n                <div id=\"Appearance\" class=\"city\">\r\n                    <text style={{fontSize: \"12px\"}}>Appearance </text>\r\n                    <Tabs2 animate id=\"graph-options\">\r\n                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Filter\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Filter Options</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"f_nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Statistics\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Statistics</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"s_layout\" title=\"Groups\" panel={<StatGroupPanel />} />\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                    <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colspan=\"2\" style={{textAlign: \"center\"}}><Tag>Statistics</Tag></th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td># Nodes</td>\r\n                                <td>{appState.graph.metadata.fullNodes}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td># Edges</td>\r\n                                <td>{appState.graph.metadata.fullEdges}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Average Degree</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Density</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Diameter</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Clustering<br></br>Coefficient</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Connected <br></br>Component</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </SidebarMenu>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n      })} style={{display: \"flex\"}}>\r\n        <div>\r\n        <NavbarSelector />\r\n        </div>\r\n        <div class=\"container\" style={{paddingTop:\"5vh\", maxWidth:\"100vw\", height:\"100%\"}}>\r\n          <div class=\"container\" style={{height:\"100%\"}}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                    {appState.graph.hasGraph && <Tag className=\"network-tag\">Network</Tag>}\r\n                    <main className=\"main\">\r\n                      {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                        <ThreeJSVis />\r\n                      ) : (\r\n                        <WorkspaceView />\r\n                      )}\r\n                    </main>\r\n                    {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                    <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div class=\"container__right\">\r\n                  {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",width: '40vw'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame &&  <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame  && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}