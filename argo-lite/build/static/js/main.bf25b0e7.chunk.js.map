{"version":3,"sources":["stores/PreferencesStore.js","services/AlgorithmUtils.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/panels/SelectionDetail.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","jsnx","require","jsgraphs","averageClusteringCoefficient","snapshot","jsnxGraph","Graph","addNodesFrom","rawGraph","nodes","map","n","id","addEdgesFrom","edges","e","source_id","target_id","convertToJsnx","result","averageClustering","selectedNodes","length","filter","x","undefined","selection","connectedComponents","cc","ConnectedComponents","i","idDict","g","forEach","addEdge","convertToJSGraph","componentCount","exactGraphDiameter","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","Math","max","GraphStore","_dec","ref","_dec2","initialGlobalConfig","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","labelBy","shape","labelSize","labelLength","crossColor","scatterplot","y","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_lastSelectedSingleNode","nodesShowingLabels","_descriptor27","_descriptor28","_descriptor29","_descriptor30","_descriptor31","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_descriptor36","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","_descriptor42","_descriptor43","_descriptor44","hasGraphLoaded","get","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","k","removeList","indexOf","u","toLowerCase","split","s","charAt","toUpperCase","substring","join","neighborIDs","j","links","link","push","fromId","toId","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","done","err","scales","domain","minMax","range","_this","Set","item","selectedNodeId","setOfNeighborIds","source","toString","target","add","node","has","_this2","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","_this3","runInAction","Object","keys","_objectSpread","satisfy","fkey","nodePropertyTypes","includes","getNodeList","renderData","draw_object","children","visible","nodeids","_this4","_this5","removeNodesByIds","_this6","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","a","b","half","floor","medianLat","medianLon","lat1","lon1","lat2","lon2","c","cos","asin","sqrt","calDistanceFromLatLonInKm","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","edgeProperties","savedStatesStr","runActiveLayout","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this7","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","nodeCount","graphDensity","sum","degree","averageDegree","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","convexhullby","groupby","mapClicked","currentlyHovered","convexNodes","pathHovered","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","clearBrush","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","clearSelection","pinNodes","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","replace","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","shortestPathPairs","pathsArr","rank","_context4","parseInt","centrality","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","array","reduce","pathFinder","aGreedy","pathsSet","pathKey1","pathKey2","find","pageRank","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","linkObjs","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightClickNode","neighborNodes","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","edge","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","_loop","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","thenode","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","fontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","edgeDist","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","newDelimiter","updateDelimiter","DIALOG_BODY","TABLE","href","Spinner","renderExampleDataset","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","toFixed","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","class","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","marginLeft","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","onRelease","_ref3","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","role","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","autoZoom","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","mapEdgeShow","edgeSelectionID","nodesSelectedID","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","neighborNodesID","selectedNeighborIDs","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","flex","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","mouseover","mouseout","direction","permanent","defaultChecked","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","edgeSelection","SelectionDistanceFromLatLonIn","selectNodes","edgeDistance","uniqEdgeSelection","SelectionDensity","nodelength","selectneighbors","onEdgeBrushStart","sourceEvent","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","selectAll","brushBounds","each","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","SVGBrush","extent","getEventMouse","_this$edgesvg$getBoun","brushType","onBrushStart","onBrush","onBrushEnd","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","x0","y0","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","input","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","tickFormat","ti","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","column1","column2","header","csvarray","selectionNodeID","circles","svg","nodecx","nodecy","renderBrush","_this$svg$getBounding","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","XYSelect","allComputedPropertiesKeyList","RenderCircles","Axis","axis","axisBottom","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","renderCircles","cluster","ci","cx","cy","onMouseOver","_e$target$getAttribut","_e$target$getAttribut2","sourceid","targetid","onMouseLeave","_e$target$getAttribut3","_e$target$getAttribut4","dataset","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","StatGroupPanel","fromCharCode","runShortestPath","pairdist","Sidebar","cityName","getElementsByClassName","SidebarMenu","openCity","colspan","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","keydown","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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AAKmzB,UAAU,KAE7DC,QAAS,CAAE7a,KAAM,IAAK3Y,MAAOI,KAAKozB,SAClCC,WAAY,CAAE9a,KAAM,IAAK3Y,MAAOI,KAAKqzB,YACrCC,UAAW,CAAE/a,KAAM,IAAK3Y,MAAOI,KAAKszB,YAEtCI,aA9JuB,CACvB,yBACA,GACA,2BACA,2BACA,uBACA,wBACA,yBACA,qBACA,4BACA,GACA,iCACA,gCACA,2BACA,2BACA,sBACA,yBACA,sBACA,qBACA,iCACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,qCACA,GACA,6BACA,uBACA,2BACA,kBACA,GACA,IACA,GACA,gBACA,GACA,kDACA,2EACA,GACA,uCACA,gBACA,GACA,mDACA,sDACA,gDACA,4CACA,GACA,oDACA,2CACA,2CACA,GACA,2DACA,sDACA,GACA,oCACA,uCACA,QACA,GACA,gBACA,mEACA,wEACA,aACA,qDACA,qDACA,0CACA,GACA,+CACA,8CACA,6EACA,GACA,QACA,GACA,2EACA,2CACA,0BACA,wBACA,GACA,qDACA,qCACA,GACA,iEACA,mCACA,GACA,KA0EiC3qB,KAAK,QACtC4qB,eAxEyB,CACzB,kDACA,2BACA,GACA,yBACA,wBACA,yBACA,0BACA,4BACA,2BACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,gBACA,GACA,uBACA,oCACA,qDACA,0BACA,SACA,OACA,wBACA,mDACA,KA8CqC5qB,KAAK,UAoB5C,cAjBOupB,EAAWI,iBACXJ,EAAWnwB,WACXmwB,EAAWK,cACXL,EAAWntB,aACXmtB,EAAWO,eACXP,EAAWQ,kBACXR,EAAWU,uBACXV,EAAWW,YACXX,EAAWY,WACXZ,EAAWa,iBACXb,EAAWe,kBACXf,EAAWgB,UAElBC,EAAShb,KAAO,mBAEhBgb,EAASK,UAAUtB,GAEZiB,GAGTxD,EAAMsC,iBAAiBnxB,UAAY6K,OAAOiM,OAAO+X,EAAM0C,SAASvxB,WAChE6uB,EAAMsC,iBAAiBnxB,UAAUgb,YAAc6T,EAAMsC,iBAErDtC,EAAMsC,iBAAiBnxB,UAAU2yB,KAAO,S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","file":"static/js/main.bf25b0e7.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","const jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    const result = jsnx.averageClustering(jsnxGraph);\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    console.log('compute connected copoenent')\r\n    return cc.componentCount();\r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    return dia;\r\n}\r\n ","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter } from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor: [\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot: {\r\n      x: 'degree',\r\n      y: 'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  @observable filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable autoZoom = true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n  @observable clearBrush = false;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on \r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\"pagerank\", \"degree\", 'centrality', 'distance to center', 'betweeness centrality', 'closeness centrality', 'distance to group center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  @observable\r\n  degreeselection = []\r\n\r\n  @observable\r\n  degreebrushed = false\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = []\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden', 'id', 'Longitude', 'Latitude', 'LatY', 'LonX', 'dist to center', 'dist_to_center', 'centrality', 'shortest path', 'pair distance', 'node_id', 'standard distance', 'network density']\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n\r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return u.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')\r\n    })\r\n    return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n\r\n\r\n\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j] || !this.selectedNodes[j].links) continue\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        })\r\n\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([\r\n          ...neighborIDs\r\n        ])\r\n        return uniqNeighborIDs\r\n      } else {\r\n        return []\r\n      }\r\n    } else {\r\n      return []\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      const nominalColor =  [\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n        .range(nominalColor);\r\n    } else { //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() {\r\n    runInAction('filter nodes', () => {\r\n      if (Object.keys(this.filter).length === 0){\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {return { ...n, isHidden: false }});\r\n      }\r\n\r\n      if (Object.keys(this.filter).length !== 0) {\r\n\r\n\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == 'string') {\r\n              if (this.filter[fkey].length > 0 && (!this.filter[fkey].includes(n[fkey]))) {\r\n                satisfy = false\r\n              }\r\n            } else {  // number range \r\n              if (this.filter[fkey] && (n[fkey] < this.filter[fkey]['min'] || n[fkey] > this.filter[fkey]['max'])) {\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n      }\r\n\r\n    });\r\n    if (this.selectedNodes.length > 0) {\r\n      this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n\r\n    if (this.frame.selection.length > 0) {\r\n      this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n    this.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n    // this.runActiveLayout()\r\n\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\"\r\n    const toId = \"target_id\"\r\n    const mapId = \"ID\"\r\n    const mapLon = \"LonX\"\r\n    const mapLat = \"LatY\"\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr =\r\n    initialgraph.rawGraph.nodes.map(\r\n        n => ({ ...n, LonX: parseFloat(n[\"LonX\"]), LatY: parseFloat(n[\"LatY\"]) }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n  \r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n  \r\n    // const edgesSet = new Set();\r\n  \r\n    // const edgesArr = [];\r\n  \r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n  \r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n  \r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n  \r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n      edgesArr.forEach(it => {\r\n        const fromnode = nodesArr.filter((node)=>{return node.id === it[fromId].toString()})\r\n        const tonode = nodesArr.filter((node)=>{return node.id === it[toId].toString()})\r\n        const Nonloc = 360\r\n        if(fromnode.length > 0 && tonode.length >0){\r\n        it.fromlocLatY = parseFloat(fromnode[0].LatY)\r\n        it.fromlocLonX = parseFloat(fromnode[0].LonX)\r\n        it.tolocLatY = parseFloat(tonode[0].LatY)\r\n        it.tolocLonX = parseFloat(tonode[0].LonX) }\r\n        else{\r\n        it.fromlocLatY = Nonloc\r\n        it.fromlocLonX = Nonloc\r\n        it.tolocLatY = Nonloc\r\n        it.tolocLonX = Nonloc\r\n        }// observable array???\r\n        it.withinState = true\r\n        it.withinFamily = true\r\n        \r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n        \r\n      });\r\n    } \r\n\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295;    // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n        c(lat1 * p) * c(lat2 * p) *\r\n        (1 - c((lon2 - lon1) * p)) / 2;\r\n  \r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n  \r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n  \r\n  \r\n    const calMedianCenter = ()=>{\r\n      const latlist = nodesArr.map(n => parseFloat(n['LatY']))\r\n      const lonlist = nodesArr.map(n => parseFloat(n['LonX']))\r\n      const medianCenter = (values)=>{\r\n        if(values.length ===0) throw new Error(\"No inputs\");\r\n  \r\n        const result1 = [...values].sort((a, b) => a - b)\r\n      \r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n      \r\n        var half = Math.floor(result1.length / 2);\r\n        \r\n        if (result1.length % 2)\r\n          return result1[half];\r\n        \r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      }\r\n  \r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist)\r\n        const medianLon = medianCenter(lonlist)\r\n        nodesArr.forEach(function (n, i) {\r\n          n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n        })\r\n      }\r\n  \r\n  \r\n    }\r\n  \r\n    if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n      // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  \r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n      // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n  \r\n  \r\n  \r\n    //   graph.forEachNode(function (fromnode) {\r\n  \r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph \r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n            \r\n    //          })\r\n    //         }\r\n             \r\n    //         //directed graph: \r\n    //       }\r\n  \r\n    //     })\r\n  \r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n  \r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n  \r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0])\r\n    const nodePropertyTypes = {}\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n    })\r\n    const uniqueValue = {}\r\n    nodekeyList.forEach(function (k, i) {\r\n  \r\n      if (nodePropertyTypes[k] == 'string') {\r\n        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        const minv = Math.min(...valuea)\r\n        const maxv = Math.max(...valuea)\r\n        uniqueValue[k] = [minv, maxv]\r\n      }\r\n    })\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: 'Untitled Graph',\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: ['pagerank', 'degree', 'distance to center'],\r\n        edgeProperties: ['source_id', 'target_id'],\r\n       \r\n      },\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    \r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph \r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n    \r\n  \r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = 'degree';\r\n    this.scatterplot.y = 'distance to center';\r\n\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n  //   appState.graph.frame.paused = false;\r\n  // appState.graph.frame.resumeLayout();\r\n  //                 this.forceUpdate();\r\n  \r\n\r\n                      // this.frame.resumeLayout();\r\n                      // this.forceUpdate();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout  () {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n    \r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size >0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n \r\n  density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n \r\n  degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n\r\n  diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n}","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true\r\n  appState.graph.clearBrush = false;\r\n \r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    appState.graph.frame.selection = []\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  \r\n  // appState.graph.runActiveLayout();\r\n  // setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length>0){  //dehilight border when innitially load \r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n  }\r\n  if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n    this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  }\r\n})\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"8b1fa770-a1d0-43f0-b798-def14744dd8c\"],   \r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  [\"Mafia Family Network\", \"c43890f8-1cfb-4599-a0d3-8f47303691fc\"],\r\n  [\"US flight Network\", '9cf82a47-e5b6-4d45-87aa-fae9e4ca66fa'],\r\n  ['US 117th House Vote Network',\"1b34e961-34d6-4482-b8da-cf5fd2dc9d65\"]\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.graph.clearBrush = false;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  // appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        \r\n      }\r\n      appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] ) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr , paths: pathsArr},\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1 )&& link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = []\r\n    const edgekeys = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && edgekeys.indexOf(key1) == -1) {\r\n            withinEdges.push(link)\r\n            edgekeys.push(key1)\r\n            edgekeys.push(key2)\r\n            // edgecount = edgecount+1\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n //highlight nodes and edges within selection\r\n self.updateDegreeHistOpacity = function () {\r\n  if (self.degreehighlight.length > 0) {\r\n    if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n      const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n        var p = 0.017453292519943295;    // Math.PI / 180\r\n        var c = Math.cos;\r\n        var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n          c(lat1 * p) * c(lat2 * p) *\r\n          (1 - c((lon2 - lon1) * p)) / 2;\r\n    \r\n        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n      }\r\n      var sumOfAllDistance = 0;\r\n      var n = 0;\r\n      var max = 0;\r\n      self.graph.forEachNode(n => {\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX)\r\n        if (dist > max) {\r\n          max = dist;\r\n        }\r\n      })\r\n      self.graph.forEachNode(n => {  \r\n        // self.colorNodeColor(n, \"#0000FF\");\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX);\r\n        console.log(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0]['LatY'],self.degreehighlight[0]['LatX'])\r\n        self.colorNode(n, 0x0000FF);\r\n        if (dist == 0) {\r\n          self.colorNodeOpacity(n, 1);\r\n        } else if (dist < max/4) {\r\n          self.colorNodeOpacity(n, 0.2);\r\n        }else if (dist < (2*max)/4) {\r\n          self.colorNodeOpacity(n, 0.4);\r\n        }else if (dist < (3*max)/4) {\r\n          self.colorNodeOpacity(n, 0.6);\r\n        }\r\n        else {\r\n          self.colorNodeOpacity(n, 0.8);\r\n        }\r\n        \r\n        \r\n      });\r\n    }\r\n    else {\r\n    self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })  \r\n\r\n    //hilight within edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    const withinEdges = self.getEdgeWithinSelection(self.degreehighlight)\r\n\r\n    for (var i = 0; i < withinEdges.length; i++) {\r\n      withinEdges[i].linecolor.r = red;\r\n      withinEdges[i].linecolor.g = blue;\r\n      withinEdges[i].linecolor.b = green;\r\n    }\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //highlight nodes \r\n    for (var i = 0; i < self.degreehighlight.length; i++) {\r\n      self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n    }\r\n\r\n  } \r\n  }else {        //when no nodes satisfying the condition, all 0.2 opacity \r\n    self.graph.forEachNode(n => {\r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    self.colorNodeEdge(null);\r\n  }\r\n}\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n      \r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {  \r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX,self.selection[0]['LatY'],self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max/4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          }else if (dist < (2*max)/4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          }else if (dist < (3*max)/4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n          \r\n          \r\n        });\r\n      }\r\n      else {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } \r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n   //highlight clicked nodes and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node ) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n    //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //   //fisrt dehighlight all the edges\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })  \r\n\r\n    //   //hilight neighbor edges\r\n    //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n    //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //   const withinEdges = node.linkObjs\r\n\r\n    //   for (var i = 0; i < withinEdges.length; i++) {\r\n    //     withinEdges[i].linecolor.r = red;\r\n    //     withinEdges[i].linecolor.g = blue;\r\n    //     withinEdges[i].linecolor.b = green;\r\n    //   }\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n    // } else {        //when no nodes are given, all 1 opacity \r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n        \r\n    //   });\r\n    //   self.colorNodeEdge(null);\r\n    // }\r\n   \r\n\r\n    // self.highlightNode(node, true);\r\n    // node.renderData.textHolder.children[0].element.hideme = false;\r\n    self.colorNodeEdge(node);\r\n  }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (!node) return \r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null\r\n      \r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"square\",\r\n  NODE_HSHAPE: \"square\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if(!self.selection[i]) continue\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n      // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    }\r\n\r\n  // };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  }\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null\r\n      // appState.graph.networkClicked = null\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n      \r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node)\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      \r\n      \r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n        \r\n        \r\n      }\r\n\r\n\r\n\r\n      \r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 500) {\r\n        self.doubleClicked = true;\r\n        \r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null\r\n    appState.graph.degreeselection = []\r\n    appState.graph.degreebrushed = false\r\n    \r\n    self.updateSelectionOpacity();\r\n\r\n    if(self.selection.length == 1){\r\n      const thenode = self.selection[0]\r\n      self.highlightClickNode(thenode)\r\n      appState.graph.mapClicked = thenode\r\n      // self.selection = self.getNeighborNodesFromGraph(thenode);\r\n      appState.graph.selectedNodes = self.getNeighborNodesFromGraph(thenode);\r\n        \r\n      \r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if(self.selection.length == 0){\r\n      appState.graph.mapClicked = null\r\n    }\r\n    \r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *13;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize *2 ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    document.getElementById(\"showSelected\").style.display=\"none\";\r\n    document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    document.getElementById(\"hideAll\").style.display=\"none\";\r\n    document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    document.getElementById(\"showAll\").style.display=\"none\";\r\n    document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function() {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n     //directed arrows\r\n     self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n     var arrowPosition = self.directedArrows.attributes.position.array;\r\n     var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x)/2;\r\n            var midPointY = (v1pos.y + v2pos.y)/2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          } \r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function() {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function() {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function(node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function() {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function(graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function(node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function(link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n    });\r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        self.ee.emit(\"select-nodes\", self.selection);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function(positions) {\r\n    self.graph.forEachNode(function(node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function(node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  <MenuItem\r\n  iconName={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Distance to center\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Shortest path\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Pair distance\"\r\n            ? \"globe\" : \"graph\"}\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        />\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        />\r\n        {/* <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        /> */}\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderExampleDataset(){\r\n    return(\r\n      <div id=\"exampleTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n        <p>Required attributes for nodelist.csv. Each row of the node table should represent attributes of a node, including at least a unique node ID and the node's longitude and latitude. </p>\r\n                    <table id=\"exampleNodeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead >\r\n                            <tr>\r\n                                <th > ID (unique node ID field) </th>\r\n                                <th> LonX (node longitude ) </th>\r\n                                <th> LatY (node latitude ) </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>67.2391</td>\r\n                                <td>-102.3472</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Required attributes for edgelist.csv. Each row of the edge table should represent attributes of an edge, including at least a source and target column corresponding to the node ID. </p>\r\n                    <table id = \"exampleEdgeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th > Source </th>\r\n                                <th> Target </th>\r\n                              \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>\"FWL\"</td>\r\n                \r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Example Dateset:</p>\r\n                    <a className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1_OIDSbUyM9gTqziVdcqU_NsGxkk6HMTo/view?usp=share_link\"> US_airport_nodelist.csv</a>\r\n                    <a className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1cvOUir8gKDlS_hhNGL0qQOn2eNHCDsOU/view?usp=share_link\"> US_airport_edgelist.csv</a>\r\n                </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderExampleDataset()}\r\n              {this.renderDelimiterSelection()}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            Argo supports both mouse/trackpad and touchscreen.\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.filterKeyList}\r\n                    onSelect={it => {appState.graph.nodes.colorBy = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => {appState.graph.nodes.color.scale = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => {appState.graph.nodes.color.from = it.hex\r\n                          appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => {appState.graph.nodes.color.to = it.hex\r\n                        appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={appState.graph.filterKeyList}\r\n                    // itemRenderer={CommonItemRenderer}\r\n                    // filterable={false}\r\n                    onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                    value={appState.graph.nodes.sizeBy}\r\n                    />\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                  />\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n              <div style = {{height:\"15px\"}}>\r\n\r\n              </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <text style={{fontSize: \"12px\"}}>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable>\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"12px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"none\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\",display:\"none\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={20}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => {appState.graph.nodes.labelBy = it; appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: this.state[it + '_filterlist'] ? [...this.state[it + '_filterlist'], selectit] : [selectit]\r\n                    })\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={(Object.keys(appState.graph.filter).length === 0) ? []:this.state[it + '_filterlist']}\r\n\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    placeholder: '  ',\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      if (deselectIndex0 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:this.state[it + '_filterlist'].filter(item => item !== selectit)\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it] && appState.graph.filter[it][\"min\"])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                {/* <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                />\r\n                <MenuDivider /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                /> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                />\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n              {/* {                    {appState.graph.hasGraph && <Button className={\"pt-small\"} text=\"Clear Selection and Filter\" onClick={() => (appState.graph.overrides = new Map())} />}} */}\r\n              <div className=\"pt-button-group\">\r\n              <a className=\"pt-button pt-icon-refresh\"  role=\"button\" onClick={() => {\r\n                appState.graph.mapClicked = undefined;\r\n                appState.graph.selectedNodes = [];\r\n                appState.graph.frame.selection = []\r\n                appState.graph.filter  = {}\r\n                appState.graph.currentlyHovered = undefined;\r\n                // appState.graph.mapClicked = undefined;\r\n                appState.graph.edgeselection = [];\r\n                appState.graph.degreeselection = [];\r\n                appState.graph.degreebrushed = false;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n                appState.graph.distanceDensityCurrentlyClicked = [];\r\n                appState.graph.clearBrush = true;\r\n                appState.graph.filterNodes()\r\n                appState.graph.frame.updateSelectionOpacity()\r\n                // this.forceUpdate();\r\n              }}> Clear All Selections and Filters</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      // appState.graph.selectedNodes = []\r\n      appState.graph.selectedNodes = selectionNode\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if(!appState.graph.autoZoom) return;\r\n        if (appState.graph.frame.selection.length ==0) {\r\n          // if (appState.graph.frame.getNodeList() >0){\r\n            const nodeLoc = appState.graph.frame.getNodeList().map(function(node){\r\n              return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n            })\r\n            const b = latLngBounds() // seemed to work without having to pass init arg\r\n            nodeLoc.forEach(coords => {\r\n                b.extend(coords)\r\n            })\r\n            if(Object.keys(b).length > 0){\r\n              map.fitBounds(b)\r\n            }\r\n            \r\n          // }\r\n          return null;\r\n        }   //no selection \r\n        if (appState.graph.frame.selection.length ==1) return;  // only one node is selected \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        if(Object.keys(b).length > 0){\r\n          map.fitBounds(b)\r\n        }\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n          if (appState.useToolbartoSelect) {\r\n            appState.useToolbartoSelect = false\r\n          } else {\r\n            appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        \r\n          }\r\n        \r\n        \r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\n\r\n  ","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON, FeatureGroup, Circle } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\"\r\nimport { ZoomMap, MapClick } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\"\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\"\r\n\r\nimport Curve from \"../components/Curve\"\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered && appState.graph.currentlyHovered.links) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n        return `${edge.source.id}👉 ${edge.target.id}`\r\n      })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n    console.log(appState.graph.watchAppearance)\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if(appState.graph.degreeselection.length>0){\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n    if(appState.graph.degreebrushed && appState.graph.degreeselection.length==0){\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const neighborIDs = appState.graph.selectedNeighborIDs\r\n      if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if(neighborIDs.indexOf(node.id) !== -1){\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      }\r\n      else {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.03, stroke: false, zIndex: 'auto' }\r\n\r\n      }\r\n    }\r\n    else {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyClicked.length > 0) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    \r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"100%\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n        \r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n        \r\n\r\n        {/* <ReactLeafletToolbar /> */}\r\n        \r\n        <AreaSelect />\r\n        <ZoomMap /> \r\n        <MapClick />\r\n\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n            {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n              return (\r\n                // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                //   data={edge}\r\n                // // eventHandlers={{\r\n                // //   click: (e) => {\r\n                // //     console.log(e.target.options.data)\r\n                // //   }}}\r\n                // />\r\n                <Curve path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n          options={this.setEdgePathOption(edge)}\r\n            />\r\n                \r\n                \r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                        appState.graph.edgeselection = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.fontSize}\r\n                      className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> : <Tooltip className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <div>\r\n        <Switch style={{ position: 'fixed', top: '5vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.mapEdgeShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.mapEdgeShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '5vh', right: '4vw', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n        <Switch style={{ position: 'fixed', top: '8vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.convexPolygonsShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '8vh', right: '4vw', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n        <Switch style={{ position: 'fixed', top: '11vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.autoZoom}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.autoZoom = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '11vh', right: '4vw', zIndex: '1000' }}> Automatic Zoom</span>\r\n        </div>\r\n        \r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n      \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 64, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n  const thenode = appState.graph.selectedNodes[0]\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n    \r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n  \r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n  \r\n  \r\n      })\r\n  \r\n      \r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n      \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n\r\n      // when no node statisfy, should dehighlight \r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n    \r\n    \r\n  \r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n    \r\n  \r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n    \r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      selectionNode = selectneighbors.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }\r\n\r\n    \r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                  \r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.selectedNodes.length ==1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n  \r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                   \r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                    \r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n  \r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n  \r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                    \r\n  \r\n  \r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n  \r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            } \r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n  \r\n  \r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n     \r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density() ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            \r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n                \r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 50, left: 50 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // this.state.;\r\n    if (appState.graph.scatterplot.x === 'shortest path') {\r\n      column1 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n      column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.x)\r\n      column1 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n      })\r\n    }\r\n\r\n    if (appState.graph.scatterplot.y === 'shortest path') {\r\n      column2 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n      column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.y)\r\n      column2 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n      })\r\n    }\r\n\r\n    let temp = []\r\n    temp.push(header)\r\n    for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n      temp.push([column1[i], column2[i]]);\r\n    }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false;\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = []\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    if(selection != null) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      }\r\n      console.log(selection[0][1], selection[1][1],brushBounds.y1, brushBounds.y0);\r\n  \r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n        console.log(nodecx, nodecy);\r\n        if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n          selectionNodeID.push(select(this).attr(\"id\"))\r\n        }\r\n  \r\n  \r\n  \r\n      })\r\n  \r\n  \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n  \r\n      )\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.selectedNodes = selectionNode\r\n  \r\n  \r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity()\r\n    }\r\n    \r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left,  this.margin.top], [this.width + this.margin.left, this.height + this.margin.top ]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\"}}>X By: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                <text style={{ transform: 'translate(20vw, 28vh)' }} fontSize=\"12px\">{(appState.graph.scatterplot.x === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text \r\n                 style={{ transform: \"translate(-3vw, 21vh) rotate(-90deg)\", }}\r\n                  // transform={\"translate(-3vw, 21vh) rotate(-90deg)\"}\r\n                  fontSize=\"12px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(35vw, 1vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(12vw, 1.0vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n      // density distance node style\r\n\r\n      // //hover on one group \r\n      // if (appState.graph.distanceDensityCurrentlyHovered) {\r\n\r\n      //   if (String(node['name']) === String(appState.graph.distanceDensityCurrentlyHovered)) {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"10000\",\r\n      //       stroke: def.NODE_HIGHLIGHT,\r\n      //       fillOpacity: 0.8\r\n      //     }\r\n      //   } else {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"0\",\r\n      //       stroke: false,\r\n      //       fillOpacity: 0.1\r\n      //     }\r\n      //   }\r\n\r\n      // } else {// no hover \r\n      //   return {\r\n      //     fill: appState.graph.nodeColorScale(node['name']),\r\n      //     zIndex: \"0\",\r\n      //     stroke: false,\r\n      //     fillOpacity: 0.8\r\n      //   }\r\n\r\n      // }\r\n      \r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (appState.graph.distanceDensityCurrentlyClicked.includes(String(node['name']))) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } \r\n        else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n      }\r\n    }\r\n    else { //path node style \r\n      return {\r\n        \r\n        fill: appState.graph.edges.color,\r\n        zIndex: \"0\",\r\n        stroke: false,\r\n        fillOpacity: 0.8\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              // onMouseOver={(e) => {\r\n              //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n              //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n              //     // console.log(node)\r\n              //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n              //   )\r\n              //   appState.graph.frame.selection = selectionNode\r\n              //   appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n              //   // console.log(selectionNode)\r\n              //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              // }}\r\n              // onMouseLeave={(e) => {\r\n\r\n              //   if (appState.graph.mapClicked) return;\r\n              //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n              //   appState.graph.frame.selection = []\r\n              //   appState.graph.selectedNodes = []\r\n              //   appState.graph.edgeselection = []\r\n\r\n              //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              //     // if (n !== appState.graph.mapClicked) {\r\n              //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              //     // }\r\n              //   }\r\n              //   );\r\n\r\n\r\n              // }}\r\n              onClick={(e) => {\r\n                if (appState.graph.distanceDensityCurrentlyClicked.includes(e.target.getAttribute('id'))) {\r\n                  appState.graph.distanceDensityCurrentlyClicked = appState.graph.distanceDensityCurrentlyClicked.filter(node => \r\n                    node !==  e.target.getAttribute('id')\r\n                  )\r\n                }\r\n                else {\r\n                  appState.graph.distanceDensityCurrentlyClicked.push(e.target.getAttribute('id'));\r\n                }\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  appState.graph.distanceDensityCurrentlyClicked.includes(String(node.data.ref[appState.graph.groupby]))\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\" \r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              // e.target.getAttribute('fill') node.renderData.color,\r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              \r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\n// import { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport SelectionDetail from \"./panels/SelectionDetail\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        {/* {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 1 && <SelectionDetail />\r\n        } */}\r\n        {/* {appState.graph.selectedNodes.length === 1 && (\r\n          <NodeDetail node={appState.graph.selectedNodes[0].data.ref} />\r\n        )} */}\r\n\r\n        {/* {appState.graph.selectedNodes.length !== 1 && appState.graph.currentlyHovered && (\r\n          <NodeDetail node={appState.graph.currentlyHovered.data.ref} />\r\n        )} */}\r\n\r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from 'ngraph.graph';\r\nimport path from 'ngraph.path';\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    \r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                appState.graph.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? String.fromCharCode(communityDict[node.id] + 97)  : 'a'\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n               \r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n\r\n                appState.graph.nodes.convexhullby = \"community\"\r\n                appState.graph.nodes.groupby = \"community\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    runShortestPath = () =>{\r\n        \r\n\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n            var p = 0.017453292519943295;    // Math.PI / 180\r\n            var c = Math.cos;\r\n            var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n              c(lat1 * p) * c(lat2 * p) *\r\n              (1 - c((lon2 - lon1) * p)) / 2;\r\n        \r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n          }\r\n        \r\n        const graph = createGraph();\r\n        \r\n        // hardcode LatY and LonX for sample dataset \r\n        appState.graph.rawGraph.nodes.forEach(node => graph.addNode(node[\"id\"].toString(),  { LatY: parseFloat(node[\"LatY\"]),LonX: parseFloat(node[\"LonX\"]) }))\r\n        appState.graph.rawGraph.edges.forEach(edge => graph.addLink(edge[\"source_id\"], edge[\"target_id\"]));\r\n\r\n        const shortestPathPairs = () => {\r\n            let pathFinder = path.aGreedy(graph);\r\n            const pathsArr = []\r\n            const pathsSet = new Set();\r\n        \r\n        \r\n        \r\n            graph.forEachNode(function (fromnode) {\r\n        \r\n              graph.forEachNode(function (tonode) {\r\n                if (fromnode.id !== tonode.id) {\r\n                  const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n                  const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n                  const edgeinfo = appState.graph.rawGraph.edges.filter((edge)=>{\r\n                    return (edge.source_id === fromnode.id && edge.target_id === tonode.id)\r\n                  })\r\n                  let pairdist = calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n                  \r\n                  \r\n                  \r\n                  // undirected graph:\r\n                  // only add once for undirected graph \r\n                  if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n                    pathsSet.add(pathKey1);\r\n                    pathsSet.add(pathKey2);\r\n                    pathsArr.push({\r\n                     \"source\":fromnode.id,\r\n                     \"target\":tonode.id,\r\n                    \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n                    \"distance\": pairdist\r\n                  \r\n                   })\r\n                  }\r\n                   \r\n                  //directed graph: \r\n                }\r\n                \r\n              })\r\n        \r\n            })\r\n            // console.log(nodesArr.length)\r\n            // console.log(pathsArr.length)\r\n            return pathsArr\r\n        \r\n          }\r\n          appState.graph.rawGraph.paths = shortestPathPairs();\r\n          appState.graph.metadata.nodeComputed.push('shortest path')\r\n            appState.graph.metadata.nodeComputed.push('pair distance')\r\n            appState.graph.scatterplot.x = 'pair distance'\r\n            appState.graph.scatterplot.y = 'shortest path'\r\n\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n          \r\n        // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                \r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes,\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runShortestPath}>Run Shortest Path</Button>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community</Button>\r\n                        {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n                    {appState.graph.modularity? <text className=\"modularity-tag\" style={{fontSize: \"8px\"} } >{\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}</text>: null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"12px\" }}>Convex Hull By: </p>\r\n                        <span style={{ }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                    appState.graph.convexPolygonsShow = true\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"12px\" }}>Cluster By: </p>\r\n                        <span style={{  }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\n\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n          x[i].style.display = \"none\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n      return appState.graph.frame && (\r\n        <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n                <div class=\"w3-bar w3-black\">\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                </div> \r\n                <div id=\"Appearance\" class=\"city\">\r\n                    <text style={{fontSize: \"12px\"}}>Appearance </text>\r\n                    <Tabs2 animate id=\"graph-options\">\r\n                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Filter\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Filter Options</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"f_nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Statistics\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Statistics</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"s_layout\" title=\"Groups\" panel={<StatGroupPanel />} />\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                    <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colspan=\"2\" style={{textAlign: \"center\"}}><Tag>Statistics</Tag></th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td># Nodes</td>\r\n                                <td>{appState.graph.metadata.fullNodes}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td># Edges</td>\r\n                                <td>{appState.graph.metadata.fullEdges}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Average Degree</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Density</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Diameter</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Clustering<br></br>Coefficient</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Connected <br></br>Component</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </SidebarMenu>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n      })} style={{display: \"flex\"}}>\r\n        <div>\r\n        <NavbarSelector />\r\n        </div>\r\n        <div class=\"container\" style={{paddingTop:\"5vh\", maxWidth:\"100vw\", height:\"100%\"}}>\r\n          <div class=\"container\" style={{height:\"100%\"}}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                    {appState.graph.hasGraph && <Tag className=\"network-tag\">Network</Tag>}\r\n                    <main className=\"main\">\r\n                      {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                        <ThreeJSVis />\r\n                      ) : (\r\n                        <WorkspaceView />\r\n                      )}\r\n                    </main>\r\n                    {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                    <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div class=\"container__right\">\r\n                  {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",width: '40vw'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame &&  <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame  && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}