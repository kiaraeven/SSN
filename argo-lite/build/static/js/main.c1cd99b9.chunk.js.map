{"version":3,"sources":["stores/PreferencesStore.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","services/AlgorithmUtils.js","constants/index.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","ipc/client.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ZoomMap.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/panels/SelectionDetail.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","observable","IS_IFRAME_WIDGET","GraphStore","ref","initialGlobalConfig","nodes","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","max","labelBy","shape","labelSize","labelLength","edges","crossColor","scatterplot","x","y","_lastSelectedSingleNode","nodesShowingLabels","hasGraphLoaded","selectedNodeId","setOfNeighborIds","Set","rawGraph","forEach","e","source","source_id","toString","target","target_id","add","filter","node","has","id","runInAction","Object","keys","length","map","n","satisfy","fkey","metadata","nodePropertyTypes","includes","isHidden","nodeids","removeNodesByIds","overrides","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","snapshot","getSnapshot","noPosition","undefined","noGlobal","noOverride","JSON","stringify","savedStatesStr","savedStates","parse","savedOverrides","Map","entries","k","v","clear","merge","initialNodesShowingLabels","runActiveLayout","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","push","setPinnedNodes","graphFrame","Frame","computedGraph","init","display","ee","on","selectedNodes","data","menu","MenuFactory","children","MenuItemFactory","onClick","toggleSelectedLabels","text","key","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","sort","n1","n2","ids","i","showNodes","ContextMenu","show","left","pageX","top","pageY","uniq","nodeProperties","nodeComputed","removeList","indexOf","u","toLowerCase","split","s","charAt","toUpperCase","substring","join","j","neighborIDs","links","link","fromId","toId","ret","p","Number","MAX_VALUE","MIN_VALUE","Math","scales","domain","minMax","range","item","createGraph","override","get","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","averageClusteringCoefficient","connectedComponents","graphDensity","averageDegree","exactGraphDiameter","duration","interactingWithGraph","computed","fullNodes","fullEdges","uniqueValue","edgeProperties","snapshotName","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","LonX","LatY","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","AppState","preferences","import","search","project","window","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","url","BACKEND_URL","fetch","method","mode","then","response","json","body","catch","error","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","pop","loadInitialSampleGraph","a","location","hash","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","pinNodes","resumeLayout","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","result","topLinesAsString","l","trim","it","comment","auto_parse","skip_empty_lines","onerror","selectedNodeFileFromInput","jsnx","require","jsgraphs","jsnxGraph","Graph","addNodesFrom","addEdgesFrom","convertToJsnx","averageClustering","ConnectedComponents","idDict","g","addEdge","convertToJSGraph","componentCount","nodeCount","sum","degree","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","$","Node","index","in","out","renderData","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","prototype","connectNode","exports","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","slice","buffer","set","MeshLine","previous","next","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","c","Geometry","vertices","z","Float32Array","compareV3","b","aa","ab","copyV3","w","attributes","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","array","MeshLineMaterial","parameters","check","d","Material","call","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","type","value","vertexShader","fragmentShader","setValues","create","constructor","copy","def","default","OrbitControls","d3","module","self","selectNode","dragging","selection","isSelected","updateSelection","mouseX","mouseY","clearSelection","NODE_NO_HIGHLIGHT","draw_object","visible","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","linkObjs","updateSelectionOpacity","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightClickNode","neighborNodes","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","diffx","diffy","clickedNode","pinnedx","pinnedy","mapClicked","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","loading","toJS","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","fileObject","Promise","resolve","reject","content","err","msg","replace","parseGEXF","parser","DOMParser","xmlDoc","parseFromString","xmlEdges","getElementsByTagName","xmlNodes","xmlAttri","nodeAttri","edgesArr","nodesArr","nodeAttriOrdered","curr","getAttribute","currEdge","t","currNode","nodeAttvalues","nodeAttvalue","pagerank","attributeIdElementAttribute","attributeId","currAttri","name","readGEXF","config","parseInt","degreeDict","parseFloat","centrality","edgesSet","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","edgeKey","getNode","GEOID","Family","calDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","cos","asin","sqrt","avgLat","avgLon","latlist","lonlist","average","reduce","calMedianCenter","medianCenter","values","Error","result1","half","floor","medianLat","medianLon","shortestPathPairs","pathFinder","aGreedy","pathsArr","pathsSet","fromnode","tonode","pathKey1","pathKey2","find","rank","pageRank","nodekeyList","valuea","el","minv","maxv","paths","selectedGexfFileFromInput","gexfParsed","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","stop","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","mark","edge","HalfEdge","vertex","face","prev","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","object","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","reset","scope","dispatchEvent","changeEvent","state","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","edgeCount","LineBasicMaterial","linewidth","vertexColors","VertexColors","shading","FlatShading","line","LineSegments","frustumCulled","colors","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","setHex","highlightNeighbors","highlightPathEdgeNode","pathnode","op","ctrl","leftMouseDown","onHover","lastHover","currentlyHovered","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","val","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","fontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","edgeDist","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getNodeList","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","checked","onChange","saveUserConfig","PRIMARY","React","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","handleClick","ACTIVE","items","onSelect","fill","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","numRows","selectedRegions","rows","cols","renderCell","ImportDialog","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","INPUT_GROUP","DISABLED","files","sytle","margin","padding","renderEdgesSelection","edgesOpen","disabled","newDelimiter","updateDelimiter","DIALOG_BODY","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","interactive","elevation","Card","ELEVATION_TWO","graphDataPath","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","TABLE","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","isNaN","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","documentElement","innerWidth","innerHeight","bounds","RenameSnapshotDialog","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","placement","modifiers","preventOverflow","backgroundImage","x1","y1","x2","y2","stopColor","stopOpacity","stepSize","labelStepSize","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","NodesPanel","getRenderedNodes","EdgesPanel","directionOptionOpen","class","LabelsPanel","marginLeft","tag","tagprops","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","onRelease","RegularNavbar","runcommunity","querydict","axios","post","communityDict","modularity","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","densityDistance","groupby","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","href","argologo_dark","argologo_light","NAVBAR_HEADING","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","forceUpdate","isScatterPlotDialogOpen","NAVBAR_DIVIDER","setInterval","timeNow","turnOnMinimalMode","textDecoration","icon","faGithub","MinimalNavbar","role","turnOffMinimalMode","Navbar","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","edgeselection","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","nodeLoc","latLngBounds","extend","flyToBounds","MapClick","useMapEvents","click","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","mapEdgeShow","edgeSelectionID","pathHovered","nodesSelectedID","setNodeCircle","setNodePathOption","convexNodes","fillColor","fillOpacity","stroke","neighborNodesID","selectedNeighborIDs","setPolygonPath","polygon","pi","convexPolygonsShow","distanceDensityCurrentlyHovered","flex","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","autoZoom","Pane","edgepositions","Polyline","pathOptions","polygonlist","Polygon","CircleMarker","eventHandlers","originalEvent","view","DomEvent","thenode","mouseover","mouseout","Tooltip","direction","permanent","defaultChecked","edgesOfNodes","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","edgeSelection","SelectionDistanceFromLatLonIn","selectNodes","edgeDistance","toFixed","uniqEdgeSelection","SelectionDensity","nodelength","onEdgeBrushStart","sourceEvent","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","selectAll","brushBounds","each","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","extent","getEventMouse","brushType","onBrushStart","onBrush","onBrushEnd","onDegreeBrushStart","onDegreeBrush","onDegreeBrushEnd","degreesvg","renderDegreeBrush","input","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","tickFormat","ti","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","column1","column2","header","csvarray","selectionNodeID","circles","svg","nodecx","nodecy","renderBrush","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","reverse","XYSelect","allComputedPropertiesKeyList","axis","axisBottom","axisLeft","svgsaver","SvgSaver","querySelector","asSvg","asyncOnClick","filename","Axis","refs","RenderCircles","setScatterStyle","ni","String","renderCircles","cluster","ci","cx","cy","onMouseOver","onMouseLeave","sourceid","targetid","dataset","SelectionActionPanel","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","panel","Expander","FilterOptionsCard","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","StatGroupPanel","convexhullby","Sidebar","cityName","getElementsByClassName","openCity","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","keydown","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","ReactDOM"],"mappings":"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MAC/BC,IAAK,CAAEQ,KAAM,IAAKC,MAAOne,KAAK0d,KAC9BC,UAAW,CACTO,KAAM,KACNC,MAAO,IAAInE,EAAMuD,QAAQvd,KAAK2d,UAAU,GAAI3d,KAAK2d,UAAU,KAE7DC,QAAS,CAAEM,KAAM,IAAKC,MAAOne,KAAK4d,SAClCC,WAAY,CAAEK,KAAM,IAAKC,MAAOne,KAAK6d,YACrCC,UAAW,CAAEI,KAAM,IAAKC,MAAOne,KAAK8d,YAEtCM,aA9JuB,CACvB,yBACA,GACA,2BACA,2BACA,uBACA,wBACA,yBACA,qBACA,4BACA,GACA,iCACA,gCACA,2BACA,2BACA,sBACA,yBACA,sBACA,qBACA,iCACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,qCACA,GACA,6BACA,uBACA,2BACA,kBACA,GACA,IACA,GACA,gBACA,GACA,kDACA,2EACA,GACA,uCACA,gBACA,GACA,mDACA,sDACA,gDACA,4CACA,GACA,oDACA,2CACA,2CACA,GACA,2DACA,sDACA,GACA,oCACA,uCACA,QACA,GACA,gBACA,mEACA,wEACA,aACA,qDACA,qDACA,0CACA,GACA,+CACA,8CACA,6EACA,GACA,QACA,GACA,2EACA,2CACA,0BACA,wBACA,GACA,qDACA,qCACA,GACA,iEACA,mCACA,GACA,KA0EiChU,KAAK,QACtCiU,eAxEyB,CACzB,kDACA,2BACA,GACA,yBACA,wBACA,yBACA,0BACA,4BACA,2BACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,gBACA,GACA,uBACA,oCACA,qDACA,0BACA,SACA,OACA,wBACA,mDACA,KA8CqCjU,KAAK,UAoB5C,cAjBOyS,EAAWK,iBACXL,EAAW5Y,WACX4Y,EAAWM,cACXN,EAAWrb,aACXqb,EAAWQ,eACXR,EAAWS,kBACXT,EAAWW,uBACXX,EAAWY,YACXZ,EAAWa,WACXb,EAAWc,iBACXd,EAAWgB,kBACXhB,EAAWiB,UAElBC,EAASG,KAAO,mBAEhBH,EAASO,UAAUzB,GAEZkB,GAGT/D,EAAM4C,iBAAiB/C,UAAY/V,OAAOya,OAAOvE,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","file":"static/js/main.c1cd99b9.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter } from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n\r\nexport default class GraphStore {\r\n\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor:  [\"#e377c2\",\"#98df8a\" , \"#ff7f0e\", \"#a55194\" , \"#2ca02c\",  \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\",\"#1f77b4\" , \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\",\"#9c9ede\",\"#8c6d31\", \"#ffbb78\",\"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 0.6,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot:{\r\n      x: 'degree',\r\n      y:'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  @observable filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = false;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable autoZoom = true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes:[],\r\n    uniqueValue:{},\r\n    nodeComputed: [\"pagerank\", \"degree\",'centrality', 'distance to center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden','id','Longitude', 'Latitude','LatY', 'LonX', 'dist to center','dist_to_center','centrality','shortest path', 'pair distance','node_id','standard distance','network density']\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k =>removeList.indexOf(k)=== -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n   \r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id' ); // since node_id is already present\r\n    const uppercase_compute = uniq_compute.map((u)=>{\r\n    return u.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')\r\n    })\r\n     return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs(){\r\n\r\n   \r\n \r\n    if (this.selectedNodes.length>0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        this.selectedNodes[j].links.forEach((link)=>{\r\n        neighborIDs.push(link.fromId);\r\n        neighborIDs.push(link.toId);\r\n        })\r\n        \r\n      }\r\n      if (neighborIDs.length>0){\r\n        const uniqNeighborIDs = uniq([\r\n        ...neighborIDs\r\n      ])\r\n      return uniqNeighborIDs\r\n    }else{\r\n      return []\r\n    }\r\n    }else{ \r\n      return []\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  \r\n\r\n  \r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if(this.nodes.color.scale == \"Nominal Scale\"){ //nominal scale \r\n      return scales[this.nodes.color.scale]()\r\n      .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n      .range(this.nodes.color.nominalColor);\r\n    }else{ //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n      .domain(this.minMax[this.nodes.colorBy])\r\n      .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n  \r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(),e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() { \r\n    runInAction('filter nodes', () => {\r\n    if(Object.keys(this.filter).length !== 0  ){\r\n      \r\n      \r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter){\r\n            if(this.metadata.nodePropertyTypes[fkey] == 'string'){\r\n              if(this.filter[fkey].length >0 && (!this.filter[fkey].includes(n[fkey]))){\r\n                satisfy = false\r\n              }\r\n            }else{  // number range \r\n              if(this.filter[fkey] && (n[fkey]<this.filter[fkey]['min'] || n[fkey]>this.filter[fkey]['max'])){\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return {...n, isHidden: true};\r\n        });\r\n      \r\n    }\r\n    });\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    if (savedStates.metadata) {\r\n      this.metadata = savedStates.metadata;\r\n    }\r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    this.rawGraph = savedStates.rawGraph;\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n\r\n    this.runActiveLayout();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout() {\r\n    if(this.frame) {\r\n      this.frame.paused = false;\r\n    } \r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  get averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  get components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n  @computed\r\n  get diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n}","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  appState.graph.frame.paused = false;\r\n  appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","const jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    const result = jsnx.averageClustering(jsnxGraph);\r\n    console.log('Computing Clustering Coefficient');\r\n    return result;\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    return cc.componentCount();\r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length / 2;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    return dia;\r\n}\r\n ","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://github.com/poloclub/argo-graph-lite\";\r\nexport const GITHUB_URL = \"https://github.com/poloclub/argo-graph-lite\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  [\"Food Sharing\", \"c1295995-f0c4-4350-9ea0-c97c8a134a34\"\r\n  ],   //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  [\"Mafia Family\", \"ea3fa573-78e0-465a-98ff-f6a02d9884c2\"],\r\n  [\"US flight Network\", '946e933d-81f5-4ade-a8f7-a02941aae953']\r\n  \r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if (selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 && link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    if (self.selection.length > 0) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n   //highlight clicked nodes and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node ) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n    //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //   //fisrt dehighlight all the edges\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })  \r\n\r\n    //   //hilight neighbor edges\r\n    //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n    //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //   const withinEdges = node.linkObjs\r\n\r\n    //   for (var i = 0; i < withinEdges.length; i++) {\r\n    //     withinEdges[i].linecolor.r = red;\r\n    //     withinEdges[i].linecolor.g = blue;\r\n    //     withinEdges[i].linecolor.b = green;\r\n    //   }\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n    // } else {        //when no nodes are given, all 1 opacity \r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n        \r\n    //   });\r\n    //   self.colorNodeEdge(null);\r\n    // }\r\n   \r\n\r\n    // self.highlightNode(node, true);\r\n    // node.renderData.textHolder.children[0].element.hideme = false;\r\n    self.colorNodeEdge(node);\r\n  }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null\r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        appState.import.loading = false;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr , paths: pathsArr},\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0xDB7734,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: false,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"square\",\r\n  NODE_HSHAPE: \"square\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"notfancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xffffff\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = [];\r\n    self.edgeCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    if (toggle) {\r\n      node.renderData.draw_object.children[0].material.color.setHex(color);\r\n      node.renderData.draw_object.children[0].visible = true;\r\n    } else {\r\n      node.renderData.draw_object.children[0].material.color.set(\r\n        node.renderData.hcolor\r\n      );\r\n      node.renderData.draw_object.children[0].visible = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n    //   // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //   // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    // }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n      }\r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      self.highlightNode(node, true);\r\n      node.renderData.textHolder.children[0].element.hideme = false;\r\n      self.highlightEdges(node, true);\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    if (self.prevHighlights != undefined) {\r\n      for (var i = 0; i < self.prevHighlights.length; i++) {\r\n        self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n        self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n      }\r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      if (clickDifference < 225) {\r\n        self.doubleClicked = true;\r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n\r\n\r\n    self.updateSelectionOpacity();\r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *13;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize *2 ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    document.getElementById(\"showSelected\").style.display=\"none\";\r\n    document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    document.getElementById(\"hideAll\").style.display=\"none\";\r\n    document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    document.getElementById(\"showAll\").style.display=\"none\";\r\n    document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    if (self.prevHighlights) {\r\n      for (var i = 0; i < self.prevHighlights.length; i++) {\r\n        self.highlightNode(\r\n          self.prevHighlights[i],\r\n          !toggle,\r\n          def.SEARCH_HIGHLIGHT\r\n        );\r\n      }\r\n    }\r\n    self.prevHighlights = [];\r\n    self.graph.forEachNode(function(node) {\r\n      if (nodeids.indexOf(node.id) != -1) {\r\n        self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n        self.prevHighlights.push(node);\r\n      }\r\n    });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function() {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n     //directed arrows\r\n     self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n     var arrowPosition = self.directedArrows.attributes.position.array;\r\n     var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x)/2;\r\n            var midPointY = (v1pos.y + v2pos.y)/2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          } \r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function() {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function(node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function() {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function(graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function(node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function(link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n    });\r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        self.ee.emit(\"select-nodes\", self.selection);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function(positions) {\r\n    self.graph.forEachNode(function(node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function(node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  <MenuItem\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        />\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        />\r\n        <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        />\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter\r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ONLY_EDGE_FILE, NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderDelimiterSelection()}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            Argo supports both mouse/trackpad and touchscreen.\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>Drag with right mouse button down OR Move mouse with space key pressed</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node (view details)</td>\r\n                    <td>Single Click</td>\r\n                    <td>Tap with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes</td>\r\n                    <td>Drag left mouse button from empty area</td>\r\n                    <td>Drag 1 finger from empty area</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Drag nodes</td>\r\n                    <td>Drag with left mouse button down</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.filterKeyList}\r\n                    onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <Select\r\n                    items={appState.graph.filterKeyList}\r\n                    itemRenderer={CommonItemRenderer}\r\n                    filterable={false}\r\n                    onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                  >\r\n                    <Button text={appState.graph.nodes.sizeBy} />\r\n                  </Select>\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <Select\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  >\r\n                    <Button text={appState.graph.nodes.size.scale} />\r\n                  </Select>\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n              <div style = {{height:\"15px\"}}>\r\n\r\n              </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <text style={{fontSize: \"9px\"}}>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"9px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n        //   thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"9px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* Collapsable Option: Thickness */}\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Select Edge Thickness: </p>\r\n                            <div style={{display: \"inline\", float: \"right\"}}>\r\n                               \r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"none\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\",display:\"none\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={0.1}\r\n          max={1}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={32}\r\n          \r\n          stepSize={0.1}\r\n          labelStepSize={10}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => (appState.graph.nodes.labelBy = it)}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: this.state[it + '_filterlist'] ? [...this.state[it + '_filterlist'], selectit] : [selectit]\r\n                    })\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={this.state[it + '_filterlist']}\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      if (deselectIndex0 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:this.state[it + '_filterlist'].filter(item => item !== selectit)\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it] && appState.graph.filter[it][\"min\"])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"200px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                />\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                />\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"document\"\r\n            >\r\n              Graph\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Run Community\"\r\n                  onClick={this.runcommunity}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Convex Hull By Group\"\r\n                  onClick={() => this.convexhull('community')}\r\n                />\r\n                <MenuItem\r\n                  type=\"import\"\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Cluster Cluster\"\r\n                  onClick={() => this.density_distance('Family')}\r\n                />\r\n\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"document\"\r\n            >\r\n              Nodes\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"Data Sheet\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Scatterplot\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.isScatterPlotDialogOpen = true }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Run Community\"\r\n                  iconName=\"graph\"\r\n                  onClick={() => { appState.preferences.filterDialogOpen = true }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Convex Hull\"\r\n                  iconName=\"graph\"\r\n                  onClick={() => { appState.preferences.filterDialogOpen = true }}\r\n                />\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              Tools\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])}>\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n              {<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Layout\" : \"Pause Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n            </div>\r\n          )}\r\n\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])}\r\n        >\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button>\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\" role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\" role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\" role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"40vw\",\r\n          height: \"60vh\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n     \r\n      )\r\n      \r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      appState.graph.selectedNodes = selectionNode\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if (appState.graph.frame.selection.length ==0) return;  //no selection \r\n        if (appState.graph.frame.selection.length ==1) return;  // only one node is selected \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        map.flyToBounds(b)\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n        //   console.log(e)\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        // appState.graph.mapClicked = null\r\n        \r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\n\r\n  ","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport { ZoomMap, MapClick } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n        return `${edge.source.id}👉 ${edge.target.id}`\r\n      })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const neighborIDs = appState.graph.selectedNeighborIDs\r\n      if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if(neighborIDs.indexOf(node.id) !== -1){\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      }\r\n      else {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.03, stroke: false, zIndex: 'auto' }\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyHovered) {\r\n      if (pi === appState.graph.distanceDensityCurrentlyHovered) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"60vh\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n\r\n        <AreaSelect />\r\n        {appState.graph.autoZoom ? <ZoomMap /> : <div></div>}\r\n        <MapClick />\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n\r\n              return (\r\n                <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                  data={edge}\r\n                // eventHandlers={{\r\n                //   click: (e) => {\r\n                //     console.log(e.target.options.data)\r\n                //   }}}\r\n                />\r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                        appState.graph.edgeselection = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.fontSize}\r\n                      className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> : <Tooltip className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <Switch style={{ position: 'fixed', top: '55px', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.mapEdgeShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.mapEdgeShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '9px', position: 'fixed', top: '55px', right: '35px', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n        <Switch style={{ position: 'fixed', top: '40px', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.convexPolygonsShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '9px', position: 'fixed', top: '40px', right: '35px', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n        <Switch style={{ position: 'fixed', top: '70px', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.autoZoom}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.autoZoom = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '9px', position: 'fixed', top: '70px', right: '35px', zIndex: '1000' }}> Automatic Zoom</span>\r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 64, left: 30 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  allwidth = 180\r\n  allheight = 180\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelection(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\n    const edgeSelection = appState.graph.frame.getEdgeWithinSelection(appState.graph.selectedNodes)\r\n    if (edgeSelection.length == 0) return 0;\r\n    this.edgeSelection = [...edgeSelection]\r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = 2 * edgeSelection.length / (nodelength * (nodelength - 1))\r\n    return selectionDen.toFixed(3)\r\n\r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    console.log(this.distBinData)\r\n    console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n\r\n    })\r\n\r\n    console.log(selection)\r\n    console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '20vw' }}>\r\n            <text className=\"distribution-title\" >The Distance Distribution</text>\r\n\r\n            <svg\r\n              width={180}\r\n              height={180}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n\r\n\r\n\r\n                    // console.log(this.distBinData)\r\n                    // console.log(i)\r\n                    // console.log(d)\r\n                    return \"#429bf5\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" tickFormat={\r\n                  (tick, ti) => {\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            <text className=\"distribution-title\">The Degree Distribution</text>\r\n            <svg\r\n              width={180}\r\n              height={180}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                margin={this.margin}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                valueAccessor={(datum) => datum}\r\n                binType=\"numeric\"\r\n              >\r\n                <BarSeries\r\n                  fill=\"#429bf5\"\r\n                  animated={false}\r\n                  rawData={appState.graph.selectedNodes.map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.selectedNodes.length).toString()\r\n                    }} />\r\n              </Histogram>\r\n            </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree.toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density / 2).toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            <text className=\"distribution-title\" >The Distance Distribution</text>\r\n\r\n            <svg\r\n              width={180}\r\n              height={180}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n\r\n\r\n\r\n                    // console.log(this.distBinData)\r\n                    // console.log(i)\r\n                    // console.log(d)\r\n                    return \"#429bf5\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" tickFormat={\r\n                  (tick, ti) => {\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            <text className=\"distribution-title\">The Degree Distribution</text>\r\n            <svg\r\n              width={180}\r\n              height={180}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                margin={this.margin}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                valueAccessor={(datum) => datum}\r\n                binType=\"numeric\"\r\n              >\r\n                <BarSeries\r\n                  fill=\"#429bf5\"\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n              </Histogram>\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 50, left: 50 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // this.state.;\r\n    if (appState.graph.scatterplot.x === 'shortest path') {\r\n      column1 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n      column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.x)\r\n      column1 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n      })\r\n    }\r\n\r\n    if (appState.graph.scatterplot.y === 'shortest path') {\r\n      column2 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n      column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.y)\r\n      column2 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n      })\r\n    }\r\n\r\n    let temp = []\r\n    temp.push(header)\r\n    for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n      temp.push([column1[i], column2[i]]);\r\n    }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1] - this.margin.top - this.cr,\r\n      y1: selection[1][1] - this.margin.top - this.cr,\r\n    }\r\n\r\n    circles.each(function (d, i) {\r\n      const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n      const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n      if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n        selectionNodeID.push(select(this).attr(\"id\"))\r\n      }\r\n\r\n\r\n\r\n    })\r\n\r\n\r\n    const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n      // console.log(node)\r\n      selectionNodeID.includes(node.id)\r\n\r\n    )\r\n    appState.graph.frame.selection = selectionNode\r\n    appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // console.log(selectionNode)\r\n    appState.graph.frame.updateSelectionOpacity()\r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n\r\n      extent={\r\n        [[this.margin.left,  this.margin.top], [this.width + this.margin.left, this.height + this.margin.top ]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\" }}>X By: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                <text style={{ transform: 'translate(12vw, 27vh)' }} fontSize=\"9px\">{(appState.graph.scatterplot.x === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text\r\n                  transform={\"translate(-40, 110) rotate(-90)\"}\r\n                  fontSize=\"9px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(38vw, -2vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(20vw, -2vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.02\r\n          }\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.02\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n      // density distance node style\r\n\r\n      //hover on one group \r\n      if (appState.graph.distanceDensityCurrentlyHovered) {\r\n\r\n        if (String(node['name']) === String(appState.graph.distanceDensityCurrentlyHovered)) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.02\r\n          }\r\n        }\r\n\r\n      } else {// no hover \r\n        return {\r\n          fill: appState.graph.nodeColorScale(node['name']),\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n    else { //path node style \r\n      return {\r\n        \r\n        fill: appState.graph.edges.color,\r\n        zIndex: \"0\",\r\n        stroke: false,\r\n        fillOpacity: 0.8\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              onMouseOver={(e) => {\r\n                appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              }}\r\n              onMouseLeave={(e) => {\r\n\r\n                // if (appState.graph.mapClicked) return;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined\r\n                appState.graph.frame.selection = []\r\n                appState.graph.selectedNodes = []\r\n                appState.graph.edgeselection = []\r\n\r\n                appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                  // if (n !== appState.graph.mapClicked) {\r\n                  appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                  appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                  // }\r\n                }\r\n                );\r\n\r\n\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\"\r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              // e.target.getAttribute('fill') node.renderData.color,\r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              \r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport SelectionDetail from \"./panels/SelectionDetail\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        {/* {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 1 && <SelectionDetail />\r\n        } */}\r\n        {/* {appState.graph.selectedNodes.length === 1 && (\r\n          <NodeDetail node={appState.graph.selectedNodes[0].data.ref} />\r\n        )} */}\r\n\r\n        {/* {appState.graph.selectedNodes.length !== 1 && appState.graph.currentlyHovered && (\r\n          <NodeDetail node={appState.graph.currentlyHovered.data.ref} />\r\n        )} */}\r\n\r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    @observable modularity = undefined;\r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('http://127.0.0.1:5000/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                this.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? String(communityDict[node.id]) : \"-1\"\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n               \r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('http://127.0.0.1:5000/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('http://127.0.0.1:5000/flask/convexhull', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                \r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes,\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        axios.post('http://127.0.0.1:5000/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community</Button>\r\n                    {this.modularity? <text className=\"modularity-tag\" style={{fontSize: \"8px\"} } >{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</text>: null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"9px\" }}>Convex Hull By: </p>\r\n                        <span style={{ }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"9px\" }}>Cluster By: </p>\r\n                        <span style={{  }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\n\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n          x[i].style.display = \"none\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n      return appState.graph.frame && (\r\n        <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n                <div class=\"w3-bar w3-black\">\r\n                    <button class=\" w3-bar-item-button w3-bar-item w3-button \" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                    <button class=\"w3-bar-item-button w3-bar-item w3-button \" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                    <button class=\"w3-bar-item-button w3-bar-item w3-button \" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                </div> \r\n                <div id=\"Appearance\" class=\"city\">\r\n                    <text style={{fontSize: \"10px\"}}>Appearance </text>\r\n                    <Tabs2 animate id=\"graph-options\">\r\n                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Filter\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"10px\"}}>Filter Options</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"f_nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n                    <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} />\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Statistics\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"10px\"}}>Statistics</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"s_nodes\" title=\"Nodes\"  />\r\n                    <Tab2 id=\"s_edges\" title=\"Edges\"  />\r\n                    <Tab2 id=\"s_layout\" title=\"Groups\" panel={<StatGroupPanel />} />\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n            </div>\r\n        </SidebarMenu>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport Navbar from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n        [Classes.DARK]: appState.preferences.darkMode\r\n      })}>\r\n        <div class=\"container\">\r\n          <Navbar />\r\n          <div class=\"container\">\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                  <div className=\"graph\">\r\n                    {appState.graph.hasGraph && <Tag className=\"network-tag\">\r\n                      Network\r\n                    </Tag>}\r\n                    <main className=\"main\">\r\n                      {appState.graph.hasGraph ? (\r\n                        <ThreeJSVis />\r\n                      ) : (\r\n                        <WorkspaceView />\r\n                      )}\r\n                    </main>\r\n                    {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                    <Dialogs />\r\n                  </div>\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div class=\"container__right\">\r\n                  {appState.graph.hasGraph ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",width: '40%'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame && <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n\r\n\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}