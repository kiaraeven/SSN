{"version":3,"sources":["stores/PreferencesStore.js","services/AlgorithmUtils.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/panels/SelectionDetail.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","jsgraphs","require","exactGraphDiameter","snapshot","temp","i","idDict","rawGraph","nodes","length","id","g","WeightedDiGraph","edges","forEach","e","addEdge","Edge","source_id","target_id","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","Math","max","GraphStore","_dec","ref","_dec2","initialGlobalConfig","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","labelBy","shape","labelSize","labelLength","crossColor","scatterplot","x","y","filter","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_lastSelectedSingleNode","nodesShowingLabels","_descriptor26","_descriptor27","_descriptor28","_descriptor29","_descriptor30","_descriptor31","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_descriptor36","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","_descriptor42","_descriptor43","hasGraphLoaded","get","selectedNodes","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","k","removeList","indexOf","map","u","toLowerCase","split","s","charAt","toUpperCase","substring","join","neighborIDs","j","links","link","push","fromId","toId","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","n","done","err","scales","domain","minMax","range","_this","Set","item","selectedNodeId","setOfNeighborIds","source","toString","target","add","node","has","_this2","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","_this3","runInAction","undefined","selection","getNodeList","renderData","draw_object","children","visible","Object","keys","_objectSpread","satisfy","fkey","nodePropertyTypes","includes","nodeids","_this4","_this5","removeNodesByIds","_this6","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","a","b","half","floor","medianLat","medianLon","lat1","lon1","lat2","lon2","c","cos","asin","sqrt","calDistanceFromLatLonInKm","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","edgeProperties","savedStatesStr","runActiveLayout","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this7","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","nodeCount","graphDensity","sum","degree","averageDegree","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","convexhullby","groupby","mapClicked","currentlyHovered","convexNodes","pathHovered","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","clearBrush","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","clearSelection","pinNodes","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","replace","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","shortestPathPairs","pathsArr","rank","_context4","parseInt","centrality","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","array","reduce","pathFinder","aGreedy","pathsSet","pathKey1","pathKey2","find","pageRank","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","linkObjs","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightClickNode","neighborNodes","getNeighborNodesFromGraph","nodeNeighbor","froms","tos","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","edge","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","isArray","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","_loop","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","thenode","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","fontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","edgeDist","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","getEdgeList","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","newDelimiter","updateDelimiter","DIALOG_BODY","TABLE","href","Spinner","renderExampleDataset","renderDelimiterSelection","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","toFixed","density","diameter","averageClustering","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","class","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","marginLeft","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","onRelease","_ref3","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","role","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","autoZoom","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","mapEdgeShow","edgeSelectionID","nodesSelectedID","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","neighborNodesID","selectedNeighborIDs","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","flex","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","mouseover","mouseout","direction","permanent","defaultChecked","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","edgeSelection","SelectionDistanceFromLatLonIn","selectNodes","edgeDistance","uniqEdgeSelection","SelectionDensity","nodelength","selectneighbors","onEdgeBrushStart","sourceEvent","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","selectAll","brushBounds","each","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","SVGBrush","extent","getEventMouse","_this$edgesvg$getBoun","brushType","onBrushStart","onBrush","onBrushEnd","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","x0","y0","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","input","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","tickFormat","ti","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","column1","column2","header","csvarray","selectionNodeID","circles","svg","nodecx","nodecy","renderBrush","_this$svg$getBounding","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","XYSelect","allComputedPropertiesKeyList","RenderCircles","Axis","axis","axisBottom","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","renderCircles","cluster","ci","cx","cy","onMouseOver","_e$target$getAttribut","_e$target$getAttribut2","sourceid","targetid","onMouseLeave","_e$target$getAttribut3","_e$target$getAttribut4","dataset","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","StatGroupPanel","fromCharCode","runShortestPath","pairdist","Sidebar","cityName","getElementsByClassName","SidebarMenu","openCity","colspan","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","keydown","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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/tB,MAAO,CAAE0T,KAAM,IAAK5X,MAAOI,KAAK8D,OAChCiuB,QAAS,CAAEva,KAAM,IAAK5X,MAAOI,KAAK+xB,SAClCC,WAAY,CAAExa,KAAM,KAAM5X,MAAOI,KAAKgyB,YACtCE,gBAAiB,CAAE1a,KAAM,IAAK5X,MAAOI,KAAKkyB,iBAC1CC,KAAM,CAAE3a,KAAM,IAAK5X,MAAOI,KAAKmyB,MAC/BC,IAAK,CAAE5a,KAAM,IAAK5X,MAAOI,KAAKoyB,KAC9BC,UAAW,CACT7a,KAAM,KACN5X,MAAO,IAAIqvB,EAAMgD,QAAQjyB,KAAKqyB,UAAU,GAAIryB,KAAKqyB,UAAU,KAE7DC,QAAS,CAAE9a,KAAM,IAAK5X,MAAOI,KAAKsyB,SAClCC,WAAY,CAAE/a,KAAM,IAAK5X,MAAOI,KAAKuyB,YACrCC,UAAW,CAAEhb,KAAM,IAAK5X,MAAOI,KAAKwyB,YAEtCI,aA9JuB,CACvB,yBACA,GACA,2BACA,2BACA,uBACA,wBACA,yBACA,qBACA,4BACA,GACA,iCACA,gCACA,2BACA,2BACA,sBACA,yBACA,sBACA,qBACA,iCACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,qCACA,GACA,6BACA,uBACA,2BACA,kBACA,GACA,IACA,GACA,gBACA,GACA,kDACA,2EACA,GACA,uCACA,gBACA,GACA,mDACA,sDACA,gDACA,4CACA,GACA,oDACA,2CACA,2CACA,GACA,2DACA,sDACA,GACA,oCACA,uCACA,QACA,GACA,gBACA,mEACA,wEACA,aACA,qDACA,qDACA,0CACA,GACA,+CACA,8CACA,6EACA,GACA,QACA,GACA,2EACA,2CACA,0BACA,wBACA,GACA,qDACA,qCACA,GACA,iEACA,mCACA,GACA,KA0EiC/qB,KAAK,QACtCgrB,eAxEyB,CACzB,kDACA,2BACA,GACA,yBACA,wBACA,yBACA,0BACA,4BACA,2BACA,GACA,oBACA,uBACA,0BACA,2BACA,GACA,gBACA,GACA,uBACA,oCACA,qDACA,0BACA,SACA,OACA,wBACA,mDACA,KA8CqChrB,KAAK,UAoB5C,cAjB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","file":"static/js/main.cfedb596.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","const jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    // const jsnxGraph = convertToJsnx(snapshot);\r\n    // const result = jsnx.averageClustering(jsnxGraph);\r\n    const result = 0\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    // var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    // console.log('compute connected copoenent')\r\n    // return cc.componentCount();\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    return dia;\r\n}\r\n ","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter } from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor: [\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#7f7f7f\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot: {\r\n      x: 'degree',\r\n      y: 'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n\r\n  filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable autoZoom = true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n  @observable clearBrush = false;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on \r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\"pagerank\", \"degree\", 'centrality', 'distance to center', 'betweeness centrality', 'closeness centrality', 'distance to group center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  @observable\r\n  degreeselection = []\r\n\r\n  @observable\r\n  degreebrushed = false\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = []\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden', 'id', 'Longitude', 'Latitude', 'LatY', 'LonX', 'dist to center', 'dist_to_center', 'centrality', 'shortest path', 'pair distance', 'node_id', 'standard distance', 'network density']\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n\r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return u.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')\r\n    })\r\n    return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n\r\n\r\n\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j] || !this.selectedNodes[j].links) continue\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        })\r\n\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([\r\n          ...neighborIDs\r\n        ])\r\n        return uniqNeighborIDs\r\n      } else {\r\n        return []\r\n      }\r\n    } else {\r\n      return []\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      const nominalColor =  [\"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n        .range(nominalColor);\r\n    } else { //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n  filterNodes() {\r\n    runInAction('filter nodes', () => {\r\n      if (this.selectedNodes.length > 0) {\r\n      this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n\r\n    if (this.frame.selection.length > 0) {\r\n      this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n    this.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n   \r\n      if (Object.keys(this.filter).length === 0){\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {return { ...n, isHidden: false }});\r\n      }\r\n\r\n      if (Object.keys(this.filter).length !== 0) {\r\n\r\n\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == 'string') {\r\n              if (this.filter[fkey].length > 0 && (!this.filter[fkey].includes(n[fkey]))) {\r\n                satisfy = false\r\n              }\r\n            } else {  // number range \r\n              if (this.filter[fkey] && (n[fkey] < this.filter[fkey]['min'] || n[fkey] > this.filter[fkey]['max'])) {\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n      }\r\n\r\n    });\r\n     // this.runActiveLayout()\r\n\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\"\r\n    const toId = \"target_id\"\r\n    const mapId = \"ID\"\r\n    const mapLon = \"LonX\"\r\n    const mapLat = \"LatY\"\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr =\r\n    initialgraph.rawGraph.nodes.map(\r\n        n => ({ ...n, LonX: parseFloat(n[\"LonX\"]), LatY: parseFloat(n[\"LatY\"]) }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n  \r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n  \r\n    // const edgesSet = new Set();\r\n  \r\n    // const edgesArr = [];\r\n  \r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n  \r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n  \r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n  \r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n      edgesArr.forEach(it => {\r\n        const fromnode = nodesArr.filter((node)=>{return node.id === it[fromId].toString()})\r\n        const tonode = nodesArr.filter((node)=>{return node.id === it[toId].toString()})\r\n        const Nonloc = 360\r\n        if(fromnode.length > 0 && tonode.length >0){\r\n        it.fromlocLatY = parseFloat(fromnode[0].LatY)\r\n        it.fromlocLonX = parseFloat(fromnode[0].LonX)\r\n        it.tolocLatY = parseFloat(tonode[0].LatY)\r\n        it.tolocLonX = parseFloat(tonode[0].LonX) }\r\n        else{\r\n        it.fromlocLatY = Nonloc\r\n        it.fromlocLonX = Nonloc\r\n        it.tolocLatY = Nonloc\r\n        it.tolocLonX = Nonloc\r\n        }// observable array???\r\n        it.withinState = true\r\n        it.withinFamily = true\r\n        \r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n        \r\n      });\r\n    } \r\n\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295;    // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n        c(lat1 * p) * c(lat2 * p) *\r\n        (1 - c((lon2 - lon1) * p)) / 2;\r\n  \r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n  \r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n  \r\n  \r\n    const calMedianCenter = ()=>{\r\n      const latlist = nodesArr.map(n => parseFloat(n['LatY']))\r\n      const lonlist = nodesArr.map(n => parseFloat(n['LonX']))\r\n      const medianCenter = (values)=>{\r\n        if(values.length ===0) throw new Error(\"No inputs\");\r\n  \r\n        const result1 = [...values].sort((a, b) => a - b)\r\n      \r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n      \r\n        var half = Math.floor(result1.length / 2);\r\n        \r\n        if (result1.length % 2)\r\n          return result1[half];\r\n        \r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      }\r\n  \r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist)\r\n        const medianLon = medianCenter(lonlist)\r\n        nodesArr.forEach(function (n, i) {\r\n          n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n        })\r\n      }\r\n  \r\n  \r\n    }\r\n  \r\n    if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n      // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  \r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n      // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n  \r\n  \r\n  \r\n    //   graph.forEachNode(function (fromnode) {\r\n  \r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph \r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n            \r\n    //          })\r\n    //         }\r\n             \r\n    //         //directed graph: \r\n    //       }\r\n  \r\n    //     })\r\n  \r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n  \r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n  \r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0])\r\n    const nodePropertyTypes = {}\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n    })\r\n    const uniqueValue = {}\r\n    nodekeyList.forEach(function (k, i) {\r\n  \r\n      if (nodePropertyTypes[k] == 'string') {\r\n        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        const minv = Math.min(...valuea)\r\n        const maxv = Math.max(...valuea)\r\n        uniqueValue[k] = [minv, maxv]\r\n      }\r\n    })\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: 'Untitled Graph',\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: ['pagerank', 'degree', 'distance to center'],\r\n        edgeProperties: ['source_id', 'target_id'],\r\n       \r\n      },\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    \r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph \r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n    \r\n  \r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = 'degree';\r\n    this.scatterplot.y = 'distance to center';\r\n\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n  //   appState.graph.frame.paused = false;\r\n  // appState.graph.frame.resumeLayout();\r\n  //                 this.forceUpdate();\r\n  \r\n\r\n                      // this.frame.resumeLayout();\r\n                      // this.forceUpdate();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout  () {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n    \r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size >0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  averageClustering() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  components() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n \r\n  density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n \r\n  degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n\r\n  diameter() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n}","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true\r\n  appState.graph.clearBrush = false;\r\n \r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    // appState.graph.frame.selection = []\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  \r\n  // appState.graph.runActiveLayout();\r\n  // setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length>0){  //dehilight border when innitially load \r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n  }\r\n  if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n    this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  }\r\n})\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"8b1fa770-a1d0-43f0-b798-def14744dd8c\"],   \r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  [\"Mafia Family Network\", \"c43890f8-1cfb-4599-a0d3-8f47303691fc\"],\r\n  [\"US flight Network\", '9cf82a47-e5b6-4d45-87aa-fae9e4ca66fa'],\r\n  ['US 117th House Vote Network',\"1b34e961-34d6-4482-b8da-cf5fd2dc9d65\"]\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n  // appState.graph.mapClicked = undefined;\r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.graph.clearBrush = false;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  // appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        \r\n      }\r\n      appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] ) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr , paths: pathsArr},\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree', 'centrality', 'distance to center', 'shortest path', 'pair distance'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1 )&& link.source!==link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = []\r\n    const edgekeys = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if(selection[i] && selection[i].linkObjs){\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1 )&& link.source!==link.target && edgekeys.indexOf(key1) == -1) {\r\n            withinEdges.push(link)\r\n            edgekeys.push(key1)\r\n            edgekeys.push(key2)\r\n            // edgecount = edgecount+1\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n //highlight nodes and edges within selection\r\n self.updateDegreeHistOpacity = function () {\r\n  if (self.degreehighlight.length > 0) {\r\n    if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n      const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n        var p = 0.017453292519943295;    // Math.PI / 180\r\n        var c = Math.cos;\r\n        var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n          c(lat1 * p) * c(lat2 * p) *\r\n          (1 - c((lon2 - lon1) * p)) / 2;\r\n    \r\n        return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n      }\r\n      var sumOfAllDistance = 0;\r\n      var n = 0;\r\n      var max = 0;\r\n      self.graph.forEachNode(n => {\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX)\r\n        if (dist > max) {\r\n          max = dist;\r\n        }\r\n      })\r\n      self.graph.forEachNode(n => {  \r\n        // self.colorNodeColor(n, \"#0000FF\");\r\n        var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX);\r\n        console.log(n.data.ref.LatY, n.data.ref.LonX,self.degreehighlight[0]['LatY'],self.degreehighlight[0]['LatX'])\r\n        self.colorNode(n, 0x0000FF);\r\n        if (dist == 0) {\r\n          self.colorNodeOpacity(n, 1);\r\n        } else if (dist < max/4) {\r\n          self.colorNodeOpacity(n, 0.2);\r\n        }else if (dist < (2*max)/4) {\r\n          self.colorNodeOpacity(n, 0.4);\r\n        }else if (dist < (3*max)/4) {\r\n          self.colorNodeOpacity(n, 0.6);\r\n        }\r\n        else {\r\n          self.colorNodeOpacity(n, 0.8);\r\n        }\r\n        \r\n        \r\n      });\r\n    }\r\n    else {\r\n    self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })  \r\n\r\n    //hilight within edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    const withinEdges = self.getEdgeWithinSelection(self.degreehighlight)\r\n\r\n    for (var i = 0; i < withinEdges.length; i++) {\r\n      withinEdges[i].linecolor.r = red;\r\n      withinEdges[i].linecolor.g = blue;\r\n      withinEdges[i].linecolor.b = green;\r\n    }\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //highlight nodes \r\n    for (var i = 0; i < self.degreehighlight.length; i++) {\r\n      self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n    }\r\n\r\n  } \r\n  }else {        //when no nodes satisfying the condition, all 0.2 opacity \r\n    self.graph.forEachNode(n => {\r\n      self.colorNodeOpacity(n, 0.2);\r\n      \r\n    });\r\n    self.colorNodeEdge(null);\r\n  }\r\n}\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n      \r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {  \r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX,self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX,self.selection[0]['LatY'],self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max/4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          }else if (dist < (2*max)/4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          }else if (dist < (3*max)/4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n          \r\n          \r\n        });\r\n      }\r\n      else {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n      // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //fisrt dehighlight all the edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })  \r\n\r\n      //hilight within edges\r\n      let red = new THREE.Color(appState.graph.edges.color).r;\r\n      let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      let green = new THREE.Color(appState.graph.edges.color).b;\r\n      const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n      for (var i = 0; i < withinEdges.length; i++) {\r\n        withinEdges[i].linecolor.r = red;\r\n        withinEdges[i].linecolor.g = blue;\r\n        withinEdges[i].linecolor.b = green;\r\n      }\r\n      self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      for (var i = 0; i < self.selection.length; i++) {\r\n        self.colorNodeOpacity(self.selection[i], 1);\r\n      }\r\n\r\n    } \r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n   //highlight clicked nodes and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node ) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n        \r\n      });\r\n    //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n    //   //fisrt dehighlight all the edges\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })  \r\n\r\n    //   //hilight neighbor edges\r\n    //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n    //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //   const withinEdges = node.linkObjs\r\n\r\n    //   for (var i = 0; i < withinEdges.length; i++) {\r\n    //     withinEdges[i].linecolor.r = red;\r\n    //     withinEdges[i].linecolor.g = blue;\r\n    //     withinEdges[i].linecolor.b = green;\r\n    //   }\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n    // } else {        //when no nodes are given, all 1 opacity \r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n        \r\n    //   });\r\n    //   self.colorNodeEdge(null);\r\n    // }\r\n   \r\n\r\n    // self.highlightNode(node, true);\r\n    // node.renderData.textHolder.children[0].element.hideme = false;\r\n    self.colorNodeEdge(node);\r\n  }\r\n  }\r\n\r\n \r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (!node) return \r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null\r\n      \r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"square\",\r\n  NODE_HSHAPE: \"square\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if(!self.selection[i]) continue\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n /**\r\n   *  Highlight edges and nodes on the path \r\n   */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n    //highlight nodes\r\n\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node)=>{\r\n     self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    \r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    \r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    for (let i = 0; i < pathnode.length-1; i++) {\r\n      self.lineIndices.forEach(function (link) {\r\n        if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n    } \r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n      // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    }\r\n\r\n  // };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  }\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null\r\n      // appState.graph.networkClicked = null\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n      \r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node)\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      \r\n      \r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n        \r\n        \r\n      }\r\n\r\n\r\n\r\n      \r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 500) {\r\n        self.doubleClicked = true;\r\n        \r\n      } else {\r\n        self.doubleClicked = false;\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n\r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n\r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null\r\n    appState.graph.degreeselection = []\r\n    appState.graph.degreebrushed = false\r\n    \r\n    self.updateSelectionOpacity();\r\n\r\n    if(self.selection.length == 1){\r\n      const thenode = self.selection[0]\r\n      self.highlightClickNode(thenode)\r\n      appState.graph.mapClicked = thenode\r\n      // self.selection = self.getNeighborNodesFromGraph(thenode);\r\n      appState.graph.selectedNodes = self.getNeighborNodesFromGraph(thenode);\r\n        \r\n      \r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if(self.selection.length == 0){\r\n      appState.graph.mapClicked = null\r\n    }\r\n    \r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *13;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize *2 ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    document.getElementById(\"showSelected\").style.display=\"none\";\r\n    document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    document.getElementById(\"hideAll\").style.display=\"none\";\r\n    document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    document.getElementById(\"showAll\").style.display=\"none\";\r\n    document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function() {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n     //directed arrows\r\n     self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n     var arrowPosition = self.directedArrows.attributes.position.array;\r\n     var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x)/2;\r\n            var midPointY = (v1pos.y + v2pos.y)/2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI/2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          } \r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function() {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function() {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function(node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function() {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function(graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function(node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function(link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n    });\r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        self.ee.emit(\"select-nodes\", self.selection);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function(positions) {\r\n    self.graph.forEachNode(function(node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function(node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  <MenuItem\r\n  iconName={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Distance to center\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Shortest path\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Pair distance\"\r\n            ? \"globe\" : \"graph\"}\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase()}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        />\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        />\r\n        {/* <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        /> */}\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderExampleDataset(){\r\n    return(\r\n      <div id=\"exampleTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n        <p>Required attributes for nodelist.csv. Each row of the node table should represent attributes of a node, including at least a unique node ID and the node's longitude and latitude. </p>\r\n                    <table id=\"exampleNodeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead >\r\n                            <tr>\r\n                                <th > ID (unique node ID field) </th>\r\n                                <th> LonX (node longitude ) </th>\r\n                                <th> LatY (node latitude ) </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>67.2391</td>\r\n                                <td>-102.3472</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Required attributes for edgelist.csv. Each row of the edge table should represent attributes of an edge, including at least a source and target column corresponding to the node ID. </p>\r\n                    <table id = \"exampleEdgeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th > Source </th>\r\n                                <th> Target </th>\r\n                              \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>\"FWL\"</td>\r\n                \r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Example Dateset:</p>\r\n                    <a className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1_OIDSbUyM9gTqziVdcqU_NsGxkk6HMTo/view?usp=share_link\"> US_airport_nodelist.csv</a>\r\n                    <a className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1cvOUir8gKDlS_hhNGL0qQOn2eNHCDsOU/view?usp=share_link\"> US_airport_edgelist.csv</a>\r\n                </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderExampleDataset()}\r\n              {this.renderDelimiterSelection()}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            Argo supports both mouse/trackpad and touchscreen.\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Color By: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect  \r\n                    items={appState.graph.filterKeyList}\r\n                    onSelect={it => {appState.graph.nodes.colorBy = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.colorBy}\r\n                  />\r\n                </span>\r\n              </div>\r\n            \r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type: </p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={Object.keys(scales)}\r\n                    onSelect={it => {appState.graph.nodes.color.scale = it\r\n                      appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    value={appState.graph.nodes.color.scale}\r\n                  />\r\n                </span>\r\n              </div>\r\n          \r\n            <div>\r\n              <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Gradient: &nbsp;</p>\r\n                <span style={{float:\"right\"}}>\r\n                    <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                            preventOverflow: {\r\n                              enabled: false,\r\n                            },\r\n                          }}\r\n                    >\r\n                      <Button                  \r\n                        text=\"  \"\r\n                        style={{\r\n                          backgroundImage: \"inherit\",\r\n                          backgroundColor: appState.graph.nodes.color.from\r\n                        }}\r\n                      />\r\n                      <SketchPicker\r\n                        color={appState.graph.nodes.color.from}\r\n                        onChange={it => {appState.graph.nodes.color.from = it.hex\r\n                          appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                      />\r\n                    </Popover2>\r\n                    &nbsp; &#8594; &nbsp;\r\n                    <Popover2 \r\n                    placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}\r\n                                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => {appState.graph.nodes.color.to = it.hex\r\n                        appState.graph.watchAppearance = appState.graph.watchAppearance + 1}}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{marginTop:\"-1em\"}}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n              <defs>\r\n                <linearGradient\r\n                  x1=\"0%\"\r\n                  y1=\"50%\"\r\n                  x2=\"100%\"\r\n                  y2=\"50%\"\r\n                  id=\"theGradient\"\r\n                >\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.from}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"0%\"\r\n                  />\r\n                  <stop\r\n                    stopColor={appState.graph.nodes.color.to}\r\n                    stopOpacity=\"1\"\r\n                    offset=\"100%\"\r\n                  />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"100%\"\r\n                height=\"50\"\r\n                fill=\"url(#theGradient)\"\r\n              />\r\n            </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n         \r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n                <p style={{display: \"inline\"}}>Scale By:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                    items={appState.graph.filterKeyList}\r\n                    // itemRenderer={CommonItemRenderer}\r\n                    // filterable={false}\r\n                    onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                    value={appState.graph.nodes.sizeBy}\r\n                    />\r\n                </span>\r\n              \r\n            </div>\r\n            <div style={{marginTop:\"10px\"}}> \r\n                <p style={{display: \"inline\"}}>Scale Type:</p>\r\n                <span style={{float:\"right\"}}>\r\n                  <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                  />\r\n                </span>\r\n            </div>\r\n         \r\n            <div style={{marginTop:\"10px\"}}> \r\n              <p style={{display: \"inline\"}}>Size Range:</p>\r\n            <br />\r\n            <RangeSlider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={([a, b]) => {\r\n                runInAction(\"update scale\", () => {\r\n                  appState.graph.nodes.size.min = a;\r\n                  appState.graph.nodes.size.max = b;\r\n                });\r\n              }}\r\n              value={[\r\n                appState.graph.nodes.size.min,\r\n                appState.graph.nodes.size.max\r\n              ]}\r\n            />\r\n            </div>\r\n              <div style = {{height:\"15px\"}}>\r\n\r\n              </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n        \r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n          <div>\r\n          <p style={{display: \"inline\"}}>Node Shape:</p>\r\n          <span style={{float:\"right\"}}>\r\n            <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n              >\r\n                <Button  text={appState.graph.nodes.shape} />\r\n              </Select>\r\n              </span>\r\n            </div>        \r\n          </div>\r\n        </Collapsable>\r\n        <br/>\r\n        <text style={{fontSize: \"12px\"}}>\r\n          \r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;  \r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable>\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"12px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"none\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button>\r\n        <Button\r\n          style={{width:\"140px\",marginLeft:\"10px\",display:\"none\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={20}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => {appState.graph.nodes.labelBy = it; appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: this.state[it + '_filterlist'] ? [...this.state[it + '_filterlist'], selectit] : [selectit]\r\n                    })\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={(Object.keys(appState.graph.filter).length === 0) ? []:this.state[it + '_filterlist']}\r\n\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    placeholder: '  ',\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      if (deselectIndex0 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:this.state[it + '_filterlist'].filter(item => item !== selectit)\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it] && appState.graph.filter[it][\"min\"])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                {/* <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                />\r\n                <MenuDivider /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                /> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                />\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n              {/* {                    {appState.graph.hasGraph && <Button className={\"pt-small\"} text=\"Clear Selection and Filter\" onClick={() => (appState.graph.overrides = new Map())} />}} */}\r\n              <div className=\"pt-button-group\">\r\n              <a className=\"pt-button pt-icon-refresh\"  role=\"button\" onClick={() => {\r\n                appState.graph.mapClicked = undefined;\r\n                appState.graph.selectedNodes = [];\r\n                appState.graph.frame.selection = []\r\n                appState.graph.filter  = {}\r\n                appState.graph.currentlyHovered = undefined;\r\n                // appState.graph.mapClicked = undefined;\r\n                appState.graph.edgeselection = [];\r\n                appState.graph.degreeselection = [];\r\n                appState.graph.degreebrushed = false;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n                appState.graph.distanceDensityCurrentlyClicked = [];\r\n                appState.graph.clearBrush = true;\r\n                appState.graph.filterNodes()\r\n                appState.graph.frame.updateSelectionOpacity()\r\n                // this.forceUpdate();\r\n              }}> Clear All Selections and Filters</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      // appState.graph.selectedNodes = []\r\n      appState.graph.selectedNodes = selectionNode\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo  } from \"react\";\r\nimport { useMap,useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport {latLngBounds} from 'leaflet'\r\nimport appState from '../stores';\r\n\r\nexport function ZoomMap() {\r\n    const map = useMap();\r\n\r\n    const bounds = useMemo(() => {\r\n        if(!appState.graph.autoZoom) return;\r\n        if (appState.graph.frame.selection.length ==0) {\r\n          // if (appState.graph.frame.getNodeList() >0){\r\n            const nodeLoc = appState.graph.frame.getNodeList().map(function(node){\r\n              return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n            })\r\n            const b = latLngBounds() // seemed to work without having to pass init arg\r\n            nodeLoc.forEach(coords => {\r\n                b.extend(coords)\r\n            })\r\n            if(Object.keys(b).length > 0){\r\n              map.fitBounds(b)\r\n            }\r\n            \r\n          // }\r\n          return null;\r\n        }   //no selection \r\n        if (appState.graph.frame.selection.length ==1) return;  // only one node is selected \r\n\r\n        const nodeLoc = appState.graph.frame.selection.map(function(node){\r\n            return [parseFloat(node.data.ref.LatY) , parseFloat(node.data.ref.LonX)]\r\n        })\r\n        // console.log(nodeLoc)\r\n        const b = latLngBounds() // seemed to work without having to pass init arg\r\n        nodeLoc.forEach(coords => {\r\n            b.extend(coords)\r\n        })\r\n        if(Object.keys(b).length > 0){\r\n          map.fitBounds(b)\r\n        }\r\n    }, [appState.graph.frame.selection])\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n    \r\n    const map = useMapEvents({\r\n      click(e) {\r\n          if (appState.useToolbartoSelect) {\r\n            appState.useToolbartoSelect = false\r\n          } else {\r\n            appState.graph.frame.selection = []\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        \r\n          }\r\n        \r\n        \r\n      }\r\n    })\r\n    return null;\r\n  }\r\n\r\n\r\n  ","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON, FeatureGroup, Circle } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\"\r\nimport { ZoomMap, MapClick } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\"\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\"\r\n\r\nimport Curve from \"../components/Curve\"\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered && appState.graph.currentlyHovered.links) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n        return `${edge.source.id}👉 ${edge.target.id}`\r\n      })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      //highlight within selection edges , &&\r\n      if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n        // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      const pathnode = appState.graph.pathHovered[\"pathnode\"]\r\n      for (let i = 0; i < pathnode.length - 1; i++) {\r\n        if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n          return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n        }\r\n      }\r\n      return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n    console.log(appState.graph.watchAppearance)\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if(appState.graph.degreeselection.length>0){\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n    if(appState.graph.degreebrushed && appState.graph.degreeselection.length==0){\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      if (node.id == appState.graph.pathHovered[\"sourceid\"] || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const neighborIDs = appState.graph.selectedNeighborIDs\r\n      if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if(neighborIDs.indexOf(node.id) !== -1){\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      }\r\n      else {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.03, stroke: false, zIndex: 'auto' }\r\n\r\n      }\r\n    }\r\n    else {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyClicked.length > 0) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    \r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"100%\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n        \r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n        \r\n\r\n        {/* <ReactLeafletToolbar /> */}\r\n        \r\n        <AreaSelect />\r\n        <ZoomMap /> \r\n        <MapClick />\r\n\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n            {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n              return (\r\n                // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                //   data={edge}\r\n                // // eventHandlers={{\r\n                // //   click: (e) => {\r\n                // //     console.log(e.target.options.data)\r\n                // //   }}}\r\n                // />\r\n                <Curve path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n          options={this.setEdgePathOption(edge)}\r\n            />\r\n                \r\n                \r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      if (!appState.graph.mapClicked) { //no clicked circle before \r\n                        const thenode = e.target.options.data\r\n                        appState.graph.mapClicked = thenode  //control map update \r\n                        // appState.graph.currentlyHovered = null\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        appState.graph.frame.highlightClickNode(thenode);\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClicked = null\r\n                        appState.graph.frame.selection = []\r\n                        appState.graph.selectedNodes = []\r\n                        appState.graph.edgeselection = []\r\n                      }\r\n\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.fontSize}\r\n                      className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> : <Tooltip className=\"maptooltip\" direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <div>\r\n        <Switch style={{ position: 'fixed', top: '5vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.mapEdgeShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.mapEdgeShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '5vh', right: '4vw', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n        <Switch style={{ position: 'fixed', top: '8vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.convexPolygonsShow}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '8vh', right: '4vw', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n        <Switch style={{ position: 'fixed', top: '11vh', left: '97vw', zIndex: '1000' }}\r\n          defaultChecked={appState.graph.autoZoom}\r\n          // checked={!node.isHidden}\r\n          onChange={(value) => {\r\n            appState.graph.autoZoom = value.target.checked\r\n\r\n          }}\r\n        />\r\n        <span style={{ fontSize: '12px', position: 'fixed', top: '11vh', right: '4vw', zIndex: '1000' }}> Automatic Zoom</span>\r\n        </div>\r\n        \r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n      \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 64, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) return [null, []];\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n  const thenode = appState.graph.selectedNodes[0]\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n    \r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n  \r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n  \r\n  \r\n      })\r\n  \r\n      \r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n      \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n\r\n      // when no node statisfy, should dehighlight \r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n    \r\n    \r\n  \r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n    \r\n  \r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n    \r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      selectionNode = selectneighbors.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }\r\n\r\n    \r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                  \r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"30vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.selectedNodes.length ==1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n  \r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                   \r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                    \r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n  \r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n  \r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                    \r\n  \r\n  \r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"30vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n  \r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            } \r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n  \r\n  \r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n     \r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density() ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            \r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"30vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n                \r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 50, left: 50 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // this.state.;\r\n    if (appState.graph.scatterplot.x === 'shortest path') {\r\n      column1 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n      column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.x)\r\n      column1 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n      })\r\n    }\r\n\r\n    if (appState.graph.scatterplot.y === 'shortest path') {\r\n      column2 = this.infinityhop\r\n      header.push('shortest path')\r\n    } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n      column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n        return parseFloat(path['distance'])\r\n      })\r\n      header.push('pair distance')\r\n    } else {\r\n      header.push(appState.graph.scatterplot.y)\r\n      column2 = appState.graph.frame.getNodeList().map((d) => {\r\n        return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n      })\r\n    }\r\n\r\n    let temp = []\r\n    temp.push(header)\r\n    for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n      temp.push([column1[i], column2[i]]);\r\n    }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false;\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = []\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    if(selection ) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      }\r\n      console.log(selection[0][1], selection[1][1],brushBounds.y1, brushBounds.y0);\r\n  \r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n        console.log(nodecx, nodecy);\r\n        if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n          selectionNodeID.push(select(this).attr(\"id\"))\r\n        }\r\n  \r\n  \r\n  \r\n      })\r\n  \r\n  \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n  \r\n      )\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.selectedNodes = selectionNode\r\n  \r\n  \r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity()\r\n    }else{   //click to clear selection \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      \r\n    }\r\n    \r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left,  this.margin.top], [this.width + this.margin.left, this.height + this.margin.top ]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\"}}>X By: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize:\"12px\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}\r\n              />\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                <text style={{ transform: 'translate(20vw, 28vh)' }} fontSize=\"12px\">{(appState.graph.scatterplot.x === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.x.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text \r\n                 style={{ transform: \"translate(-3vw, 21vh) rotate(-90deg)\", }}\r\n                  // transform={\"translate(-3vw, 21vh) rotate(-90deg)\"}\r\n                  fontSize=\"12px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance') ? 'Standard Distance (km)' : appState.graph.scatterplot.y.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(35vw, 1vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(12vw, 1.0vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n      // density distance node style\r\n\r\n      // //hover on one group \r\n      // if (appState.graph.distanceDensityCurrentlyHovered) {\r\n\r\n      //   if (String(node['name']) === String(appState.graph.distanceDensityCurrentlyHovered)) {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"10000\",\r\n      //       stroke: def.NODE_HIGHLIGHT,\r\n      //       fillOpacity: 0.8\r\n      //     }\r\n      //   } else {\r\n      //     return {\r\n      //       fill: appState.graph.nodeColorScale(node['name']),\r\n      //       zIndex: \"0\",\r\n      //       stroke: false,\r\n      //       fillOpacity: 0.1\r\n      //     }\r\n      //   }\r\n\r\n      // } else {// no hover \r\n      //   return {\r\n      //     fill: appState.graph.nodeColorScale(node['name']),\r\n      //     zIndex: \"0\",\r\n      //     stroke: false,\r\n      //     fillOpacity: 0.8\r\n      //   }\r\n\r\n      // }\r\n      \r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (appState.graph.distanceDensityCurrentlyClicked.includes(String(node['name']))) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } \r\n        else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n      }\r\n    }\r\n    else { //path node style \r\n      return {\r\n        \r\n        fill: appState.graph.edges.color,\r\n        zIndex: \"0\",\r\n        stroke: false,\r\n        fillOpacity: 0.8\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              // onMouseOver={(e) => {\r\n              //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n              //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n              //     // console.log(node)\r\n              //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n              //   )\r\n              //   appState.graph.frame.selection = selectionNode\r\n              //   appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n              //   // console.log(selectionNode)\r\n              //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              // }}\r\n              // onMouseLeave={(e) => {\r\n\r\n              //   if (appState.graph.mapClicked) return;\r\n              //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n              //   appState.graph.frame.selection = []\r\n              //   appState.graph.selectedNodes = []\r\n              //   appState.graph.edgeselection = []\r\n\r\n              //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              //     // if (n !== appState.graph.mapClicked) {\r\n              //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              //     // }\r\n              //   }\r\n              //   );\r\n\r\n\r\n              // }}\r\n              onClick={(e) => {\r\n                if (appState.graph.distanceDensityCurrentlyClicked.includes(e.target.getAttribute('id'))) {\r\n                  appState.graph.distanceDensityCurrentlyClicked = appState.graph.distanceDensityCurrentlyClicked.filter(node => \r\n                    node !==  e.target.getAttribute('id')\r\n                  )\r\n                }\r\n                else {\r\n                  appState.graph.distanceDensityCurrentlyClicked.push(e.target.getAttribute('id'));\r\n                }\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  appState.graph.distanceDensityCurrentlyClicked.includes(String(node.data.ref[appState.graph.groupby]))\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\" \r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              // e.target.getAttribute('fill') node.renderData.color,\r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onMouseOver={(e) => {\r\n              // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n              \r\n              e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n              // const source = appState.graph.frame.getNode(sourceid)\r\n              // const target = appState.graph.frame.getNode(targetid)\r\n              const thepath = pathFinder.find(sourceid, targetid)\r\n              const pathnode = thepath.map((node) => {\r\n                return appState.graph.frame.getNode(node.id)\r\n              })\r\n              //control map highlight \r\n              appState.graph.pathHovered = {\r\n                \"sourceid\": sourceid,\r\n                \"targetid\": targetid,\r\n                \"pathnode\": pathnode\r\n              }\r\n              // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              // if (appState.graph.mapClicked) return;\r\n              e.target.style.fill = appState.graph.edges.color\r\n              appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n              appState.graph.pathHovered = null;\r\n\r\n\r\n            }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\n// import { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport SelectionDetail from \"./panels/SelectionDetail\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        {/* {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 1 && <SelectionDetail />\r\n        } */}\r\n        {/* {appState.graph.selectedNodes.length === 1 && (\r\n          <NodeDetail node={appState.graph.selectedNodes[0].data.ref} />\r\n        )} */}\r\n\r\n        {/* {appState.graph.selectedNodes.length !== 1 && appState.graph.currentlyHovered && (\r\n          <NodeDetail node={appState.graph.currentlyHovered.data.ref} />\r\n        )} */}\r\n\r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from 'ngraph.graph';\r\nimport path from 'ngraph.path';\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    \r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                appState.graph.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.community = communityDict[node.id] ? String.fromCharCode(communityDict[node.id] + 97)  : 'a'\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n               \r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n\r\n                appState.graph.nodes.convexhullby = \"community\"\r\n                appState.graph.nodes.groupby = \"community\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    runShortestPath = () =>{\r\n        \r\n\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n            var p = 0.017453292519943295;    // Math.PI / 180\r\n            var c = Math.cos;\r\n            var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n              c(lat1 * p) * c(lat2 * p) *\r\n              (1 - c((lon2 - lon1) * p)) / 2;\r\n        \r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n          }\r\n        \r\n        const graph = createGraph();\r\n        \r\n        // hardcode LatY and LonX for sample dataset \r\n        appState.graph.rawGraph.nodes.forEach(node => graph.addNode(node[\"id\"].toString(),  { LatY: parseFloat(node[\"LatY\"]),LonX: parseFloat(node[\"LonX\"]) }))\r\n        appState.graph.rawGraph.edges.forEach(edge => graph.addLink(edge[\"source_id\"], edge[\"target_id\"]));\r\n\r\n        const shortestPathPairs = () => {\r\n            let pathFinder = path.aGreedy(graph);\r\n            const pathsArr = []\r\n            const pathsSet = new Set();\r\n        \r\n        \r\n        \r\n            graph.forEachNode(function (fromnode) {\r\n        \r\n              graph.forEachNode(function (tonode) {\r\n                if (fromnode.id !== tonode.id) {\r\n                  const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n                  const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n                  const edgeinfo = appState.graph.rawGraph.edges.filter((edge)=>{\r\n                    return (edge.source_id === fromnode.id && edge.target_id === tonode.id)\r\n                  })\r\n                  let pairdist = calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n                  \r\n                  \r\n                  \r\n                  // undirected graph:\r\n                  // only add once for undirected graph \r\n                  if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n                    pathsSet.add(pathKey1);\r\n                    pathsSet.add(pathKey2);\r\n                    pathsArr.push({\r\n                     \"source\":fromnode.id,\r\n                     \"target\":tonode.id,\r\n                    \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n                    \"distance\": pairdist\r\n                  \r\n                   })\r\n                  }\r\n                   \r\n                  //directed graph: \r\n                }\r\n                \r\n              })\r\n        \r\n            })\r\n            // console.log(nodesArr.length)\r\n            // console.log(pathsArr.length)\r\n            return pathsArr\r\n        \r\n          }\r\n          appState.graph.rawGraph.paths = shortestPathPairs();\r\n          appState.graph.metadata.nodeComputed.push('shortest path')\r\n            appState.graph.metadata.nodeComputed.push('pair distance')\r\n            appState.graph.scatterplot.x = 'pair distance'\r\n            appState.graph.scatterplot.y = 'shortest path'\r\n\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'convex'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n          \r\n        // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n                \r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                \r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes,\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runShortestPath}>Run Shortest Path</Button>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community</Button>\r\n                        {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n                    {appState.graph.modularity? <text className=\"modularity-tag\" style={{fontSize: \"8px\"} } >{\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}</text>: null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"12px\" }}>Convex Hull By: </p>\r\n                        <span style={{ }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                    appState.graph.convexPolygonsShow = true\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\" , fontSize:\"12px\" }}>Cluster By: </p>\r\n                        <span style={{  }}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\n\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n          x[i].style.display = \"none\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n    }\r\n\r\n    render() {\r\n      return appState.graph.frame && (\r\n        <SidebarMenu>\r\n            <div class=\"sidebar-container\">\r\n                <div class=\"w3-bar w3-black\">\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                    <button class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                </div> \r\n                <div id=\"Appearance\" class=\"city\">\r\n                    <text style={{fontSize: \"12px\"}}>Appearance </text>\r\n                    <Tabs2 animate id=\"graph-options\">\r\n                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Filter\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Filter Options</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"f_nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"Statistics\" class=\"city\" style={{display:\"None\"}}>\r\n                <text style={{fontSize: \"12px\"}}>Statistics</text>\r\n                    <Tabs2 animate id=\"filter-options\">\r\n                    <Tab2 id=\"s_layout\" title=\"Groups\" panel={<StatGroupPanel />} />\r\n                    <Tabs2.Expander />\r\n                    </Tabs2>\r\n                </div>\r\n                <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                    <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colspan=\"2\" style={{textAlign: \"center\"}}><Tag>Statistics</Tag></th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td># Nodes</td>\r\n                                <td>{appState.graph.metadata.fullNodes}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td># Edges</td>\r\n                                <td>{appState.graph.metadata.fullEdges}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Average Degree</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Density</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Network Diameter</td>\r\n                                <td>\r\n                                {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Clustering<br></br>Coefficient</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Connected <br></br>Component</td>\r\n                                <td>{(appState.graph.hasGraph) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </SidebarMenu>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag } from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n      })} style={{display: \"flex\"}}>\r\n        <div>\r\n        <NavbarSelector />\r\n        </div>\r\n        <div class=\"container\" style={{paddingTop:\"5vh\", maxWidth:\"100vw\", height:\"100%\"}}>\r\n          <div class=\"container\" style={{height:\"100%\"}}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                    {appState.graph.hasGraph && <Tag className=\"network-tag\">Network</Tag>}\r\n                    <main className=\"main\">\r\n                      {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                        <ThreeJSVis />\r\n                      ) : (\r\n                        <WorkspaceView />\r\n                      )}\r\n                    </main>\r\n                    {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                    <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div class=\"container__right\">\r\n                  {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",width: '40vw'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame &&  <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame  && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}