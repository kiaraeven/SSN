{"version":3,"sources":["stores/PreferencesStore.js","services/AlgorithmUtils.js","stores/GraphStore.js","stores/ImportStore.js","stores/ProjectStore.js","stores/SearchStore.js","stores/index.js","constants/index.js","ipc/client.js","graph-frontend/src/structure/node.js","graph-frontend/include/THREE.MeshLine.js","graph-frontend/src/select.js","graph-frontend/index.js","images/Snoman title.png","images/Snoman logo.png","notifications/client.js","graph-frontend/src/imports.js","graph-frontend/src/process.js","graph-frontend/include/QuickHull.js","graph-frontend/include/ConvexGeometry.js","graph-frontend/include/CSS3DRenderer.js","graph-frontend/include/OrbitControls.js","graph-frontend/src/utils/utils.js","graph-frontend/src/setup.js","graph-frontend/src/addremove.js","graph-frontend/src/highlighting.js","graph-frontend/src/mouse.js","graph-frontend/src/modify.js","graph-frontend/src/draw.js","graph-frontend/src/api.js","graph-frontend/src/update.js","components/PreferencesDialog.jsx","components/utils/Collapsable.jsx","components/utils/CommonItemRenderer.jsx","components/utils/SimpleSelect.jsx","components/PostImportOptions.jsx","components/ImportDialog.jsx","components/GEXFImportDialog.jsx","components/OpenDialog.jsx","components/NewProjectDialog.jsx","components/ProjectDetailDialog.jsx","components/SaveSnapshotDialog.jsx","components/RenameSnapshotDialog.jsx","components/OpenSnapshotDialog.jsx","components/ShareDialog.jsx","components/StatisticsDialog.jsx","components/FilterDialog.jsx","components/HelpDialog.jsx","components/NodeTable.jsx","components/NeighborDialog.jsx","components/DataSheetDialog.jsx","components/Dialogs.jsx","components/ResizableDraggableDialog.jsx","components/panels/GlobalPanel.jsx","components/utils/SwitchCollapsable.jsx","components/panels/SelectionPanel.jsx","components/panels/NodesPanel.jsx","components/panels/EdgesPanel.jsx","components/panels/LabelsPanel.jsx","components/utils/MultiSelects.jsx","components/panels/NodesFilterPanel.jsx","components/Navbar.jsx","components/WorkspaceView.jsx","visualizers/ThreeJSVis.jsx","components/AreaSelect.jsx","components/ReactLeafletToolbar.jsx","components/ZoomMap.jsx","components/Curve.jsx","visualizers/MapView.jsx","components/panels/NodeDetailPanel.jsx","components/utils/XYSelect.jsx","components/panels/ScatterPlot.jsx","components/Legends.jsx","components/panels/SelectionActionPanel.jsx","components/StatusBar.jsx","components/panels/ZoomPanel.jsx","components/FloatingCards.jsx","components/panels/SelectionDetail.jsx","components/panels/StatGroupPanel.jsx","components/Sidebar.jsx","app.jsx","index.js"],"names":["PreferencesStore","_class","_classCallCheck","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_createClass","key","value","requestLoadUserConfig","userConfig","darkMode","this","workspace","workspacePath","requestSaveUserConfig","isRenderOptionsCardHidden","isFilterOptionsCardHidden","isScatterPlotCardHidden","minimapShowing","isStatusBarShowing","isNavbarInMinimalMode","isLegendShowing","appState","graph","frame","hideMiniMap","console","log","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","IS_IFRAME_WIDGET","jsnx","require","jsgraphs","convertToJsnx","snapshot","jsnxGraph","Graph","addNodesFrom","rawGraph","nodes","map","n","id","addEdgesFrom","edges","e","source_id","target_id","convertToJSGraph","i","idDict","length","g","forEach","addEdge","averageClusteringCoefficient","keydown","clusteringco","averageClustering","selectedNodes","filter","x","undefined","selection","getNodeList","node","renderData","draw_object","children","visible","connectedComponents","connectcom","cc","ConnectedComponents","componentCount","exactGraphDiameter","graphDiameter","temp","WeightedDiGraph","Edge","convertToJSGraphWeightedDi","jsg","dia","dijkstra","Dijkstra","f","hasPathTo","pathLength","pathTo","Math","max","GraphStore","_dec","ref","_dec2","initialGlobalConfig","colorBy","color","scale","from","to","nominalColor","sizeBy","size","min","labelBy","shape","labelSize","labelLength","crossColor","scatterplot","y","_descriptor20","_descriptor21","_descriptor22","_descriptor23","_descriptor24","_descriptor25","_descriptor26","_descriptor27","_descriptor28","_descriptor29","_descriptor30","_descriptor31","_descriptor32","_descriptor33","_descriptor34","_descriptor35","_descriptor36","_descriptor37","_descriptor38","_descriptor39","_descriptor40","_descriptor41","tempRawGraph","_descriptor42","_descriptor43","_descriptor44","_descriptor45","_descriptor46","_descriptor47","_lastSelectedSingleNode","nodesShowingLabels","_descriptor48","_descriptor49","_descriptor50","_descriptor51","_descriptor52","_descriptor53","_descriptor54","_descriptor55","_descriptor56","_descriptor57","_descriptor58","_descriptor59","_descriptor60","_descriptor61","_descriptor62","_descriptor63","_descriptor64","_descriptor65","hasGraphLoaded","get","uniq","concat","_toConsumableArray","metadata","nodeProperties","nodeComputed","k","removeList","indexOf","uniq_compute","u","inputString","connectingWords","replace","word","includes","toLowerCase","charAt","toUpperCase","slice","capitalizeString","neighborIDs","j","links","link","push","fromId","toId","ret","_i","_arr","_step","p","Number","MAX_VALUE","MIN_VALUE","_iterator","_createForOfIteratorHelper","s","done","err","scales","domain","minMax","range","_this","uniqcommunity","Set","item","_this2","selectedNodeId","setOfNeighborIds","source","toString","target","add","has","_this3","createGraph","isHidden","override","overrides","addNode","label","nodeSizeScale","nodeColorScale","hasNode","addLink","_this4","runInAction","Object","keys","_objectSpread","satisfy","fkey","nodePropertyTypes","nodeids","_this5","_this6","removeNodesByIds","_this7","positions","getPositions","pinnedNodes","Array","getPinnedNodes","global","optionalConfig","getSnapshot","noPosition","noGlobal","noOverride","JSON","stringify","initialgraph","nodesArr","LonX","parseFloat","LatY","edgesArr","it","fromnode","tonode","fromlocLatY","fromlocLonX","tolocLatY","tolocLonX","withinState","withinFamily","latlist","lonlist","medianCenter","values","Error","result1","sort","a","b","half","floor","medianLat","medianLon","lat1","lon1","lat2","lon2","c","cos","asin","sqrt","calDistanceFromLatLonInKm","calMedianCenter","nodekeyList","uniqueValue","valuea","el","minv","apply","maxv","paths","snapshotName","fullNodes","fullEdges","edgeProperties","savedStatesStr","runActiveLayout","savedStates","parse","savedOverrides","Map","entries","_ref","_ref2","_slicedToArray","v","clear","merge","recalculateGraph","recalculateRawgraph","initialNodesShowingLabels","paused","smartPause","defaultActive","isActive","startTime","Date","now","smartPaused","nodesToPin","that","process","forEachNode","setPinnedNodes","_this8","graphFrame","Frame","computedGraph","init","display","ee","on","data","menu","MenuFactory","MenuItemFactory","onClick","toggleSelectedLabels","text","unpinSelectedNodes","pinSelectedNodes","rightClickedNode","rightClickedNodeId","neighbors","getNeighborNodesFromRawGraph","n1","n2","ids","showNodes","ContextMenu","show","left","pageX","top","pageY","shonodeid","nodeCount","graphDensity","getEdgeList","sum","degree","averageDegree","array","edgeSelection","linkObjs","uniqEdgeSelection","edgeDistance","edgeDist","reduce","toFixed","temraw","reaverageClusteringCoefficient","duration","interactingWithGraph","computed","getOwnPropertyDescriptor","action","ImportStore","postImportFilteringOptions","sortedList","setIds","defaultPostImportFilteringOption","selectedPostImportFilteringOption","nodeFile","path","topN","hasColumns","ready","columns","mapping","delimiter","edgeFile","createMissing","ProjectStore","SearchStore","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","AppState","preferences","import","search","project","window","useToolbartoSelect","loadAndDisplaySnapshotFromStrapi","uuid","convexPolygons","modularity","globalFlatRatio","convexhullby","groupby","mapClicked","mapClickedArray","areaSelected","selectedSets","commonSetNodes","interSetNodes","currentlyHovered","convexNodes","pathHovered","pathHoveredList","densityDistance","edgeselection","degreeselection","degreebrushed","distanceDensityCurrentlyHovered","distanceDensityCurrentlyClicked","loading","clearBrush","mapEdgeShow","autoZoom","firstload","url","BACKEND_URL","fetch","mode","response","json","body","toaster","message","intent","Intent","DANGER","timeout","loadSnapshotFromStrapi","snapshotString","loadImmediateStates","loadAndDisplaySnapshotFromURL","loadSnapshotFromURL","split","loadInitialSampleGraph","_asyncToGenerator","_callee","hash","_context","location","substring","startsWith","decodeURIComponent","alert","SAMPLE_GRAPH_SNAPSHOTS","saveSnapshotToString","saveImmediateStates","addEventListener","event","autorun","hasGraph","clustercoe","updateGraph","setAllNodesShapeWithOverride","setLabelRelativeSize","setLabelLength","updateSelectionOpacity","pinNodes","updatePositions","showLabels","searchStr","runSearch","panelOpen","candidates","splice","highlightNodeIds","file","selectedEdgeFileFromInput","hasHeader","importConfig","reader","FileReader","readAsText","onload","lines","topLinesAsString","l","trim","join","comment","auto_parse","skip_empty_lines","_unused","onerror","selectedNodeFileFromInput","_unused2","parent","FRONTEND_URL","LOGO_URL","GITHUB_URL","MOBILE_WIDTH_CUTOFF","MOBILE_HEIGHT_CUTOFF","SCALE_LINEAR","SCALE_LOG","SCALE_CATEGORY","_scales","_defineProperty","LOAD_USER_CONFIG","LOADED_USER_CONFIG","SAVE_USER_CONFIG","SAVED_USER_CONFIG","FETCH_WORKSPACE_PROJECTS","FETCHED_WORKSPACE_PROJECTS","MENU_NEW_PROJECT","CREATE_NEW_PROJECT","CREATED_NEW_PROJECT","DELETE_FILE","RENAME_FILE","LOAD_GRAPH_JSON","LOAD_GRAPH_SQLITE","LOADED_GRAPH_JSON","LOAD_TOAST_KEY","SAVE_GRAPH_JSON","SAVE_GRAPH_SQLITE","SAVED_GRAPH_JSON","SAVE_TOAST_KEY","MENU_LOAD","MENU_IMPORT_CSV","MENU_SAVE_GRAPH_STATE","MENU_SAVE_GRAPH_STATE_TO_PROJECT","MENU_SAVE_GRAPH_SQLITE","SAVE_GRAPH_STATE","SAVED_GRAPH_STATE","SAVE_GRAPH_STATE_TO_PROJECT","SAVED_GRAPH_STATE_TO_PROJECT","LOAD_GRAPH_STATE","LOADED_GRAPH_STATE","SHOW_ITEM_IN_FOLDER","SHOW_WORKSPACE_FOLDER","CHANGE_WORKSPACE_FOLDER","CHANGED_WORKSPACE_FOLDER","CHOOSE_EDGE_FILE","CHOSEN_EDGE_FILE","CHOOSE_NODE_FILE","PEAKED_NODE_FILE","CHOSEN_NODE_FILE","CHOOSE_GRAPH_FILE","CHOSEN_GRAPH_FILE","CHOOSE_STATE_FILE","CHOSEN_STATE_FILE","NODE_AND_EDGE_FILE","ONLY_EDGE_FILE","GRAPH_AND_STATE_FILE","ONLY_GRAPH_FILE","IMPORT_GRAPH","IMPORTED_GRAPH","OPEN_GRAPH","OPENED_GRAPH","SEARCH_REQUEST","SEARCH_RESPONSE","ADD_NODES","ADD_SELECT_NODE","ADD_NODE","GET_NEIGHBORS","ipcRenderer","eventString","registerIPC","node_id","requestChooseGraphFile","requestChooseStateFile","requestOpen","graphFile","stateFile","requestDelete","filePath","requestImportGraphFromCSV","hasNodeFile","newProjectName","toJS","_x6","_importGraphFromCSV","arguments","importGraphFromCSV","postImportFilter","setUpFrame","dialogOpen","showMiniMap","turnOffLabelCSSRenderer","requestImportGraphFromGexf","_importGraphFromGexf","importGraphFromGexf","gexfDialogOpen","readCSV","_x","_x2","_x3","_readCSV","fileObject","content","msg","parseGEXF","_x4","_parseGEXF","_callee2","parser","xmlDoc","xmlEdges","xmlNodes","xmlAttri","nodeAttri","nodeAttriOrdered","curr","_l","_curr","_i2","_l2","currEdge","t","_i3","_l3","currNode","nodeAttvalues","nodeAttvalue","attributeIdElementAttribute","attributeId","_j","currAttri","_context2","DOMParser","parseFromString","getElementsByTagName","getAttribute","_readOnlyError","pagerank","betweenness","closeness","attributes","readGEXF","_x5","_readGEXF","_callee3","_context3","_callee4","config","degreeDict","edgesSet","rank","_context4","parseInt","edgeKey","edgeKey2","getNode","GEOID","Family","avgLat","avgLon","average","pathFinder","aGreedy","pathsArr","pathsSet","pathKey1","pathKey2","find","pageRank","centrality","_callee5","gexfParsed","_context5","selectedGexfFileFromInput","searchOrder","fetchWorkspaceProjects","requestCreateNewProject","projectMetadata","$","Node","index","in","out","domainData","vx","vy","connectedTo","outNodeIds","outNode","inArray","connectNode","THREE","memcpy","src","srcOffset","dst","dstOffset","subarray","buffer","set","MeshLine","previous","side","width","indices_array","uvs","counters","geometry","BufferGeometry","widthCallback","setGeometry","Geometry","vertices","z","Float32Array","compareV3","aa","ab","copyV3","w","position","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","advance","MeshLineMaterial","parameters","check","d","Material","lineWidth","useMap","Color","opacity","resolution","Vector2","sizeAttenuation","near","far","dashArray","useDash","visibility","alphaTest","material","RawShaderMaterial","uniforms","vertexShader","fragmentShader","setValues","copy","def","default","OrbitControls","d3","linkVertical","module","selectNode","dragging","isSelected","updateSelection","mouseX","mouseY","clearSelection","NODE_NO_HIGHLIGHT","textHolder","element","hideme","getEdgeWithinSelection","withinEdges","getEdgeWithinOutSelection","withinoutEdges","findIntersection","arrays","isArray","intersection","currentArray","getCommonNodesBetweenSets","selectionsets","setsnodes","flat","commonnodes","uniqueArrayByAttribute","getEdgeWithinDist","mindist","maxdist","getEdgeWithinSelectionForDensity","edgekeys","key1","key2","updateDegreeHistOpacity","degreehighlight","colorByDistance","dist","colorNode","colorNodeOpacity","lineIndices","linecolor","r","red","blue","green","arrow","setRGB","colorNodeEdge","highlightAllEdges","highlightedgeWithinDist","updateSelectionInterOpacity","mapClickedArraryID","interSetNodesID","updateSelectionCommonOpacity","commonSetNodesID","selectionID","updateSelectionOutOpacity","allneighbors","highlightClickArrayNode","nodearray","neighborNodes","getNeighborNodesFromGraph","colorNodeArrayEdge","highlightClickNode","nodeNeighbor","froms","tos","getOnlyNeighborNodesFromGraph","diffx","diffy","clickedNode","pinnedx","pinnedy","highlightNode","highlightEdges","fx","fy","checkSelection","mouseEnd","Vector3","mouseStart","right","npos","options","layout","force","getNodePosition","insideBox","posx","posy","balancedBinTree","Argo","Toaster","Position","TOP","STATS","STATS_SHOW","NODE_COLOR","NODE_HIGHLIGHT","ADJACENT_HIGHLIGHT","SEARCH_HIGHLIGHT","NODE_HTEXTURE","NODE_TEXTURE","NODE_NO_HTEX","NODE_NO_TEX","NODE_NO_HCOLOR","NODE_NO_COLOR","NODE_NEIGHBOR_HIGHLIGHT","NODE_SHAPE","NODE_HSHAPE","NODE_SIZE","HIGHLIGHT_SIZE","LAYOUT","LINES","MAP","MAP_RENDER_PER_NUMBER_OF_FRAME","TEXT_SCALE","TEXT_SIZE","TEXT_X_OFFSET","TEXT_Y_OFFSET","TEXT_BACK_COLOR","TEXT_OPACITY","TEXT_WIREFRAME","PIN_COLOR","spawn","inGraph","layout_options","graphLayout","lineObjects","MAX_LINES","textureLoader","TextureLoader","crossOrigin","oldIntersect","fov","lastTimeSelectionLength","showBox","renderWidth","renderHeight","maxZoom","mouseDown","layoutInit","relativeFontSize","mapShowing","mapRenderPerNumberOfFrame","lastNode","doHighlightNeighbors","prevHighlights","hull","stats","showPanel","document","appendChild","dom","animate","begin","controls","update","render","end","requestAnimationFrame","renderer","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","minimapRenderer","setDisplayParams","setRendererParams","setupCamera","setupMinimap","setupGeometry","setupSelect","innerHTML","domElement","cssRenderer","setupLayout","setupGraph","preventDefault","onWindowResize","clientRect","getBoundingClientRect","height","minimap","aspect","ccamera","updateProjectionMatrix","setSize","stage","numberOfFrameSinceMiniMapRerender","updateCamera","updateNodes","updateLabels","updateEdges","forceLink","restart","tickToStatic","ceil","alphaMin","alphaDecay","tick","setViewport","setScissor","setScissorTest","scene","camera","QuickHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","Face","normal","midpoint","area","constant","outside","edge","HalfEdge","vertex","face","twin","VertexNode","point","head","tail","assign","setFromPoints","points","makeEmpty","compute","setFromObject","updateMatrixWorld","traverse","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","count","fromBufferAttribute","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distanceToPoint","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","minVertices","maxVertices","getComponent","setComponent","EPSILON","abs","computeInitialHull","line3","plane","closestPoint","Line3","Plane","v0","v1","v2","v3","extremes","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","cleanup","e0","e1","e2","triangle","Triangle","dot","distanceTo","lengthSquared","last","insertAfter","ConvexGeometry","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","normals","Float32BufferAttribute","CSS3DObject","Object3D","style","parentNode","removeChild","CSS3DSprite","CSS3DRenderer","_width","_height","REVISION","matrix","Matrix4","cache","objects","createElement","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","epsilon","getObjectCSSMatrix","elements","setClearColor","isPaused","getSize","tan","degToRad","getEffectiveFOV","WebkitPerspective","MozPerspective","oPerspective","perspective","matrixWorldInverse","getInverse","getCameraCSSMatrix","WebkitTransform","MozTransform","oTransform","transform","renderObject","transpose","copyPosition","cachedStyle","enabled","minDistance","Infinity","minZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","SPACE","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","position0","zoom0","zoom","spacePan","bothPan","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","scope","dispatchEvent","changeEvent","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","EPS","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","PerspectiveCamera","targetDistance","clientHeight","OrthographicCamera","clientWidth","bottom","warn","dollyIn","dollyScale","mousePos","dollyOut","handleMouseDownPan","clientX","clientY","button","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","spacePanStart","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","handleTouchStartRotate","dx","dy","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleKeyUp","EventDispatcher","defineProperties","center","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","relMouseCoords","currentElement","totalOffsetX","totalOffsetY","offsetLeft","scrollLeft","offsetTop","scrollTop","offsetParent","prepNode","nodeToAdd","hex","hcolor","exec","numYeast","random","tsize","make1x1Rect","rectShape","Shape","moveTo","lineTo","ShapeGeometry","make2x2Rect","volToRadius","volume","createNGraph","setupNgraphLayout","setupD3Layout","forceSimulation","forceManyBody","strength","forceY","forceX","velocityDecay","getElementById","containerDiv","querySelector","offsetWidth","offsetHeight","offsetBottom","zIndex","setPixelRatio","devicePixelRatio","oldCoords","panToMousePosition","coordX","coordY","coefficient","Scene","Group","setupFancyEdges","setUpSimpleEdges","rect","setupSelectionBox","setupBoundaries","setupViewPort","colors","LineGeometry","setPositions","setColors","matLine","LineMaterial","linewidth","vertexColors","dashed","alphaToCoverage","line","Line2","computeLineDistances","LineBasicMaterial","VertexColors","shading","FlatShading","LineSegments","frustumCulled","directedArrows","arrowMaterial","MeshBasicMaterial","Mesh","arrowPositions","arrowColors","drawCount","selectBox","Line","boundaries","setBoundarySize","viewPort","setViewPortSize","computeBoundingSphere","setupMouseHandlers","callback","coords","mousePosition","unproject","dir","normalize","isMouseCoordinatesOnMinimap","raycaster","Raycaster","pos","onRightClick","which","focus","onRightClickCoords","callMouseHandler","intersects","intersectObjects","nodeIndex","ctrlKey","mouseHandler","graphNode","drawNode","removeNode","removeGraphEdges","undrawEdges","undrawNode","nodeLinks","getLinks","removeLink","hidden","killed","locdata","drawEdge","toggle","highlightNeighbors","highlightPathEdgeNode","pathnode","pathnnodeid","decolorNodeEdge","changeSingleNodeColorEdge","op","setHex","ctrl","leftMouseDown","onHover","lastHover","endTime","oldStartTime","clickDifference","doubleClicked","newNodeIds","areArraysIdentical","arr1","arr2","arr","uniqueMap","highlightCommonNodes","showIntersect","pickUpAlter","thenode","thenodeneightbor","toRemoveSets","nodeset","thenodeneighbors","emit","setUniformNodeSize","hsize","setNodeDataSize","dataValue","dataVal","setUniformNodeColor","hsvDegree","setNodeDataColor","mapNodeAttributes","mod","attr","changeLabelFontSize","changeLabelLength","changeNodes","changeNode","numChars","relativeSize","mapsize","fontSize","mapfontSize","createHighlightMesh","texture","hshape","hgeometry","CircleGeometry","createHighlightDrawObject","getNodeSize","hmaterial","transparent","highlight","createNodeMesh","createNodeDrawObject","createPinMesh","pinMesh","createNodeLabel","wireframe","wireframeLinewidth","DoubleSide","PlaneGeometry","textMesh","createAndSetupLabelTextMesh","createAndSetupLabelDiv","createAndSetupTextHolder","bbox","Box3","createLabelDiv","createLabelDivElement","createTextNode","textElement","createLabelTextElement","backgroundColor","textOverflow","userSelect","whiteSpace","setupNodeDrawObject","htexture","onTextureLoad","load","himage","image","bind","hexToRGB","getDistanceFromLatLonInKm","hide","updateColorsAndPositions","setTimeout","v1pos","v2pos","v1color","v2color","setMouseMode","mouseMode","isMouseModeMove","pauseLayout","pause","resumeLayout","mapSelectedNodes","mapAllNodes","setLabelFontSize","querySelectorAll","toggleMiniMap","turnOnLabelCSSRenderer","updateNodesShowingLabels","toggleLabels","showSelectedLabels","selectneighbors","hideSelectedLabels","hideLabels","hideAllLabels","showAllLabels","setCanvasSize","setAllNodesShape","setNodeShape","getNumSelected","getNodesCount","toggleDark","updateViewPortEdgeColor","getGraph","forEachLink","poses","getPinPositions","alias","toggleAlias","setLastNode","dragLastNode","lowerRes","toggleNeighborHighlight","removeSelected","getSelected","getSelectedIds","setDrawRange","total","arrowPosition","directedOrNot","midPointX","midPointY","dX","dY","radianDegree","atan","tempXCorner","tempYCorner","sin","degreeDifference","thisNode","step","oldNode","updateNode","getLink","newNode","childNodes","innerText","PreferencesDialog","observer","_React$Component","_inherits","_super","_createSuper","React","Dialog","iconName","className","classnames","Classes","DARK","isOpen","onClose","title","Switch","checked","onChange","saveUserConfig","Button","PRIMARY","Component","onToggle","LARGE","FILL","MINIMAL","rightIconName","Collapse","handleClick","MenuItem","ACTIVE","items","onSelect","_ref$fill","fill","Select","itemRenderer","CommonItemRenderer","filterable","onItemSelect","PostImportOptions","SimpleSelect","selected","PreviewTable","props","Table","numRows","selectedRegions","rows","cols","Column","renderCell","Cell","ImportDialog","_class2","_React$Component2","_super2","changeAvailable","targetValue","setState","available","canImport","renderNodesSelection","Collapsable","nodesOpen","CONTROL_GROUP","margin","lineHeight","INPUT_GROUP","DISABLED","files","sytle","padding","renderEdgesSelection","edgesOpen","newDelimiter","updateDelimiter","DIALOG_BODY","TABLE","rel","href","Spinner","renderExampleDataset","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","createdDate","toLocaleString","GEXFImportDialog","renderImportButton","OpenDialog","renderSelectGraph","INPUT","placeholder","readOnly","renderSelectState","selectedGraph","selectedState","openDialogOpen","NewProjectDialog","isNewProjectNameDuplicate","projects","some","isNewProjectNameEmpty","isValidated","isNewProjectDialogOpen","ProjectDetailDialog","currentProject","isProjectDetailDialogOpen","hasGraphData","Card","interactive","elevation","ELEVATION_TWO","graphDataPath","Icon","snapshotPaths","snapshotPath","BUTTON","INTENT_PRIMARY","currentSnapshotName","SaveSnapshotDialog","isSaveSnapshotDialogOpen","stringCopyOfSnapshot","select","execCommand","isRenameSnapshotDialogOpen","OpenSnapshotDialog","selectedFile","openSnapshotDialogOpen","fileAsString","uuidv4","ShareDialog","isShared","isFetching","sharedURL","selectedContinue","handleRequest","_assertThisInitialized","_handleRequest","backendURL","headers","referrer","ok","shareDialogOpen","marginRight","marginBottom","marginTop","resize","dangerouslySetInnerHTML","__html","StatisticsDialog","statisticsDialogOpen","density","diameter","components","FilterDialog","filterDialogOpen","HelpDialog","helpDialogOpen","NodeTable","sortBy","sortOrder","filteredNodes","n1val","n2val","n1valAsNum","n2valAsNum","n1valAsString","n2valAsString","localeCompare","nodeAttributesOrig","allPropertiesKeyList","hideNodes","NeighborDialog","showMoreBy","showMoreNum","lastSelectedSingleNode","neighborDialogOpen","minWidth","ButtonGroup","numberToShow","attributeName","hiddenNodes","showNMoreByAttribute","NumericInput","onValueChange","valAsNumber","valAsString","DataSheetDialog","dataSheetDialogOpen","Dialogs","ResizableDraggableDialog","documentElement","innerWidth","innerHeight","Rnd","bounds","RenameSnapshotDialog","ColorLegend","flexDirection","flex","GlobalPanel","timeOutRef","sizeOptionOpen","colorOptionOpen","shapeOptionOpen","CARD","float","filterKeyList","watchAppearance","getNominalColor","Popover2","placement","modifiers","preventOverflow","backgroundImage","SketchPicker","x1","y1","x2","y2","stopColor","stopOpacity","RangeSlider","stepSize","labelStepSize","_ref3","pluralize","ALIGN_RIGHT","SelectionPanel","twoLayerUpdate","nodeId","nodeAttrs","delete","batchTwoLayerUpdate","labelOptionOpen","SwitchCollapsable","overrideConfig","Slider","NodesPanel","_len","args","_key","getRenderedNodes","EdgesPanel","directionOptionOpen","thicknessOptionOpen","LabelsPanel","tag","tagprops","MultiSelect","popoverProps","popoverClassName","targetTagName","resetOnSelect","tagRenderer","selectedItems","tagInputProps","NodesFilterPanel","MultiSelects","selectit","filterNodes","onRemove","deselectIndex1","onRelease","_ref4","RegularNavbar","runcommunity","querydict","axios","post","communityDict","community","findcliques","cliques","convexhull","group","jsondata","convexDict","isconvex","multipolygon","density_distance","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","argologo_dark","argologo_light","NAVBAR_HEADING","Popover","Menu","sample","sampleSnapshotTitle","sampleSnapshotStrapiUuid","MenuDivider","forceUpdate","NAVBAR_DIVIDER","setInterval","timeNow","Tooltip","role","turnOnMinimalMode","textDecoration","FontAwesomeIcon","icon","faGithub","MinimalNavbar","_class4","turnOffMinimalMode","NavbarSelector","_class5","_React$Component3","_super3","WorkspaceView","textAlign","ThreeJSVis","AreaSelect","useEffect","selectArea","enable","_appState$graph$selec","_appState$graph$frame","toBBoxString","L","rectangle","weight","selectionNode","contains","latLng","getBounds","pad","setValidate","layerPoint","_map","layerPointToLatLng","ZoomMap","useMemo","nodeLoc","latLngBounds","extend","fitBounds","MapClick","useMapEvents","click","DetectKeyPress","Curve","useLeafletContext","curve","container","layerContainer","addLayer","removeLayer","MapView","dec2hexString","dec","substr","onMouseOut","setEdgePathOption","edgeSelectionID","nodesSelectedID","degreeselectionID","pathnodeid","pathnodeall","setNodeCircle","setNodePathOption","fillColor","fillOpacity","stroke","backNodeShow","selectedNeighborIDs","neighborNodesID","setPolygonPath","polygon","pi","convexPolygonsShow","onCreate","edgesOfNodes","Tag","MapContainer","LayersControl","BaseLayer","TileLayer","Overlay","GeoJSON","statejsonfile","countyjsonfile","congressionjsonfile","Pane","edgepositions","polygonlist","Polygon","pathOptions","CircleMarker","eventHandlers","originalEvent","view","DomEvent","neightborNodes","mouseover","mouseout","direction","permanent","defaultChecked","NodeDetail","TABLE_STRIPED","nodeAttributeValue","num","toPrecision","formatLongFloat","ScatterPlot","cr","maxhop","formatXtext","infinityhop","downloadCSV","header","csvarray","unshift","noderow","column","onBrushStart","sourceEvent","onBrush","onBrushEnd","selectionNodeID","circles","svg","selectAll","brushBounds","x0","y0","each","nodecx","nodecy","renderBrush","SVGBrush","extent","getEventMouse","_this$svg$getBounding","brushType","createRef","scaleLinear","shortpathhop","pathlen","scalePoint","pairdistance","XYSelect","allComputedPropertiesKeyList","input","RenderCircles","Axis","axis","axisBottom","tickFormat","axisLeft","svgsaver","SvgSaver","asSvg","CSVLink","asyncOnClick","filename","refs","setScatterStyle","ni","String","cpathid","renderCircles","cluster","ci","cx","cy","pathlist","pathid","_pathid$split","_pathid$split2","sourceid","targetid","_pathid$split3","_pathid$split4","onMouseOver","dataset","onMouseLeave","SelectionActionPanel","StatusBar","numHiddenNodes","numHiddenNeighbor","WARNING","ZoomPanel","RenderOptionsCard","Tabs2","Tab2","panel","Expander","FilterOptionsCard","_class3","FloatingCards","optionsVisible","optionsInvisible","sideButtonVis","marginLeft","sideButtonInv","toggleOptions","filtersVisible","filtersInvisible","filterSideButtonVis","filterSideButtonInv","filterToggleOptions","scatterVisible","scatterInvisible","scatterSideButtonVis","scatterSideButtonInv","scatterToggleOptions","ELEVATION_2","justifyContent","alignItems","numCandidates","INTERACTIVE","pageNum","allCands","nPerPage","pointerEvents","cursor","pages","maxPage","paddingTop","paddingRight","paddingBottom","Legends","SelectionDetail","allwidth","allheight","brushmargin","brushwidth","distBinData","degreeBinData","onEdgeBrushStart","onEdgeBrush","onEdgeBrushEnd","selectionRectID","rects","edgesvg","rectx","filterDistBin2","distbuffer_min","mind","distbuffer_max","maxd","filteredge","renderEdgeBrush","_this$edgesvg$getBoun","onDegreeBrushStart","onDegreeBrush","_ref5","onNoNodeDegreeBrushEnd","_ref6","degreesvg","filterdegreeBin2","degreebuffer_min","degreebuffer_max","onSelectDegreeBrushEnd","_ref7","renderNoNodeDegreeBrush","_this$degreesvg$getBo","renderSelectDegreeBrush","_this$degreesvg$getBo2","prevTick","maxDegreeDict","maxDegreeCount","maxDistanceCount","SelectionDistanceFromLatLonIn","text-anchor","fontSizeAdjust","Histogram","ariaLabel","orientation","cumulative","normalized","binCount","valueAccessor","datum","binType","BarSeries","animated","rawData","XAxis","numTicks","tickLabelProps","YAxis","ti","selectNodes","SelectionDensity","avgdist","nodelength","selectionDen","selectedEdge","avgDegree","de","avgdensity","selectnodesID","rediameter","reclustercoe","recomponent","StatGroupPanel","unicommunity","fromCharCode","avgConnectionDist","cdistance","runKfullfillment","calculateDistance","dLat","dLon","atan2","_loop","currentNode","_step2","_iterator2","otherNode","_step3","_iterator3","cnn","snn","findKfulfillment","runGlobalFlatRatio","shuffleArray","randomIndex","_step6","_iterator6","_step7","_iterator7","nodeOrders","_step8","nodesLabels","distanceMatrix","_iterator8","nl","_step9","_iterator9","ll","avgGBarSum","order","nodesWKnn","degreeConstraintMatrix","degreeCount","_step4","connectionCounted","_iterator4","totalDistance","_loop2","_step5","neighborsid","_iterator5","neighbor","gBarSumDistances","gSum","runLocalFlatRatio","_step10","_iterator10","currentId","ndistance","isFinite","_step11","_iterator11","_step12","_iterator12","findFlatRatio","runShortestPath","pairdist","shortestPathPairs","Sidebar","avgdegree","rerunDiameter","rerundiameter","rerunCluster","reruncluster","rerunComponent","reruncomponent","cityName","getElementsByClassName","background","SidebarMenu","class","openCity","colspan","avgDe","avgDist","filtergraphDensity","FocusStyleManager","onlyShowFocusOnTabs","loadUserConfig","DELETE","Keys","BACKSPACE","P","U","respondToResize","App","resizer","leftSide","previousElementSibling","rightSide","nextElementSibling","upHeight","mouseMoveHandler","newLeftHeight","mouseUpHandler","removeProperty","leftWidth","newLeftWidth","maxWidth","ReactDOM"],"mappings":"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","file":"static/js/main.dbd1c1dc.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport { requestLoadUserConfig, requestSaveUserConfig } from \"../ipc/client\";\r\nimport { IS_IFRAME_WIDGET } from \"../constants\";\r\n\r\nexport default class PreferencesStore {\r\n  @observable dialogOpen = false;\r\n\r\n  @observable openDialogOpen = false;\r\n  @observable openSnapshotDialogOpen = false;\r\n  @observable shareDialogOpen = false;\r\n  @observable statisticsDialogOpen = false;\r\n  @observable filterDialogOpen = false;\r\n  @observable helpDialogOpen = false;\r\n  @observable neighborDialogOpen = false;\r\n  @observable dataSheetDialogOpen = false;\r\n  @observable isRenderOptionsCardHidden = IS_IFRAME_WIDGET;\r\n  @observable isFilterOptionsCardHidden = true;\r\n  @observable isScatterPlotCardHidden = true;\r\n  @observable isScatterPlotDialogOpen = false;\r\n\r\n  // The following fields are asynchronously loaded.\r\n  // Any writes to these fields through saveUserConfig\r\n  // won't be active until the app exits and starts\r\n  // next time.\r\n\r\n  @observable darkMode = false;\r\n  @observable minimapShowing = false;\r\n  @observable isStatusBarShowing = !IS_IFRAME_WIDGET;\r\n  @observable isNavbarInMinimalMode = IS_IFRAME_WIDGET;\r\n  @observable isLegendShowing = !IS_IFRAME_WIDGET;\r\n\r\n  @observable workspacePath = '';\r\n\r\n  // This is called at the beginning of the app.\r\n  loadUserConfig() {\r\n    requestLoadUserConfig();\r\n  }\r\n\r\n  saveUserConfig() {\r\n    const userConfig = {\r\n      darkMode: this.darkMode,\r\n      workspace: this.workspacePath,\r\n    }\r\n\r\n    requestSaveUserConfig(userConfig);\r\n  }\r\n\r\n  turnOnMinimalMode() {\r\n    this.isRenderOptionsCardHidden = true;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = false;\r\n    this.isNavbarInMinimalMode = true;\r\n    this.isLegendShowing = false;\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.hideMiniMap();\r\n    } else {\r\n      console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    }\r\n    \r\n  }\r\n\r\n  turnOffMinimalMode() {\r\n    this.isRenderOptionsCardHidden = false;\r\n    this.isFilterOptionsCardHidden = true;\r\n    this.isScatterPlotCardHidden = true;\r\n    this.minimapShowing = false;\r\n    this.isStatusBarShowing = true;\r\n    this.isNavbarInMinimalMode = false;\r\n    this.isLegendShowing = true;\r\n    // if (appState.graph.frame) {\r\n    //   appState.graph.frame.showMiniMap();\r\n    // } else {\r\n    //   console.log(\"Frame not ready when trying to toggle minimap.\");\r\n    // }\r\n  }\r\n}","import appState from '../stores';\r\n\r\nconst jsnx = require('jsnetworkx');\r\nconst jsgraphs = require('js-graph-algorithms');\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the JSNetworkX library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJsnx(snapshot) {\r\n    const jsnxGraph = new jsnx.Graph();\r\n    jsnxGraph.addNodesFrom(snapshot.rawGraph.nodes.map(n => [n.id, n]));\r\n    jsnxGraph.addEdgesFrom(snapshot.rawGraph.edges.map(e => [e.source_id, e.target_id]));\r\n    return jsnxGraph;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the ngraph library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToNGraph(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraph(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.Graph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(idDict[e.source_id], idDict[e.target_id]);\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot for use in the js-graph-algorithms library (Weighted).\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToJSGraphWeightedDi(snapshot) {\r\n    var idDict = {};\r\n    var i;\r\n    for (i = 0; i < snapshot.rawGraph.nodes.length; i++) {\r\n        idDict[snapshot.rawGraph.nodes[i].id] = i;\r\n    }\r\n    var g = new jsgraphs.WeightedDiGraph(snapshot.rawGraph.nodes.length);\r\n    snapshot.rawGraph.edges.forEach(e => {\r\n        g.addEdge(new jsgraphs.Edge(idDict[e.source_id], idDict[e.target_id], 1.0));\r\n    });\r\n    return [g, idDict];\r\n}\r\n\r\n/**\r\n * Convert Argo-lite snapshot to the GEXF format.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function convertToGexf(snapshot) {\r\n    return null;\r\n}\r\n\r\n/**\r\n * Calculate the average clustering coefficient of the (undirected unweighted) graph.\r\n * @param {*} snapshot Argo-lite Snapshot Object exported by GraphStore\r\n */\r\nexport function averageClusteringCoefficient(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.clusteringco\r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    appState.graph.clusteringco = jsnx.averageClustering(jsnxGraph);\r\n    // const result = 0\r\n    console.log('Computing Clustering Coefficient');\r\n    if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n      appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n    if (appState.graph.frame.selection.length > 0) {\r\n        appState.graph.frame.selection = appState.graph.frame.selection.filter(x => x !== undefined)\r\n    }\r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n    return appState.graph.clusteringco;\r\n}\r\n\r\n/**\r\n * ReCalculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function reaverageClusteringCoefficient(snapshot) {\r\n    \r\n    const jsnxGraph = convertToJsnx(snapshot);\r\n    \r\n    \r\n    return jsnx.averageClustering(jsnxGraph);\r\n}\r\n\r\n/**\r\n * Calculate the number of connected components in a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function connectedComponents(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.connectcom\r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    console.log('compute connected copoenent')\r\n    appState.graph.connectcom = cc.componentCount()\r\n    // console.log('connected:')\r\n    // console.log(appState.graph.connectcom)\r\n    return appState.graph.connectcom;\r\n   \r\n}\r\n\r\nexport function reconnectedComponents(snapshot) {\r\n    \r\n    var cc = new jsgraphs.ConnectedComponents(convertToJSGraph(snapshot)[0]);\r\n    \r\n    \r\n    // console.log('connected:')\r\n    // console.log(appState.graph.connectcom)\r\n    return cc.componentCount();\r\n   \r\n}\r\n\r\n/**\r\n * Calculate the density of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function graphDensity(snapshot) {\r\n    const nodeCount = snapshot.rawGraph.nodes.length;\r\n    const edgeCount = snapshot.rawGraph.edges.length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n}\r\n\r\n// /**\r\n//  * Calculate the density of a graph withour selfloop and changes when filters apply \r\n//  * @param {*} rawGraph the rawGraph inside appState\r\n//  */\r\n//  export function newgraphDensity(snapshot) {\r\n//     const nodeCount = snapshot.rawGraph.nodes.length;\r\n//     const edgeCount = snapshot.rawGraph.edges.length ;\r\n//     return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n// }\r\n\r\n/**\r\n * Calculate the average degree of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function averageDegree(snapshot) {\r\n    let sum = 0;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n            sum += e.degree;\r\n        }\r\n    )\r\n    return sum / snapshot.rawGraph.nodes.length;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Calculate the diameter of a graph\r\n * @param {*} rawGraph the rawGraph inside appState\r\n */\r\nexport function exactGraphDiameter(snapshot) {\r\n    if(appState.graph.keydown) return appState.graph.graphDiameter\r\n    let temp = convertToJSGraphWeightedDi(snapshot);\r\n    let jsg = temp[0];\r\n    let idDict = temp[1]\r\n    let dia = -1;\r\n    snapshot.rawGraph.nodes.forEach(e => {\r\n        let dijkstra = new jsgraphs.Dijkstra(jsg, idDict[e.id]);\r\n        snapshot.rawGraph.nodes.forEach(f => {\r\n            if(dijkstra.hasPathTo(idDict[f.id])){\r\n                let pathLength = dijkstra.pathTo(idDict[f.id]).length;\r\n                dia = Math.max(dia, pathLength);\r\n            }\r\n        })\r\n    });\r\n    appState.graph.graphDiameter = dia\r\n    return dia;\r\n}\r\n ","import { observable, computed, action, runInAction } from \"mobx\";\r\nimport createGraph from \"ngraph.graph\";\r\nimport { scales } from \"../constants/index\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { averageClusteringCoefficient, connectedComponents, graphDensity, averageDegree, exactGraphDiameter , reaverageClusteringCoefficient, reconnectedComponents} from \"../services/AlgorithmUtils\";\r\nimport { ContextMenu, MenuFactory, MenuItemFactory } from \"@blueprintjs/core\";\r\nimport { Frame } from \"../graph-frontend\";\r\n// import appState from '../stores';\r\n\r\nexport default class GraphStore {\r\n\r\n  // @observable\r\n  initialGlobalConfig = {\r\n    nodes: {\r\n      colorBy: \"degree\",\r\n      color: {\r\n        scale: \"Linear Scale\",\r\n        from: \"#448AFF\",\r\n        to: \"#E91E63\",\r\n        nominalColor:  ['#88CCEE', \"#EE8866\", \"#4477AA\", '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499',  \"#ffbc79\", '#EE6677',   \"#c85200\", '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', \"#7f7f7f\", '#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99']\r\n        // [ \"#006ba4\", \"#ffbc79\", \"#882255\", \"#77AADD\", \"#EE8866\", \"#EEDD88\", \"#4477AA\",  \"#FFAABB\",  \"#c85200\", \"#595959\", \"#CCBB44\", \"#66CCEE\",\"#332288\", \"#DDCC77\", \"#999933\",\"#CC6677\", \"#88CCEE\", \"#AA4499\",  \"#EE6677\",   \"#AA3377\",  \"#BBCC33\", \"#44AA99\", \"#AAAA00\"]\r\n        // nominalColor: [\"#0073bc\",  \"#aec7e8\", \"#e377c2\", \"#98df8a\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\",\"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n        // \"#ff3333\",\"#228833\",\"#117733\",#a2c8ec, #898989,  #ababab, #ff800e, \r\n      },\r\n      sizeBy: \"degree\",\r\n      size: {\r\n        min: 2,\r\n        max: 6,\r\n        scale: \"Linear Scale\"\r\n      },\r\n      labelBy: \"node_id\",\r\n      shape: \"circle\",\r\n      labelSize: 1,\r\n      labelLength: 10,\r\n      // filter:{}\r\n    },\r\n    edges: {\r\n      color: \"#AFAEAE\",\r\n      crossColor: \"#0055aa\"\r\n    },\r\n    scatterplot: {\r\n      x: 'degree',\r\n      y: 'distance to center'\r\n    }\r\n  }\r\n\r\n  @observable watchAppearance = 1;\r\n  @observable nodes = this.initialGlobalConfig.nodes;\r\n  @observable edges = this.initialGlobalConfig.edges;\r\n  @observable scatterplot = this.initialGlobalConfig.scatterplot;\r\n\r\n  @observable enableDegree = true;\r\n  @observable enableDensity = true;\r\n  @observable enableDiameter = false;\r\n  @observable enableCoefficient = true;\r\n  @observable enableComponent = true;\r\n  @observable modularity = undefined;\r\n  @observable globalFlatRatio = undefined;\r\n  @observable keydown = false;\r\n  clusteringco = 0;\r\n  graphDiameter = 0;\r\n  connectcom = 0;\r\n\r\n\r\n  //access to process.js \"self\"\r\n  @observable process = undefined;\r\n\r\n  // Updated by frame event\r\n  @observable selectedNodes = [];\r\n  @observable selectedSets = [];\r\n  @observable commonSetNodes =[];\r\n  @observable interSetNodes =[];\r\n\r\n\r\n  filter = {}\r\n\r\n\r\n  @observable convexNodes = [];\r\n  @observable convexPolygons = [];\r\n  @observable convexPolygonsShow = true;\r\n\r\n  @observable mapEdgeShow = true;\r\n  @observable outEdgeShow = true;\r\n  @observable backNodeShow = true;\r\n  @observable pickUpAlter = true;\r\n  @observable highlightCommonNodes = false;\r\n  @observable showIntersect = false;\r\n  @observable autoZoom = false;\r\n  @observable firstload =true;\r\n\r\n\r\n\r\n  // Currently hovered node\r\n  @observable currentlyHovered = undefined;\r\n\r\n  // Currently Clicked to frozen node on map\r\n  @observable mapClicked = undefined;\r\n  @observable mapClickedArray = [];\r\n  \r\n  @observable areaSelected = undefined;\r\n  @observable clearBrush = false;\r\n\r\n\r\n  @observable selectedEdge = 0;\r\n  @observable avgDegree = 0;\r\n  @observable avgdist = 0;\r\n  @observable avgdensity = 0;\r\n  @observable clustercoe = 0;\r\n  @observable rediameter = '';\r\n  @observable reclustercoe = '';\r\n  @observable recomponent = '';\r\n\r\n tempRawGraph = undefined;\r\n\r\n  //  // Currently Clicked to frozen node on network\r\n  //  @observable networkClicked = undefined;\r\n\r\n  // Currently hovered path in the scatterplot view \r\n  @observable pathHovered = undefined;\r\n  @observable pathHoveredList = [];\r\n  /**\r\n   * Stores data relevant to smart pause feature\r\n   */\r\n  @observable smartPause = {\r\n    defaultActive: { //data for when graph layout is resumed and smart pause is not in effect \r\n      isActive: true, //true when layout is resumed and smart pause is not in effect\r\n      startTime: Date.now(), //keeps track of most recent time graph was unpaused\r\n      duration: 10000, //duration of resumed layout\r\n    },\r\n    //lastUnpaused: undefined, //old code using lastUnpaused\r\n    smartPaused: true, //true when resumed, but graph layout is paused due to inactivity\r\n    interactingWithGraph: false, //true when node is clicked or dragged. TODO: refactor to more understandable name\r\n  }\r\n\r\n  // Directed or not\r\n  @observable directedOrNot = false;\r\n\r\n  // Edge thickness based on \r\n  @observable edgeThicknessByDistance = false;\r\n\r\n  // Color by distance\r\n  @observable colorByDistance = false;\r\n\r\n  // Cache the single node that's been selected last time\r\n  // and will not update unless exactly one node is selected again\r\n  // useful for NeighborDialog\r\n  _lastSelectedSingleNode = null;\r\n  @computed\r\n  get lastSelectedSingleNode() {\r\n    if (this.selectedNodes.length === 1) {\r\n      this._lastSelectedSingleNode = this.selectedNodes[0];\r\n    }\r\n    return this._lastSelectedSingleNode;\r\n  }\r\n  // Updated by frame event. Not being listened, only used to save label visibility.\r\n  nodesShowingLabels = [];\r\n  // Used by autorun during snapshot loading.\r\n  @observable initialNodesShowingLabels = [];\r\n\r\n  @observable\r\n  overrideConfig = {\r\n    color: \"#000\",\r\n    size: 5,\r\n    label: \"\",\r\n    shape: \"circle\"\r\n  };\r\n\r\n  @observable\r\n  rawGraph = {\r\n    nodes: [],\r\n    edges: []\r\n  };\r\n\r\n  //saved states from loaded graph snapshot\r\n  @observable savedStates = null;\r\n\r\n  @observable\r\n  metadata = {\r\n    fullNodes: 0,\r\n    fullEdges: 0,\r\n    nodeProperties: [],\r\n    nodePropertyTypes: [],\r\n    uniqueValue: {},\r\n    nodeComputed: [\"pagerank\", \"degree\", 'centrality', 'distance to center'  ,  'betweenness', 'closeness',  'betweeness centrality', 'closeness centrality', 'distance to group center'],\r\n    edgeProperties: [],\r\n    snapshotName: \"loading...\" // Optional: for display in Argo-lite only\r\n  };\r\n\r\n  @observable\r\n  densityDistance = []\r\n\r\n  @observable\r\n  edgeselection = []\r\n\r\n  @observable\r\n  degreeselection = []\r\n\r\n  @observable\r\n  degreebrushed = false\r\n\r\n  //name of currently hovered family group on the cluster cluster scatterplot \r\n  @observable\r\n  distanceDensityCurrentlyHovered = undefined\r\n\r\n  @observable\r\n  distanceDensityCurrentlyClicked = []\r\n\r\n  @observable\r\n  groupby = 'NULL'\r\n\r\n  @observable\r\n  convexhullby = 'NULL'\r\n\r\n  // used for listing all the properties, either original or computed\r\n  @computed\r\n  get allPropertiesKeyList() {\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get filterKeyList() {\r\n    const removeList = ['isHidden', 'id', 'Longitude', 'Latitude', 'LatY', 'LonX', 'dist to center', 'dist_to_center', 'centrality', 'shortest path', 'pair distance', 'node_id', 'standard distance', 'network density', 'SHORT', \"ORGANIZATION\", 'isconvex', 'nearestnn']\r\n    return uniq([\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => removeList.indexOf(k) === -1); // since node_id is already present\r\n  }\r\n\r\n  @computed\r\n  get allComputedPropertiesKeyList() {\r\n\r\n    const uniq_compute = uniq([\r\n      ...this.metadata.nodeComputed\r\n    ]).filter(k => k !== 'id'); // since node_id is already present\r\n\r\n    const capitalizeString =(inputString)=> {\r\n      const connectingWords = ['in', 'to']; // Add more connecting words as needed\r\n    \r\n      return inputString.replace(/\\w+/g, function(word) {\r\n        return connectingWords.includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n      });\r\n    }\r\n    \r\n    const uppercase_compute = uniq_compute.map((u) => {\r\n      return capitalizeString(u)\r\n    })\r\n    return uppercase_compute\r\n  }\r\n\r\n  @computed\r\n  get selectedNeighborIDs() {\r\n\r\n\r\n\r\n    if (this.selectedNodes.length > 0) {\r\n      const neighborIDs = []\r\n      for (var j = 0; j < this.selectedNodes.length; j++) {\r\n        if (!this.selectedNodes[j] || !this.selectedNodes[j].links) continue\r\n        this.selectedNodes[j].links.forEach((link) => {\r\n          neighborIDs.push(link.fromId);\r\n          neighborIDs.push(link.toId);\r\n        })\r\n\r\n      }\r\n      if (neighborIDs.length > 0) {\r\n        const uniqNeighborIDs = uniq([\r\n          ...neighborIDs\r\n        ])\r\n        return uniqNeighborIDs\r\n      } else {\r\n        return []\r\n      }\r\n    } else {\r\n      return []\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  @observable.ref frame = null;\r\n  @observable.ref positions = null;\r\n  @observable pinnedNodes = null;\r\n\r\n  @observable overrides = new Map();\r\n  @observable searchOrder = \"degree\";\r\n\r\n  hasGraphLoaded = false;\r\n\r\n  @computed\r\n  get hasGraph() {\r\n    if (this.rawGraph.nodes.length > 0) {\r\n      this.hasGraphLoaded = true;\r\n    }\r\n    return this.hasGraphLoaded;\r\n  }\r\n\r\n  // @computed\r\n  // get ordinalDomain(colorBy){\r\n  //   return this.rawGraph.nodes.map(function(n){\r\n  //     n[colorBy]\r\n  //   })\r\n  // }\r\n  @computed\r\n  get minMax() {\r\n    const ret = {};\r\n    for (const p of [\r\n      ...this.metadata.nodeProperties,\r\n      ...this.metadata.nodeComputed\r\n    ]) {\r\n      let min = Number.MAX_VALUE;\r\n      let max = Number.MIN_VALUE;\r\n\r\n      for (const n of this.rawGraph.nodes) {\r\n        min = Math.max(Math.min(min, n[p]), 0.0000001);\r\n        max = Math.max(max, n[p]);\r\n      }\r\n\r\n      ret[p] = [min, max];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  @computed\r\n  get nodeSizeScale() {\r\n    return scales[this.nodes.size.scale]()\r\n      .domain(this.minMax[this.nodes.sizeBy])\r\n      .range([this.nodes.size.min, this.nodes.size.max]);\r\n  }\r\n\r\n\r\n  @computed\r\n  get getNominalColor(){\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      const uniqcommunity = new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))\r\n    \r\n      const colorBlind =  ['#88CCEE', \"#EE8866\", \"#4477AA\", '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499',  \"#ffbc79\", '#EE6677',   \"#c85200\", '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', \"#7f7f7f\", '#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99']\r\n\r\n      // [ \"#006ba4\", \"#ffbc79\", \"#882255\", \"#77AADD\", \"#EE8866\", \"#EEDD88\", \"#4477AA\",  \"#FFAABB\",  \"#c85200\", \"#595959\", \"#CCBB44\", \"#66CCEE\",\"#332288\", \"#DDCC77\", \"#999933\",\"#CC6677\", \"#88CCEE\", \"#AA4499\",  \"#EE6677\",   \"#AA3377\",  \"#BBCC33\", \"#44AA99\", \"#AAAA00\"]\r\n      // ['#88CCEE', '#44AA99', '#117733', '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499', '#DDDDDD', '#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB', '#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99']\r\n      return colorBlind.slice(0, uniqcommunity.size)\r\n        \r\n    } else { //linear and log scale \r\n      return null\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @computed\r\n  get nodeColorScale() {\r\n    if (this.nodes.color.scale == \"Nominal Scale\") { //nominal scale \r\n      // const nominalColor =  [\"#0073bc\", \"#ff3333\", \"#ff7f0e\", \"#a55194\", \"#2ca02c\", \"#aec7e8\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#1f77b4\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\", \"#9c9ede\", \"#8c6d31\", \"#ffbb78\", \"#bd9e39\"]\r\n      const colorBlind =  ['#88CCEE', \"#EE8866\", \"#4477AA\", '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499',  \"#ffbc79\", '#EE6677',   \"#c85200\", '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', \"#7f7f7f\", '#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99']\r\n\r\n      // [ \"#006ba4\", \"#ffbc79\", \"#882255\", \"#77AADD\", \"#EE8866\", \"#EEDD88\", \"#4477AA\",  \"#FFAABB\",  \"#c85200\", \"#595959\", \"#CCBB44\", \"#66CCEE\",\"#332288\", \"#DDCC77\", \"#999933\",\"#CC6677\", \"#88CCEE\", \"#AA4499\",  \"#EE6677\",   \"#AA3377\",  \"#BBCC33\", \"#44AA99\", \"#AAAA00\"]\r\n\r\n      // ['#88CCEE', '#44AA99', '#117733', '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499', '#DDDDDD', '#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB', '#BBCC33', '#AAAA00', '#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99']\r\n      return scales[this.nodes.color.scale]()\r\n        .domain([...new Set(this.rawGraph.nodes.map(item => item[this.nodes.colorBy]))])\r\n        .range(colorBlind);\r\n    } else { //linear and log scale \r\n      return scales[this.nodes.color.scale]()\r\n        .domain(this.minMax[this.nodes.colorBy])\r\n        .range([this.nodes.color.from, this.nodes.color.to]);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // @computed\r\n  // get nodeColorCategory() {\r\n  //   return scales[this.nodes.color.scale]()\r\n  //     .domain(this.minMax[this.nodes.colorBy])\r\n  //     .range([this.nodes.color.from, this.nodes.color.to]);\r\n  // }\r\n\r\n\r\n  // Return raw graph nodes that is neighbor with the selected node,\r\n  // excluding the node itself.\r\n  getNeighborNodesFromRawGraph(selectedNodeId) {\r\n    const setOfNeighborIds = new Set();\r\n    this.rawGraph.edges.forEach(e => {\r\n      const source = e.source_id.toString();\r\n      const target = e.target_id.toString();\r\n      if (source === selectedNodeId && target !== selectedNodeId) {\r\n        setOfNeighborIds.add(target);\r\n      }\r\n      if (target === selectedNodeId && source !== selectedNodeId) {\r\n        setOfNeighborIds.add(source);\r\n      }\r\n    });\r\n    return this.rawGraph.nodes.filter(node => setOfNeighborIds.has(node.id.toString()));\r\n  }\r\n\r\n\r\n\r\n  // Triggers autorun in stores/index.js to sent computedGraph to graph-frontend.\r\n  @computed\r\n  get computedGraph() {\r\n    const graph = createGraph();\r\n    this.rawGraph.nodes.forEach(n => {\r\n      // If isHidden flag is defined and true, ignore the node in graph-frontend.\r\n      if (n.isHidden) {\r\n        return;\r\n      }\r\n      const override = this.overrides.get(n.id.toString());\r\n      graph.addNode(n.id.toString(), {\r\n        label: (override && override.get(\"label\")) || n[this.nodes.labelBy],\r\n        size:\r\n          (override && override.get(\"size\")) ||\r\n          this.nodeSizeScale(n[this.nodes.sizeBy]),\r\n        color:\r\n          (override && override.get(\"color\")) ||\r\n          this.nodeColorScale(n[this.nodes.colorBy]),\r\n        shape: (override && override.get(\"shape\")) || n[this.nodes.shape],\r\n        ref: n\r\n      });\r\n    });\r\n\r\n    this.rawGraph.edges.forEach(e => {\r\n      // If isHidden flag is defined and true on an associated node,\r\n      // leave out its related edges.\r\n      if (graph.hasNode(e.source_id.toString()) && graph.hasNode(e.target_id.toString())) {\r\n        graph.addLink(e.source_id.toString(), e.target_id.toString(), e);\r\n      }\r\n    });\r\n\r\n    return graph;\r\n  }\r\n\r\n  @computed\r\n  get numHiddenNodes() {\r\n    return this.rawGraph.nodes.filter(n => n.isHidden).length;\r\n  }\r\n\r\n\r\n  filterNodes() {\r\n    runInAction('filter nodes', () => {\r\n      if (this.selectedNodes.length > 0) {\r\n      this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n    }\r\n\r\n    if (this.frame.selection.length > 0) {\r\n      this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    }\r\n\r\n   \r\n      if (Object.keys(this.filter).length === 0){\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {return { ...n, isHidden: false }});\r\n      }\r\n\r\n      if (Object.keys(this.filter).length !== 0) {\r\n\r\n\r\n        this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n          var satisfy = true\r\n          for (const fkey in this.filter) {\r\n            if (this.metadata.nodePropertyTypes[fkey] == 'string') {\r\n              if (this.filter[fkey].length > 0 && (!this.filter[fkey].includes(n[fkey]))) {\r\n                satisfy = false\r\n              }\r\n            } else {  // number range \r\n              if (this.filter[fkey] && (n[fkey] < this.filter[fkey]['min'] || n[fkey] > this.filter[fkey]['max'])) {\r\n                satisfy = false\r\n              }\r\n            }\r\n          }\r\n          if (satisfy) {\r\n            return { ...n, isHidden: false };\r\n          }\r\n          return { ...n, isHidden: true };\r\n        });\r\n\r\n      }\r\n      if (this.selectedNodes.length > 0) {\r\n        this.selectedNodes = this.selectedNodes.filter(x => x !== undefined)\r\n      }\r\n\r\n      if (this.frame.selection.length > 0) {\r\n        this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n      }\r\n      this.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n\r\n\r\n    });\r\n     // this.runActiveLayout()\r\n    //  appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n  }\r\n\r\n  showNodes(nodeids) {\r\n    runInAction('show hidden nodes by ids', () => {\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: false };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  hideNodes(nodeids) {\r\n    runInAction('hide nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.map(n => {\r\n        if (nodeids.includes(n.id)) {\r\n          return { ...n, isHidden: true };\r\n        }\r\n        return n;\r\n      });\r\n    });\r\n  }\r\n\r\n  removeNodes(nodeids) {\r\n    runInAction('remove nodes by ids', () => {\r\n      this.frame.removeNodesByIds(nodeids);\r\n      this.rawGraph.nodes = this.rawGraph.nodes.filter(\r\n        n => !nodeids.includes(n.id)\r\n      );\r\n      this.rawGraph.edges = this.rawGraph.edges.filter(\r\n        e => !nodeids.includes(e.source_id) && !nodeids.includes(e.target_id)\r\n      );\r\n    });\r\n  }\r\n\r\n  getSnapshot() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n      overrides: this.overrides,\r\n      nodesShowingLabels: this.nodesShowingLabels,\r\n      positions: this.frame.getPositions(),\r\n      pinnedNodes: Array.from(this.frame.getPinnedNodes()),\r\n      metadata: this.metadata,\r\n      global: {\r\n        nodes: this.nodes,\r\n        edges: this.edges,\r\n      },\r\n    };\r\n    return snapshot;\r\n  }\r\n\r\n  /**\r\n   * [Argo-lite] Saves graph snapshot as String\r\n   * \r\n   * Note that Argo-lite snapshot contains all graph data\r\n   * and metadata except nodes/edges deleted by users.\r\n   * This is different from Argo-electron snapshot.\r\n   */\r\n  saveImmediateStates(optionalConfig) {\r\n    const snapshot = this.getSnapshot();\r\n    // TODO: add corresponding options on frontend\r\n    // The optional options allows users to leave out\r\n    // certain app state when saving snapshot\r\n    if (optionalConfig) {\r\n      if (optionalConfig.noPosition) {\r\n        snapshot.positions = undefined;\r\n      }\r\n      if (optionalConfig.noGlobal) {\r\n        snapshot.global = undefined;\r\n      }\r\n      if (optionalConfig.noOverride) {\r\n        snapshot.overrides = undefined;\r\n      }\r\n    }\r\n    return JSON.stringify(snapshot);\r\n  }\r\n\r\n\r\n  recalculateRawgraph(initialgraph) {\r\n    // Since the CSV lib we use uses int index when there's not header/column names specified\r\n    // but the frontend selector always convert int to string values, we need to\r\n    // manually convert the user-selected fromId and toId values back to int.\r\n    // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n    //hardcode\r\n    const fromId = \"source_id\"\r\n    const toId = \"target_id\"\r\n    const mapId = \"ID\"\r\n    const mapLon = \"LonX\"\r\n    const mapLat = \"LatY\"\r\n    // Create temporary data structures.\r\n    // rawGraph: { nodes: nodesArr, edges: edgesArr, paths: pathsArr },\r\n    let nodesArr =\r\n    initialgraph.rawGraph.nodes.map(\r\n        n => ({ ...n, LonX: parseFloat(n[\"LonX\"]), LatY: parseFloat(n[\"LatY\"]) }));\r\n    // let nodesArr = initialgraph.rawGraph.nodes;\r\n    let edgesArr = initialgraph.rawGraph.edges;\r\n    // let pathsDict = {};\r\n  \r\n    // const graph = createGraph();\r\n    // const degreeDict = {};\r\n    // if (config.hasNodeFile) {\r\n    //   // nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    //   nodesArr = initialgraph.nodes;\r\n    //   nodesArr.forEach(node => graph.addNode(node[mapId].toString(),\r\n    //     { id: node[mapId].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    //   nodesArr =\r\n    //     nodesArr.map(\r\n    //       n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0, pagerank: 0, centrality: parseFloat(n['centrality']), 'dist to center': parseFloat(n['distance to center']), LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    //   nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n    // }\r\n    // const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n    // if (config.edges.createMissing) {\r\n    //   edges.forEach((it) => {\r\n    //     const from = it[fromId].toString();\r\n    //     const to = it[toId].toString();\r\n    //     if (!graph.hasNode(from)) {\r\n    //       graph.addNode(from, { id: from, degree: 0 });\r\n    //       nodesArr.push({ id: from, degree: 0, pagerank: 0 });\r\n    //       degreeDict[from] = 0;\r\n    //     }\r\n    //     if (!graph.hasNode(to)) {\r\n    //       graph.addNode(to, { id: to, degree: 0 });\r\n    //       nodesArr.push({ id: to, degree: 0, pagerank: 0 });\r\n    //       degreeDict[to] = 0;\r\n    //     }\r\n    //   });\r\n    // }\r\n  \r\n    // const edgesSet = new Set();\r\n  \r\n    // const edgesArr = [];\r\n  \r\n    // const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    //   const edgeKey = `${from}👉${to}`;\r\n    //   if (edgesSet.has(edgeKey)) {\r\n    //     return;\r\n    //   }\r\n    //   edgesSet.add(edgeKey);\r\n    //   var data = {\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily,\r\n  \r\n    //   }\r\n    //   graph.addLink(from, to, data);\r\n  \r\n    //   degreeDict[from] += 1;\r\n    //   degreeDict[to] += 1;\r\n    //   edgesArr.push({\r\n    //     source_id: from,\r\n    //     target_id: to,\r\n    //     fromlocLatY: fromlocLatY,\r\n    //     fromlocLonX: fromlocLonX,\r\n    //     tolocLatY: tolocLatY,\r\n    //     tolocLonX: tolocLonX,\r\n    //     withinState: withinState,\r\n    //     withinFamily: withinFamily\r\n    //   });\r\n    // };\r\n  \r\n    if (nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n      edgesArr.forEach(it => {\r\n        const fromnode = nodesArr.filter((node)=>{return node.id === it[fromId].toString()})\r\n        const tonode = nodesArr.filter((node)=>{return node.id === it[toId].toString()})\r\n        const Nonloc = 360\r\n        if(fromnode.length > 0 && tonode.length >0){\r\n        it.fromlocLatY = parseFloat(fromnode[0].LatY)\r\n        it.fromlocLonX = parseFloat(fromnode[0].LonX)\r\n        it.tolocLatY = parseFloat(tonode[0].LatY)\r\n        it.tolocLonX = parseFloat(tonode[0].LonX) }\r\n        else{\r\n        it.fromlocLatY = Nonloc\r\n        it.fromlocLonX = Nonloc\r\n        it.tolocLatY = Nonloc\r\n        it.tolocLonX = Nonloc\r\n        }// observable array???\r\n        it.withinState = true\r\n        it.withinFamily = true\r\n        \r\n        // addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n        \r\n      });\r\n    } \r\n\r\n    const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n      var p = 0.017453292519943295;    // Math.PI / 180\r\n      var c = Math.cos;\r\n      var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n        c(lat1 * p) * c(lat2 * p) *\r\n        (1 - c((lon2 - lon1) * p)) / 2;\r\n  \r\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n    }\r\n  \r\n    // calculate the diatance to centern/ average lat/lon\r\n    // const calDIstanceToCenter = () => {\r\n    //   const latlist = nodesArr.map(n => n['LatY'])\r\n    //   const lonlist = nodesArr.map(n => n['LonX'])\r\n    //   const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    //   var avgLat\r\n    //   var avgLon\r\n    //   if (latlist.length > 0 && lonlist.length > 0) {\r\n    //     avgLat = average(latlist)\r\n    //     avgLon = average(lonlist)\r\n    //     nodesArr.forEach(function (n, i) {\r\n    //       n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n    //     })\r\n    //   }\r\n    // }\r\n  \r\n  \r\n    const calMedianCenter = ()=>{\r\n      const latlist = nodesArr.map(n => parseFloat(n['LatY']))\r\n      const lonlist = nodesArr.map(n => parseFloat(n['LonX']))\r\n      const medianCenter = (values)=>{\r\n        if(values.length ===0) throw new Error(\"No inputs\");\r\n  \r\n        const result1 = [...values].sort((a, b) => a - b)\r\n      \r\n        // values.sort(function(a,b){\r\n        //   return a-b;\r\n        // });\r\n      \r\n        var half = Math.floor(result1.length / 2);\r\n        \r\n        if (result1.length % 2)\r\n          return result1[half];\r\n        \r\n        return (result1[half - 1] + result1[half]) / 2.0;\r\n      }\r\n  \r\n      if (latlist.length > 0 && lonlist.length > 0) {\r\n        const medianLat = medianCenter(latlist)\r\n        const medianLon = medianCenter(lonlist)\r\n        nodesArr.forEach(function (n, i) {\r\n          n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n        })\r\n      }\r\n  \r\n  \r\n    }\r\n  \r\n    if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n      // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  \r\n    }\r\n\r\n    // const shortestPathPairs = () => {\r\n    //   let pathFinder = path.aGreedy(graph);\r\n      // const pathsArr = []\r\n    //   const pathsSet = new Set();\r\n  \r\n  \r\n  \r\n    //   graph.forEachNode(function (fromnode) {\r\n  \r\n    //     graph.forEachNode(function (tonode) {\r\n    //       if (fromnode.id !== tonode.id) {\r\n    //         const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n    //         const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n    //         // undirected graph:\r\n    //         // only add once for undirected graph \r\n    //         if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n    //           pathsSet.add(pathKey1);\r\n    //           pathsSet.add(pathKey2);\r\n    //           pathsArr.push({\r\n    //            \"source\":fromnode.id,\r\n    //            \"target\":tonode.id,\r\n    //           \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n    //           \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n            \r\n    //          })\r\n    //         }\r\n             \r\n    //         //directed graph: \r\n    //       }\r\n  \r\n    //     })\r\n  \r\n    //   })\r\n    //   // console.log(nodesArr.length)\r\n    //   // console.log(pathsArr.length)\r\n    //   return pathsArr\r\n  \r\n    // }\r\n    // const pathsArr = shortestPathPairs();\r\n    // const rank = pageRank(graph);\r\n  \r\n    // nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n    const nodekeyList = Object.keys(nodesArr[0])\r\n    const nodePropertyTypes = {}\r\n    nodekeyList.forEach(function (k) {\r\n      nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n    })\r\n    const uniqueValue = {}\r\n    nodekeyList.forEach(function (k, i) {\r\n  \r\n      if (nodePropertyTypes[k] == 'string') {\r\n        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n      } else {\r\n        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        const minv = Math.min(...valuea)\r\n        const maxv = Math.max(...valuea)\r\n        uniqueValue[k] = [minv, maxv]\r\n      }\r\n    })\r\n    return {\r\n      rawGraph: { nodes: nodesArr, edges: edgesArr, paths: [] },\r\n      metadata: {\r\n        snapshotName: 'Untitled Graph',\r\n        fullNodes: nodesArr.length,\r\n        fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n        nodeProperties: nodekeyList,\r\n        nodePropertyTypes: nodePropertyTypes,\r\n        uniqueValue: uniqueValue,\r\n        nodeComputed: ['pagerank', 'degree', 'distance to center' ,  'betweenness', 'closeness'],\r\n        edgeProperties: ['source_id', 'target_id'],\r\n       \r\n      },\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  loadImmediateStates(savedStatesStr) {\r\n    this.runActiveLayout();\r\n    const savedStates = JSON.parse(savedStatesStr);\r\n    this.savedStates = savedStates;\r\n    if (!savedStates) {\r\n      return;\r\n    }\r\n    const savedOverrides = new Map(\r\n      Object.entries(savedStates.overrides).map(([k, v]) => [\r\n        k,\r\n        new Map(Object.entries(v))\r\n      ])\r\n    );\r\n    this.overrides.clear();\r\n    this.overrides.merge(savedOverrides);\r\n\r\n    \r\n    if (savedStates.global) {\r\n      this.nodes = savedStates.global.nodes;\r\n      this.edges = savedStates.global.edges ? savedStates.global.edges : this.edges;\r\n    }\r\n    // The following lines trigger autoruns.\r\n    // recalculate rawgraph \r\n    const recalculateGraph = this.recalculateRawgraph(savedStates);\r\n    this.rawGraph = recalculateGraph.rawGraph;\r\n    this.metadata = recalculateGraph.metadata;\r\n    // this.rawGraph = savedStates.rawGraph;\r\n    // if (savedStates.metadata) {\r\n    //   this.metadata = savedStates.metadata;\r\n    // }\r\n    \r\n  \r\n    // appState.import.loading = false;\r\n    //\r\n    if (savedStates.positions) {\r\n      this.positions = savedStates.positions;\r\n    }\r\n    if (savedStates.nodesShowingLabels) {\r\n      this.initialNodesShowingLabels = savedStates.nodesShowingLabels;\r\n      this.nodesShowingLabels = savedStates.nodesShowingLabels;\r\n    }\r\n\r\n    //stores data pinned nodes in appState\r\n    if (savedStates.pinnedNodes) {\r\n      this.pinnedNodes = new Set(savedStates.pinnedNodes);\r\n    }\r\n\r\n    this.scatterplot.x = 'degree';\r\n    this.scatterplot.y = 'distance to center';\r\n\r\n\r\n    // this.runActiveLayout();\r\n    // appState.graph.frame.paused = true;\r\n  //   appState.graph.frame.paused = false;\r\n  // appState.graph.frame.resumeLayout();\r\n  //                 this.forceUpdate();\r\n  \r\n\r\n                      // this.frame.resumeLayout();\r\n                      // this.forceUpdate();\r\n  }\r\n\r\n\r\n  //resumes graph layout for a set duration before smart-pausing\r\n  runActiveLayout  () {\r\n    if (this.frame) {\r\n      this.frame.paused = false;\r\n    }\r\n    this.smartPause.defaultActive.isActive = true;\r\n    this.smartPause.defaultActive.startTime = Date.now();\r\n    this.smartPause.smartPaused = false;\r\n    // this.frame.paused = true;\r\n    \r\n  }\r\n\r\n  //selects which nodes should be pinned based on saved state of loaded snapshot\r\n  pinNodes() {\r\n    if (this.pinnedNodes && this.pinnedNodes.size >0) {\r\n      let nodesToPin = [];\r\n      let that = this; //\"this\" will not work inside of forEach, so it needs to be stored\r\n      this.process.graph.forEachNode(function (n) {\r\n        if (that.pinnedNodes.has(n.id)) {\r\n          nodesToPin.push(n);\r\n        }\r\n      });\r\n      this.frame.setPinnedNodes(nodesToPin);\r\n    }\r\n  }\r\n\r\n  setUpFrame() {\r\n    const graphFrame = new Frame(this.computedGraph);\r\n    graphFrame.init();\r\n    graphFrame.display();\r\n    this.frame = graphFrame;\r\n    graphFrame.ee.on(\"select-nodes\", nodes => {\r\n      this.selectedNodes = nodes;\r\n    });\r\n    graphFrame.ee.on(\"show-node-label\", nodes => {\r\n      this.nodesShowingLabels = nodes;\r\n    });\r\n    graphFrame.ee.on(\"right-click\", data => {\r\n      const menu = MenuFactory({\r\n        children: [\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.toggleSelectedLabels();\r\n            },\r\n            text: 'Toggle Labels',\r\n            key: 'Toggle Labels'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.unpinSelectedNodes();\r\n            },\r\n            text: 'Unpin Selected',\r\n            key: 'Unpin Selected'\r\n          }),\r\n          MenuItemFactory({\r\n            onClick: () => {\r\n              this.frame.pinSelectedNodes();\r\n            },\r\n            text: 'Pin Selected',\r\n            key: 'Pin Selected'\r\n          }),\r\n          this.frame.rightClickedNode && MenuItemFactory({\r\n            onClick: () => {\r\n              if (this.frame.rightClickedNode) {\r\n                const rightClickedNodeId = this.frame.rightClickedNode.data.ref.id.toString();\r\n                const neighbors = this.getNeighborNodesFromRawGraph(rightClickedNodeId);\r\n                neighbors.sort((n1, n2) => {\r\n                  if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                    return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                  }\r\n                  return 0;\r\n                });\r\n                const ids = [];\r\n                for (let i = 0; i < 5 && i < neighbors.length; i++) {\r\n                  ids.push(neighbors[i].id);\r\n                }\r\n                this.showNodes(ids);\r\n              }\r\n            },\r\n            text: 'Show 5 Neighbors with Highest PageRank',\r\n            key: 'Show 5 Neighbors with Highest PageRank'\r\n          }),\r\n        ]\r\n      });\r\n      ContextMenu.show(menu, { left: data.pageX, top: data.pageY }, () => {\r\n        // onMenuClose\r\n        console.log(\"ContextMenu closed\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Graph algorithms used in StatisticsDialog.\r\n   */\r\n\r\n  averageClustering() {\r\n    if(this.frame){\r\n      const shonodeid = this.frame.getNodeList().map(n=>n.id)\r\n    \r\n    const shownodes = this.rawGraph.nodes.filter((n)=>(shonodeid.includes(n.id)))\r\n    const showedges = this.rawGraph.edges.filter((e)=>(shonodeid.includes(e.source_id) && shonodeid.includes(e.target_id)))\r\n    const snapshot = {\r\n      rawGraph: {\r\n        nodes:shownodes,\r\n        edges:showedges\r\n      },\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n    }\r\n\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n\r\n  components() {\r\n    if(this.frame){\r\n      const shonodeid = this.frame.getNodeList().map(n=>n.id)\r\n    \r\n    const shownodes = this.rawGraph.nodes.filter((n)=>(shonodeid.includes(n.id)))\r\n    const showedges = this.rawGraph.edges.filter((e)=>(shonodeid.includes(e.source_id) && shonodeid.includes(e.target_id)))\r\n    const snapshot = {\r\n      rawGraph: {\r\n        nodes:shownodes,\r\n        edges:showedges\r\n      },\r\n    };\r\n    return connectedComponents(snapshot);\r\n    }\r\n    \r\n\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n\r\n \r\n  density() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return graphDensity(snapshot);\r\n  }\r\n\r\n  filtergraphDensity(){\r\n    const nodeCount = this.frame.getNodeList().length;\r\n    const edgeCount = this.frame.getEdgeList().filter(n=>n.fromId!==n.toId).length ;\r\n    return (2 * edgeCount) / ((nodeCount) * (nodeCount - 1));\r\n  }\r\n\r\n \r\n  degree() {\r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return averageDegree(snapshot);\r\n  }\r\n\r\n  avgDe(){\r\n    let sum = 0;\r\n    this.frame.getNodeList().forEach(e => {\r\n            sum += e.data.ref.degree;\r\n        }\r\n    )\r\n    return sum / this.frame.getNodeList().length;\r\n  }\r\n\r\n  avgDist(){\r\n\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    const edgeSelection = [];\r\n    this.frame.getNodeList().forEach(node => {\r\n      if(node.linkObjs && node.linkObjs.length>0){\r\n        edgeSelection.push(...node.linkObjs)\r\n      }\r\n      \r\n    })\r\n\r\n    if (edgeSelection.length > 0) {\r\n      const uniqEdgeSelection = uniq(edgeSelection)\r\n      \r\n      if (uniqEdgeSelection.length > 0) {\r\n        const edgeDistance = uniqEdgeSelection.map(e=>{\r\n          if(e.edgeDist >0){\r\n            return e.edgeDist\r\n          }else {\r\n            return 0\r\n          }\r\n         \r\n        })\r\n        // console.log(edgeDistance)\r\n        return average(edgeDistance).toFixed(2);\r\n\r\n      } else {\r\n        return 0\r\n      }\r\n\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n\r\n\r\n  diameter() {\r\n    if(this.frame){\r\n      const shonodeid = this.frame.getNodeList().map(n=>n.id)\r\n    \r\n    const shownodes = this.rawGraph.nodes.filter((n)=>(shonodeid.includes(n.id)))\r\n    const showedges = this.rawGraph.edges.filter((e)=>(shonodeid.includes(e.source_id) && shonodeid.includes(e.target_id)))\r\n    const snapshot = {\r\n      rawGraph: {\r\n        nodes:shownodes,\r\n        edges:showedges\r\n      },\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n    }\r\n    \r\n    const snapshot = {\r\n      rawGraph: this.rawGraph,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n\r\n  rerundiameter(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return exactGraphDiameter(snapshot);\r\n  }\r\n\r\n  reruncluster(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return reaverageClusteringCoefficient(snapshot);\r\n  }\r\n\r\n  reruncomponent(temraw){\r\n    const snapshot = {\r\n      rawGraph: temraw,\r\n    };\r\n    return connectedComponents(snapshot);\r\n  }\r\n}\r\n\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ImportStore {\r\n  @observable graphFile = \"\";\r\n  @observable stateFile = \"\";\r\n\r\n  @observable dialogOpen = false;\r\n  @observable gexfDialogOpen = false;\r\n\r\n  @observable loading = false;\r\n\r\n  // Argo-lite specific: File object selected via the file input.\r\n  @observable selectedEdgeFileFromInput = null;\r\n  @observable selectedNodeFileFromInput = null;\r\n\r\n  @observable selectedGexfFileFromInput = null;\r\n\r\n  @observable\r\n  importConfig = {\r\n    nodeFile: {\r\n      path: \"\",\r\n      topN: [],\r\n      hasColumns: true,\r\n      ready: false, // whether the topN is ready to display\r\n      columns: [],\r\n      mapping: {\r\n        id: \"<UNK>\",\r\n        LonX: \"<UNK>\",\r\n        LatY: \"<UNK>\"\r\n      },\r\n      delimiter: \",\"\r\n    },\r\n    edgeFile: {\r\n      path: \"\",\r\n      ready: false,\r\n      hasColumns: true,\r\n      columns: [],\r\n      topN: [],\r\n      mapping: {\r\n        fromId: \"<UNK>\",\r\n        toId: \"<UNK>\"\r\n      },\r\n      createMissing: true,\r\n      delimiter: \",\"\r\n    }\r\n  };\r\n\r\n  /*\r\n    Post Import Filtering related options.\r\n  */\r\n\r\n  postImportFilteringOptions = {\r\n    \"top 10 nodes with highest degree\": (rawGraph) => {\r\n      const sortedList = [...rawGraph.nodes];\r\n      sortedList.sort((n1, n2) => {\r\n          if (n1[\"degree\"] && n2[\"degree\"]) {\r\n              return n2[\"degree\"] - n1[\"degree\"];\r\n          }\r\n          return 0;\r\n      });\r\n      const setIds = new Set();\r\n      for (let i = 0; i < 10 && i < sortedList.length; i++) {\r\n        setIds.add(sortedList[i].id);\r\n      }\r\n      rawGraph.nodes = rawGraph.nodes.map(n => {\r\n        if (setIds.has(n.id)) {\r\n          return {...n, isHidden: false};\r\n        }\r\n        return n;\r\n      });\r\n    },\r\n    \"All Nodes\": (rawGraph) => {\r\n      rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: false}));\r\n    },\r\n  };\r\n\r\n  defaultPostImportFilteringOption = \"All Nodes\";\r\n  \r\n  @observable selectedPostImportFilteringOption = this.defaultPostImportFilteringOption;\r\n\r\n  postImportFilter(rawGraph) {\r\n    // Hide all nodes by default, use filtering option to show them.\r\n    rawGraph.nodes = rawGraph.nodes.map(n => ({...n, isHidden: true}));\r\n    // Run the selected post import filtering option.\r\n    this.postImportFilteringOptions[this.selectedPostImportFilteringOption](rawGraph);\r\n  }\r\n\r\n\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class ProjectStore {\r\n \r\n  @observable projects = [];\r\n\r\n  /*\r\n   * Active project and snapshot\r\n   */\r\n  @observable currentProject = null;\r\n  // @observable currentProjectName = null;\r\n  // @observable currentProjectPath = null;\r\n  @observable currentSnapshotName = \"Quick Save\"; // TODO: If not loaded from snapshot, use this, otherwise use the name of the loaded snapshot\r\n\r\n  // [Argo-lite] for displaying snapshot file in textarea to be copied\r\n  @observable stringCopyOfSnapshot = 'Loading';\r\n  \r\n  /*\r\n   * Dialogs and UI\r\n   */\r\n  @observable isNewProjectDialogOpen = false;\r\n  @observable isProjectDetailDialogOpen = false;\r\n  @observable isSaveSnapshotDialogOpen = false;\r\n  @observable isRenameSnapshotDialogOpen = false;\r\n  // when the ipc returns the projects data for the first time\r\n  // turn off `isFetching` so that the spinner of WorkspaceView will be turned off\r\n  // Also used when refreshing WorkspaceView\r\n  @observable isFetching = true;\r\n\r\n  /*\r\n   * New project creation and import\r\n   */\r\n  @observable newProjectName = '';\r\n}\r\n","import { observable } from \"mobx\";\r\n\r\nexport default class SearchStore {\r\n  @observable searchStr = \"\";\r\n  @observable candidates = [];\r\n  @observable numCandidates = 0;\r\n  @observable panelOpen = false;\r\n}\r\n","import { autorun, runInAction } from \"mobx\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\n\r\nimport PreferencesStore from \"./PreferencesStore\";\r\nimport GraphStore from \"./GraphStore\";\r\n// import MapStore from \"./MapStore\";\r\nimport ImportStore from \"./ImportStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\n// import { peakCSV } from \"../services/CSVUtils\";\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport SearchStore from \"./SearchStore\";\r\nimport { runSearch } from \"../ipc/client\";\r\n\r\nimport { BACKEND_URL, SAMPLE_GRAPH_SNAPSHOTS} from \"../constants\";\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport {LocalFileData,constructFileFromLocalFileData} from \"get-file-object-from-local-path\"\r\n\r\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\nexport class AppState {\r\n  constructor() {\r\n    this.preferences = new PreferencesStore();\r\n    this.graph = new GraphStore();\r\n    // this.mapview = new MapStore();\r\n    this.import = new ImportStore();\r\n    this.search = new SearchStore();\r\n    this.project = new ProjectStore();\r\n  //   this.map = <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n  //   <TileLayer\r\n  //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n  //     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n  //   />\r\n  //   <Marker position={[51.505, -0.09]}>\r\n  //     <Popup>\r\n  //       A pretty CSS3 popup. <br /> Easily customizable.\r\n  //     </Popup>\r\n  //   </Marker>\r\n  // </MapContainer>\r\n\r\n  }\r\n}\r\n\r\nconst appState = new AppState();\r\n\r\nwindow.appState = appState;\r\n\r\nappState.useToolbartoSelect = false\r\n\r\nconst loadSnapshotFromURL = (url) => {\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.text()).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadSnapshotFromStrapi = (uuid) => {\r\n  const url = `${BACKEND_URL}/snapshots?uuid=${uuid}`;\r\n  return fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors'\r\n  }).then(response => response.json()).then(json => json[0].body).catch(error => {\r\n    toaster.show({\r\n      message: 'Failed to fetch graph snapshot',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n    console.error(error);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromURL = (url) => {\r\n  loadSnapshotFromURL(url).then(snapshotString => {\r\n    // use filename/last segment of URL as title in Navbar\r\n    appState.graph.metadata.snapshotName = url.split('/').pop() || url.split('/').pop().pop();\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n  });\r\n};\r\n\r\nconst loadAndDisplaySnapshotFromStrapi = (uuid) => {\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.globalFlatRatio = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.mapClickedArray = [];\r\n  appState.graph.areaSelected = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.selectedSets = [];\r\n  appState.graph.commonSetNodes =[];\r\n  appState.graph.interSetNodes = [];\r\n  if(appState.graph.frame) {appState.graph.frame.selection = [];}\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n \r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.pathHoveredList = [];\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.import.loading = true\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = false;\r\n  appState.graph.firstload =true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n \r\n  loadSnapshotFromStrapi(uuid).then(snapshotString => {\r\n    // TODO: use more sensible snapshot name\r\n    appState.graph.metadata.snapshotName = 'Shared';\r\n    appState.graph.loadImmediateStates(snapshotString);\r\n    appState.import.loading = false;\r\n  });\r\n};\r\n\r\nwindow.loadAndDisplaySnapshotFromURL = loadAndDisplaySnapshotFromURL;\r\nwindow.loadAndDisplaySnapshotFromStrapi = loadAndDisplaySnapshotFromStrapi;\r\n\r\n// var getFileBlob = function (url, cb) {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open(\"GET\", url);\r\n//   xhr.responseType = \"blob\";\r\n//   xhr.addEventListener('load', function() {\r\n//       cb(xhr.response);\r\n//   });\r\n//   xhr.send();\r\n// };\r\n\r\n// var blobToFile = function (blob, name) {\r\n//   blob.lastModifiedDate = new Date();\r\n//   blob.name = name;\r\n//   return blob;\r\n// };\r\n\r\n// var getFileObject = function(filePathOrUrl, cb) {\r\n//  getFileBlob(filePathOrUrl, function (blob) {\r\n//     cb(blobToFile(blob, 'test.jpg'));\r\n//  });\r\n// };\r\n\r\nwindow.loadInitialSampleGraph = async () => {\r\n  // const nodeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaNodes_2.csv')\r\n  // const nodeFile = constructFileFromLocalFileData(nodeFileData)\r\n  // console.log(nodeFile)\r\n  // appState.import.selectedNodeFileFromInput = nodeFile\r\n\r\n  // const edgeFileData = new LocalFileData('/Users/jsc/repositories/SSN/argo-lite/MafiaEdges_2.csv')\r\n  // const edgeFile = constructFileFromLocalFileData(edgeFileData)\r\n  // console.log(edgeFile)\r\n  // appState.import.selectedEdgeFileFromInput = edgeFile\r\n\r\n  \r\n\r\n  // default fallback url\r\n  let url = \"https://argo-graph-lite.s3.amazonaws.com/lesmiserables.json\"\r\n\r\n  // check url hash\r\n  if (window.location.hash) {\r\n    const hash = window.location.hash.substring(1);\r\n    // If the hash component begins with http.\r\n    if (hash.length >= 4 && hash.startsWith('http')) {\r\n      try {\r\n        url = decodeURIComponent(hash);\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert('Provided URL is not valid.');\r\n      }\r\n    } else {\r\n      // If the hash component does not begin with http\r\n      // treat it as a uuid in strapi.\r\n      loadAndDisplaySnapshotFromStrapi(hash);\r\n      return;\r\n    }\r\n    \r\n  }\r\n  // loadAndDisplaySnapshotFromURL(url)\r\n  loadAndDisplaySnapshotFromStrapi(SAMPLE_GRAPH_SNAPSHOTS[0][1]);\r\n};\r\n\r\nwindow.saveSnapshotToString = () => {\r\n  const snapshotString = appState.graph.saveImmediateStates();\r\n  return snapshotString;\r\n};\r\n\r\n// Load initial sample graph when Argo Lite is ready\r\nwindow.addEventListener('load', (event) => {\r\n  window.loadInitialSampleGraph();\r\n});\r\n\r\nconst updateTimeout = null;\r\n\r\n// Load graph on frontend once the rawGraph has been returned from IPC\r\n// Once a graph has been loaded and displayed, even if nodes are all deleted, still consider it \"hasGraph\"\r\nautorun(() => {\r\n  if (!appState.graph.hasGraph && appState.graph.rawGraph.nodes.length > 0) {\r\n    appState.graph.hasGraph = true;\r\n    appState.graph.clustercoe = appState.graph.averageClustering().toFixed(3)\r\n  }\r\n}) \r\n\r\n// // update MapView\r\nautorun(() => {\r\n  if (appState.graph.rawGraph.nodes.length > 0 ) {  // has spatial information \r\n    //\r\n  }\r\n}) \r\n\r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame) {\r\n    console.log(\"Triggered\");\r\n    // appState.graph.frame.selection = []\r\n\r\n    // \r\n    appState.graph.selectedNodes = appState.graph.frame.selection\r\n\r\n    appState.graph.frame.updateGraph(appState.graph.computedGraph); //loads nodes on screen when snapshot loaded\r\n    appState.graph.frame.setAllNodesShapeWithOverride(appState.graph.nodes.shape, appState.graph.overrides);\r\n    appState.graph.frame.setLabelRelativeSize(appState.graph.nodes.labelSize);\r\n    appState.graph.frame.setLabelLength(appState.graph.nodes.labelLength);\r\n    appState.graph.frame.updateSelectionOpacity();\r\n    // appState.graph.frame.clearSelection();\r\n    // if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n    // }\r\n    // if (appState.graph.frame.selection.length > 0) {\r\n    //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n    // }\r\n  }\r\n\r\n  //pins nodes only after nodes are loaded\r\n  appState.graph.pinNodes();\r\n});\r\n\r\n\r\n// // // resume layout by default \r\nautorun(() => {\r\n  \r\n  // appState.graph.runActiveLayout();\r\n  // setTimeout(function(){appState.graph.frame.paused = true},9000);\r\n  appState.graph.frame.paused = true;\r\n  // appState.graph.frame.resumeLayout();\r\n                  // this.forceUpdate();\r\n}) \r\n\r\n\r\nautorun(() => {\r\n  if (appState.graph.frame && appState.graph.positions) {\r\n    // If positions are saved in a snapshot, pause layout upon loading.\r\n    appState.graph.frame.updatePositions(appState.graph.positions);\r\n    appState.graph.positions = null;\r\n    console.log('[autorun] Positions updated.');\r\n\r\n  }\r\n  if (appState.graph.frame && appState.graph.initialNodesShowingLabels) {\r\n    appState.graph.frame.showLabels(appState.graph.initialNodesShowingLabels);\r\n    appState.graph.initialNodesShowingLabels = null;\r\n  }\r\n\r\n  if (appState.graph.frame && appState.graph.frame.getNodeList().length>0){  //dehilight border when innitially load \r\n    appState.graph.frame.getNodeList().forEach((node)=>{node.renderData.draw_object.children[0].visible=false})\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  const searchStr = appState.search.searchStr;\r\n  if (searchStr.length >= 3) {\r\n    runSearch(searchStr);\r\n  } else {\r\n    appState.search.panelOpen = false;\r\n    appState.search.candidates.splice(0, appState.search.candidates.length);\r\n    if (appState.graph.frame) {\r\n      appState.graph.frame.highlightNodeIds([], true);\r\n    }\r\n  }\r\n});\r\n\r\nautorun(() => {\r\n  if (appState.graph.selectedNodes && appState.graph.selectedNodes.length >0 ){\r\n    appState.graph.selectedNodes = appState.graph.selectedNodes.filter(x => x !== undefined)\r\n  }\r\n  // if (appState.graph && appState.graph.frame && appState.graph.frame.selection.length > 0) {\r\n  //   this.frame.selection = this.frame.selection.filter(x => x !== undefined)\r\n  // }\r\n})\r\n\r\n// Argo-lite specific: extract CSV from File object and update related fields.\r\nautorun(() => {\r\n  const file = appState.import.selectedEdgeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.edgeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.edgeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n      runInAction(\"preview top N lines of edge file\", () => {\r\n        appState.import.importConfig.edgeFile.topN = it;\r\n        appState.import.importConfig.edgeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.edgeFile.mapping.fromId = appState.import.importConfig.edgeFile.columns[0];\r\n        appState.import.importConfig.edgeFile.mapping.toId = appState.import.importConfig.edgeFile.columns[1];\r\n        appState.import.importConfig.edgeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to parse file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nautorun(() => {\r\n  const file = appState.import.selectedNodeFileFromInput;\r\n  const hasHeader = appState.import.importConfig.nodeFile.hasColumns;\r\n  const delimiter = appState.import.importConfig.nodeFile.delimiter;\r\n\r\n  if (!file) {\r\n    return;\r\n  }\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = () => {\r\n    // Read entire CSV into memory as string\r\n    const fileAsString = reader.result;\r\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\r\n    const lines = fileAsString.split('\\n');\r\n    const lineNumber = lines.length;\r\n    const topLinesAsString = lines.map(l => l.trim()).filter((l, i) => i < 20).join('\\n');\r\n    console.log(topLinesAsString);\r\n\r\n    // Parse the top lines\r\n    try {\r\n      const it = hasHeader ? parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: hasHeader,\r\n        delimiter\r\n      }) : parse(topLinesAsString, {\r\n        comment: \"#\",\r\n        trim: true,\r\n        auto_parse: true,\r\n        skip_empty_lines: true,\r\n        columns: undefined,\r\n        delimiter\r\n      });\r\n\r\n      runInAction(\"preview top N lines of node file\", () => {\r\n        appState.import.importConfig.nodeFile.topN = it;\r\n        appState.import.importConfig.nodeFile.columns = Object.keys(it[0]).map(key => `${key}`);\r\n        appState.import.importConfig.nodeFile.mapping.id = appState.import.importConfig.nodeFile.columns[0];\r\n        appState.import.importConfig.nodeFile.mapping.LatY = appState.import.importConfig.nodeFile.columns[2];\r\n        appState.import.importConfig.nodeFile.mapping.LonX = appState.import.importConfig.nodeFile.columns[1];\r\n        appState.import.importConfig.nodeFile.ready = true;\r\n      });\r\n    } catch {\r\n      toaster.show({\r\n        message: 'Error: Fails to open file',\r\n        intent: Intent.DANGER,\r\n        timeout: -1\r\n      });\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    console.error(reader.error);\r\n    toaster.show({\r\n      message: 'Error: Fails to open file',\r\n      intent: Intent.DANGER,\r\n      timeout: -1\r\n    });\r\n  };\r\n});\r\n\r\nexport default appState;\r\n","import * as scale from \"d3-scale\";\r\n\r\n// Argo-lite Iframe widget mode\r\n// Build the app separately and host it on a different URL\r\n// If set to true, the app will begin in widget mode\r\n// hiding certain panels, logo, and minimap\r\n// and show a minimalist Navbar.\r\nexport const IS_IFRAME_WIDGET = window.location !== window.parent.location;\r\n\r\nexport const FRONTEND_URL = \"https://poloclub.github.io/argo-graph-lite\";\r\nexport const LOGO_URL = \"https://sites.gatech.edu/snoman/\";\r\nexport const GITHUB_URL = \"https://github.com/sichenjin/SSN\";\r\n// Argo-lite Graph Sharing backend Strapi Server:\r\nexport const BACKEND_URL = \"https://argo-share.herokuapp.com\"; // for production\r\n// export const BACKEND_URL = \"https://sleepy-brushlands-57948.herokuapp.com\"; // for free heroku\r\n// export const BACKEND_URL = \"http://localhost:1337\"; // for local strapi development\r\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\r\n  // [\"Les Miserables\", \"31d8fb5a-b540-4db6-a2df-9c0158e152f0\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#099905af-a9a1-417a-8a1c-92fa121d7d0d\r\n  // #bc368f46-a78b-4fc7-bd29-68594a8f7e3c\r\n  // https://poloclub.github.io/argo-graph-lite/#ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\r\n  // https://poloclub.github.io/argo-graph-lite/#6c399b67-1454-498c-9abc-86cafa48434d \r\n  // https://poloclub.github.io/argo-graph-lite/#f5eb85cb-65be-46fe-bd66-1c3066e27893  \r\n  // https://poloclub.github.io/argo-graph-lite/#0b92553e-b85a-4be4-94ce-84c8868da40c /\r\n  //change back to no shortest path snapshot for foodsharing \"ab19b31c-efe1-4b77-ba03-4656ef1bd4bc\"\r\n  // https://poloclub.github.io/argo-graph-lite/#c1295995-f0c4-4350-9ea0-c97c8a134a34 //shortest path for food sharing \r\n  // https://poloclub.github.io/argo-graph-lite/#ae71bf2c-0b47-43bd-8955-c64a53734341  \r\n  // \"\" \r\n  \r\n  // https://poloclub.github.io/argo-graph-lite/#82ffaa24-1d0f-402d-8d5c-9e6595827bc8\r\n  // c1295995-f0c4-4350-9ea0-c97c8a134a34\r\n  // <iframe src=\"https://poloclub.github.io/argo-graph-lite/#0add65d1-c16f-4c44-b33f-6bf2adb4b589\" width=\"850\" height=\"500\"></iframe>\r\n  [\"Food Sharing\", \"935e591f-38d3-4e91-974d-40172dd123b6\"],  \r\n   \r\n  // 8b1fa770-a1d0-43f0-b798-def14744dd8c\r\n  //without -degree nodes snapshot \r\n  // [\"CORD-19 Citation Graph 06-02\", \"4bf882d3-8966-4f41-a590-acafeb998d2a\"],\r\n  // https://poloclub.github.io/argo-graph-lite/#\"\r\n  //<iframe src=\"https://poloclub.github.io/argo-graph-lite/#732a9a88-9123-46b4-a271-3616675eab3d\" width=\"850\" height=\"500\"></iframe> \r\n  // mafia: 6f4e03f4-1de3-485b-96a8-8c3e513b6e54//// 732a9a88-9123-46b4-a271-3616675eab3d\r\n  \r\n  [\"Mafia Family Network\", \"13aaf5c9-fea7-4c72-9ca2-a4d605622e82\"],\r\n  // c43890f8-1cfb-4599-a0d3-8f47303691fc\r\n  [\"US flight Network\", '5d34f2ee-da8c-4748-affc-af44798e32d6'],\r\n  // https://poloclub.github.io/argo-graph-lite/#a6470fe8-f562-4e78-94ee-196f78006c1c\r\n  ['US 117th House Vote of 5 States', '86665914-5bd3-4293-bc2b-4ab673595c8a'],\r\n  // https://poloclub.github.io/argo-graph-lite/#86665914-5bd3-4293-bc2b-4ab673595c8a\r\n  // https://poloclub.github.io/argo-graph-lite/#51cd24cd-0819-4f2c-b28b-364dc84bb055\r\n  ['US 117th House Vote Network','ad3d8ca3-1f15-4ae5-90a8-2af15d65bc81'], \r\n  ['Github Collaboration Network', '2947da0d-3aae-4fd7-bfd9-06c936b33f55']\r\n  // \"5c1c6b89-24cd-4dff-9748-6cf6ad8a43a1\" 960 edges\r\n  // e6d1062c-f1ac-4d69-8039-16d589fb04cf\r\n];\r\n\r\n// When resizing window or running on mobile,\r\n// used to determine whether screen\r\n// is considered small.\r\nexport const MOBILE_WIDTH_CUTOFF = 800;\r\nexport const MOBILE_HEIGHT_CUTOFF = 480;\r\n\r\nexport const SCALE_LINEAR = \"Linear Scale\";\r\nexport const SCALE_LOG = \"Log Scale\";\r\nexport const SCALE_CATEGORY = \"Nominal Scale\";\r\n\r\nexport const scales = {\r\n  [SCALE_LINEAR]: scale.scaleLinear,\r\n  // [SCALE_LOG]: scale.scaleLog,\r\n  [SCALE_CATEGORY] : scale.scaleOrdinal\r\n};\r\n\r\nexport const LOAD_USER_CONFIG = \"load-user-config\";\r\nexport const LOADED_USER_CONFIG = \"loaded-user-config\";\r\nexport const SAVE_USER_CONFIG = \"save-user-config\";\r\nexport const SAVED_USER_CONFIG = \"saved-user-config\";\r\n\r\nexport const FETCH_WORKSPACE_PROJECTS = \"fetch-workspace-projects\";\r\nexport const FETCHED_WORKSPACE_PROJECTS = \"fetched-workspace-projects\";\r\nexport const MENU_NEW_PROJECT = \"menu-new-project\";\r\nexport const CREATE_NEW_PROJECT = \"create-new-project\";\r\nexport const CREATED_NEW_PROJECT = \"created-new-project\";\r\n\r\nexport const DELETE_FILE = \"delete-file\";\r\nexport const RENAME_FILE = \"rename-file\";\r\n\r\nexport const LOAD_GRAPH_JSON = \"load-graph-json\";\r\nexport const LOAD_GRAPH_SQLITE = \"load-graph-sqlite\";\r\nexport const LOADED_GRAPH_JSON = \"loaded-graph-json\";\r\nexport const LOAD_TOAST_KEY = \"load-toast-key\";\r\n\r\nexport const SAVE_GRAPH_JSON = \"save-graph-json\";\r\nexport const SAVE_GRAPH_SQLITE = \"save-graph-sqlite\";\r\nexport const SAVED_GRAPH_JSON = \"saved-graph-json\";\r\nexport const SAVE_TOAST_KEY = \"save-const-key\";\r\n\r\nexport const MENU_LOAD = \"menu-load\";\r\nexport const MENU_IMPORT_CSV = \"menu-import-csv\";\r\nexport const MENU_SAVE_GRAPH_STATE = \"menu-save-graph-state\";\r\nexport const MENU_SAVE_GRAPH_STATE_TO_PROJECT =\r\n  \"menu-save-graph-state-to-project\";\r\nexport const MENU_SAVE_GRAPH_SQLITE = \"menu-save-graph-sqlite\";\r\nexport const SAVE_GRAPH_STATE = \"save-graph-state\";\r\nexport const SAVED_GRAPH_STATE = \"saved-graph-state\";\r\nexport const SAVE_GRAPH_STATE_TO_PROJECT = \"save-graph-state-to-project\";\r\nexport const SAVED_GRAPH_STATE_TO_PROJECT = \"saved-graph-state-to-project\";\r\nexport const LOAD_GRAPH_STATE = \"load-graph-state\";\r\nexport const LOADED_GRAPH_STATE = \"loaded-graph-state\";\r\n\r\nexport const SHOW_ITEM_IN_FOLDER = \"show-item-in-folder\";\r\nexport const SHOW_WORKSPACE_FOLDER = 'show-workspace-folder';\r\nexport const CHANGE_WORKSPACE_FOLDER = 'change-workspace-folder';\r\nexport const CHANGED_WORKSPACE_FOLDER = 'changed-workspace-folder';\r\n\r\nexport const CHOOSE_EDGE_FILE = \"choose-edge-file\";\r\nexport const CHOSEN_EDGE_FILE = \"chosen-edge-file\";\r\nexport const CHOOSE_NODE_FILE = \"choose-node-file\";\r\nexport const PEAKED_NODE_FILE = \"peaked-node-file\";\r\nexport const CHOSEN_NODE_FILE = \"chosen-node-file\";\r\n\r\nexport const CHOOSE_GRAPH_FILE = \"choose-graph-file\";\r\nexport const CHOSEN_GRAPH_FILE = \"chosen-graph-file\";\r\nexport const CHOOSE_STATE_FILE = \"choose-state-file\";\r\nexport const CHOSEN_STATE_FILE = \"chosen-state-file\";\r\n\r\nexport const NODE_AND_EDGE_FILE = \"both nodes and edges file\";\r\nexport const ONLY_EDGE_FILE = \"only edges file\";\r\n\r\nexport const GRAPH_AND_STATE_FILE = \"both graph and snapshot file\";\r\nexport const ONLY_GRAPH_FILE = \"only graph file\";\r\nexport const IMPORT_GRAPH = \"import-graph\";\r\nexport const IMPORTED_GRAPH = \"imported-graph\";\r\nexport const OPEN_GRAPH = \"open-graph\";\r\nexport const OPENED_GRAPH = \"opened-graph\";\r\n\r\nexport const SEARCH_REQUEST = \"search-request\";\r\nexport const SEARCH_RESPONSE = \"search-response\";\r\n\r\nexport const ADD_NODES = \"add-nodes\";\r\nexport const ADD_SELECT_NODE = \"add-select-node\";\r\nexport const ADD_NODE = \"add-node\";\r\nexport const GET_NEIGHBORS = \"get-neighbors\";\r\n","import { runInAction, toJS } from 'mobx';\r\nimport { Intent } from '@blueprintjs/core';\r\nimport { demapify } from 'es6-mapify';\r\n\r\nimport appState from '../stores/index';\r\nimport {\r\n  ADD_NODE,\r\n  ADD_NODES,\r\n  ADD_SELECT_NODE,\r\n  CHOOSE_EDGE_FILE,\r\n  CHOOSE_GRAPH_FILE,\r\n  CHOOSE_NODE_FILE,\r\n  CHOOSE_STATE_FILE,\r\n  CHOSEN_EDGE_FILE,\r\n  CHOSEN_GRAPH_FILE,\r\n  CHOSEN_NODE_FILE,\r\n  CHOSEN_STATE_FILE,\r\n  GET_NEIGHBORS,\r\n  IMPORT_GRAPH,\r\n  IMPORTED_GRAPH,\r\n  LOAD_GRAPH_SQLITE,\r\n  LOADED_GRAPH_SQLITE,\r\n  LOADED_GRAPH_STATE,\r\n  MENU_IMPORT_CSV,\r\n  MENU_LOAD,\r\n  MENU_NEW_PROJECT,\r\n  MENU_SAVE_GRAPH_SQLITE,\r\n  MENU_SAVE_GRAPH_STATE,\r\n  CREATE_NEW_PROJECT,\r\n  CREATED_NEW_PROJECT,\r\n  OPEN_GRAPH,\r\n  OPENED_GRAPH,\r\n  FETCH_WORKSPACE_PROJECTS,\r\n  FETCHED_WORKSPACE_PROJECTS,\r\n  SAVE_GRAPH_SQLITE,\r\n  SAVE_GRAPH_STATE,\r\n  SAVED_GRAPH_JSON,\r\n  SAVED_GRAPH_STATE,\r\n  SEARCH_REQUEST,\r\n  SEARCH_RESPONSE,\r\n  SHOW_ITEM_IN_FOLDER,\r\n  SAVED_GRAPH_STATE_TO_PROJECT,\r\n  MENU_SAVE_GRAPH_STATE_TO_PROJECT,\r\n  SAVE_GRAPH_STATE_TO_PROJECT,\r\n  DELETE_FILE,\r\n  RENAME_FILE,\r\n  SHOW_WORKSPACE_FOLDER,\r\n  LOAD_USER_CONFIG,\r\n  LOADED_USER_CONFIG,\r\n  SAVED_USER_CONFIG,\r\n  SAVE_USER_CONFIG,\r\n  CHANGE_WORKSPACE_FOLDER,\r\n  CHANGED_WORKSPACE_FOLDER,\r\n} from '../constants/index';\r\nimport { toaster } from '../notifications/client';\r\n\r\nimport createGraph from 'ngraph.graph';\r\nimport pageRank from 'ngraph.pagerank';\r\nimport path from 'ngraph.path';\r\nimport parse from \"csv-parse/lib/sync\";\r\nimport centrality from 'ngraph.centrality';\r\n// import betweennes from 'ngraph.centrality/src/betweenness';\r\n// import worker from './worker';\r\n\r\n// TODO: Register web worker used by Argo-lite.\r\n\r\n// Argo-lite replacement for electron ipc.\r\nconst ipcRenderer = {\r\n  send: (eventString) => {\r\n    console.log(`ipcRenderer.send(${eventString}, ...)`);\r\n  }\r\n}\r\n\r\nconst Nonloc = 360\r\n\r\nexport default function registerIPC() {\r\n  // ipcRenderer.on(LOADED_USER_CONFIG, (event, loadedObject) => {\r\n  //   // Overwrite PreferenceStore values according to user config values,\r\n  //   // if present.\r\n  //   if (loadedObject.darkMode) {\r\n  //     appState.preferences.darkMode = true;\r\n  //   }\r\n  //   if (loadedObject.workspace && loadedObject.workspace != '') {\r\n  //     appState.preferences.workspacePath = loadedObject.workspace;\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_USER_CONFIG, (event) => {\r\n  //   toaster.show({\r\n  //     message: \"User configuration saved\",\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_SQLITE, (event, loadedObject) => {\r\n  //   runInAction('load saved graph', () => {\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(OPENED_GRAPH, (event, loadedObject) => {\r\n  //   runInAction('load saved graph and state', () => {\r\n  //     console.log(loadedObject);\r\n  //     appState.graph.rawGraph = loadedObject.rawGraph;\r\n  //     appState.graph.metadata = loadedObject.metadata;\r\n  //     if (loadedObject.state) {\r\n  //       appState.graph.loadImmediateStates(loadedObject.state);\r\n  //     }\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, loadedObject) => {\r\n  //   appState.graph.loadImmediateStates(loadedObject);\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph snapshot file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_STATE_TO_PROJECT, (event, snapshotName) => {\r\n  //   toaster.show({\r\n  //     message: `Saved to snapshot ${snapshotName}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(SAVED_GRAPH_JSON, (event, savedFilePath) => {\r\n  //   toaster.show({\r\n  //     message: `Saved graph file to ${savedFilePath}`,\r\n  //     intent: Intent.SUCCESS,\r\n  //     iconName: 'saved',\r\n  //     action: {\r\n  //       onClick: () => ipcRenderer.send(SHOW_ITEM_IN_FOLDER, savedFilePath),\r\n  //       text: 'Show in Folder',\r\n  //     },\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_NODE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.nodeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_EDGE_FILE, (event, path) => {\r\n  //   appState.import.importConfig.edgeFile.path = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_GRAPH_FILE, (event, path) => {\r\n  //   appState.import.graphFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(CHOSEN_STATE_FILE, (event, path) => {\r\n  //   appState.import.stateFile = path;\r\n  // });\r\n\r\n  // ipcRenderer.on(IMPORTED_GRAPH, (event) => {\r\n  //   appState.import.loading = false;\r\n  //   appState.import.dialogOpen = false;\r\n  //   appState.project.isFetching = true;\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_NODES, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n  // });\r\n\r\n  // ipcRenderer.on(ADD_SELECT_NODE, (event, toAdd) => {\r\n  //   runInAction('add nodes and edges to graph', () => {\r\n  //     appState.graph.rawGraph.nodes = appState.graph.rawGraph.nodes.concat(\r\n  //       toAdd.nodes,\r\n  //     );\r\n  //     appState.graph.rawGraph.edges = appState.graph.rawGraph.edges.concat(\r\n  //       toAdd.edges,\r\n  //     );\r\n  //   });\r\n\r\n  //   appState.graph.frame.setLastNode(toAdd.nodes[0].node_id);\r\n  //   appState.graph.frame.dragLastNode();\r\n  // });\r\n\r\n  // ipcRenderer.on(SEARCH_RESPONSE, (event, candidates) => {\r\n  //   var cands = JSON.parse(candidates);\r\n  //   var ckeys = cands.map(x => x.node_id);\r\n  //   appState.search.allCands = Object.values(cands);\r\n  //   appState.search.pageNum = 0;\r\n  //   appState.search.nPerPage = 10;\r\n  //   appState.search.numCandidates = appState.search.allCands.length;\r\n  //   appState.search.maxPage = parseInt(\r\n  //     appState.search.allCands.length / appState.search.nPerPage,\r\n  //   );\r\n  //   appState.search.pages = [...Array(appState.search.maxPage).keys()];\r\n  //   appState.search.candidates = appState.search.allCands.slice(0, 10);\r\n  //   appState.search.panelOpen = true;\r\n  //   if (appState.graph.frame) {\r\n  //     appState.graph.frame.highlightNodeIds(ckeys, true);\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(LOADED_GRAPH_STATE, (event, stateStr) => {\r\n  //   appState.graph.loadImmediateStates(stateStr);\r\n  // });\r\n\r\n  // ipcRenderer.on(CREATED_NEW_PROJECT, () => {\r\n  //   fetchWorkspaceProjects();\r\n  // });\r\n\r\n  // ipcRenderer.on(FETCHED_WORKSPACE_PROJECTS, (event, projects) => {\r\n  //   appState.project.isFetching = false;\r\n  //   appState.project.projects = projects;\r\n  //   // Update mobx state on projects, useful for updating the components after deleting/renaming etc.\r\n  //   if (appState.project.currentProject !== null) {\r\n  //     // There is a project currently selected (showing in a ProjectDetailDialog etc.)\r\n  //     // This fetch needs to update the dialog also\r\n  //     const temp = appState.project.projects.filter((project) => {\r\n  //       return project.projectPath === appState.project.currentProject.projectPath;\r\n  //     });\r\n  //     if (temp.length === 1) {\r\n  //       appState.project.currentProject = temp[0];\r\n  //     } else {\r\n  //       appState.project.currentProject = null;\r\n  //     }\r\n\r\n  //   }\r\n  // });\r\n\r\n  // ipcRenderer.on(CHANGED_WORKSPACE_FOLDER, (events, newWorkspaceDirectory) => {\r\n  //   appState.preferences.workspacePath = newWorkspaceDirectory;\r\n  //   appState.preferences.saveUserConfig();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_NEW_PROJECT, () => {\r\n  //   appState.project.isNewProjectDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_LOAD, () => {\r\n  //   appState.preferences.openDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_IMPORT_CSV, () => {\r\n  //   appState.import.dialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE, () => {\r\n  //   // Original implementation for opening a traditional system-level save file dialog\r\n  //   // ipcRenderer.send(SAVE_GRAPH_STATE, appState.graph.saveImmediateStates());\r\n\r\n  //   // New implementation opening a dialog that saves snapshot to project\r\n  //   appState.project.isSaveSnapshotDialogOpen = true;\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_STATE_TO_PROJECT, () => {\r\n  //   requestSaveSnapshot();\r\n  // });\r\n\r\n  // ipcRenderer.on(MENU_SAVE_GRAPH_SQLITE, requestSaveSQLite);\r\n}\r\n\r\nexport function requestLoadSQLite() {\r\n  ipcRenderer.send(LOAD_GRAPH_SQLITE);\r\n}\r\n\r\nexport function addNode(node_id) {\r\n  ipcRenderer.send(ADD_NODE, node_id);\r\n}\r\n\r\nexport function requestNeighbors(\r\n  node_id,\r\n  attr = 'degree',\r\n  num = '10',\r\n  order = 'desc',\r\n) {\r\n  ipcRenderer.send(GET_NEIGHBORS, node_id, attr, num, order);\r\n}\r\n\r\nfunction requestSaveSQLite() {\r\n  ipcRenderer.send(\r\n    SAVE_GRAPH_SQLITE,\r\n    JSON.stringify({\r\n      graph: toJS(appState.graph.rawGraph),\r\n      metadata: toJS(appState.graph.metadata),\r\n      nodes: toJS(appState.graph.nodes),\r\n      overrides: toJS(demapify(appState.graph.overrides)),\r\n      nodePositions: appState.graph.frame.getPositions(),\r\n    }),\r\n  );\r\n}\r\n\r\nexport function requestChooseNodeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_NODE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseEdgeFile(hasHeader) {\r\n  ipcRenderer.send(CHOOSE_EDGE_FILE, hasHeader);\r\n}\r\n\r\nexport function requestChooseGraphFile() {\r\n  ipcRenderer.send(CHOOSE_GRAPH_FILE);\r\n}\r\n\r\nexport function requestChooseStateFile() {\r\n  ipcRenderer.send(CHOOSE_STATE_FILE);\r\n}\r\n\r\nexport function requestOpen() {\r\n  ipcRenderer.send(\r\n    OPEN_GRAPH,\r\n    appState.import.graphFile,\r\n    appState.import.stateFile,\r\n  );\r\n}\r\n\r\n// Request to delete a file specified at filePath\r\nexport function requestDelete(filePath) {\r\n  ipcRenderer.send(DELETE_FILE, filePath);\r\n}\r\n\r\n/**\r\n * Request to rename a file specified at filePath\r\n * @param filePath where the file to be renamed is located\r\n * @param newName new file name with extension\r\n */\r\nexport function requestRename(filePath, newName) {\r\n  ipcRenderer.send(RENAME_FILE, filePath, newName);\r\n}\r\n\r\nexport function requestSaveSnapshot(snapshotName) {\r\n  if (!snapshotName) {\r\n    // Default: Use the currently opened snapshot name (if no snapshot opened, the default name in the ProjectStore will be used)\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, appState.project.currentSnapshotName);\r\n  } else {\r\n    ipcRenderer.send(SAVE_GRAPH_STATE_TO_PROJECT, appState.graph.saveImmediateStates(), appState.project.currentProject.projectPath, snapshotName);\r\n  }\r\n}\r\n\r\nexport function requestImportGraphFromCSV(hasNodeFile, delimiter, newProjectName) {\r\n  if (!newProjectName) {\r\n    newProjectName = 'Test Project';\r\n  }\r\n  appState.import.loading = true;\r\n  appState.graph.convexPolygons =[]\r\n  appState.graph.modularity = undefined\r\n  appState.graph.globalFlatRatio = undefined\r\n  appState.graph.convexhullby = \"NULL\"\r\n  appState.graph.groupby = \"NULL\"\r\n  appState.graph.mapClicked = undefined;\r\n  appState.graph.mapClickedArray = [];\r\n  appState.graph.areaSelected = undefined;\r\n  appState.graph.selectedNodes = [];\r\n  appState.graph.selectedSets = [];\r\n  appState.graph.commonSetNodes =[];\r\n  appState.graph.interSetNodes = [];\r\n  appState.graph.filter = {}\r\n  appState.graph.currentlyHovered = undefined;\r\n \r\n  appState.graph.convexNodes = [];\r\n  appState.graph.convexPolygons = [];\r\n  appState.graph.pathHovered = undefined;\r\n  appState.graph.pathHoveredList = [];\r\n  appState.graph.initialNodesShowingLabels = [];\r\n  appState.graph.densityDistance = [];\r\n  appState.graph.edgeselection = [];\r\n  appState.graph.degreeselection = [];\r\n  appState.graph.degreebrushed = false;\r\n  appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n  appState.graph.distanceDensityCurrentlyClicked = [];\r\n  appState.graph.pinnedNodes = null;\r\n  appState.graph.clearBrush = false;\r\n  \r\n  appState.graph.mapEdgeShow = true;\r\n  appState.graph.autoZoom = false;\r\n  appState.graph.firstload =true;\r\n  appState.graph.keydown = false;\r\n  appState.graph.clusteringco = 0;\r\n  appState.graph.graphDiameter = 0;\r\n  appState.graph.connectcom = 0;\r\n\r\n  const importConfig = {\r\n    hasNodeFile,\r\n    nodes: {\r\n      path: appState.import.importConfig.nodeFile.path,\r\n      hasColumns: appState.import.importConfig.nodeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.nodeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.nodeFile.mapping),\r\n    },\r\n    edges: {\r\n      path: appState.import.importConfig.edgeFile.path,\r\n      hasColumns: appState.import.importConfig.edgeFile.hasColumns,\r\n      columns: toJS(appState.import.importConfig.edgeFile.columns),\r\n      mapping: toJS(appState.import.importConfig.edgeFile.mapping),\r\n      createMissing: appState.import.importConfig.edgeFile.createMissing,\r\n    },\r\n    delimiter,\r\n    newProjectName\r\n  };\r\n  ipcRenderer.send(IMPORT_GRAPH, importConfig);\r\n\r\n  // TODO: Potentially separate this out to web worker.\r\n  importGraphFromCSV(importConfig).then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n      appState.import.loading = false;\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.dialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n    // appState.import.loading = false;\r\n  });\r\n  appState.import.loading = false;\r\n}\r\n\r\nexport function requestImportGraphFromGexf() {\r\n  importGraphFromGexf().then(graph => {\r\n    // Run post import filters\r\n    appState.import.postImportFilter(graph.rawGraph);\r\n\r\n    runInAction('load imported graph', () => {\r\n      appState.graph.rawGraph = graph.rawGraph;\r\n      appState.graph.metadata = graph.metadata;\r\n      appState.graph.setUpFrame();\r\n    });\r\n    // Reinitialize global configs\r\n    appState.graph.nodes = appState.graph.initialGlobalConfig.nodes;\r\n    appState.graph.scatterplot = appState.graph.initialGlobalConfig.scatterplot;\r\n    appState.graph.overrides = new Map();\r\n    appState.import.loading = false;\r\n    appState.import.gexfDialogOpen = false;\r\n    // Sync preference store with graph-frontend frame\r\n    // if (!appState.preferences.darkMode) { // assume frame defaults to dark\r\n    //   appState.graph.frame.toggleDark();\r\n    // }\r\n    if (appState.preferences.minimapShowing) {\r\n      appState.graph.frame.showMiniMap();\r\n    } else {\r\n      appState.graph.frame.hideMiniMap();\r\n    }\r\n    // Newly imported graph shouldn't have label showing\r\n    appState.graph.frame.turnOffLabelCSSRenderer();\r\n  });\r\n}\r\n\r\nasync function readCSV(fileObject, hasHeader, delimiter) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      try {\r\n        if (hasHeader) {\r\n          resolve(parse(content, {\r\n            comment: \"#\",\r\n            trim: true,\r\n            auto_parse: true,\r\n            skip_empty_lines: true,\r\n            columns: hasHeader,\r\n            delimiter\r\n          }));\r\n        }\r\n        resolve(parse(content, {\r\n          comment: \"#\",\r\n          trim: true,\r\n          auto_parse: true,\r\n          skip_empty_lines: true,\r\n          columns: undefined,\r\n          delimiter\r\n        }));\r\n      } catch (err) {\r\n        let msg = err.message\r\n        let mismatch = msg.indexOf(\"Invalid Record Length:\") == 0\r\n        if (mismatch) {\r\n          msg = msg.replace(\"is\", \"set to\")\r\n          msg = msg.replace(\"got\", \"but detected\")\r\n        }\r\n        toaster.show({\r\n          message: \"Error: \" + msg,\r\n          intent: Intent.DANGER,\r\n          timeout: -1\r\n        });\r\n        \r\n      }\r\n      // appState.import.loading = false;\r\n      appState.import.dialogOpen = false;\r\n    }\r\n  });\r\n}\r\n\r\nasync function parseGEXF(content) {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(content, \"text/xml\");\r\n  const xmlEdges = xmlDoc.getElementsByTagName('edge');\r\n  const xmlNodes = xmlDoc.getElementsByTagName('node');\r\n  const xmlAttri = xmlDoc.getElementsByTagName('attributes')\r\n\r\n  let nodeAttri = [];\r\n  let edgeAttri = [];\r\n  const edgesArr = [];\r\n  const nodesArr = [];\r\n  const nodeAttriOrdered = {};\r\n\r\n  for (let i = 0, l = xmlAttri.length; i < l; i++) {\r\n    const curr = xmlAttri[i];\r\n    if (curr.getAttribute('class') === 'node') {\r\n      nodeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n    else if (curr.getAttribute('class') === 'edge') {\r\n      edgeAttri = curr.getElementsByTagName('attribute');\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = nodeAttri.length; i < l; i++) {\r\n    const curr = nodeAttri[i];\r\n    nodeAttriOrdered[curr.getAttribute(\"id\")] = curr.getAttribute(\"title\");\r\n  }\r\n\r\n  for (let i = 0, l = xmlEdges.length; i < l; i++) {\r\n    const currEdge = xmlEdges[i];\r\n    const s = currEdge.getAttribute('source').toString();\r\n    const t = currEdge.getAttribute('target').toString();\r\n    edgesArr.push({\r\n      source_id: s,\r\n      target_id: t,\r\n    });\r\n  }\r\n  for (let i = 0, l = xmlNodes.length; i < l; i++) {\r\n    const currNode = xmlNodes[i];\r\n    const id = currNode.getAttribute('id').toString();\r\n    const nodeAttvalues = currNode.getElementsByTagName(\"attvalues\");\r\n    const nodeAttvalue = [];\r\n    if (nodeAttvalues.length != 0) {\r\n      nodeAttvalue = nodeAttvalues[0].getElementsByTagName(\"attvalue\");\r\n    }\r\n    let node = { id: id, degree: 0, pagerank: 0, node_id: id,  betweenness:0, closeness:0 };\r\n    for (let j = 0; j < nodeAttvalue.length; j++) {\r\n      const value = nodeAttvalue[j].attributes[\"value\"].value;\r\n      const attributeIdElementAttribute = nodeAttvalue[j].attributes[\"for\"] || nodeAttvalue[j].attributes[\"id\"];\r\n      const attributeId = attributeIdElementAttribute.value;\r\n      node[nodeAttriOrdered[attributeId]] = value;\r\n    }\r\n    for (let j = 0; j < currNode.attributes.length; j++) {\r\n      const currAttri = currNode.attributes[j];\r\n      node[currAttri.name] = currAttri.value;\r\n    }\r\n    node[\"id\"] = id;\r\n    node[\"node_id\"] = id;\r\n    nodesArr.push(node);\r\n  }\r\n  return [nodesArr, edgesArr];\r\n}\r\n\r\nasync function readGEXF(fileObject) {\r\n  const file = fileObject;\r\n  const reader = new FileReader();\r\n  reader.readAsText(file);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = () => {\r\n      const content = reader.result;\r\n      resolve(parseGEXF(content));\r\n    }\r\n  });\r\n}\r\n\r\nasync function importGraphFromCSV(config) {\r\n  // Since the CSV lib we use uses int index when there's not header/column names specified\r\n  // but the frontend selector always convert int to string values, we need to\r\n  // manually convert the user-selected fromId and toId values back to int.\r\n  // Note that this should only be done when there's no header provided on the CSV (hasColumns == false).\r\n  const fromId = config.nodes.hasColumns ? config.edges.mapping.fromId : parseInt(config.edges.mapping.fromId);\r\n  const toId = config.nodes.hasColumns ? config.edges.mapping.toId : parseInt(config.edges.mapping.toId);\r\n\r\n  // Create temporary data structures.\r\n  let nodesArr = [];\r\n  // let pathsDict = {};\r\n\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n  if (config.hasNodeFile) {\r\n    nodesArr = await readCSV(appState.import.selectedNodeFileFromInput, config.nodes.hasColumns, config.delimiter);\r\n    nodesArr.forEach(node => graph.addNode(node[config.nodes.mapping.id].toString(),\r\n      { id: node[config.nodes.mapping.id].toString(), LatY: parseFloat(node[config.nodes.mapping.LatY]),LonX: parseFloat(node[config.nodes.mapping.LonX]),degree: 0, ...node }));\r\n    nodesArr =\r\n      nodesArr.map(\r\n        n => ({ ...n, id: n[config.nodes.mapping.id].toString(), degree: 0,betweenness:0, closeness:0 , pagerank: 0, LonX: parseFloat(n[config.nodes.mapping.LonX]), LatY: parseFloat(n[config.nodes.mapping.LatY]) }));\r\n    nodesArr.forEach(n => degreeDict[n.id] = 0);\r\n  }\r\n  const edges = await readCSV(appState.import.selectedEdgeFileFromInput, config.edges.hasColumns, config.delimiter);\r\n  if (config.edges.createMissing) {\r\n    edges.forEach((it) => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      if (!graph.hasNode(from)) {\r\n        graph.addNode(from, { id: from, degree: 0 });\r\n        nodesArr.push({ id: from, degree: 0, pagerank: 0 , betweenness:0, closeness:0 });\r\n        degreeDict[from] = 0;\r\n      }\r\n      if (!graph.hasNode(to)) {\r\n        graph.addNode(to, { id: to, degree: 0 });\r\n        nodesArr.push({ id: to, degree: 0, pagerank: 0 ,betweenness:0, closeness:0 });\r\n        degreeDict[to] = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    const edgeKey2 = `${to}👉${from}`;\r\n    if (edgesSet.has(edgeKey) || edgesSet.has(edgeKey2)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    edgesSet.add(edgeKey2);\r\n    var data = {\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily,\r\n\r\n    }\r\n    graph.addLink(from, to, data);\r\n\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n      fromlocLatY: fromlocLatY,\r\n      fromlocLonX: fromlocLonX,\r\n      tolocLatY: tolocLatY,\r\n      tolocLonX: tolocLonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    });\r\n  };\r\n\r\n  if (config.hasNodeFile && nodesArr[0].LatY !== undefined && nodesArr[0].LonX !== undefined) {  //node has spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      var fromlocLatY = parseFloat(graph.getNode(it[fromId].toString()).data.LatY)\r\n      var fromlocLonX = parseFloat(graph.getNode(it[fromId].toString()).data.LonX)\r\n      var tolocLatY = parseFloat(graph.getNode(it[toId].toString()).data.LatY)\r\n      var tolocLonX = parseFloat(graph.getNode(it[toId].toString()).data.LonX) // observable array???\r\n      var withinState = (graph.getNode(to).data.GEOID === graph.getNode(from).data.GEOID)\r\n      var withinFamily = (graph.getNode(to).data.Family === graph.getNode(from).data.Family)\r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LatY) \r\n      // fromloc.push(graph.getNode(it[fromId].toString()).data.LonX) \r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LatY)\r\n      // toloc.push(graph.getNode(it[toId].toString()).data.LonX)\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, fromlocLatY, fromlocLonX, tolocLatY, tolocLonX, withinState, withinFamily);\r\n      // addEdge(to, from);\r\n    });\r\n  } else {  //doesn't have  spatial location info\r\n    edges.forEach(it => {\r\n      const from = it[fromId].toString();\r\n      const to = it[toId].toString();\r\n      // Argo currently works with undirected graph\r\n      addEdge(from, to, Nonloc, Nonloc, Nonloc, Nonloc);\r\n      // addEdge(to, from);\r\n    });\r\n  }\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to centern/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n\r\n      const result1 = [...values].sort((a, b) => a - b)\r\n    \r\n      // values.sort(function(a,b){\r\n      //   return a-b;\r\n      // });\r\n    \r\n      var half = Math.floor(result1.length / 2);\r\n      \r\n      if (result1.length % 2)\r\n        return result1[half];\r\n      \r\n      return (result1[half - 1] + result1[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n  calMedianCenter();\r\n\r\n  }\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1);\r\n            pathsSet.add(pathKey2);\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    // console.log(nodesArr.length)\r\n    // console.log(pathsArr.length)\r\n    return pathsArr\r\n\r\n  }\r\n  // const pathsArr = shortestPathPairs();\r\n  const rank = pageRank(graph);\r\n  const betweenness = centrality.betweenness(graph)\r\n  const closeness = centrality.closeness(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, pagerank: rank[n.id],  closeness: closeness[n.id],betweenness:betweenness[n.id], degree: parseInt(degreeDict[n.id] ) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree','distance to center',  'betweenness', 'closeness' ],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport async function importGraphFromGexf() {\r\n  const gexfParsed = await readGEXF(appState.import.selectedGexfFileFromInput);\r\n  let nodesArr = gexfParsed[0];\r\n  const edges = gexfParsed[1];\r\n  const graph = createGraph();\r\n  const degreeDict = {};\r\n\r\n  nodesArr.forEach((it) => {\r\n    const currNode = it[\"id\"].toString();\r\n    if (!graph.hasNode(currNode)) {\r\n      graph.addNode(currNode, it);\r\n      degreeDict[currNode] = 0;\r\n    }\r\n  });\r\n\r\n  const edgesSet = new Set();\r\n\r\n  const edgesArr = [];\r\n\r\n  const addEdge = (from, to) => {\r\n    const edgeKey = `${from}👉${to}`;\r\n    if (edgesSet.has(edgeKey)) {\r\n      return;\r\n    }\r\n    edgesSet.add(edgeKey);\r\n    graph.addLink(from, to);\r\n    degreeDict[from] += 1;\r\n    degreeDict[to] += 1;\r\n    edgesArr.push({\r\n      source_id: from,\r\n      target_id: to,\r\n    });\r\n  };\r\n\r\n  edges.forEach(it => {\r\n    const from = it[\"source_id\"].toString();\r\n    const to = it[\"target_id\"].toString();\r\n\r\n    // Argo currently works with undirected graph\r\n    addEdge(from, to);\r\n    // addEdge(to, from);\r\n  });\r\n\r\n  const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n    var p = 0.017453292519943295;    // Math.PI / 180\r\n    var c = Math.cos;\r\n    var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n      c(lat1 * p) * c(lat2 * p) *\r\n      (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n  }\r\n\r\n  //calculate the diatance to center/ average lat/lon\r\n  const calDIstanceToCenter = () => {\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    var avgLat\r\n    var avgLon\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      avgLat = average(latlist)\r\n      avgLon = average(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(avgLat, avgLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n  }\r\n\r\n  const calMedianCenter = ()=>{\r\n    const latlist = nodesArr.map(n => n['LatY'])\r\n    const lonlist = nodesArr.map(n => n['LonX'])\r\n    const medianCenter = (values)=>{\r\n      if(values.length ===0) throw new Error(\"No inputs\");\r\n    \r\n      values.sort(function(a,b){\r\n        return a-b;\r\n      });\r\n    \r\n      var half = Math.floor(values.length / 2);\r\n      \r\n      if (values.length % 2)\r\n        return values[half];\r\n      \r\n      return (values[half - 1] + values[half]) / 2.0;\r\n    }\r\n\r\n    if (latlist.length > 0 && lonlist.length > 0) {\r\n      const medianLat = medianCenter(latlist)\r\n      const medianLon = medianCenter(lonlist)\r\n      nodesArr.forEach(function (n, i) {\r\n        n['distance to center'] = calDistanceFromLatLonInKm(medianLat, medianLon, latlist[i], lonlist[i])\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (nodesArr[0]['LonX'] && nodesArr[0]['LatY']) {\r\n    // calDIstanceToCenter();\r\n    calMedianCenter();\r\n  }\r\n\r\n  const shortestPathPairs = () => {\r\n    let pathFinder = path.aGreedy(graph);\r\n    const pathsArr = []\r\n    const pathsSet = new Set();\r\n\r\n\r\n\r\n    graph.forEachNode(function (fromnode) {\r\n\r\n      graph.forEachNode(function (tonode) {\r\n        if (fromnode.id !== tonode.id) {\r\n          const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n          const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n          // undirected graph:\r\n          // only add once for undirected graph \r\n          if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2)) ) {\r\n            pathsSet.add(pathKey1)\r\n            pathsSet.add(pathKey2)\r\n            pathsArr.push({\r\n             \"source\":fromnode.id,\r\n             \"target\":tonode.id,\r\n            \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n            \"distance\": calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n          \r\n           })\r\n          }\r\n           \r\n          //directed graph: \r\n        }\r\n\r\n      })\r\n\r\n    })\r\n    return pathsArr\r\n\r\n  }\r\n  // const pathsArr = shortestPathPairs();\r\n\r\n  const rank = pageRank(graph);\r\n  const betweenness = centrality.betweenness(graph);\r\n  const closeness = centrality.closeness(graph);\r\n  nodesArr = nodesArr.map(n => ({ ...n, node_id: n.id, closeness:closeness[n.id] , betweenness: betweenness[n.id],pagerank: rank[n.id], degree: parseInt(degreeDict[n.id] / 2) }));\r\n  const nodekeyList = Object.keys(nodesArr[0])\r\n  const nodePropertyTypes = {}\r\n  nodekeyList.forEach(function (k) {\r\n    nodePropertyTypes[k] = typeof (nodesArr[0][k])\r\n  })\r\n  const uniqueValue = {}\r\n  nodekeyList.forEach(function (k, i) {\r\n\r\n    if (nodePropertyTypes[k] == 'string') {\r\n      uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n    } else {\r\n      const valuea = nodesArr.map(function (el) { return el[k]; })\r\n      const minv = Math.min(...valuea)\r\n      const maxv = Math.max(...valuea)\r\n      uniqueValue[k] = [minv, maxv]\r\n    }\r\n  })\r\n  return {\r\n    rawGraph: { nodes: nodesArr, edges: edgesArr },\r\n    metadata: {\r\n      snapshotName: 'Untitled Graph',\r\n      fullNodes: nodesArr.length,\r\n      fullEdges: edgesArr.length, //Math.floor(edgesArr.length / 2), // Counting undirected edges\r\n      nodeProperties: nodekeyList,\r\n      nodePropertyTypes: nodePropertyTypes,\r\n      uniqueValue: uniqueValue,\r\n      nodeComputed: ['pagerank', 'degree',  'distance to center',  'betweenness', 'closeness'],\r\n      edgeProperties: ['source_id', 'target_id'],\r\n     \r\n    },\r\n  }\r\n}\r\n\r\nexport function runSearch(searchStr) {\r\n  ipcRenderer.send(SEARCH_REQUEST, searchStr, appState.graph.searchOrder);\r\n}\r\n\r\nexport function fetchWorkspaceProjects() {\r\n  ipcRenderer.send(FETCH_WORKSPACE_PROJECTS);\r\n}\r\n\r\nexport function requestCreateNewProject(projectMetadata) {\r\n  ipcRenderer.send(CREATE_NEW_PROJECT, projectMetadata);\r\n}\r\n\r\nexport function requestOpenWorkspaceFolder() {\r\n  ipcRenderer.send(SHOW_WORKSPACE_FOLDER);\r\n}\r\n\r\nexport function requestLoadUserConfig() {\r\n  ipcRenderer.send(LOAD_USER_CONFIG);\r\n}\r\n\r\nexport function requestSaveUserConfig(userConfig) {\r\n  ipcRenderer.send(SAVE_USER_CONFIG, userConfig);\r\n}\r\n\r\nexport function requestChangeWorkspace() {\r\n  ipcRenderer.send(CHANGE_WORKSPACE_FOLDER);\r\n}","var $ = require(\"jquery\");\r\nfunction Edge(source, target) {\r\n  this.source = source;\r\n  this.target = target;\r\n  this.renderData = {};\r\n}\r\n\r\nfunction Node(id, size = 0.5) {\r\n  this.id = id;\r\n  this.index = id;\r\n  this.in = [];\r\n  this.out = [];\r\n  this.size = size;\r\n  this.renderData = {};\r\n  this.domainData = {};\r\n  this.x = 1;\r\n  this.y = 1;\r\n  this.vx = 1;\r\n  this.vy = 1;\r\n\r\n  /**\r\n   * Tells if a node is connected to a node of a certain id\r\n   */\r\n  this.connectedTo = function(id) {\r\n    outNodeIds = this.out.map(function(outNode) {\r\n      return outNode.id;\r\n    });\r\n    return $.inArray(id, outNodeIds) >= 0;\r\n  };\r\n}\r\n\r\nNode.prototype.connectNode = function(node) {\r\n  if (!this.connectedTo(node.id)) {\r\n    this.out.push(node);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.Edge = Edge;\r\nexports.Node = Node;\r\n","var THREE = require(\"three\");\r\n\r\nTHREE.MeshLine = function() {\r\n  this.positions = [];\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n  this.counters = [];\r\n  this.geometry = new THREE.BufferGeometry();\r\n\r\n  this.widthCallback = null;\r\n};\r\n\r\nTHREE.MeshLine.prototype.setGeometry = function(g, c) {\r\n  this.widthCallback = c;\r\n\r\n  this.positions = [];\r\n  this.counters = [];\r\n\r\n  if (g instanceof THREE.Geometry) {\r\n    for (var j = 0; j < g.vertices.length; j++) {\r\n      var v = g.vertices[j];\r\n      var c = j / g.vertices.length;\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.positions.push(v.x, v.y, v.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  if (g instanceof THREE.BufferGeometry) {\r\n    // read attribute positions ?\r\n  }\r\n\r\n  if (g instanceof Float32Array || g instanceof Array) {\r\n    for (var j = 0; j < g.length; j += 3) {\r\n      var c = j / g.length;\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.positions.push(g[j], g[j + 1], g[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n\r\n  this.process();\r\n};\r\n\r\nTHREE.MeshLine.prototype.compareV3 = function(a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nTHREE.MeshLine.prototype.copyV3 = function(a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nTHREE.MeshLine.prototype.process = function() {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n  }\r\n\r\n  var w;\r\n  for (var j = 0; j < l; j++) {\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n  }\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n  }\r\n\r\n  var v;\r\n\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  for (var j = 0; j < l - 1; j++) {\r\n    v = this.copyV3(j);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  for (var j = 1; j < l; j++) {\r\n    v = this.copyV3(j);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n  }\r\n\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l - 1; j++) {\r\n    var n = j * 2;\r\n    this.indices_array.push(n, n + 1, n + 2);\r\n    this.indices_array.push(n + 2, n + 1, n + 3);\r\n  }\r\n\r\n  if (!this.attributes) {\r\n    this.attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n    };\r\n  } else {\r\n    this.attributes.position.copyArray(new Float32Array(this.positions));\r\n    this.attributes.position.needsUpdate = true;\r\n    this.attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this.attributes.previous.needsUpdate = true;\r\n    this.attributes.next.copyArray(new Float32Array(this.next));\r\n    this.attributes.next.needsUpdate = true;\r\n    this.attributes.side.copyArray(new Float32Array(this.side));\r\n    this.attributes.side.needsUpdate = true;\r\n    this.attributes.width.copyArray(new Float32Array(this.width));\r\n    this.attributes.width.needsUpdate = true;\r\n    this.attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this.attributes.uv.needsUpdate = true;\r\n    this.attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this.attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.geometry.addAttribute(\"position\", this.attributes.position);\r\n  this.geometry.addAttribute(\"previous\", this.attributes.previous);\r\n  this.geometry.addAttribute(\"next\", this.attributes.next);\r\n  this.geometry.addAttribute(\"side\", this.attributes.side);\r\n  this.geometry.addAttribute(\"width\", this.attributes.width);\r\n  this.geometry.addAttribute(\"uv\", this.attributes.uv);\r\n  this.geometry.addAttribute(\"counters\", this.attributes.counters);\r\n\r\n  this.geometry.setIndex(this.attributes.index);\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nTHREE.MeshLine.prototype.advance = function(position) {\r\n  var positions = this.attributes.position.array;\r\n  var previous = this.attributes.previous.array;\r\n  var next = this.attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this.attributes.position.needsUpdate = true;\r\n  this.attributes.previous.needsUpdate = true;\r\n  this.attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.MeshLineMaterial = function(parameters) {\r\n  var vertexShaderSource = [\r\n    \"precision highp float;\",\r\n    \"\",\r\n    \"attribute vec3 position;\",\r\n    \"attribute vec3 previous;\",\r\n    \"attribute vec3 next;\",\r\n    \"attribute float side;\",\r\n    \"attribute float width;\",\r\n    \"attribute vec2 uv;\",\r\n    \"attribute float counters;\",\r\n    \"\",\r\n    \"uniform mat4 projectionMatrix;\",\r\n    \"uniform mat4 modelViewMatrix;\",\r\n    \"uniform vec2 resolution;\",\r\n    \"uniform float lineWidth;\",\r\n    \"uniform vec3 color;\",\r\n    \"uniform float opacity;\",\r\n    \"uniform float near;\",\r\n    \"uniform float far;\",\r\n    \"uniform float sizeAttenuation;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"vec2 fix( vec4 i, float aspect ) {\",\r\n    \"\",\r\n    \"    vec2 res = i.xy / i.w;\",\r\n    \"    res.x *= aspect;\",\r\n    \"\t vCounters = counters;\",\r\n    \"    return res;\",\r\n    \"\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    float aspect = resolution.x / resolution.y;\",\r\n    \"\t float pixelWidthRatio = 1. / (resolution.x * projectionMatrix[0][0]);\",\r\n    \"\",\r\n    \"    vColor = vec4( color, opacity );\",\r\n    \"    vUV = uv;\",\r\n    \"\",\r\n    \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n    \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n    \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n    \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n    \"\",\r\n    \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n    \"    vec2 prevP = fix( prevPos, aspect );\",\r\n    \"    vec2 nextP = fix( nextPos, aspect );\",\r\n    \"\",\r\n    \"\t float pixelWidth = finalPosition.w * pixelWidthRatio;\",\r\n    \"    float w = 1.8 * pixelWidth * lineWidth * width;\",\r\n    \"\",\r\n    \"    if( sizeAttenuation == 1. ) {\",\r\n    \"        w = 1.8 * lineWidth * width;\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    vec2 dir;\",\r\n    \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n    \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n    \"    else {\",\r\n    \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n    \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n    \"        dir = normalize( dir1 + dir2 );\",\r\n    \"\",\r\n    \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n    \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n    \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n    \"\",\r\n    \"    }\",\r\n    \"\",\r\n    \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n    \"    vec2 normal = vec2( -dir.y, dir.x );\",\r\n    \"    normal.x /= aspect;\",\r\n    \"    normal *= .5 * w;\",\r\n    \"\",\r\n    \"    vec4 offset = vec4( normal * side, 0.0, 1.0 );\",\r\n    \"    finalPosition.xy += offset.xy;\",\r\n    \"\",\r\n    \"\t vPosition = ( modelViewMatrix * vec4( position, 1. ) ).xyz;\",\r\n    \"    gl_Position = finalPosition;\",\r\n    \"\",\r\n    \"}\"\r\n  ];\r\n\r\n  var fragmentShaderSource = [\r\n    \"#extension GL_OES_standard_derivatives : enable\",\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D map;\",\r\n    \"uniform float useMap;\",\r\n    \"uniform float useDash;\",\r\n    \"uniform vec2 dashArray;\",\r\n    \"uniform float visibility;\",\r\n    \"uniform float alphaTest;\",\r\n    \"\",\r\n    \"varying vec2 vUV;\",\r\n    \"varying vec4 vColor;\",\r\n    \"varying vec3 vPosition;\",\r\n    \"varying float vCounters;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"\",\r\n    \"    vec4 c = vColor;\",\r\n    \"\t if( c.a < alphaTest ) discard;\",\r\n    \"    if( useMap == 1. ) c *= texture2D( map, vUV );\",\r\n    \"\t if( useDash == 1. ){\",\r\n    \"\t \t \",\r\n    \"\t }\",\r\n    \"    gl_FragColor = c;\",\r\n    \"\t gl_FragColor.a *= step(vCounters,visibility);\",\r\n    \"}\"\r\n  ];\r\n\r\n  function check(v, d) {\r\n    if (v === undefined) return d;\r\n    return v;\r\n  }\r\n\r\n  THREE.Material.call(this);\r\n\r\n  parameters = parameters || {};\r\n\r\n  this.lineWidth = check(parameters.lineWidth, 1);\r\n  this.map = check(parameters.map, null);\r\n  this.useMap = check(parameters.useMap, 0);\r\n  this.color = check(parameters.color, new THREE.Color(0xffffff));\r\n  this.opacity = check(parameters.opacity, 1);\r\n  this.resolution = check(parameters.resolution, new THREE.Vector2(1, 1));\r\n  this.sizeAttenuation = check(parameters.sizeAttenuation, 1);\r\n  this.near = check(parameters.near, 1);\r\n  this.far = check(parameters.far, 1);\r\n  this.dashArray = check(parameters.dashArray, []);\r\n  this.useDash = this.dashArray !== [] ? 1 : 0;\r\n  this.visibility = check(parameters.visibility, 1);\r\n  this.alphaTest = check(parameters.alphaTest, 0);\r\n\r\n  var material = new THREE.RawShaderMaterial({\r\n    uniforms: {\r\n      lineWidth: { type: \"f\", value: this.lineWidth },\r\n      map: { type: \"t\", value: this.map },\r\n      useMap: { type: \"f\", value: this.useMap },\r\n      color: { type: \"c\", value: this.color },\r\n      opacity: { type: \"f\", value: this.opacity },\r\n      resolution: { type: \"v2\", value: this.resolution },\r\n      sizeAttenuation: { type: \"f\", value: this.sizeAttenuation },\r\n      near: { type: \"f\", value: this.near },\r\n      far: { type: \"f\", value: this.far },\r\n      dashArray: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.dashArray[0], this.dashArray[1])\r\n      },\r\n      useDash: { type: \"f\", value: this.useDash },\r\n      visibility: { type: \"f\", value: this.visibility },\r\n      alphaTest: { type: \"f\", value: this.alphaTest }\r\n    },\r\n    vertexShader: vertexShaderSource.join(\"\\r\\n\"),\r\n    fragmentShader: fragmentShaderSource.join(\"\\r\\n\")\r\n  });\r\n\r\n  delete parameters.lineWidth;\r\n  delete parameters.map;\r\n  delete parameters.useMap;\r\n  delete parameters.color;\r\n  delete parameters.opacity;\r\n  delete parameters.resolution;\r\n  delete parameters.sizeAttenuation;\r\n  delete parameters.near;\r\n  delete parameters.far;\r\n  delete parameters.dashArray;\r\n  delete parameters.visibility;\r\n  delete parameters.alphaTest;\r\n\r\n  material.type = \"MeshLineMaterial\";\r\n\r\n  material.setValues(parameters);\r\n\r\n  return material;\r\n};\r\n\r\nTHREE.MeshLineMaterial.prototype = Object.create(THREE.Material.prototype);\r\nTHREE.MeshLineMaterial.prototype.constructor = THREE.MeshLineMaterial;\r\n\r\nTHREE.MeshLineMaterial.prototype.copy = function(source) {\r\n  THREE.Material.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.near = source.near;\r\n  this.far = source.far;\r\n\r\n  return this;\r\n};\r\n\r\nexports.MeshLine = THREE.MeshLine;\r\nexports.MeshLineMaterial = THREE.MeshLineMaterial;\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { linkVertical } = require(\"d3\");\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  self.selectNode = function (node) {\r\n    self.dragging = node;\r\n    self.selection = [node];\r\n    node.renderData.isSelected = true;\r\n    self.updateSelection(self.mouseX, self.mouseY);\r\n  };\r\n\r\n  /**\r\n   * Deselect nodes in selection list\r\n   */\r\n  self.clearSelection = function () {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.selection[i].renderData.isSelected = false;\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = false;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n      }\r\n      self.selection[i].renderData.textHolder.children[0].element.hideme = true;\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  //return all the edges within the selected nodes \r\n  self.getEdgeWithinSelection = function (selection) {\r\n    const withinEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if (selection[i] && selection[i].linkObjs) {\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1) && link.source !== link.target && withinEdges.indexOf(link) == -1) {\r\n            withinEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n  // //return all the edges within and out the selected nodes \r\n  // self.getEdgeOfCommonSetSelection = function (selection, commonnodes) {\r\n  //   const withinoutEdges = []\r\n  //   for (var i = 0; i < selection.length; i++) {\r\n  //     if (selection[i] && selection[i].linkObjs) {\r\n  //       selection[i].linkObjs.forEach(function (link) {\r\n  //         if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1) && link.source !== link.target && withinoutEdges.indexOf(link) == -1) {\r\n  //           withinoutEdges.push(link)\r\n  //         }\r\n  //       })\r\n  //     }\r\n  //   }\r\n  //   return withinoutEdges;\r\n  // }\r\n\r\n\r\n  //return all the edges within and out the selected nodes \r\n  self.getEdgeWithinOutSelection = function (selection) {\r\n    const withinoutEdges = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if (selection[i] && selection[i].linkObjs) {\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          if ((selection.indexOf(link.source) !== -1 || selection.indexOf(link.target) !== -1) && link.source !== link.target && withinoutEdges.indexOf(link) == -1) {\r\n            withinoutEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinoutEdges;\r\n  }\r\n\r\n  self.findIntersection= function(arrays) {\r\n    if (!Array.isArray(arrays) || arrays.length === 0) {\r\n      return [];\r\n    }\r\n  \r\n    return arrays.reduce((intersection, currentArray) => {\r\n      if (!Array.isArray(currentArray)) {\r\n        return intersection;\r\n      }\r\n  \r\n      return intersection.filter((value) => currentArray.includes(value));\r\n    });\r\n  }\r\n  \r\n\r\n  self.getCommonNodesBetweenSets = function(selectionsets){\r\n    const setsnodes = selectionsets.map(selection=>{\r\n      const onesetlinks = selection.map(node => node.linkObjs).flat().filter(item => item !== undefined && item !== null);\r\n      const onesetinoutnodes = onesetlinks.map(link=>[link.source,link.target]).flat();\r\n      return onesetinoutnodes\r\n    })\r\n    const commonnodes = self.findIntersection(setsnodes)\r\n    return self.uniqueArrayByAttribute(commonnodes, 'id')\r\n  }\r\n\r\n  //return all the edges within distance \r\n  self.getEdgeWithinDist = function (mindist, maxdist) {\r\n    const withinoutEdges = []\r\n    self.graph.forEachNode(n => {\r\n      if (n.linkObjs && n.linkObjs.length > 0) {\r\n        n.linkObjs.forEach(function (link) {\r\n          if (link.edgeDist > mindist && link.edgeDist < maxdist) {\r\n            withinoutEdges.push(link)\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    return withinoutEdges;\r\n  }\r\n\r\n\r\n  self.getEdgeWithinSelectionForDensity = function (selection) {\r\n    const withinEdges = []\r\n    const edgekeys = []\r\n    for (var i = 0; i < selection.length; i++) {\r\n      if (selection[i] && selection[i].linkObjs) {\r\n        selection[i].linkObjs.forEach(function (link) {\r\n          const key1 = `${link.source.id}👉 ${link.target.id}`\r\n          const key2 = `${link.target.id}👉 ${link.source.id}`\r\n          if ((selection.indexOf(link.source) !== -1 && selection.indexOf(link.target) !== -1) && link.source !== link.target && edgekeys.indexOf(key1) == -1) {\r\n            withinEdges.push(link)\r\n            edgekeys.push(key1)\r\n            edgekeys.push(key2)\r\n            // edgecount = edgecount+1\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return withinEdges;\r\n  }\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateDegreeHistOpacity = function () {\r\n    if (self.degreehighlight.length > 0) {\r\n      if (self.degreehighlight.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.degreehighlight[0].data.ref.LatY, self.degreehighlight[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX, self.degreehighlight[0]['LatY'], self.degreehighlight[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n\r\n\r\n        });\r\n      }\r\n      else {\r\n        self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n          self.colorNodeOpacity(n, 0.2);\r\n\r\n        });\r\n        // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n        //fisrt dehighlight all the edges\r\n        self.lineIndices.forEach(function (link) {\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        })\r\n\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        const withinEdges = self.getEdgeWithinSelection(self.degreehighlight)\r\n\r\n        for (var i = 0; i < withinEdges.length; i++) {\r\n          withinEdges[i].linecolor.r = red;\r\n          withinEdges[i].linecolor.g = blue;\r\n          withinEdges[i].linecolor.b = green;\r\n        }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n        //highlight nodes \r\n        for (var i = 0; i < self.degreehighlight.length; i++) {\r\n          self.colorNodeOpacity(self.degreehighlight[i], 1);\r\n        }\r\n\r\n      }\r\n    } else {        //when no nodes satisfying the condition, all 0.2 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 0.2);\r\n\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n\r\n  //highlight nodes and edges within selection\r\n  self.updateSelectionOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX, self.selection[0]['LatY'], self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n\r\n\r\n        });\r\n      }\r\n      else {\r\n        self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n          self.colorNodeOpacity(n, 0.2);\r\n\r\n        });\r\n        // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n        //fisrt dehighlight all the edges\r\n        self.lineIndices.forEach(function (link) {\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        })\r\n\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        const withinEdges = self.getEdgeWithinSelection(self.selection)\r\n\r\n        for (var i = 0; i < withinEdges.length; i++) {\r\n          withinEdges[i].linecolor.r = red;\r\n          withinEdges[i].linecolor.g = blue;\r\n          withinEdges[i].linecolor.b = green;\r\n        }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n        //highlight nodes \r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.colorNodeOpacity(self.selection[i], 1);\r\n        }\r\n\r\n      }\r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n  self.highlightAllEdges = function () {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = red //black/white\r\n      link.linecolor.g = blue\r\n      link.linecolor.b = green\r\n    })\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n  }\r\n\r\n  //highlight  edges within distance range \r\n  self.highlightedgeWithinDist = function (mindist, maxdist) {\r\n\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    //fisrt dehighlight all the edges\r\n    self.lineIndices.forEach(function (link) {\r\n      if (link.edgeDist >= mindist && link.edgeDist <= maxdist) {\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      } else {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      }\r\n\r\n    })\r\n    self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    //hilight  edges within distance \r\n\r\n    // const withinEdges = self.getEdgeWithinDist(mindist,maxdist)\r\n\r\n    // for (var i = 0; i < withinEdges.length; i++) {\r\n    //   withinEdges[i].linecolor.r = red;\r\n    //   withinEdges[i].linecolor.g = blue;\r\n    //   withinEdges[i].linecolor.b = green;\r\n    // }\r\n    // self.arrow.material.color.setRGB(red, blue, green);\r\n  }\r\n\r\n  // highlight interset nodes of the selection sets with lower transparency, nodes within selection are with lower transparency\r\n  self.updateSelectionInterOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX, self.selection[0]['LatY'], self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n\r\n\r\n        });\r\n      }\r\n      else {\r\n        \r\n        // self.colorNodeEdge(null);    // this is to highlight all \r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n         if (appState.graph.mapClickedArray.length > 0) {\r\n          const mapClickedArraryID = appState.graph.mapClickedArray.map(n => n.id)\r\n          const interSetNodesID = appState.graph.interSetNodes.map(n => n.id)\r\n          // const selectionID = appState.graph.selectedSets.map(n => n.id)\r\n          self.lineIndices.forEach(function (link) {\r\n            if(((interSetNodesID.indexOf(link.source.id) !== -1) && (mapClickedArraryID.indexOf(link.target.id) !== -1)) || ((interSetNodesID.indexOf(link.target.id) !== -1) && (mapClickedArraryID.indexOf(link.source.id) !== -1)))\r\n            {\r\n            link.linecolor.r = red \r\n            link.linecolor.g = blue\r\n            link.linecolor.b = green\r\n            }else{\r\n            link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n            link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n            link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n            }\r\n            \r\n          })\r\n          \r\n        } else {//dehighlight all the edges, when perform intersection between drag selected sets but not between egocentric networks\r\n          self.lineIndices.forEach(function (link) {\r\n            link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n            link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n            link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n          })\r\n        }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n        self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n          self.colorNodeOpacity(n, 0.2);\r\n\r\n        });\r\n        //slightly highlight nodes in selection\r\n        for (var i = 0; i < appState.graph.selectedNodes.length; i++) { \r\n          self.colorNodeOpacity(appState.graph.selectedNodes[i], 0.5);\r\n        }\r\n\r\n        //highlight nodes in intersection \r\n        for (var i = 0; i < appState.graph.interSetNodes.length; i++) {\r\n          self.colorNodeOpacity(appState.graph.interSetNodes[i], 1);\r\n        }\r\n\r\n      }\r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n  // highlight common nodes of the selection sets with lower transparency, nodes within selection are highlighted\r\n  self.updateSelectionCommonOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX, self.selection[0]['LatY'], self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n\r\n\r\n        });\r\n      }\r\n      else {\r\n        self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n          self.colorNodeOpacity(n, 0.2);\r\n\r\n        });\r\n        // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n        // //fisrt dehighlight all the edges\r\n        // self.lineIndices.forEach(function (link) {\r\n        //   link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //   link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //   link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        // const withinEdges = self.getEdgeWithinOutSelection(self.selection)\r\n\r\n         //fisrt dehighlight all the edges\r\n         const commonSetNodesID = appState.graph.commonSetNodes.map(n=>n.id)\r\n         const selectionID = self.selection.map(n=>n.id)\r\n         self.lineIndices.forEach(function (link) {\r\n          if(((commonSetNodesID.indexOf(link.source.id) !== -1) && (selectionID.indexOf(link.target.id) !== -1)) || ((commonSetNodesID.indexOf(link.target.id) !== -1) && (selectionID.indexOf(link.source.id) !== -1)) ){\r\n          link.linecolor.r = red \r\n          link.linecolor.g = blue\r\n          link.linecolor.b = green\r\n          }else{\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n          }\r\n          \r\n        })\r\n       \r\n\r\n        // for (var i = 0; i < withinEdges.length; i++) {\r\n        //   withinEdges[i].linecolor.r = red;\r\n        //   withinEdges[i].linecolor.g = blue;\r\n        //   withinEdges[i].linecolor.b = green;\r\n        // }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n\r\n        //slightly highlight common nodes\r\n        for (var i = 0; i < appState.graph.commonSetNodes.length; i++) {\r\n          // slightly highlight neighbors \r\n          // const neighborNodes = self.getNeighborNodesFromGraph(self.selection[i])\r\n          // for (var i = 0; i < neighborNodes.length; i++) {\r\n          //   self.colorNodeOpacity(neighborNodes[i], 0.5);\r\n          // }\r\n          //fully highlight nodes \r\n          self.colorNodeOpacity(appState.graph.commonSetNodes[i], 0.5);\r\n        }\r\n\r\n\r\n        //highlight nodes in selections\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          // slightly highlight neighbors \r\n          // const neighborNodes = self.getNeighborNodesFromGraph(self.selection[i])\r\n          // for (var i = 0; i < neighborNodes.length; i++) {\r\n          //   self.colorNodeOpacity(neighborNodes[i], 0.5);\r\n          // }\r\n          //fully highlight nodes \r\n          self.colorNodeOpacity(self.selection[i], 1);\r\n        }\r\n\r\n      }\r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n  //highlight map selected nodes: highlight nodes and edges branching out from selection and neighbor nodes of the selection with lower transparency\r\n  self.updateSelectionOutOpacity = function () {\r\n    // if()\r\n    if (self.selection.length > 0) {\r\n      if (self.selection.length == 1 && appState.graph.colorByDistance) {\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n          var p = 0.017453292519943295;    // Math.PI / 180\r\n          var c = Math.cos;\r\n          var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n            c(lat1 * p) * c(lat2 * p) *\r\n            (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n          return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n        var sumOfAllDistance = 0;\r\n        var n = 0;\r\n        var max = 0;\r\n        self.graph.forEachNode(n => {\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX)\r\n          if (dist > max) {\r\n            max = dist;\r\n          }\r\n        })\r\n        self.graph.forEachNode(n => {\r\n          // self.colorNodeColor(n, \"#0000FF\");\r\n          var dist = calDistanceFromLatLonInKm(n.data.ref.LatY, n.data.ref.LonX, self.selection[0].data.ref.LatY, self.selection[0].data.ref.LonX);\r\n          console.log(n.data.ref.LatY, n.data.ref.LonX, self.selection[0]['LatY'], self.selection[0]['LatX'])\r\n          self.colorNode(n, 0x0000FF);\r\n          if (dist == 0) {\r\n            self.colorNodeOpacity(n, 1);\r\n          } else if (dist < max / 4) {\r\n            self.colorNodeOpacity(n, 0.2);\r\n          } else if (dist < (2 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.4);\r\n          } else if (dist < (3 * max) / 4) {\r\n            self.colorNodeOpacity(n, 0.6);\r\n          }\r\n          else {\r\n            self.colorNodeOpacity(n, 0.8);\r\n          }\r\n\r\n\r\n        });\r\n      }\r\n      else {\r\n        self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n          self.colorNodeOpacity(n, 0.2);\r\n\r\n        });\r\n        // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n        //fisrt dehighlight all the edges\r\n        self.lineIndices.forEach(function (link) {\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        })\r\n\r\n        //hilight within edges\r\n        let red = new THREE.Color(appState.graph.edges.color).r;\r\n        let blue = new THREE.Color(appState.graph.edges.color).g;\r\n        let green = new THREE.Color(appState.graph.edges.color).b;\r\n        const withinEdges = self.getEdgeWithinOutSelection(self.selection)\r\n\r\n        for (var i = 0; i < withinEdges.length; i++) {\r\n          withinEdges[i].linecolor.r = red;\r\n          withinEdges[i].linecolor.g = blue;\r\n          withinEdges[i].linecolor.b = green;\r\n        }\r\n        self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n\r\n        const allneighbors = withinEdges.map((e)=>e.source).concat(withinEdges.map((e)=>e.target))\r\n        for (var i = 0; i < allneighbors.length; i++) {\r\n          // slightly highlight neighbors \r\n          // const neighborNodes = self.getNeighborNodesFromGraph(self.selection[i])\r\n          // for (var i = 0; i < neighborNodes.length; i++) {\r\n          //   self.colorNodeOpacity(neighborNodes[i], 0.5);\r\n          // }\r\n          //fully highlight nodes \r\n          self.colorNodeOpacity(allneighbors[i], 0.5);\r\n        }\r\n\r\n\r\n        \r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          // slightly highlight neighbors \r\n          // const neighborNodes = self.getNeighborNodesFromGraph(self.selection[i])\r\n          // for (var i = 0; i < neighborNodes.length; i++) {\r\n          //   self.colorNodeOpacity(neighborNodes[i], 0.5);\r\n          // }\r\n          //fully highlight nodes \r\n          self.colorNodeOpacity(self.selection[i], 1);\r\n        }\r\n\r\n      }\r\n    }\r\n    else {        //when no nodes are selected, all 1 opacity \r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n\r\n      });\r\n      self.colorNodeEdge(null);\r\n    }\r\n  }\r\n\r\n  //highlight clicked nodes and their neighbors\r\n  self.highlightClickArrayNode = function (nodearray) {\r\n    if (nodearray.length>0) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n\r\n      });\r\n      //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //   //fisrt dehighlight all the edges\r\n      //   self.lineIndices.forEach(function (link) {\r\n      //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      //   })  \r\n\r\n      //   //hilight neighbor edges\r\n      //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n      //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n      //   const withinEdges = node.linkObjs\r\n\r\n      //   for (var i = 0; i < withinEdges.length; i++) {\r\n      //     withinEdges[i].linecolor.r = red;\r\n      //     withinEdges[i].linecolor.g = blue;\r\n      //     withinEdges[i].linecolor.b = green;\r\n      //   }\r\n      //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      nodearray.forEach(node=>{\r\n        const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n      self.colorNodeArrayEdge(nodearray);\r\n      })\r\n      \r\n\r\n      // } else {        //when no nodes are given, all 1 opacity \r\n      //   self.graph.forEachNode(n => {\r\n      //     self.colorNodeOpacity(n, 1);\r\n\r\n      //   });\r\n      //   self.colorNodeEdge(null);\r\n      // }\r\n\r\n\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  //highlight a single clicked node and its neighbor edges only\r\n  self.highlightClickNode = function (node) {\r\n    if (node) {\r\n      self.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        self.colorNodeOpacity(n, 0.2);\r\n\r\n      });\r\n      //   // self.colorNodeEdge(null);    // this is to highlight all \r\n\r\n      //   //fisrt dehighlight all the edges\r\n      //   self.lineIndices.forEach(function (link) {\r\n      //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      //   })  \r\n\r\n      //   //hilight neighbor edges\r\n      //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n      //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n      //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n      //   const withinEdges = node.linkObjs\r\n\r\n      //   for (var i = 0; i < withinEdges.length; i++) {\r\n      //     withinEdges[i].linecolor.r = red;\r\n      //     withinEdges[i].linecolor.g = blue;\r\n      //     withinEdges[i].linecolor.b = green;\r\n      //   }\r\n      //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n      //highlight nodes \r\n      const neighborNodes = self.getNeighborNodesFromGraph(node)\r\n      for (var i = 0; i < neighborNodes.length; i++) {\r\n        self.colorNodeOpacity(neighborNodes[i], 1);\r\n      }\r\n\r\n      // } else {        //when no nodes are given, all 1 opacity \r\n      //   self.graph.forEachNode(n => {\r\n      //     self.colorNodeOpacity(n, 1);\r\n\r\n      //   });\r\n      //   self.colorNodeEdge(null);\r\n      // }\r\n\r\n\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      self.colorNodeEdge(node);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  self.getNeighborNodesFromGraph = function (node) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (!node) return\r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n  // get only neighbors from a set of nodes, exclude selected nodes, only neighbors\r\n  self.getOnlyNeighborNodesFromGraph = function (nodes) {\r\n    const nodeNeighbor = []\r\n    const froms = []\r\n    const tos = []\r\n    if (nodes.length < 1) return\r\n    for (var i = 0; i < node.links.length; i++) {\r\n      froms.push(node.links[i].fromId);\r\n      tos.push(node.links[i].toId);\r\n    }\r\n    self.graph.forEachNode(n => {\r\n      if (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1) {\r\n        nodeNeighbor.push(n)\r\n      }\r\n    })\r\n    return nodeNeighbor\r\n  }\r\n\r\n\r\n  /**\r\n   *  Update positions of all objects in self.selection\r\n   *  based on diff between mouse position and self.dragging position\r\n   */\r\n  self.updateSelection = function (mouseX, mouseY, selection) {\r\n    if (self.dragging) {\r\n      var diffx = mouseX - self.dragging.x;\r\n      var diffy = mouseY - self.dragging.y;\r\n    }\r\n\r\n    //'selection' only passed if a single node is double clicked\r\n    let clickedNode = selection;\r\n    //if not already pinned, then pin the node upon double-click\r\n    if (clickedNode && !clickedNode.pinnedx) {\r\n      clickedNode.pinnedx = true;\r\n      clickedNode.pinnedy = true;\r\n      appState.graph.mapClicked = clickedNode\r\n      self.highlightNode(clickedNode, true);\r\n      self.highlightEdges(clickedNode, true);\r\n      const neighborNodes = self.getNeighborNodesFromGraph(clickedNode);\r\n      self.selection = neighborNodes;\r\n      // console.log(self.selection)\r\n    } else if (clickedNode && clickedNode.pinnedx) {\r\n      //if already pinned, then unpin upon double-click\r\n      clickedNode.pinnedx = false;\r\n      clickedNode.pinnedy = false;\r\n      appState.graph.mapClicked = null;\r\n\r\n\r\n      self.selection = []\r\n    }\r\n\r\n\r\n\r\n    // if(self.selection.length!==0){\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 0.2);\r\n    //   });\r\n    // }else{\r\n    //   self.graph.forEachNode(n => {\r\n    //     self.colorNodeOpacity(n, 1);\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      if (self.dragging) {\r\n        self.selection[i].x += diffx;\r\n        self.selection[i].y += diffy;\r\n        self.selection[i].fx = self.selection[i].x;\r\n        self.selection[i].fy = self.selection[i].y;\r\n        //pins multiple nodes when dragging\r\n        if (!clickedNode) {\r\n          self.selection[i].pinnedx = true;\r\n          self.selection[i].pinnedy = true;\r\n        }\r\n      }\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        self.selection[i].renderData.draw_object.children[0].visible = true;\r\n      } else {\r\n        self.selection[i].renderData.draw_object.material.color.set(\r\n          new THREE.Color(self.selection[i].renderData.color)\r\n        );\r\n        // self.colorNodeOpacity(self.selection[i], 1);\r\n\r\n      }\r\n      self.selection[\r\n        i\r\n      ].renderData.textHolder.children[0].element.hideme = false;\r\n    }\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   *  Find any objects within the current box selection and add it to self.selection\r\n   */\r\n  self.checkSelection = function (mouseX, mouseY) {\r\n    if (!self.dragging) {\r\n      self.mouseEnd = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (self.mouseStart.x < self.mouseEnd.x) {\r\n        var left = self.mouseStart;\r\n        var right = self.mouseEnd;\r\n      } else {\r\n        var left = self.mouseEnd;\r\n        var right = self.mouseStart;\r\n      }\r\n\r\n      self.graph.forEachNode(function (node) {\r\n        let npos;\r\n        if (self.options.layout == \"ngraph\") {\r\n          npos = self.force.getNodePosition(node.id);\r\n        } else if (self.options.layout == \"d3\") {\r\n          npos = node;\r\n        }\r\n        if (self.insideBox(left, right, npos.x, npos.y)) {\r\n          self.selection.push(node);\r\n          //indicates nodes were in selection box \r\n          //when mouse is lifted\r\n          //self.multNodesHighlighted = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  returns true if pos is in box with top left l and bottom right r\r\n   */\r\n  self.insideBox = function (l, r, posx, posy) {\r\n    return (\r\n      posx < r.x &&\r\n      posx > l.x &&\r\n      ((posy > r.y && posy < l.y) || (posy < r.y && posy > l.y))\r\n    );\r\n  };\r\n};","var Frame = require(\"./src/process\").Frame;\r\n\r\nexports.Frame = Frame;\r\n\r\nvar graph = require(\"ngraph.generators\").balancedBinTree(5);\r\n\r\nexports.graph = graph;\r\n\r\nif (window) {\r\n  window.Argo = exports;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/Snoman title.ea1f0722.png\";","module.exports = __webpack_public_path__ + \"static/media/Snoman logo.bf0e8895.png\";","import { Position, Toaster } from \"@blueprintjs/core\";\r\n\r\nexport const toaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n\r\nexport default toaster;\r\n","var THREE = require(\"three\");\r\nvar STATS = require(\"stats.js\");\r\nwindow.THREE = THREE;\r\nrequire(\"../include/QuickHull\");\r\nrequire(\"../include/ConvexGeometry\");\r\nrequire(\"../include/CSS3DRenderer\");\r\n// var Line2 = require(\"../src/lines/Line2\");\r\n// var LineGeometry = require(\"../src/lines/LineGeometry\");\r\n// var LineMaterial = require(\"../src/lines/LineMaterial\");\r\nvar Edge = require(\"./structure/node\").Edge;\r\nvar Node = require(\"./structure/node\").Node;\r\nvar OrbitControls = require(\"../include/OrbitControls\")(THREE); //'three-orbit-controls')(THREE);\r\nTHREE.MeshLine = require(\"../include/THREE.MeshLine\").MeshLine;\r\nTHREE.MeshLineMaterial = require(\"../include/THREE.MeshLine\").MeshLineMaterial;\r\nvar d3 = require(\"d3\");\r\nvar ee = require(\"event-emitter\");\r\nvar IS_IFRAME_WIDGET = require(\"../../constants\").IS_IFRAME_WIDGET;\r\n\r\nexports.default = {\r\n  THREE: THREE,\r\n  MeshLine: THREE.MeshLine,\r\n  MeshLineMaterial: THREE.MeshLineMaterial,\r\n  // Line2: Line2,\r\n  // LineGeometry: LineGeometry,\r\n  // LineMaterial: LineMaterial,\r\n  STATS: STATS, // stats.js panel for showing fps and other stats.\r\n  STATS_SHOW: false,\r\n  Edge: Edge,\r\n  Node: Node,\r\n  OrbitControls: OrbitControls,\r\n  d3: d3,\r\n  ee: ee,\r\n  NODE_COLOR: 0x0055aa,\r\n  NODE_HIGHLIGHT: 0x0055aa,\r\n  // NODE_HIGHLIGHT_RGB: 'rgb(219, 119, 52)',\r\n  ADJACENT_HIGHLIGHT: 0x95a5a6,\r\n  SEARCH_HIGHLIGHT: 0xe67e22,\r\n  NODE_HTEXTURE: \"http://i.imgur.com/xzkxSIw.png\",\r\n  NODE_TEXTURE: \"http://i.imgur.com/reTXqiM.png\",\r\n  NODE_NO_HTEX: true,\r\n  NODE_NO_TEX: true,\r\n  NODE_NO_HCOLOR: true,\r\n  NODE_NO_COLOR: false,\r\n  NODE_NO_HIGHLIGHT: false,\r\n  NODE_NEIGHBOR_HIGHLIGHT: true,\r\n  NODE_SHAPE: \"circle\",\r\n  NODE_HSHAPE: \"circle\",\r\n  NODE_SIZE: 5,\r\n  HIGHLIGHT_SIZE: 1.0,\r\n  LAYOUT: \"d3\",\r\n  LINES: \"nofancy\",\r\n  MAP: false,\r\n  MAP_RENDER_PER_NUMBER_OF_FRAME: 10,\r\n  TEXT_SCALE: true,\r\n  TEXT_SIZE: 0.07,\r\n  TEXT_X_OFFSET: 0.52,\r\n  TEXT_Y_OFFSET: 0.35,\r\n  TEXT_BACK_COLOR: \"rgba(100, 100, 200, 0)\",\r\n  TEXT_OPACITY: \"1\",\r\n  TEXT_WIREFRAME: false,\r\n  PIN_COLOR: 0xFFA500\r\n};\r\n","const { observable } = require(\"mobx\");\r\n\r\nvar def = require(\"./imports\").default;\r\nconst spawn = require(\"threads\").spawn;\r\nvar THREE = def.THREE;\r\nvar STATS = def.STATS;\r\nvar STATS_SHOW = def.STATS_SHOW;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nvar Frame = function(graph, options) {\r\n  // Needed to reference \"this\" in functions\r\n  var self = this;\r\n  appState.graph.process = this;\r\n  // Options\r\n  this.inGraph = graph;\r\n  this.options = options || {\r\n    layout: def.LAYOUT\r\n  };\r\n  this.layout_options = this.options.graphLayout || {};\r\n\r\n  this.lineObjects = [];\r\n  this.lineIndices = [];\r\n  this.MAX_LINES = 100000;\r\n  this.textureLoader = new THREE.TextureLoader();\r\n  this.textureLoader.crossOrigin = true;\r\n  this.oldIntersect = -1;\r\n\r\n  this.selection = [];\r\n \r\n  this.fov = 60;\r\n  this.near = 1;\r\n  this.far = 5000;\r\n  this.mouseStart = new THREE.Vector3(0, 0, 0);\r\n  this.mouseEnd = new THREE.Vector3(0, 0, 0);\r\n  this.dragging = null;\r\n  this.lastTimeSelectionLength = 0;\r\n  this.showBox = false;\r\n  this.renderWidth = 1000;\r\n  this.renderHeight = 1000;\r\n  this.maxZoom = 1000;\r\n  this.paused = false;\r\n  this.mouseDown = false;\r\n  this.ee = ee({});\r\n  this.layoutInit = true;\r\n  this.labelSize = 6;\r\n  this.relativeFontSize = 1;\r\n  this.mapShowing = def.MAP;\r\n  this.mapRenderPerNumberOfFrame = def.MAP_RENDER_PER_NUMBER_OF_FRAME;\r\n  this.darkMode = false;\r\n  this.lastNode = null;\r\n  this.rightClickedNode = null;\r\n  this.doHighlightNeighbors = def.NODE_NEIGHBOR_HIGHLIGHT;\r\n  this.prevHighlights = [];\r\n  this.hull = null;\r\n\r\n  require(\"./utils/utils\")(this);\r\n  require(\"./setup\")(this);\r\n  require(\"./addremove\")(this);\r\n  require(\"./highlighting\")(this);\r\n  require(\"./select\")(this);\r\n  require(\"./mouse\")(this);\r\n  require(\"./modify\")(this);\r\n  require(\"./draw\")(this);\r\n  require(\"./api\")(this);\r\n  require(\"./update\")(this);\r\n\r\n  /**\r\n   *  Starting point, run once to create scene\r\n   */\r\n  let stats = new STATS();\r\n  this.display = function() {\r\n    if (STATS_SHOW) {\r\n      stats.showPanel(0); // show fps panel\r\n      document.body.appendChild(stats.dom);\r\n    }\r\n    this.animate();\r\n  };\r\n\r\n  /**\r\n   *  Creates loop called on every animation frame\r\n   */\r\n  \r\n  let fps = 30;\r\n  // let now;\r\n  // let then = Date.now();\r\n  // let interval = 1000 / fps;\r\n  // let delta;\r\n  this.animate = function() {\r\n    if (STATS_SHOW) {\r\n      stats.begin(); // Begin stats.js panel timing\r\n    }\r\n    \r\n    self.controls.update();\r\n    self.render();\r\n\r\n    if (STATS_SHOW) {\r\n      stats.end(); // End stats.js panel timing\r\n    }\r\n    \r\n    // now = Date.now();\r\n    // delta = now - then;\r\n    // if (delta > interval) {\r\n    //   then = now;\r\n    //   self.controls.update();\r\n    //   self.render();\r\n    // }\r\n    requestAnimationFrame(self.animate);\r\n  };\r\n\r\n  /**\r\n   *  Set initial properties\r\n   */\r\n  this.init = function(aa = true) {\r\n    self.renderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    self.minimapRenderer = new THREE.WebGLRenderer({\r\n      alpha: true,\r\n      antialias: aa,\r\n      preserveDrawingBuffer: true,\r\n    });\r\n    //self.renderer.setPixelRatio(window.devicePixelRatio);\r\n    //self.renderer.setPixelRatio(0.1);\r\n    self.setDisplayParams();\r\n    self.setRendererParams();\r\n\r\n    self.setupCamera();\r\n    self.setupMinimap();\r\n    self.setupGeometry();\r\n    self.setupSelect();\r\n\r\n    // Make sure to clear children before setting up new frame.\r\n    self.element.innerHTML = \"\";\r\n    self.element.appendChild(self.renderer.domElement);\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.element.appendChild(self.minimapRenderer.domElement);\r\n\r\n    self.setupLayout();\r\n\r\n    self.setupGraph();\r\n\r\n    window.addEventListener(\r\n      \"resize\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n    window.addEventListener(\r\n      \"load\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        self.onWindowResize();\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Change camera on window resize\r\n   */\r\n  self.onWindowResize = function() {\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.clientRect.width;\r\n    self.height = self.clientRect.height;\r\n    self.minimap.width = 0.2 * self.height;\r\n    self.minimap.height = 0.2 * self.height;\r\n    self.aspect = self.width / self.height;\r\n    self.ccamera.aspect = self.aspect;\r\n    self.ccamera.updateProjectionMatrix();\r\n\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n  };\r\n\r\n  /**\r\n   *  Draws graphics\r\n   */\r\n  var stage = 0;\r\n  var numberOfFrameSinceMiniMapRerender = 1;\r\n  this.render = function() {\r\n    self.updateCamera();\r\n    self.updateNodes();\r\n    // self.paused = true;\r\n    if (stage == 1) {\r\n      self.updateLabels();\r\n      self.updateEdges();\r\n      stage = 0;\r\n    }\r\n    stage += 1;\r\n    numberOfFrameSinceMiniMapRerender += 1;\r\n    if (self.options.layout == \"d3\") {\r\n      if (self.layoutInit == true) {\r\n        var nodes = [];\r\n        self.graph.forEachNode(function(node) {\r\n          nodes.push(node);\r\n        });\r\n        self.force.nodes(nodes);\r\n        self.force.force(\"link\", d3.forceLink(self.lineIndices));\r\n        self.force.restart();\r\n        self.force.stop();\r\n        if (self.tickToStatic && !self.paused) {\r\n          // We don't tick and pause for now\r\n          for (\r\n            var i = 0,\r\n              n = Math.ceil(\r\n                Math.log(self.force.alphaMin()) /\r\n                  Math.log(1 - self.force.alphaDecay())\r\n              );\r\n            i < n;\r\n            ++i\r\n          ) {\r\n            self.force.tick();\r\n          }\r\n          //self.pauseLayout();\r\n        }\r\n        self.layoutInit = false;\r\n      }\r\n    }\r\n    self.renderer.setViewport(0, 0, self.width, self.height);\r\n    self.renderer.setScissor(0, 0, self.width, self.height);\r\n    self.renderer.setScissorTest(true);\r\n    self.renderer.render(self.scene, self.ccamera);\r\n    self.cssRenderer.render(self.scene, self.ccamera);\r\n\r\n    // Render MiniMap at a lower framerate.\r\n    if (numberOfFrameSinceMiniMapRerender >= this.mapRenderPerNumberOfFrame) {\r\n      numberOfFrameSinceMiniMapRerender = 0;\r\n\r\n      if (self.mapShowing) {\r\n        self.minimap.width = 0.2 * self.height;\r\n        self.minimap.height = 0.2 * self.height;\r\n        self.minimapRenderer.setViewport(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissor(0, 0, self.minimap.width, self.minimap.height);\r\n        self.minimapRenderer.setScissorTest(true);\r\n        self.minimapRenderer.render(self.scene, self.minimap.camera);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexports.Frame = Frame;\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n *\r\n */\r\n\r\n(function() {\r\n  var Visible = 0;\r\n  var Deleted = 1;\r\n\r\n  function QuickHull() {\r\n    this.tolerance = -1;\r\n\r\n    this.faces = []; // the generated faces of the convex hull\r\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n    // the vertex lists work as follows:\r\n    //\r\n    // let 'a' and 'b' be 'Face' instances\r\n    // let 'v' be points wrapped as instance of 'Vertex'\r\n    //\r\n    //     [v, v, ..., v, v, v, ...]\r\n    //      ^             ^\r\n    //      |             |\r\n    //  a.outside     b.outside\r\n    //\r\n    this.assigned = new VertexList();\r\n    this.unassigned = new VertexList();\r\n\r\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\r\n  }\r\n\r\n  Object.assign(QuickHull.prototype, {\r\n    setFromPoints: function(points) {\r\n      if (Array.isArray(points) !== true) {\r\n        console.error(\"THREE.QuickHull: Points parameter is not an array.\");\r\n      }\r\n\r\n      if (points.length < 4) {\r\n        console.error(\r\n          \"THREE.QuickHull: The algorithm needs at least four points.\"\r\n        );\r\n      }\r\n\r\n      this.makeEmpty();\r\n\r\n      for (var i = 0, l = points.length; i < l; i++) {\r\n        this.vertices.push(new VertexNode(points[i]));\r\n      }\r\n\r\n      this.compute();\r\n\r\n      return this;\r\n    },\r\n\r\n    setFromObject: function(object) {\r\n      var points = [];\r\n\r\n      object.updateMatrixWorld(true);\r\n\r\n      object.traverse(function(node) {\r\n        var i, l, point;\r\n\r\n        var geometry = node.geometry;\r\n\r\n        if (geometry !== undefined) {\r\n          if (geometry.isGeometry) {\r\n            var vertices = geometry.vertices;\r\n\r\n            for (i = 0, l = vertices.length; i < l; i++) {\r\n              point = vertices[i].clone();\r\n              point.applyMatrix4(node.matrixWorld);\r\n\r\n              points.push(point);\r\n            }\r\n          } else if (geometry.isBufferGeometry) {\r\n            var attribute = geometry.attributes.position;\r\n\r\n            if (attribute !== undefined) {\r\n              for (i = 0, l = attribute.count; i < l; i++) {\r\n                point = new THREE.Vector3();\r\n\r\n                point\r\n                  .fromBufferAttribute(attribute, i)\r\n                  .applyMatrix4(node.matrixWorld);\r\n\r\n                points.push(point);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return this.setFromPoints(points);\r\n    },\r\n\r\n    makeEmpty: function() {\r\n      this.faces = [];\r\n      this.vertices = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n    addVertexToFace: function(vertex, face) {\r\n      vertex.face = face;\r\n\r\n      if (face.outside === null) {\r\n        this.assigned.append(vertex);\r\n      } else {\r\n        this.assigned.insertBefore(face.outside, vertex);\r\n      }\r\n\r\n      face.outside = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n    removeVertexFromFace: function(vertex, face) {\r\n      if (vertex === face.outside) {\r\n        // fix face.outside link\r\n\r\n        if (vertex.next !== null && vertex.next.face === face) {\r\n          // face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n          face.outside = vertex.next;\r\n        } else {\r\n          // vertex was the only outside vertex that face had\r\n\r\n          face.outside = null;\r\n        }\r\n      }\r\n\r\n      this.assigned.remove(vertex);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\r\n\r\n    removeAllVerticesFromFace: function(face) {\r\n      if (face.outside !== null) {\r\n        // reference to the first and last vertex of this face\r\n\r\n        var start = face.outside;\r\n        var end = face.outside;\r\n\r\n        while (end.next !== null && end.next.face === face) {\r\n          end = end.next;\r\n        }\r\n\r\n        this.assigned.removeSubList(start, end);\r\n\r\n        // fix references\r\n\r\n        start.prev = end.next = null;\r\n        face.outside = null;\r\n\r\n        return start;\r\n      }\r\n    },\r\n\r\n    // Removes all the visible vertices that 'face' is able to see\r\n\r\n    deleteFaceVertices: function(face, absorbingFace) {\r\n      var faceVertices = this.removeAllVerticesFromFace(face);\r\n\r\n      if (faceVertices !== undefined) {\r\n        if (absorbingFace === undefined) {\r\n          // mark the vertices to be reassigned to some other face\r\n\r\n          this.unassigned.appendChain(faceVertices);\r\n        } else {\r\n          // if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n          var vertex = faceVertices;\r\n\r\n          do {\r\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n            // will be changed by upcoming method calls\r\n\r\n            var nextVertex = vertex.next;\r\n\r\n            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n\r\n            // check if 'vertex' is able to see 'absorbingFace'\r\n\r\n            if (distance > this.tolerance) {\r\n              this.addVertexToFace(vertex, absorbingFace);\r\n            } else {\r\n              this.unassigned.append(vertex);\r\n            }\r\n\r\n            // now assign next vertex\r\n\r\n            vertex = nextVertex;\r\n          } while (vertex !== null);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n    resolveUnassignedPoints: function(newFaces) {\r\n      if (this.unassigned.isEmpty() === false) {\r\n        var vertex = this.unassigned.first();\r\n\r\n        do {\r\n          // buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n          var nextVertex = vertex.next;\r\n\r\n          var maxDistance = this.tolerance;\r\n\r\n          var maxFace = null;\r\n\r\n          for (var i = 0; i < newFaces.length; i++) {\r\n            var face = newFaces[i];\r\n\r\n            if (face.mark === Visible) {\r\n              var distance = face.distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = face;\r\n              }\r\n\r\n              if (maxDistance > 1000 * this.tolerance) break;\r\n            }\r\n          }\r\n\r\n          // 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n          if (maxFace !== null) {\r\n            this.addVertexToFace(vertex, maxFace);\r\n          }\r\n\r\n          vertex = nextVertex;\r\n        } while (vertex !== null);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Computes the extremes of a simplex which will be the initial hull\r\n\r\n    computeExtremes: function() {\r\n      var min = new THREE.Vector3();\r\n      var max = new THREE.Vector3();\r\n\r\n      var minVertices = [];\r\n      var maxVertices = [];\r\n\r\n      var i, l, j;\r\n\r\n      // initially assume that the first vertex is the min/max\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        minVertices[i] = maxVertices[i] = this.vertices[0];\r\n      }\r\n\r\n      min.copy(this.vertices[0].point);\r\n      max.copy(this.vertices[0].point);\r\n\r\n      // compute the min/max vertex on all six directions\r\n\r\n      for (i = 0, l = this.vertices.length; i < l; i++) {\r\n        var vertex = this.vertices[i];\r\n        var point = vertex.point;\r\n\r\n        // update the min coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) < min.getComponent(j)) {\r\n            min.setComponent(j, point.getComponent(j));\r\n            minVertices[j] = vertex;\r\n          }\r\n        }\r\n\r\n        // update the max coordinates\r\n\r\n        for (j = 0; j < 3; j++) {\r\n          if (point.getComponent(j) > max.getComponent(j)) {\r\n            max.setComponent(j, point.getComponent(j));\r\n            maxVertices[j] = vertex;\r\n          }\r\n        }\r\n      }\r\n\r\n      // use min/max vectors to compute an optimal epsilon\r\n\r\n      this.tolerance =\r\n        3 *\r\n        Number.EPSILON *\r\n        (Math.max(Math.abs(min.x), Math.abs(max.x)) +\r\n          Math.max(Math.abs(min.y), Math.abs(max.y)) +\r\n          Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n\r\n      return { min: minVertices, max: maxVertices };\r\n    },\r\n\r\n    // Computes the initial simplex assigning to its faces all the points\r\n    // that are candidates to form part of the hull\r\n\r\n    computeInitialHull: (function() {\r\n      var line3, plane, closestPoint;\r\n\r\n      return function computeInitialHull() {\r\n        if (line3 === undefined) {\r\n          line3 = new THREE.Line3();\r\n          plane = new THREE.Plane();\r\n          closestPoint = new THREE.Vector3();\r\n        }\r\n\r\n        var vertex,\r\n          vertices = this.vertices;\r\n        var extremes = this.computeExtremes();\r\n        var min = extremes.min;\r\n        var max = extremes.max;\r\n\r\n        var v0, v1, v2, v3;\r\n        var i, l, j;\r\n\r\n        // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n        // (max.x - min.x)\r\n        // (max.y - min.y)\r\n        // (max.z - min.z)\r\n\r\n        var distance,\r\n          maxDistance = 0;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n          distance =\r\n            max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            index = i;\r\n          }\r\n        }\r\n\r\n        v0 = min[index];\r\n        v1 = max[index];\r\n\r\n        // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n        maxDistance = 0;\r\n        line3.set(v0.point, v1.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1) {\r\n            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n\r\n            distance = closestPoint.distanceToSquared(vertex.point);\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v2 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n        maxDistance = 0;\r\n        plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n\r\n        for (i = 0, l = this.vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n\r\n            if (distance > maxDistance) {\r\n              maxDistance = distance;\r\n              v3 = vertex;\r\n            }\r\n          }\r\n        }\r\n\r\n        var faces = [];\r\n\r\n        if (plane.distanceToPoint(v3.point) < 0) {\r\n          // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v1, v2),\r\n            Face.create(v3, v1, v0),\r\n            Face.create(v3, v2, v1),\r\n            Face.create(v3, v0, v2)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n\r\n            // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n          }\r\n        } else {\r\n          // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n          faces.push(\r\n            Face.create(v0, v2, v1),\r\n            Face.create(v3, v0, v1),\r\n            Face.create(v3, v1, v2),\r\n            Face.create(v3, v2, v0)\r\n          );\r\n\r\n          // set the twin edge\r\n\r\n          for (i = 0; i < 3; i++) {\r\n            j = (i + 1) % 3;\r\n\r\n            // join face[ i ] i > 0, with the first face\r\n\r\n            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n\r\n            // join face[ i ] with face[ i + 1 ]\r\n\r\n            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n          }\r\n        }\r\n\r\n        // the initial hull is the tetrahedron\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          this.faces.push(faces[i]);\r\n        }\r\n\r\n        // initial assignment of vertices to the faces of the tetrahedron\r\n\r\n        for (i = 0, l = vertices.length; i < l; i++) {\r\n          vertex = vertices[i];\r\n\r\n          if (\r\n            vertex !== v0 &&\r\n            vertex !== v1 &&\r\n            vertex !== v2 &&\r\n            vertex !== v3\r\n          ) {\r\n            maxDistance = this.tolerance;\r\n            var maxFace = null;\r\n\r\n            for (j = 0; j < 4; j++) {\r\n              distance = this.faces[j].distanceToPoint(vertex.point);\r\n\r\n              if (distance > maxDistance) {\r\n                maxDistance = distance;\r\n                maxFace = this.faces[j];\r\n              }\r\n            }\r\n\r\n            if (maxFace !== null) {\r\n              this.addVertexToFace(vertex, maxFace);\r\n            }\r\n          }\r\n        }\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    // Removes inactive faces\r\n\r\n    reindexFaces: function() {\r\n      var activeFaces = [];\r\n\r\n      for (var i = 0; i < this.faces.length; i++) {\r\n        var face = this.faces[i];\r\n\r\n        if (face.mark === Visible) {\r\n          activeFaces.push(face);\r\n        }\r\n      }\r\n\r\n      this.faces = activeFaces;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Finds the next vertex to create faces with the current hull\r\n\r\n    nextVertexToAdd: function() {\r\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n      if (this.assigned.isEmpty() === false) {\r\n        var eyeVertex,\r\n          maxDistance = 0;\r\n\r\n        // grap the first available face and start with the first visible vertex of that face\r\n\r\n        var eyeFace = this.assigned.first().face;\r\n        var vertex = eyeFace.outside;\r\n\r\n        // now calculate the farthest vertex that face can see\r\n\r\n        do {\r\n          var distance = eyeFace.distanceToPoint(vertex.point);\r\n\r\n          if (distance > maxDistance) {\r\n            maxDistance = distance;\r\n            eyeVertex = vertex;\r\n          }\r\n\r\n          vertex = vertex.next;\r\n        } while (vertex !== null && vertex.face === eyeFace);\r\n\r\n        return eyeVertex;\r\n      }\r\n    },\r\n\r\n    // Computes a chain of half edges in CCW order called the 'horizon'.\r\n    // For an edge to be part of the horizon it must join a face that can see\r\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n    computeHorizon: function(eyePoint, crossEdge, face, horizon) {\r\n      // moves face's vertices to the 'unassigned' vertex list\r\n\r\n      this.deleteFaceVertices(face);\r\n\r\n      face.mark = Deleted;\r\n\r\n      var edge;\r\n\r\n      if (crossEdge === null) {\r\n        edge = crossEdge = face.getEdge(0);\r\n      } else {\r\n        // start from the next edge since 'crossEdge' was already analyzed\r\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n        edge = crossEdge.next;\r\n      }\r\n\r\n      do {\r\n        var twinEdge = edge.twin;\r\n        var oppositeFace = twinEdge.face;\r\n\r\n        if (oppositeFace.mark === Visible) {\r\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n            // the opposite face can see the vertex, so proceed with next edge\r\n\r\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n          } else {\r\n            // the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n            horizon.push(edge);\r\n          }\r\n        }\r\n\r\n        edge = edge.next;\r\n      } while (edge !== crossEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n    addAdjoiningFace: function(eyeVertex, horizonEdge) {\r\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n\r\n      this.faces.push(face);\r\n\r\n      // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n      face.getEdge(-1).setTwin(horizonEdge.twin);\r\n\r\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\r\n    },\r\n\r\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n    //  horizon opposite face and the face on the left/right\r\n\r\n    addNewFaces: function(eyeVertex, horizon) {\r\n      this.newFaces = [];\r\n\r\n      var firstSideEdge = null;\r\n      var previousSideEdge = null;\r\n\r\n      for (var i = 0; i < horizon.length; i++) {\r\n        var horizonEdge = horizon[i];\r\n\r\n        // returns the right side edge\r\n\r\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n\r\n        if (firstSideEdge === null) {\r\n          firstSideEdge = sideEdge;\r\n        } else {\r\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n          sideEdge.next.setTwin(previousSideEdge);\r\n        }\r\n\r\n        this.newFaces.push(sideEdge.face);\r\n        previousSideEdge = sideEdge;\r\n      }\r\n\r\n      // perform final join of new faces\r\n\r\n      firstSideEdge.next.setTwin(previousSideEdge);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Adds a vertex to the hull\r\n\r\n    addVertexToHull: function(eyeVertex) {\r\n      var horizon = [];\r\n      var i, face;\r\n\r\n      this.unassigned.clear();\r\n\r\n      // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n\r\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n\r\n      this.addNewFaces(eyeVertex, horizon);\r\n\r\n      // reassign 'unassigned' vertices to the new faces\r\n\r\n      this.resolveUnassignedPoints(this.newFaces);\r\n\r\n      return this;\r\n    },\r\n\r\n    cleanup: function() {\r\n      this.assigned.clear();\r\n      this.unassigned.clear();\r\n      this.newFaces = [];\r\n\r\n      return this;\r\n    },\r\n\r\n    compute: function() {\r\n      var vertex;\r\n\r\n      this.computeInitialHull();\r\n\r\n      // add all available vertices gradually to the hull\r\n\r\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n        this.addVertexToHull(vertex);\r\n      }\r\n\r\n      this.reindexFaces();\r\n\r\n      this.cleanup();\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  //\r\n\r\n  function Face() {\r\n    this.normal = new THREE.Vector3();\r\n    this.midpoint = new THREE.Vector3();\r\n    this.area = 0;\r\n\r\n    this.constant = 0; // signed distance from face to the origin\r\n    this.outside = null; // reference to a vertex in a vertex list this face can see\r\n    this.mark = Visible;\r\n    this.edge = null;\r\n  }\r\n\r\n  Object.assign(Face, {\r\n    create: function(a, b, c) {\r\n      var face = new Face();\r\n\r\n      var e0 = new HalfEdge(a, face);\r\n      var e1 = new HalfEdge(b, face);\r\n      var e2 = new HalfEdge(c, face);\r\n\r\n      // join edges\r\n\r\n      e0.next = e2.prev = e1;\r\n      e1.next = e0.prev = e2;\r\n      e2.next = e1.prev = e0;\r\n\r\n      // main half edge reference\r\n\r\n      face.edge = e0;\r\n\r\n      return face.compute();\r\n    }\r\n  });\r\n\r\n  Object.assign(Face.prototype, {\r\n    getEdge: function(i) {\r\n      var edge = this.edge;\r\n\r\n      while (i > 0) {\r\n        edge = edge.next;\r\n        i--;\r\n      }\r\n\r\n      while (i < 0) {\r\n        edge = edge.prev;\r\n        i++;\r\n      }\r\n\r\n      return edge;\r\n    },\r\n\r\n    compute: (function() {\r\n      var triangle;\r\n\r\n      return function compute() {\r\n        if (triangle === undefined) triangle = new THREE.Triangle();\r\n\r\n        var a = this.edge.tail();\r\n        var b = this.edge.head();\r\n        var c = this.edge.next.head();\r\n\r\n        triangle.set(a.point, b.point, c.point);\r\n\r\n        triangle.normal(this.normal);\r\n        triangle.midpoint(this.midpoint);\r\n        this.area = triangle.area();\r\n\r\n        this.constant = this.normal.dot(this.midpoint);\r\n\r\n        return this;\r\n      };\r\n    })(),\r\n\r\n    distanceToPoint: function(point) {\r\n      return this.normal.dot(point) - this.constant;\r\n    }\r\n  });\r\n\r\n  // Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\n  function HalfEdge(vertex, face) {\r\n    this.vertex = vertex;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.twin = null;\r\n    this.face = face;\r\n  }\r\n\r\n  Object.assign(HalfEdge.prototype, {\r\n    head: function() {\r\n      return this.vertex;\r\n    },\r\n\r\n    tail: function() {\r\n      return this.prev ? this.prev.vertex : null;\r\n    },\r\n\r\n    length: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceTo(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    lengthSquared: function() {\r\n      var head = this.head();\r\n      var tail = this.tail();\r\n\r\n      if (tail !== null) {\r\n        return tail.point.distanceToSquared(head.point);\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    setTwin: function(edge) {\r\n      this.twin = edge;\r\n      edge.twin = this;\r\n\r\n      return this;\r\n    }\r\n  });\r\n\r\n  // A vertex as a double linked list node.\r\n\r\n  function VertexNode(point) {\r\n    this.point = point;\r\n    this.prev = null;\r\n    this.next = null;\r\n    this.face = null; // the face that is able to see this vertex\r\n  }\r\n\r\n  // A double linked list that contains vertex nodes.\r\n\r\n  function VertexList() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n\r\n  Object.assign(VertexList.prototype, {\r\n    first: function() {\r\n      return this.head;\r\n    },\r\n\r\n    last: function() {\r\n      return this.tail;\r\n    },\r\n\r\n    clear: function() {\r\n      this.head = this.tail = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex before the target vertex\r\n\r\n    insertBefore: function(target, vertex) {\r\n      vertex.prev = target.prev;\r\n      vertex.next = target;\r\n\r\n      if (vertex.prev === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        vertex.prev.next = vertex;\r\n      }\r\n\r\n      target.prev = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Inserts a vertex after the target vertex\r\n\r\n    insertAfter: function(target, vertex) {\r\n      vertex.prev = target;\r\n      vertex.next = target.next;\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex;\r\n      } else {\r\n        vertex.next.prev = vertex;\r\n      }\r\n\r\n      target.next = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a vertex to the end of the linked list\r\n\r\n    append: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n      vertex.next = null; // the tail has no subsequent vertex\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Appends a chain of vertices where 'vertex' is the head.\r\n\r\n    appendChain: function(vertex) {\r\n      if (this.head === null) {\r\n        this.head = vertex;\r\n      } else {\r\n        this.tail.next = vertex;\r\n      }\r\n\r\n      vertex.prev = this.tail;\r\n\r\n      // ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n      while (vertex.next !== null) {\r\n        vertex = vertex.next;\r\n      }\r\n\r\n      this.tail = vertex;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a vertex from the linked list\r\n\r\n    remove: function(vertex) {\r\n      if (vertex.prev === null) {\r\n        this.head = vertex.next;\r\n      } else {\r\n        vertex.prev.next = vertex.next;\r\n      }\r\n\r\n      if (vertex.next === null) {\r\n        this.tail = vertex.prev;\r\n      } else {\r\n        vertex.next.prev = vertex.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n    removeSubList: function(a, b) {\r\n      if (a.prev === null) {\r\n        this.head = b.next;\r\n      } else {\r\n        a.prev.next = b.next;\r\n      }\r\n\r\n      if (b.next === null) {\r\n        this.tail = a.prev;\r\n      } else {\r\n        b.next.prev = a.prev;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    isEmpty: function() {\r\n      return this.head === null;\r\n    }\r\n  });\r\n\r\n  // export\r\n\r\n  THREE.QuickHull = QuickHull;\r\n})();\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n(function() {\r\n  // ConvexGeometry\r\n\r\n  function ConvexGeometry(points) {\r\n    THREE.Geometry.call(this);\r\n\r\n    this.type = \"ConvexGeometry\";\r\n\r\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\r\n    this.mergeVertices();\r\n  }\r\n\r\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\r\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\r\n\r\n  // ConvexBufferGeometry\r\n\r\n  function ConvexBufferGeometry(points) {\r\n    THREE.BufferGeometry.call(this);\r\n\r\n    this.type = \"ConvexBufferGeometry\";\r\n\r\n    // buffers\r\n\r\n    var vertices = [];\r\n    var normals = [];\r\n\r\n    // execute QuickHull\r\n\r\n    if (THREE.QuickHull === undefined) {\r\n      console.error(\r\n        \"THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull\"\r\n      );\r\n    }\r\n\r\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\r\n\r\n    // generate vertices and normals\r\n\r\n    var faces = quickHull.faces;\r\n\r\n    for (var i = 0; i < faces.length; i++) {\r\n      var face = faces[i];\r\n      var edge = face.edge;\r\n\r\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n      do {\r\n        var point = edge.head().point;\r\n\r\n        vertices.push(point.x, point.y, point.z);\r\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n\r\n        edge = edge.next;\r\n      } while (edge !== face.edge);\r\n    }\r\n\r\n    // build geometry\r\n\r\n    this.addAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    this.addAttribute(\"normal\", new THREE.Float32BufferAttribute(normals, 3));\r\n  }\r\n\r\n  ConvexBufferGeometry.prototype = Object.create(\r\n    THREE.BufferGeometry.prototype\r\n  );\r\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n  // export\r\n\r\n  THREE.ConvexGeometry = ConvexGeometry;\r\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\r\n})();\r\n","/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = require(\"three\");\r\n\r\nTHREE.CSS3DObject = function(element) {\r\n  THREE.Object3D.call(this);\r\n\r\n  this.element = element;\r\n  this.element.style.position = \"absolute\";\r\n\r\n  this.addEventListener(\"removed\", function() {\r\n    if (this.element.parentNode !== null) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  });\r\n};\r\n\r\nTHREE.CSS3DObject.prototype = Object.create(THREE.Object3D.prototype);\r\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\r\n\r\nTHREE.CSS3DSprite = function(element) {\r\n  THREE.CSS3DObject.call(this, element);\r\n};\r\n\r\nTHREE.CSS3DSprite.prototype = Object.create(THREE.CSS3DObject.prototype);\r\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\r\n\r\n//\r\n\r\nTHREE.CSS3DRenderer = function() {\r\n  console.log(\"THREE.CSS3DRenderer\", THREE.REVISION);\r\n\r\n  var _width, _height;\r\n\r\n  var matrix = new THREE.Matrix4();\r\n\r\n  var cache = {\r\n    camera: { fov: 0, style: \"\" },\r\n    objects: {}\r\n  };\r\n\r\n  var domElement = document.createElement(\"div\");\r\n  domElement.style.overflow = \"hidden\";\r\n\r\n  domElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  domElement.style.MozTransformStyle = \"preserve-3d\";\r\n  domElement.style.oTransformStyle = \"preserve-3d\";\r\n  domElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  this.domElement = domElement;\r\n\r\n  var cameraElement = document.createElement(\"div\");\r\n\r\n  cameraElement.style.position = \"absolute\";\r\n  cameraElement.style.left = \"50%\";\r\n  cameraElement.style.top = \"50%\";\r\n\r\n  cameraElement.style.WebkitTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.MozTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.oTransformStyle = \"preserve-3d\";\r\n  cameraElement.style.transformStyle = \"preserve-3d\";\r\n\r\n  domElement.appendChild(cameraElement);\r\n\r\n  this.setClearColor = function() {};\r\n\r\n  // Added by Argo-lite, for optimization\r\n  this.isPaused = false;\r\n\r\n  this.getSize = function() {\r\n    return {\r\n      width: _width,\r\n      height: _height\r\n    };\r\n  };\r\n\r\n  this.setSize = function(width, height) {\r\n    _width = width;\r\n    _height = height;\r\n\r\n    domElement.style.width = width + \"px\";\r\n    domElement.style.height = height + \"px\";\r\n  };\r\n\r\n  function epsilon(value) {\r\n    return Math.abs(value) < Number.EPSILON ? 0 : value;\r\n  }\r\n\r\n  function getCameraCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(-elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(elements[6]) +\r\n      \",\" +\r\n      epsilon(elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(-elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(-elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function getObjectCSSMatrix(matrix) {\r\n    var elements = matrix.elements;\r\n\r\n    return (\r\n      \"translate3d(-50%,-50%,0) matrix3d(\" +\r\n      epsilon(elements[0]) +\r\n      \",\" +\r\n      epsilon(elements[1]) +\r\n      \",\" +\r\n      epsilon(elements[2]) +\r\n      \",\" +\r\n      epsilon(elements[3]) +\r\n      \",\" +\r\n      epsilon(-elements[4]) +\r\n      \",\" +\r\n      epsilon(-elements[5]) +\r\n      \",\" +\r\n      epsilon(-elements[6]) +\r\n      \",\" +\r\n      epsilon(-elements[7]) +\r\n      \",\" +\r\n      epsilon(elements[8]) +\r\n      \",\" +\r\n      epsilon(elements[9]) +\r\n      \",\" +\r\n      epsilon(elements[10]) +\r\n      \",\" +\r\n      epsilon(elements[11]) +\r\n      \",\" +\r\n      epsilon(elements[12]) +\r\n      \",\" +\r\n      epsilon(elements[13]) +\r\n      \",\" +\r\n      epsilon(elements[14]) +\r\n      \",\" +\r\n      epsilon(elements[15]) +\r\n      \")\"\r\n    );\r\n  }\r\n\r\n  function renderObject(object, camera) {\r\n    if (object instanceof THREE.CSS3DObject) {\r\n      var style;\r\n\r\n      if (object instanceof THREE.CSS3DSprite) {\r\n        // http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n        matrix.copy(camera.matrixWorldInverse);\r\n        matrix.transpose();\r\n        matrix.copyPosition(object.matrixWorld);\r\n        matrix.scale(object.scale);\r\n\r\n        matrix.elements[3] = 0;\r\n        matrix.elements[7] = 0;\r\n        matrix.elements[11] = 0;\r\n        matrix.elements[15] = 1;\r\n\r\n        style = getObjectCSSMatrix(matrix);\r\n      } else {\r\n        style = getObjectCSSMatrix(object.matrixWorld);\r\n      }\r\n\r\n      var element = object.element;\r\n      var cachedStyle = cache.objects[object.id];\r\n\r\n      if (cachedStyle === undefined || cachedStyle !== style) {\r\n        element.style.WebkitTransform = style;\r\n        element.style.MozTransform = style;\r\n        element.style.oTransform = style;\r\n        element.style.transform = style;\r\n\r\n        cache.objects[object.id] = style;\r\n      }\r\n\r\n      if (element.parentNode !== cameraElement) {\r\n        cameraElement.appendChild(element);\r\n      }\r\n    }\r\n\r\n    for (var i = 0, l = object.children.length; i < l; i++) {\r\n      renderObject(object.children[i], camera);\r\n    }\r\n  }\r\n\r\n  this.render = function(scene, camera) {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    var fov =\r\n      (0.5 / Math.tan(THREE.Math.degToRad(camera.getEffectiveFOV() * 0.5))) *\r\n      _height;\r\n\r\n    if (cache.camera.fov !== fov) {\r\n      domElement.style.WebkitPerspective = fov + \"px\";\r\n      domElement.style.MozPerspective = fov + \"px\";\r\n      domElement.style.oPerspective = fov + \"px\";\r\n      domElement.style.perspective = fov + \"px\";\r\n\r\n      cache.camera.fov = fov;\r\n    }\r\n\r\n    scene.updateMatrixWorld();\r\n\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\r\n\r\n    var style =\r\n      \"translateZ(\" +\r\n      fov +\r\n      \"px)\" +\r\n      getCameraCSSMatrix(camera.matrixWorldInverse);\r\n\r\n    if (cache.camera.style !== style) {\r\n      cameraElement.style.WebkitTransform = style;\r\n      cameraElement.style.MozTransform = style;\r\n      cameraElement.style.oTransform = style;\r\n      cameraElement.style.transform = style;\r\n\r\n      cache.camera.style = style;\r\n    }\r\n\r\n    renderObject(scene, camera);\r\n  };\r\n};\r\n","var $ = require(\"jquery\");\r\n\r\nmodule.exports = function(THREE) {\r\n  /**\r\n   * @author qiao / https://github.com/qiao\r\n   * @author mrdoob / http://mrdoob.com\r\n   * @author alteredq / http://alteredqualia.com/\r\n   * @author WestLangley / http://github.com/WestLangley\r\n   * @author erich666 / http://erichaines.com\r\n   */\r\n\r\n  // This set of controls performs orbiting, dollying (zooming), and panning.\r\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n  //\r\n  //    Orbit - left mouse / touch: one finger move\r\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\n  function OrbitControls(object, domElement, appState) {\r\n\r\n    \r\n    this.appState = appState;\r\n\r\n    this.object = object;\r\n\r\n    this.domElement = domElement !== undefined ? domElement : document;\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the object orbits around\r\n    this.target = new THREE.Vector3();\r\n\r\n    // How far you can dolly in and out ( PerspectiveCamera only )\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // How far you can zoom in and out ( OrthographicCamera only )\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity;\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // How far you can orbit horizontally, upper and lower limits.\r\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n    this.minAzimuthAngle = -Infinity; // radians\r\n    this.maxAzimuthAngle = Infinity; // radians\r\n\r\n    // Set to true to enable damping (inertia)\r\n    // If damping is enabled, you must call controls.update() in your animation loop\r\n    this.enableDamping = false;\r\n    this.dampingFactor = 0.25;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n    // Set to false to disable zooming\r\n    this.enableZoom = true;\r\n    this.zoomSpeed = 1.0;\r\n\r\n    // Set to false to disable rotating\r\n    this.enableRotate = true;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to false to disable panning\r\n    this.enablePan = true;\r\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // Set to false to disable use of the keys\r\n    this.enableKeys = true;\r\n\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, SPACE: 32 };\r\n\r\n    // Mouse buttons\r\n    this.mouseButtons = {\r\n      ORBIT: THREE.MOUSE.LEFT,\r\n      ZOOM: THREE.MOUSE.MIDDLE,\r\n      PAN: THREE.MOUSE.RIGHT\r\n    };\r\n\r\n    // for reset\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.zoom0 = this.object.zoom;\r\n\r\n    // for space panning\r\n    this.spacePan = false;\r\n    this.bothPan = false;\r\n\r\n    //\r\n    // public methods\r\n    //\r\n\r\n    this.getPolarAngle = function() {\r\n      return spherical.phi;\r\n    };\r\n\r\n    this.getAzimuthalAngle = function() {\r\n      return spherical.theta;\r\n    };\r\n\r\n    this.reset = function() {\r\n      scope.target.copy(scope.target0);\r\n      scope.object.position.copy(scope.position0);\r\n      scope.object.zoom = scope.zoom0;\r\n\r\n      scope.object.updateProjectionMatrix();\r\n      scope.dispatchEvent(changeEvent);\r\n\r\n      scope.update();\r\n\r\n      state = STATE.NONE;\r\n    };\r\n\r\n    // this method is exposed, but perhaps it would be better if we can make it private...\r\n    this.update = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      // so camera.up is the orbit axis\r\n      var quat = new THREE.Quaternion().setFromUnitVectors(\r\n        object.up,\r\n        new THREE.Vector3(0, 1, 0)\r\n      );\r\n      var quatInverse = quat.clone().inverse();\r\n\r\n      var lastPosition = new THREE.Vector3();\r\n      var lastQuaternion = new THREE.Quaternion();\r\n\r\n      return function update() {\r\n        var position = scope.object.position;\r\n\r\n        offset.copy(position).sub(scope.target);\r\n\r\n        // rotate offset to \"y-axis-is-up\" space\r\n        offset.applyQuaternion(quat);\r\n\r\n        // angle from z-axis around y-axis\r\n        spherical.setFromVector3(offset);\r\n\r\n        if (scope.autoRotate && state === STATE.NONE) {\r\n          rotateLeft(getAutoRotationAngle());\r\n        }\r\n\r\n        spherical.theta += sphericalDelta.theta;\r\n        spherical.phi += sphericalDelta.phi;\r\n\r\n        // restrict theta to be between desired limits\r\n        spherical.theta = Math.max(\r\n          scope.minAzimuthAngle,\r\n          Math.min(scope.maxAzimuthAngle, spherical.theta)\r\n        );\r\n\r\n        // restrict phi to be between desired limits\r\n        spherical.phi = Math.max(\r\n          scope.minPolarAngle,\r\n          Math.min(scope.maxPolarAngle, spherical.phi)\r\n        );\r\n\r\n        spherical.makeSafe();\r\n\r\n        spherical.radius *= scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        spherical.radius = Math.max(\r\n          scope.minDistance,\r\n          Math.min(scope.maxDistance, spherical.radius)\r\n        );\r\n\r\n        // move target to panned location\r\n        scope.target.add(panOffset);\r\n\r\n        offset.setFromSpherical(spherical);\r\n\r\n        // rotate offset back to \"camera-up-vector-is-up\" space\r\n        offset.applyQuaternion(quatInverse);\r\n\r\n        position.copy(scope.target).add(offset);\r\n\r\n        scope.object.lookAt(scope.target);\r\n\r\n        if (scope.enableDamping === true) {\r\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n        } else {\r\n          sphericalDelta.set(0, 0, 0);\r\n        }\r\n\r\n        scale = 1;\r\n        panOffset.set(0, 0, 0);\r\n\r\n        // update condition is:\r\n        // min(camera displacement, camera rotation in radians)^2 > EPS\r\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n        if (\r\n          zoomChanged ||\r\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\r\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\r\n        ) {\r\n          scope.dispatchEvent(changeEvent);\r\n\r\n          lastPosition.copy(scope.object.position);\r\n          lastQuaternion.copy(scope.object.quaternion);\r\n          zoomChanged = false;\r\n\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n    })();\r\n\r\n    this.dispose = function() {\r\n      scope.domElement.removeEventListener(\"contextmenu\", onContextMenu, false);\r\n      scope.domElement.removeEventListener(\"mousedown\", onMouseDown, false);\r\n      scope.domElement.removeEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n      scope.domElement.removeEventListener(\"touchstart\", onTouchStart, false);\r\n      scope.domElement.removeEventListener(\"touchend\", onTouchEnd, false);\r\n      scope.domElement.removeEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n      document.removeEventListener(\"mousemove\", onMouseMove, false);\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      window.removeEventListener(\"keydown\", onKeyDown, false);\r\n\r\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n    };\r\n\r\n    //\r\n    // internals\r\n    //\r\n\r\n    var scope = this;\r\n    var changeEvent = { type: \"change\" };\r\n    var startEvent = { type: \"start\" };\r\n    var endEvent = { type: \"end\" };\r\n\r\n    var STATE = {\r\n      NONE: -1,\r\n      ROTATE: 0,\r\n      DOLLY: 1,\r\n      PAN: 2,\r\n      TOUCH_ROTATE: 3,\r\n      TOUCH_DOLLY: 4,\r\n      TOUCH_PAN: 5\r\n    };\r\n\r\n    var state = STATE.NONE;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    // current position in spherical coordinates\r\n    var spherical = new THREE.Spherical();\r\n    var sphericalDelta = new THREE.Spherical();\r\n\r\n    var scale = 1;\r\n    var panOffset = new THREE.Vector3();\r\n    var zoomChanged = false;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    function getAutoRotationAngle() {\r\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\r\n    }\r\n\r\n    function getZoomScale() {\r\n      return Math.pow(0.95, scope.zoomSpeed);\r\n    }\r\n\r\n    function rotateLeft(angle) {\r\n      sphericalDelta.theta -= angle;\r\n    }\r\n\r\n    function rotateUp(angle) {\r\n      sphericalDelta.phi -= angle;\r\n    }\r\n\r\n    var panLeft = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panLeft(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\r\n        v.multiplyScalar(-distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    var panUp = (function() {\r\n      var v = new THREE.Vector3();\r\n\r\n      return function panUp(distance, objectMatrix) {\r\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\r\n        v.multiplyScalar(distance);\r\n\r\n        panOffset.add(v);\r\n      };\r\n    })();\r\n\r\n    // deltaX and deltaY are in pixels; right and down are positive\r\n    var pan = (function() {\r\n      var offset = new THREE.Vector3();\r\n\r\n      return function pan(deltaX, deltaY) {\r\n        var element =\r\n          scope.domElement === document\r\n            ? scope.domElement.body\r\n            : scope.domElement;\r\n\r\n        if (scope.object instanceof THREE.PerspectiveCamera) {\r\n          // perspective\r\n          var position = scope.object.position;\r\n          offset.copy(position).sub(scope.target);\r\n          var targetDistance = offset.length();\r\n\r\n          // half of the fov is center to top of screen\r\n          targetDistance *= Math.tan(\r\n            ((scope.object.fov / 2) * Math.PI) / 180.0\r\n          );\r\n\r\n          // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n          panLeft(\r\n            (2 * deltaX * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (2 * deltaY * targetDistance) / element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n          // orthographic\r\n          panLeft(\r\n            (deltaX * (scope.object.right - scope.object.left)) /\r\n              scope.object.zoom /\r\n              element.clientWidth,\r\n            scope.object.matrix\r\n          );\r\n          panUp(\r\n            (deltaY * (scope.object.top - scope.object.bottom)) /\r\n              scope.object.zoom /\r\n              element.clientHeight,\r\n            scope.object.matrix\r\n          );\r\n        } else {\r\n          // camera neither orthographic nor perspective\r\n          console.warn(\r\n            \"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"\r\n          );\r\n          scope.enablePan = false;\r\n        }\r\n      };\r\n    })();\r\n\r\n    // Expose panning for external usage\r\n    this.pan = pan;\r\n\r\n\r\n    function dollyIn(dollyScale, mousePos, event) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale /= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom * dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    function dollyOut(dollyScale, mousePos) {\r\n      if (scope.object instanceof THREE.PerspectiveCamera) {\r\n        scale *= dollyScale;\r\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\r\n        scope.object.zoom = Math.max(\r\n          scope.minZoom,\r\n          Math.min(scope.maxZoom, scope.object.zoom / dollyScale)\r\n        );\r\n        scope.object.updateProjectionMatrix();\r\n        zoomChanged = true;\r\n      } else {\r\n        console.warn(\r\n          \"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"\r\n        );\r\n        scope.enableZoom = false;\r\n      }\r\n    }\r\n\r\n    //public zoom in function, used when zoom in button clicked\r\n    this.dollyIn = function(scale) {\r\n      dollyIn(scale);\r\n      scope.update()\r\n    }\r\n    //public zoom out function, used when zoom out button clicked\r\n    this.dollyOut = function(scale) {\r\n      dollyOut(scale);\r\n      scope.update()\r\n    }\r\n\r\n    //\r\n    // event callbacks - update the object state\r\n    //\r\n\r\n    function handleMouseDownRotate(event) {\r\n      //console.log( 'handleMouseDownRotate' );\r\n\r\n      rotateStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownDolly(event) {\r\n      //console.log( 'handleMouseDownDolly' );\r\n      dollyStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseDownPan(event) {\r\n      //console.log( 'handleMouseDownPan' );\r\n\r\n      panStart.set(event.clientX, event.clientY);\r\n    }\r\n\r\n    function handleMouseMoveRotate(event) {\r\n      //console.log( 'handleMouseMoveRotate' );\r\n    \r\n      rotateEnd.set(event.clientX, event.clientY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMoveDolly(event) {\r\n      //console.log( 'handleMouseMoveDolly' );\r\n      dollyEnd.set(event.clientX, event.clientY);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyIn(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyOut(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseMovePan(event) {\r\n      //console.log( 'handleMouseMovePan' );\r\n\r\n      panEnd.set(event.clientX, event.clientY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleMouseUp(event) {\r\n      //console.log( 'handleMouseUp' );\r\n    }\r\n\r\n    function handleMouseWheel(event) {\r\n      \r\n      mousePos = {x: event.clientX, y: event.clientY}\r\n\r\n      if (event.deltaY < 0) {\r\n        dollyOut(getZoomScale(), mousePos, event);\r\n      } else if (event.deltaY > 0) {\r\n        dollyIn(getZoomScale(), mousePos, event);\r\n      }\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleKeyUp(event) {\r\n      switch (event.keyCode) {\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = false;\r\n            state = STATE.NONE;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(event) {\r\n      //console.log( 'handleKeyDown' );\r\n\r\n      switch (event.keyCode) {\r\n        case scope.keys.UP:\r\n          pan(0, scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.BOTTOM:\r\n          pan(0, -scope.keyPanSpeed);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.LEFT:\r\n          pan(scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.RIGHT:\r\n          pan(-scope.keyPanSpeed, 0);\r\n          scope.update();\r\n          break;\r\n\r\n        case scope.keys.SPACE:\r\n          if (scope.spacePan == true) {\r\n            scope.spacePanStart = true;\r\n            state = STATE.PAN;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    function handleTouchStartRotate(event) {\r\n      //console.log( 'handleTouchStartRotate' );\r\n\r\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchStartDolly(event) {\r\n      //console.log( 'handleTouchStartDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyStart.set(0, distance);\r\n    }\r\n\r\n    function handleTouchStartPan(event) {\r\n      //console.log( 'handleTouchStartPan' );\r\n\r\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n    }\r\n\r\n    function handleTouchMoveRotate(event) {\r\n      //console.log( 'handleTouchMoveRotate' );\r\n\r\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n      rotateDelta.subVectors(rotateEnd, rotateStart);\r\n\r\n      var element =\r\n        scope.domElement === document\r\n          ? scope.domElement.body\r\n          : scope.domElement;\r\n\r\n      // rotating across whole screen goes 360 degrees around\r\n      rotateLeft(\r\n        ((2 * Math.PI * rotateDelta.x) / element.clientWidth) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n      rotateUp(\r\n        ((2 * Math.PI * rotateDelta.y) / element.clientHeight) *\r\n          scope.rotateSpeed\r\n      );\r\n\r\n      rotateStart.copy(rotateEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMoveDolly(event) {\r\n      //console.log( 'handleTouchMoveDolly' );\r\n\r\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n\r\n      var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      dollyEnd.set(0, distance);\r\n\r\n      dollyDelta.subVectors(dollyEnd, dollyStart);\r\n\r\n      if (dollyDelta.y > 0) {\r\n        dollyOut(getZoomScale());\r\n      } else if (dollyDelta.y < 0) {\r\n        dollyIn(getZoomScale());\r\n      }\r\n\r\n      dollyStart.copy(dollyEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchMovePan(event) {\r\n      //console.log( 'handleTouchMovePan' );\r\n\r\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n\r\n      panDelta.subVectors(panEnd, panStart);\r\n\r\n      pan(panDelta.x, panDelta.y);\r\n\r\n      panStart.copy(panEnd);\r\n\r\n      scope.update();\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      //console.log( 'handleTouchEnd' );\r\n    }\r\n\r\n    //\r\n    // event handlers - FSM: listen for events and reset state\r\n    //\r\n\r\n    function onMouseDown(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (event.button === scope.mouseButtons.ORBIT) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseDownRotate(event);\r\n\r\n        state = STATE.ROTATE;\r\n      } else if (event.button === scope.mouseButtons.ZOOM) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseDownDolly(event);\r\n\r\n        state = STATE.DOLLY;\r\n      } else if (event.button === scope.mouseButtons.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (!scope.spacePan || scope.bothPan) {\r\n          handleMouseDownPan(event);\r\n\r\n          state = STATE.PAN;\r\n        }\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        document.addEventListener(\"mousemove\", onMouseMove, false);\r\n        document.addEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n\r\n      if (state === STATE.ROTATE) {\r\n        if (scope.enableRotate === false) return;\r\n\r\n        handleMouseMoveRotate(event);\r\n      } else if (state === STATE.DOLLY) {\r\n        if (scope.enableZoom === false) return;\r\n\r\n        handleMouseMoveDolly(event);\r\n      } else if (state === STATE.PAN) {\r\n        if (scope.enablePan === false) return;\r\n\r\n        if (scope.spacePan == true) {\r\n          if (scope.spacePanStart == true) {\r\n            handleMouseDownPan(event);\r\n            scope.spacePanStart = false;\r\n          }\r\n        }\r\n\r\n        handleMouseMovePan(event);\r\n      }\r\n    }\r\n\r\n    function onMouseUp(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleMouseUp(event);\r\n\r\n      //document.removeEventListener( 'mousemove', onMouseMove, false );\r\n      document.removeEventListener(\"mouseup\", onMouseUp, false);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onMouseWheel(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableZoom === false ||\r\n        (state !== STATE.NONE && state !== STATE.ROTATE)\r\n      )\r\n        return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      handleMouseWheel(event);\r\n\r\n      scope.dispatchEvent(startEvent); // not sure why these are here...\r\n      scope.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      document.addEventListener(\"mousemove\", onMouseMove, false);\r\n\r\n      handleKeyDown(event);\r\n    }\r\n\r\n    function onKeyUp(event) {\r\n      if (\r\n        scope.enabled === false ||\r\n        scope.enableKeys === false ||\r\n        scope.enablePan === false\r\n      )\r\n        return;\r\n\r\n      handleKeyUp(event);\r\n    }\r\n\r\n    function onTouchStart(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n\r\n          handleTouchStartRotate(event);\r\n\r\n          state = STATE.TOUCH_ROTATE;\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n\r\n          handleTouchStartDolly(event);\r\n\r\n          state = STATE.TOUCH_DOLLY;\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n\r\n          handleTouchStartPan(event);\r\n\r\n          state = STATE.TOUCH_PAN;\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n\r\n      if (state !== STATE.NONE) {\r\n        scope.dispatchEvent(startEvent);\r\n      }\r\n    }\r\n\r\n    function onTouchMove(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n        case 1: // one-fingered touch: rotate\r\n          if (scope.enableRotate === false) return;\r\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\r\n\r\n          handleTouchMoveRotate(event);\r\n\r\n          break;\r\n\r\n        case 2: // two-fingered touch: dolly\r\n          if (scope.enableZoom === false) return;\r\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\r\n\r\n          handleTouchMoveDolly(event);\r\n\r\n          break;\r\n\r\n        case 3: // three-fingered touch: pan\r\n          if (scope.enablePan === false) return;\r\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\r\n\r\n          handleTouchMovePan(event);\r\n\r\n          break;\r\n\r\n        default:\r\n          state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function onTouchEnd(event) {\r\n      if (scope.enabled === false) return;\r\n\r\n      handleTouchEnd(event);\r\n\r\n      scope.dispatchEvent(endEvent);\r\n\r\n      state = STATE.NONE;\r\n    }\r\n\r\n    function onContextMenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    //\r\n\r\n    scope.domElement.addEventListener(\"contextmenu\", onContextMenu, false);\r\n\r\n    scope.domElement.addEventListener(\"mousedown\", onMouseDown, false);\r\n    scope.domElement.addEventListener(\"wheel\", onMouseWheel, false);\r\n\r\n    scope.domElement.addEventListener(\"touchstart\", onTouchStart, false);\r\n    scope.domElement.addEventListener(\"touchend\", onTouchEnd, false);\r\n    scope.domElement.addEventListener(\"touchmove\", onTouchMove, false);\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown, false);\r\n    window.addEventListener(\"keyup\", onKeyUp, false);\r\n\r\n    // force an update at start\r\n\r\n    this.update();\r\n\r\n    \r\n    \r\n  }\r\n\r\n  OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n  OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n  Object.defineProperties(OrbitControls.prototype, {\r\n    center: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .center has been renamed to .target\"\r\n        );\r\n        return this.target;\r\n      }\r\n    },\r\n\r\n    // backward compatibility\r\n\r\n    noZoom: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        return !this.enableZoom;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"\r\n        );\r\n        this.enableZoom = !value;\r\n      }\r\n    },\r\n\r\n    noRotate: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        return !this.enableRotate;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"\r\n        );\r\n        this.enableRotate = !value;\r\n      }\r\n    },\r\n\r\n    noPan: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        return !this.enablePan;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"\r\n        );\r\n        this.enablePan = !value;\r\n      }\r\n    },\r\n\r\n    noKeys: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        return !this.enableKeys;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"\r\n        );\r\n        this.enableKeys = !value;\r\n      }\r\n    },\r\n\r\n    staticMoving: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        return !this.enableDamping;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"\r\n        );\r\n        this.enableDamping = !value;\r\n      }\r\n    },\r\n\r\n    dynamicDampingFactor: {\r\n      get: function() {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        return this.dampingFactor;\r\n      },\r\n\r\n      set: function(value) {\r\n        console.warn(\r\n          \"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"\r\n        );\r\n        this.dampingFactor = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  return OrbitControls;\r\n};\r\n","var def = require(\"../imports\").default;\r\nvar appState = require(\"../../../stores\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Calculates coordinates of mouse on canvas adjusted for padding\r\n   * @param {*} event\r\n   * @param {*} currentElement\r\n   */\r\n  self.relMouseCoords = function(pageX, pageY, currentElement) {\r\n    var totalOffsetX = 0;\r\n    var totalOffsetY = 0;\r\n    var canvasX = 0;\r\n    var canvasY = 0;\r\n\r\n    do {\r\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\r\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop ;\r\n    } while ((currentElement = currentElement.offsetParent));\r\n\r\n    canvasX = pageX - totalOffsetX;\r\n    canvasY = pageY - totalOffsetY;\r\n\r\n    return { x: canvasX, y: canvasY };\r\n  };\r\n\r\n  /**\r\n   * Add metadata to node\r\n   * @param {*} node\r\n   */\r\n  self.prepNode = function(node) {\r\n    let nodeToAdd = node;\r\n    if (!node.data) {\r\n      node.data = {};\r\n    }\r\n\r\n    let hexToRGB = (hex) => {\r\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n      return result ? \r\n      new THREE.Color(appState.graph.edges.color)\r\n      : null;\r\n  }\r\n    nodeToAdd.renderData = {\r\n      label: node.data.label || \"No Label\",\r\n      color: node.data.color || def.NODE_COLOR,\r\n      hcolor: node.data.hcolor || def.NODE_HIGHLIGHT,\r\n      shape: node.data.shape || def.NODE_SHAPE,\r\n      linecolor:  hexToRGB(appState.graph.edges.color),\r\n      numYeast: Math.ceil(Math.random() * 8),\r\n      size: node.data.size,\r\n      tsize: node.data.tsize || def.TEXT_SIZE,\r\n      x: 0,\r\n      y: 0,\r\n      vx: 0,\r\n      vy: 0\r\n    };\r\n    return nodeToAdd;\r\n  };\r\n\r\n  /**\r\n   * Creates a generic rectangle shape to use for selection and boundaries\r\n   */\r\n  self.make1x1Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, 0);\r\n    rectShape.lineTo(0, 0);\r\n    rectShape.lineTo(0, 1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   * Creates a centered 2x2 Rectangle\r\n   */\r\n  self.make2x2Rect = function() {\r\n    var rectShape = new THREE.Shape();\r\n    rectShape.moveTo(-1, -1);\r\n    rectShape.lineTo(-1, 1);\r\n    rectShape.lineTo(1, 1);\r\n    rectShape.lineTo(1, -1);\r\n    rectShape.lineTo(-1, -1);\r\n    return new THREE.ShapeGeometry(rectShape);\r\n  };\r\n\r\n  /**\r\n   *  find radius of circle given the volume\r\n   * @param {*} volume\r\n   */\r\n  self.volToRadius = function(volume) {\r\n    return Math.pow((volume / Math.PI) * (3.0 / 4.0), 1.0 / 3.0);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar MeshLine = def.MeshLine;\r\nvar MeshLineMaterial = def.MeshLineMaterial;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n// import { Line2 } from '../src/lines/Line2.js';\r\n// import { LineMaterial } from '../src/lines/LineMaterial.js';\r\n// import { LineGeometry } from '../src/lines/LineGeometry.js';\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Creates or converts ngraph or d3 graph\r\n   */\r\n  self.setupGraph = function() {\r\n    var createNGraph = require(\"ngraph.graph\");\r\n    self.graph = createNGraph();\r\n    if (self.inGraph) {\r\n      self.updateGraph(self.inGraph);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Create layout using d3\r\n   */\r\n  self.setupLayout = function() {\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.setupNgraphLayout();\r\n    } else if (self.options.layout == \"d3\") {\r\n      self.setupD3Layout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to ngraph\r\n   */\r\n  self.setupNgraphLayout = function() {\r\n    self.force = require(\"ngraph.forcelayout\")(self.graph);\r\n  };\r\n\r\n  /**\r\n   * Set graph layout to D3 Force Directed and set decay parameters\r\n   */\r\n  self.setupD3Layout = function() {\r\n    self.force = d3\r\n      .forceSimulation()\r\n      .force(\"charge\", d3.forceManyBody().strength(-1))\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"y\", d3.forceY(0).strength(0.001))\r\n      .force(\"x\", d3.forceX(0).strength(0.001))\r\n      .stop();\r\n\r\n    // set alpha decay to be lower than the default 0.0228\r\n    // so force layout does not prematurely stop\r\n    self.force.alphaDecay(0.005);\r\n\r\n    // set velocity decay to be lower than the default 0.4\r\n    // so nodes move to their final locations\r\n    self.force.velocityDecay(0.1);\r\n  };\r\n\r\n  self.setDisplayParams = function() {\r\n    self.element = document.getElementById(\"graph-container\");\r\n    self.containerDiv = document.querySelector(\"#graph-container\");\r\n    self.clientRect = self.element.getBoundingClientRect();\r\n    self.width = self.containerDiv.offsetWidth;\r\n    self.height = self.containerDiv.offsetHeight;\r\n    self.aspect = self.width / self.height;\r\n    self.resolution = new THREE.Vector2(self.width, self.height);\r\n  };\r\n\r\n  self.setRendererParams = function() {\r\n    self.renderer.setSize(self.width, self.height);\r\n    self.cssRenderer = new THREE.CSS3DRenderer();\r\n    self.cssRenderer.setSize(self.width, self.height);\r\n    self.cssRenderer.domElement.style.position = \"absolute\";\r\n    self.cssRenderer.domElement.style.top = 0;\r\n    self.minimapRenderer.domElement.style.position = \"absolute\";\r\n    self.minimapRenderer.domElement.style.bottom = \"50px\";\r\n    self.minimapRenderer.domElement.style.offsetBottom = 50;  //numberic value of the minimap bottom offset for mouse position locate \r\n    self.minimapRenderer.domElement.style.left = 0;\r\n    self.minimapRenderer.setSize(0.2 * self.height, 0.2 * self.height);\r\n    self.minimapRenderer.zIndex = 1000;\r\n    self.renderer.setPixelRatio(window.devicePixelRatio);\r\n  };\r\n\r\n  /**\r\n   *  Create initial camera and parameters\r\n   */\r\n  self.setupCamera = function() {\r\n    self.ccamera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      self.width / self.height,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.ccamera.position.z = 200;\r\n    var controls = new OrbitControls(self.ccamera, self.element, appState);\r\n    \r\n    //add orbitcontrols to appstate\r\n    appState.controls = controls\r\n\r\n    controls.spacePan = true; // Space bar panning\r\n    controls.bothPan = true; // Space bar and right click panning\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = self.renderWidth * 2;\r\n    controls.target.set(0, 0, 0);\r\n    controls.enableRotate = false;\r\n    self.controls = controls;\r\n  };\r\n\r\n  /**\r\n   *  Create minimap\r\n   */\r\n  self.setupMinimap = function() {\r\n    self.minimap = {};\r\n    self.minimap.camera = new THREE.PerspectiveCamera(\r\n      self.fov,\r\n      1,\r\n      self.near,\r\n      self.far\r\n    );\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n\r\n    (self.oldCoords = {\r\n      x: null,\r\n      y: null,\r\n      z: null\r\n    }),\r\n      /**\r\n       * Pan the ccamera according to mouse position on screen (should be called only when mouse is on minimap)\r\n       * @param coordX mouse position on screen returned by relMouseCoords\r\n       * @param coordY mouse position on screen returned by relMouseCoords\r\n       */\r\n      (self.minimap.panToMousePosition = function(coordX, coordY) {\r\n        // ensures that the camera position is updated from the last pan.\r\n        if (\r\n          self.ccamera.position.x == self.oldCoords.x &&\r\n          self.ccamera.position.y == self.oldCoords.y &&\r\n          self.ccamera.position.z == self.oldCoords.z\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.oldCoords.x = self.ccamera.position.x;\r\n        self.oldCoords.y = self.ccamera.position.y;\r\n        self.oldCoords.z = self.ccamera.position.z;\r\n\r\n        // 850 is an approximation\r\n        const coefficient = (self.height - 200) / self.ccamera.position.z;\r\n\r\n        self.controls.pan(\r\n          ((coordX / self.minimap.width) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.x) *\r\n            -coefficient,\r\n          (((self.height - coordY) / self.minimap.height) * 4000 -\r\n            2000 -\r\n            self.ccamera.position.y) *\r\n            coefficient\r\n        );\r\n      });\r\n\r\n      appState.panToMousePosition = self.minimap.panToMousePosition;\r\n  };\r\n\r\n  /**\r\n   *  Create initial scene geometry and attributes\r\n   */\r\n  self.setupGeometry = function() {\r\n    self.scene = new THREE.Scene();\r\n\r\n    self.points = new THREE.BufferGeometry();\r\n    self.nodes = new THREE.Group();\r\n    self.scene.add(self.nodes);\r\n\r\n    if (def.LINES == \"fancy\") {\r\n      self.setupFancyEdges();\r\n    } else {\r\n      self.setUpSimpleEdges();\r\n    }\r\n\r\n    var rect = self.make1x1Rect();\r\n\r\n    self.setupSelectionBox(rect);\r\n    self.setupBoundaries(rect);\r\n    self.setupViewPort(rect);\r\n  };\r\n\r\n  /**\r\n   * Setup data structures for fancy edges\r\n   */\r\n  self.setupFancyEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n    const geometry = new LineGeometry();\r\n    geometry.setPositions( self.edges.attributes.positions );\r\n    geometry.setColors( self.edges.attributes.colors );\r\n\r\n    matLine = new LineMaterial( {\r\n\r\n      color: 0xffffff,\r\n      linewidth: 5, // in world units with size attenuation, pixels otherwise\r\n      vertexColors: true,\r\n\r\n      //resolution:  // to be set by renderer, eventually\r\n      dashed: false,\r\n      alphaToCoverage: true,\r\n\r\n    } );\r\n\r\n    var line = new Line2( geometry, matLine );\r\n    line.computeLineDistances();\r\n    line.scale.set( 1, 1, 1 );\r\n    scene.add( line );\r\n  };\r\n\r\n  /**\r\n   * Sets up data structures for simple edges\r\n   */\r\n  self.setUpSimpleEdges = function() {\r\n    self.edges = new THREE.BufferGeometry();\r\n    var material = new THREE.LineBasicMaterial({\r\n      linewidth: 2,\r\n      color: 0xffffff,\r\n      vertexColors: THREE.VertexColors,\r\n      shading: THREE.FlatShading\r\n    });\r\n    self.line = new THREE.LineSegments(self.edges, material);\r\n    self.line.frustumCulled = false;\r\n    self.scene.add(self.line);\r\n\r\n    var positions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var colors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.edges.addAttribute(\"position\", positions);\r\n    self.edges.addAttribute(\"color\", colors);\r\n\r\n    /**Adding triangles for directed edges update*/\r\n    self.directedArrows = new THREE.BufferGeometry();\r\n    var arrowMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n    });\r\n    self.arrow = new THREE.Mesh(self.directedArrows, arrowMaterial);\r\n    self.arrow.frustumCulled = false;\r\n    self.scene.add(self.arrow)\r\n    var arrowPositions = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n    var arrowColors = new THREE.BufferAttribute(\r\n      new Float32Array(self.MAX_LINES * 3),\r\n      3\r\n    );\r\n\r\n    self.directedArrows.addAttribute(\"position\", arrowPositions);\r\n    self.directedArrows.addAttribute(\"color\", arrowColors);\r\n    \r\n    self.drawCount = 0;\r\n  };\r\n\r\n  /**\r\n   * Adds box to screen that is displayed when selecting groups of nodes\r\n   */\r\n  self.setupSelectionBox = function(rect) {\r\n    self.selectBox = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x3399aa })\r\n    );\r\n    self.selectBox.visible = false;\r\n    self.scene.add(self.selectBox);\r\n  };\r\n\r\n  /**\r\n   * Sets boundaries for max edges of graph\r\n   */\r\n  self.setupBoundaries = function(rect) {\r\n    self.boundaries = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: 0x999999 })\r\n    ); \r\n    self.scene.add(self.boundaries);\r\n    self.setBoundarySize(self.renderWidth * 2);\r\n  };\r\n\r\n  /**\r\n   * Sets viewport to match size of display\r\n   */\r\n  self.setupViewPort = function(rect) {\r\n    self.viewPort = new THREE.Line(\r\n      rect,\r\n      new THREE.LineBasicMaterial({ linewidth: 3, color: self.darkMode? 0xffffff : 0x000000})\r\n    );\r\n    self.scene.add(self.viewPort);\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   *  Creates listeners and events for selecting nodes\r\n   */\r\n  self.setupSelect = function() {\r\n    self.points.addAttribute(\r\n      \"position\",\r\n      new THREE.BufferAttribute(new Float32Array(20 * 3), 3)\r\n    );\r\n    self.points.computeBoundingSphere();\r\n    self.nodeCount = 0;\r\n    var mouseHandler = function(callback) {\r\n      return function(event) {\r\n        event.preventDefault();\r\n        let pageX, pageY;\r\n        if (event.touches && event.touches.length > 0) {\r\n          // for touch events\r\n          pageX = event.touches.item(0).pageX;\r\n          pageY = event.touches.item(0).pageY;\r\n        } else {\r\n          pageX = event.pageX;\r\n          pageY = event.pageY;\r\n        }\r\n        \r\n        var coords = self.relMouseCoords(pageX, pageY, this);\r\n        var mouseX = (coords.x / self.width) * 2 - 1;\r\n        var mouseY = 1 - (coords.y / self.height) * 2;\r\n        var mousePosition = new THREE.Vector3(mouseX, mouseY, 1);\r\n        mousePosition.unproject(self.ccamera);\r\n        var dir = mousePosition.sub(self.ccamera.position).clone();\r\n        mousePosition.normalize();\r\n        // Determine whether mouse is on minimap\r\n\r\n        self.isMouseCoordinatesOnMinimap =\r\n          coords.x <= self.minimap.width &&\r\n          self.height - coords.y <= (self.minimap.height + self.minimapRenderer.domElement.style.offsetBottom) &&\r\n          self.height - coords.y >= self.minimapRenderer.domElement.style.offsetBottom;\r\n        if (self.isMouseCoordinatesOnMinimap) {\r\n          self.minimap.mouseX = coords.x;\r\n          self.minimap.mouseY = coords.y + self.minimapRenderer.domElement.style.offsetBottom;\r\n        }\r\n\r\n        // Determine intersects\r\n        var raycaster = new THREE.Raycaster(\r\n          self.ccamera.position,\r\n          mousePosition\r\n        );\r\n\r\n        // Find real location of mouse\r\n        var distance = -self.ccamera.position.z / dir.z;\r\n        var pos = self.ccamera.position\r\n          .clone()\r\n          .add(dir.multiplyScalar(distance));\r\n\r\n        if (callback == self.onRightClick && event.which != 3) {\r\n          return;\r\n        }\r\n\r\n        if (\r\n          callback == self.onRightClick &&\r\n          event.target.getAttribute(\"contenteditable\")\r\n        ) {\r\n          event.target.focus();\r\n        } else {\r\n          event.preventDefault();\r\n          if (callback == self.onRightClick) {\r\n            self.onRightClickCoords(event);\r\n          }\r\n          self.callMouseHandler(event, raycaster, pos, callback);\r\n        }\r\n      };\r\n    };\r\n\r\n    //Add listeners to web page\r\n    self.setupMouseHandlers(mouseHandler);\r\n  };\r\n\r\n  /**\r\n   * Checks if a node has been clicked, and calls the appropriate mouse handler function\r\n   */\r\n  self.callMouseHandler = function(event, raycaster, pos, callback) {\r\n    var intersects = raycaster.intersectObjects(self.nodes.children);\r\n    if (intersects.length) {\r\n      // If a node has been clicked\r\n      var nodeIndex = intersects[0].object.index;\r\n      self.oldIntersect = nodeIndex;\r\n      callback(\r\n        self.graph.getNode(nodeIndex),\r\n        pos.x,\r\n        pos.y,\r\n        event.button,\r\n        event.ctrlKey\r\n      );\r\n    } else {\r\n      callback(null, pos.x, pos.y, event.button, event.ctrlKey);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add Mouse Event Listeners to page\r\n   */\r\n  self.setupMouseHandlers = function(mouseHandler) {\r\n    self.element.addEventListener(\r\n      \"mousemove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mousedown\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"mouseup\",\r\n      mouseHandler(self.onRightClick),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchstart\",\r\n      mouseHandler(self.onMouseDown),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchmove\",\r\n      mouseHandler(self.onMouseMove),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchend\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n    self.element.addEventListener(\r\n      \"touchcancel\",\r\n      mouseHandler(self.onMouseUp),\r\n      false\r\n    );\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\n\r\nmodule.exports = function(self) {\r\n  self.addNode = function(node) {\r\n    self.graph.addNode(node.id, node.data);\r\n    var graphNode = self.graph.getNode(node.id);\r\n    graphNode.x = node.x;\r\n    graphNode.y = node.y;\r\n    graphNode.fx = node.fx;\r\n    graphNode.fy = node.fy;\r\n    graphNode.pinnedx = node.fx != undefined;\r\n    graphNode.pinnedy = node.fy != undefined;\r\n    self.prepNode(graphNode);\r\n    self.drawNode(graphNode);\r\n    graphNode.links = [];\r\n    self.layoutInit = true;\r\n    return graphNode;\r\n  };\r\n\r\n  self.removeNode = function(node) {\r\n    if (!node || !node.id) {\r\n      return;\r\n    }\r\n    self.removeGraphEdges(node);\r\n    self.undrawEdges(node);\r\n    self.nodes.remove(node.renderData.draw_object);\r\n    self.graph.removeNode(node.id);\r\n    self.undrawNode(node);\r\n    self.nodeCount -= 1;\r\n  };\r\n\r\n  self.removeGraphEdges = function(node) {\r\n    var nodeLinks = self.graph.getLinks(node.id);\r\n    if (nodeLinks) {\r\n      nodeLinks.forEach(function(edge) {\r\n        self.graph.removeLink(edge);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.undrawNode = function(node) {\r\n    var nodes = self.force.nodes();\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i].id == node.id) {\r\n          self.scene.remove(nodes[i].renderData.draw_object);\r\n          nodes[i].renderData.textHolder.children[0].element.hidden = true;\r\n          nodes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.undrawEdges = function(node) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    var killed = 0;\r\n    for (var i = 0; i - killed < self.lineIndices.length; i++) {\r\n      if (\r\n        self.lineIndices[i - killed].source.id == node.id ||\r\n        self.lineIndices[i - killed].target.id == node.id\r\n      ) {\r\n        for (var j = i - killed; j < self.lineIndices.length; j++) {\r\n          var k = j + 1;\r\n          if (k == self.lineIndices.length) {\r\n            positions[j * 6] = 0;\r\n            positions[j * 6 + 1] = 0;\r\n            positions[j * 6 + 3] = 0;\r\n            positions[j * 6 + 4] = 0;\r\n            colors[j * 6] = 255;\r\n            colors[j * 6 + 1] = 160;\r\n            colors[j * 6 + 2] = 80;\r\n            colors[j * 6 + 3] = 255;\r\n            colors[j * 6 + 4] = 160;\r\n            colors[j * 6 + 5] = 80;\r\n          } else {\r\n            self.lineIndices[j] = self.lineIndices[k];\r\n            self.lineObjects[j * 2] = self.lineObjects[k * 2];\r\n            self.lineObjects[j * 2 + 1] = self.lineObjects[k * 2 + 1];\r\n            positions[j * 6] = positions[k * 6];\r\n            positions[j * 6 + 1] = positions[k * 6 + 1];\r\n            positions[j * 6 + 3] = positions[k * 6 + 3];\r\n            positions[j * 6 + 4] = positions[k * 6 + 4];\r\n            colors[j * 6] = colors[k * 6];\r\n            colors[j * 6 + 1] = colors[k * 6 + 1];\r\n            colors[j * 6 + 2] = colors[k * 6 + 2];\r\n            colors[j * 6 + 3] = colors[k * 6 + 3];\r\n            colors[j * 6 + 4] = colors[k * 6 + 4];\r\n            colors[j * 6 + 5] = colors[k * 6 + 5];\r\n          }\r\n        }\r\n        self.lineIndices.pop();\r\n        self.lineObjects.pop();\r\n        self.lineObjects.pop();\r\n        self.drawCount -= 2;\r\n        killed += 1;\r\n      }\r\n    }\r\n    // console.log(\"Deleted \" + killed.toString() + \" edges\");\r\n  };\r\n\r\n  self.getNode = function(node_id) {\r\n    return self.graph.getNode(node_id);\r\n  };\r\n\r\n  self.addEdge = function(source, target, visible = true) {\r\n    var withinState = (source.data.ref.GEOID === target.data.ref.GEOID)\r\n    var withinFamily = (source.data.ref.Family === target.data.ref.Family)\r\n    var locdata = {\r\n      fromlocLatY: source.data.ref.LatY,\r\n      fromlocLonX : source.data.ref.LonX,\r\n      tolocLatY : target.data.ref.LatY,\r\n      tolocLonX: target.data.ref.LonX,\r\n      withinState: withinState,\r\n      withinFamily: withinFamily\r\n    }\r\n    self.graph.addLink(source.id, target.id,locdata);\r\n    self.drawEdge(self.getNode(source.id), self.getNode(target.id), visible);\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  self.highlightNode = function (node, toggle, color = def.NODE_HIGHLIGHT) {\r\n    // if (toggle) {\r\n    //   node.renderData.draw_object.children[0].material.color.setHex(color);\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // } else {\r\n    //   node.renderData.draw_object.children[0].material.color.set(\r\n    //     node.renderData.hcolor\r\n    //   );\r\n    //   node.renderData.draw_object.children[0].visible = false;\r\n    // }\r\n  };\r\n\r\n  /**\r\n   *  Highlight edges from and to a node and hide others\r\n   */\r\n  self.highlightEdges = function (node, toggle) {\r\n    const froms = [];\r\n    const tos = [];\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      for (var j = 0; j < self.selection[i].links.length; j++) {\r\n        if (!self.selection[i]) continue\r\n        froms.push(self.selection[i].links[j].fromId);\r\n        tos.push(self.selection[i].links[j].toId);\r\n      }\r\n    }\r\n    if (toggle) {\r\n      for (var i = 0; i < node.links.length; i++) {\r\n        froms.push(node.links[i].fromId);\r\n        tos.push(node.links[i].toId);\r\n      }\r\n      self.highlightNeighbors(node, froms, tos);\r\n    } else {\r\n      self.highlightNeighbors(node, froms, tos);\r\n    }\r\n  };\r\n\r\n  /**\r\n    *  Highlight edges and nodes on the path \r\n    */\r\n  self.highlightPathEdgeNode = function (pathnode) {\r\n\r\n\r\n    if (pathnode.length == 0) {\r\n      //no path selected \r\n      self.graph.forEachNode(function (n) {\r\n        self.colorNodeOpacity(n, 1);\r\n      })\r\n      self.highlightAllEdges()\r\n      return\r\n    }\r\n    //first dehighlight all nodes \r\n    self.graph.forEachNode(function (n) {\r\n\r\n      self.colorNodeOpacity(n, 0.2);\r\n    })\r\n\r\n    pathnode.forEach((node) => {\r\n      self.colorNodeOpacity(node, 1);\r\n    })\r\n    self.highlightNode(pathnode[0], true)\r\n    self.highlightNode(pathnode[pathnode.length - 1], true)\r\n    // pathnode[0].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n    // pathnode[pathnode.length - 1].renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n\r\n\r\n    //highlight edges\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n\r\n    //first dehighlight all edges\r\n    self.lineIndices.forEach(function (link) {\r\n      link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    })\r\n    //undirected \r\n    //then highlight only the node's edges\r\n    // for (let i = 0; i < pathnode.length-1; i++) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if ((link.source.id == pathnode[i].id && link.target.id == pathnode[i+1].id) || (link.source.id == pathnode[i+1].id && link.target.id == pathnode[i].id))  {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     }\r\n    //   })\r\n    // } \r\n    const pathnnodeid = pathnode.map(p => p.id)\r\n    self.lineIndices.forEach(function (link) {\r\n      if (((pathnnodeid.indexOf(link.source.id) !== -1 && pathnnodeid.indexOf(link.target.id) !== -1)) || ((pathnnodeid.indexOf(link.target.id) !== -1 && pathnnodeid.indexOf(link.source.id) !== -1))) {\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Highlight adjacent nodes\r\n   * \r\n   * Also highlights edges.\r\n   */\r\n  self.highlightNeighbors = function (node, froms, tos) {\r\n    self.graph.forEachNode(n => {\r\n      if (self.selection.indexOf(n) != -1 || n == node) {\r\n        // If the node is selected or the node is the node to be highlighted\r\n        self.colorNodeOpacity(n, 1);\r\n        self.colorNodeEdge(n);  //set the node.renderData.linecolor , i.e. color edges by nodes  \r\n        // for (var i = 0; n.linkObjs && i < n.linkObjs.length; i++) {\r\n        //   n.linkObjs[i].linecolor = n.renderData.linecolor;\r\n        // }\r\n      } else if (\r\n        self.doHighlightNeighbors &&\r\n        (froms.indexOf(n.id) != -1 || tos.indexOf(n.id) != -1)\r\n      ) {\r\n        // If the node is not selected or highlighted and\r\n        // if the node is present in either froms or tos arrays\r\n        self.colorNodeOpacity(n, 1);\r\n        // self.colorNodeEdge(n, false);\r\n      } else if (\r\n        !self.prevHighlights ||\r\n        self.prevHighlights.indexOf(n.id) == -1\r\n      ) {\r\n        self.colorNodeOpacity(n, 0.2);\r\n        // self.colorNodeEdge(n, false);\r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   *  Change color of node edges\r\n   */\r\n  //  self.colorNodeEdge = function(node, isHighlighted) {\r\n  //   let red = new THREE.Color(appState.graph.edges.color).r;\r\n  //   let blue = new THREE.Color(appState.graph.edges.color).g;\r\n  //   let green = new THREE.Color(appState.graph.edges.color).b;\r\n  //   if(isHighlighted) {\r\n  //     node.renderData.linecolor.r = red;\r\n  //     node.renderData.linecolor.g = blue;\r\n  //     node.renderData.linecolor.b = green;\r\n  //     self.arrow.material.color.setRGB(red, blue, green);\r\n  //   } else {\r\n  //     node.renderData.linecolor.r =  self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.g = self.darkMode ? 0.25 : .75;\r\n  //     node.renderData.linecolor.b = self.darkMode ? 0.25 : .75;\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n  self.colorNodeArrayEdge = function (nodearray) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (nodearray.length < 1) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight neighbor edges of nodes in the array \r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight neighbor edges of nodes in the array\r\n      nodearray.forEach(node => {\r\n        self.lineIndices.forEach(function (link) {\r\n          if (link.source.id == node.id || link.target.id == node.id) {\r\n            link.linecolor.r = red;\r\n            link.linecolor.g = blue;\r\n            link.linecolor.b = green;\r\n          }\r\n        })\r\n      })\r\n\r\n\r\n\r\n    }\r\n\r\n  }\r\n\r\n  self.decolorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) return;\r\n    else {                     //dehighlight any edges linkto/from the node\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n          link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n          link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        }\r\n      })\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  self.changeSingleNodeColorEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) return;\r\n    else {                     //only highlight the node's edges\r\n      // //first dehighlight all edges\r\n      // self.lineIndices.forEach(function (link) {\r\n      //   link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n      //   link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n      //   link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      // })\r\n      //don't dehilight only do highlight the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  // highlight only the node's neighbor edges in the whole sociogram\r\n  self.colorNodeEdge = function (node) {\r\n    let red = new THREE.Color(appState.graph.edges.color).r;\r\n    let blue = new THREE.Color(appState.graph.edges.color).g;\r\n    let green = new THREE.Color(appState.graph.edges.color).b;\r\n    if (!node) {  //highlight all the edges \r\n\r\n\r\n      self.lineIndices.forEach(function (link) {\r\n\r\n        link.linecolor.r = red;\r\n        link.linecolor.g = blue;\r\n        link.linecolor.b = green;\r\n      })\r\n\r\n    } else {                     //only highlight the node's edges\r\n      //first dehighlight all edges\r\n      self.lineIndices.forEach(function (link) {\r\n        link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n      })\r\n      //then highlight only the node's edges\r\n      self.lineIndices.forEach(function (link) {\r\n        if (link.source.id == node.id || link.target.id == node.id) {\r\n          link.linecolor.r = red;\r\n          link.linecolor.g = blue;\r\n          link.linecolor.b = green;\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n\r\n    // if (isHighlighted) {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     if (link.source.id == node.id || link.target.id == node.id) {\r\n    //       link.linecolor.r = red;\r\n    //       link.linecolor.g = blue;\r\n    //       link.linecolor.b = green;\r\n    //     } else {\r\n    //       link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //       link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //     }\r\n\r\n    //   })\r\n\r\n    //   // node.renderData.linecolor.r = red;\r\n    //   // node.renderData.linecolor.g = blue;\r\n    //   // node.renderData.linecolor.b = green;\r\n    //   self.arrow.material.color.setRGB(red, blue, green);\r\n\r\n    // } else {\r\n    //   self.lineIndices.forEach(function (link) {\r\n    //     link.linecolor.r = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n    //   })\r\n\r\n    // node.renderData.linecolor.r =  self.darkMode ? 0.25 : 0.89;\r\n    // node.renderData.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n    // node.renderData.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n  }\r\n\r\n  // };\r\n\r\n\r\n\r\n  /**\r\n   *  Change node opacity\r\n   */\r\n  self.colorNodeOpacity = function (node, op) {\r\n    node.renderData.draw_object.material.opacity = op;\r\n  };\r\n  self.colorNode = function (node, op) {\r\n    node.renderData.draw_object.material.color.setHex(op);\r\n  }\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nvar $ = require(\"jquery\");\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\nmodule.exports = function (self) {\r\n  \r\n\r\n\r\n  /**\r\n   * Mouse move event that selections nodes in selection box\r\n   */\r\n  self.onMouseMove = function (selection, mouseX, mouseY, button, ctrl) {  \r\n    // check if left button is not down\r\n    self.mouseX = mouseX;\r\n    self.mouseY = mouseY;\r\n    if (self.leftMouseDown && self.mouseDown) {\r\n      appState.graph.mapClicked = null\r\n      appState.graph.areaSelected = undefined;\r\n      // appState.graph.networkClicked = null\r\n      \r\n      // left-clicked empty space (i.e., not clicking a node)\r\n      if (!self.dragging && self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        self.clearSelection();\r\n        // appState.graph.mapClicked = null\r\n        // appState.graph.degreeselection = []\r\n        // appState.graph.degreebrushed = false\r\n      }\r\n      \r\n\r\n\r\n      if (!self.dragging) {\r\n        // add nodes enclosed by selection box into node selection\r\n        self.checkSelection(mouseX, mouseY);\r\n      }\r\n    }\r\n\r\n    \r\n\r\n\r\n    if (self.selection.length > 0) {\r\n      // reactivate (in D3's terminology: reheat) the force layout\r\n      if (self.dragging) {\r\n        self.force.alpha(1);\r\n      }\r\n      // update position of nodes in selection\r\n      self.updateSelection(mouseX, mouseY);\r\n      // console.log(self.selection)\r\n      // console.log(appState.graph.selectedNodes)\r\n      self.selection = self.uniqueArrayByAttribute(self.selection, 'id')\r\n      \r\n    }\r\n\r\n    if (!self.mouseDown) {\r\n      self.onHover(selection);\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n    } else {\r\n      // if mouse is in minimap, do nothing else\r\n      if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n        self.minimap.panToMousePosition(\r\n          self.minimap.mouseX,\r\n          self.minimap.mouseY\r\n        );\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      // update selection box size/position\r\n      if (self.leftMouseDown && !self.dragging) {\r\n        if (self.showBox) {\r\n          self.selectBox.visible = true;\r\n          self.showBox = false;\r\n        }\r\n        self.selectBox.position.x = mouseX;\r\n        self.selectBox.position.y = mouseY;\r\n        var diffx = self.mouseStart.x - mouseX;\r\n        var diffy = self.mouseStart.y - mouseY;\r\n        self.selectBox.scale.set(diffx, diffy, 1);\r\n      } else {\r\n        self.selectBox.visible = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Mouse hover over node event that highlights the node and neighbors at mouse position\r\n   */\r\n  self.onHover = function (node) {\r\n    if(appState.graph.mapClicked) return;\r\n    if(appState.graph.pathHovered && appState.graph.pathHovered.pathnode.length>0) return;\r\n    if(self.selection.length>0) return;\r\n    if (self.lastHover && self.selection.indexOf(self.lastHover) == -1) {\r\n      self.highlightNode(self.lastHover, false);\r\n      self.lastHover.renderData.textHolder.children[0].element.hideme = true;\r\n      self.highlightEdges(node, false);\r\n    }\r\n    self.lastHover = node;\r\n    if (node) {\r\n      // self.highlightNode(node, true);\r\n      // node.renderData.textHolder.children[0].element.hideme = false;\r\n      // self.highlightEdges(node, true);\r\n      self.highlightClickNode(node)\r\n      //set currently hovered node\r\n      appState.graph.currentlyHovered = node;\r\n    } else if (self.selection.length == 0) {\r\n      self.graph.forEachNode(n => {\r\n        self.colorNodeOpacity(n, 1);\r\n        \r\n        self.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n      });\r\n      self.colorNodeEdge(null);\r\n      appState.graph.currentlyHovered = null;\r\n    }\r\n    // if (self.prevHighlights != undefined) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.colorNodeOpacity(self.prevHighlights[i], 1);\r\n    //     self.highlightNode(self.prevHighlights[i], true, def.SEARCH_HIGHLIGHT);\r\n    //   }\r\n    // }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n  // vars to get time at mouse press and time at mouse release\r\n  var startTime = 0;\r\n  var endTime = 0;\r\n  /**\r\n   * Mouse down event to start a selection box or start dragging a node\r\n   */\r\n  self.onMouseDown = function (selection, mouseX, mouseY, button, ctrl) {\r\n    // console.log(\"triggered\")\r\n    // if mouse is in minimap, do nothing else\r\n    if (self.isMouseCoordinatesOnMinimap && self.mapShowing) {\r\n      self.mouseDown = true;\r\n      self.minimap.panToMousePosition(self.minimap.mouseX, self.minimap.mouseY);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    self.leftMouseDown = true;\r\n    if (self.leftMouseDown) {\r\n      self.mouseDown = true;\r\n      self.mouseStart = new THREE.Vector3(mouseX, mouseY, 0);\r\n      if (button == 0 && !self.dragging) {\r\n        self.showBox = true;\r\n      }\r\n\r\n      \r\n      \r\n      if (self.selection.indexOf(selection) == -1 && !ctrl) {\r\n        for (var i = 0; i < self.selection.length; i++) {\r\n          self.selection[i].renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            self.selection[\r\n              i\r\n            ].renderData.draw_object.children[0].visible = false;\r\n            // self.selection[\r\n            //   i\r\n            // ].renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            self.selection[i].renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          self.selection[\r\n            i\r\n          ].renderData.textHolder.children[0].element.hideme = true;\r\n          // self.selection[\r\n          //   i\r\n          // ].renderData.draw_object.material.opacity = 0.2;\r\n        }\r\n        self.selection = [];\r\n      }\r\n\r\n\r\n      if(selection) {\r\n        //when any node is clicked, un-smartpause if smartpaused\r\n        //appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused\r\n        appState.graph.smartPause.interactingWithGraph = true;\r\n        \r\n        \r\n        \r\n      }\r\n\r\n\r\n\r\n      \r\n\r\n\r\n      //captures click times to measure time distance between clicks\r\n      oldStartTime = startTime;\r\n      startTime = Date.now();\r\n\r\n      //keeps track of time difference\r\n      clickDifference = startTime - oldStartTime;\r\n\r\n      //sets whether or not last click was \r\n      //double click or not\r\n      // console.log(clickDifference)\r\n      if (clickDifference < 1500) {\r\n        self.doubleClicked = true;\r\n        console.log('doubleclicked')\r\n        // console.log(selection)\r\n        \r\n      } else {\r\n        self.doubleClicked = false;\r\n        console.log(clickDifference)\r\n      }\r\n\r\n      \r\n\r\n      //selects single node when dragged\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        if (self.selection.indexOf(selection) == -1) {\r\n          self.selection.push(selection);\r\n\r\n          selection.renderData.isSelected = false;\r\n        }\r\n      }\r\n\r\n    //   if(self.selection.length == 1){\r\n          \r\n    //     appState.graph.mapClicked = self.selection[0]\r\n      \r\n    // }\r\n    // console.log(selection)\r\n\r\n      if (selection) {\r\n        self.dragging = selection;\r\n        //only pins node if double-clicked\r\n        if (self.doubleClicked) {\r\n          //passing in 'selection' node to pass information for node to pin\r\n          // self.updateSelection(self.dragging.x, self.dragging.y, selection);\r\n          // if(appState.graph.selectedNodes.indexOf(selection)){\r\n          //   appState.graph.selectedNodes = appState.graph.selectedNodes.filter((obj) => obj.id !== selection.id);\r\n          // }else {\r\n          //   appState.graph.selectedNodes.push(selection)\r\n          // }\r\n          \r\n        } else if (ctrl) {\r\n          self.selection.splice(self.selection.indexOf(selection), 1);\r\n          selection.renderData.isSelected = false;\r\n          if (!def.NODE_NO_HIGHLIGHT) {\r\n            selection.renderData.draw_object.children[0].visible = false;\r\n            // selection.renderData.draw_object.material.opacity = 0.2;\r\n          } else {\r\n            selection.renderData.draw_object.material.color.set(\r\n              new THREE.Color(self.selection[i].renderData.color)\r\n            );\r\n          }\r\n          selection.renderData.textHolder.children[0].element.hideme = true;\r\n          // selection.renderData.draw_object.material.opacity = 0.2;\r\n          self.dragging = null;\r\n        }\r\n      } else {\r\n        if (self.newNodeIds) {\r\n          self.highlightNodeIds([], true);\r\n          self.newNodeIds = undefined;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  self.areArraysIdentical= function(arr1, arr2) {\r\n    if (arr1.length !== arr2.length) {\r\n      return false; // If the lengths are different, the arrays can't be identical\r\n    }\r\n  \r\n    for (let i = 0; i < arr1.length; i++) {\r\n      if (arr1[i] !== arr2[i]) {\r\n        return false; // If any elements differ, the arrays are not identical\r\n      }\r\n    }\r\n  \r\n    return true; // If all elements match, the arrays are identical\r\n  }\r\n\r\n  //unique by attribute for a list of dict\r\n  self.uniqueArrayByAttribute= function(arr, attribute) {\r\n    const uniqueMap = new Map();\r\n    const result = [];\r\n  \r\n    arr.forEach((item) => {\r\n      if (!uniqueMap.has(item[attribute])) {\r\n        uniqueMap.set(item[attribute], true);\r\n        result.push(item);\r\n      }\r\n    });\r\n  \r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Mouse up event that closes selection flags and emits selection to Argo\r\n   */\r\n  self.onMouseUp = function (selection, mouseX, mouseY, button, ctrl) {\r\n    endTime = Date.now();\r\n    self.mouseDown = false;\r\n    \r\n    //when not clicking, nodes aren't being interacted with\r\n    appState.graph.smartPause.interactingWithGraph = false;\r\n    appState.graph.mapClicked = null\r\n    appState.graph.areaSelected = undefined;\r\n    appState.graph.degreeselection = []\r\n    appState.graph.degreebrushed = false\r\n    appState.graph.highlightCommonNodes = false;\r\n    appState.graph.showIntersect = false;\r\n    if(appState.graph.pickUpAlter){\r\n      self.updateSelectionOutOpacity();\r\n    }\r\n    else{\r\n      self.updateSelectionOpacity();\r\n    }\r\n\r\n    // self.lastTimeSelectionLength = self.selection.length\r\n    //selection is the node when mouse is up on, self.selection are the nodes when brushed, slef.selectBox.visible can help tell if it is selected by dragging or click\r\n    if(ctrl){\r\n      \r\n      appState.graph.selectedSets.push(self.selection.slice(self.lastTimeSelectionLength))\r\n      self.lastTimeSelectionLength = self.selection.length\r\n    }else if(self.selectBox.visible){   // not ctrled but when dragging not clicking, then start a new set collection\r\n      appState.graph.selectedSets = []\r\n      appState.graph.selectedSets.push(self.selection)\r\n      self.lastTimeSelectionLength = self.selection.length\r\n    }\r\n\r\n    if (selection && !self.selectBox.visible ) {  // when mouse up on one node while not dragging, the node is selected, add or remove the node to/from mapclickedarray and its neighbors to setSelected and do highlight\r\n      const thenode = selection\r\n\r\n      //when double click, select / remove the single node from selection\r\n      if(self.doubleClicked){ \r\n        if(appState.graph.selectedNodes.indexOf(thenode)>0){  //if in selection then remove\r\n          appState.graph.selectedNodes = appState.graph.selectedNodes.filter((obj)=> obj.id!==thenode.id )\r\n          //dehighlight self\r\n          self.selection = appState.graph.selectedNodes\r\n          self.colorNodeOpacity(thenode, 0.2);\r\n          self.decolorNodeEdge (thenode)\r\n        }else{\r\n          appState.graph.selectedNodes.push(thenode)\r\n          self.selection = appState.graph.selectedNodes\r\n          //dehighlight self\r\n          self.colorNodeOpacity(thenode, 1);\r\n          self.changeSingleNodeColorEdge(thenode)\r\n          \r\n        }\r\n      }\r\n\r\n\r\n      //click to add ego-centric network to selection \r\n      if (appState.graph.mapClickedArray.indexOf(thenode) < 0) {\r\n\r\n\r\n        appState.graph.mapClickedArray.push(thenode)\r\n        const thenodeneightbor= self.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.selectedSets.push(thenodeneightbor)\r\n        // thenodeneightbor.forEach((n)=>{\r\n        //   appState.graph.selectedNodes.push(n)\r\n        // })\r\n        appState.graph.selectedNodes = appState.graph.selectedNodes.concat(thenodeneightbor)\r\n        // appState.graph.selectedNodes.push(...thenodeneightbor)\r\n        appState.graph.selectedNodes = self.uniqueArrayByAttribute(appState.graph.selectedNodes, 'id');\r\n      \r\n        self.selection = appState.graph.selectedNodes\r\n        \r\n        self.highlightClickArrayNode(appState.graph.mapClickedArray)\r\n      } else {\r\n        appState.graph.mapClickedArray = appState.graph.mapClickedArray.filter((obj) => obj.id !== thenode.id);\r\n        const toRemoveSets = self.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.selectedSets = appState.graph.selectedSets.filter((nodeset)=>!self.areArraysIdentical(nodeset,toRemoveSets))\r\n        let thenodeneighbors = []\r\n        appState.graph.mapClickedArray.forEach((mapClicked) => {\r\n          const nodeneighbor = self.getNeighborNodesFromGraph(mapClicked)\r\n          nodeneighbor.forEach((n)=>{\r\n            thenodeneighbors.push(n)\r\n          })\r\n          // thenodeneighbors.push(...nodeneighbor)\r\n        })\r\n      \r\n        appState.graph.selectedNodes =  self.uniqueArrayByAttribute(thenodeneighbors, 'id')\r\n        self.selection = appState.graph.selectedNodes\r\n\r\n        self.highlightClickArrayNode(appState.graph.mapClickedArray)\r\n      }\r\n\r\n      \r\n\r\n\r\n      // appState.graph.networkClicked = thenode\r\n    }\r\n\r\n    if(self.selection.length == 0){\r\n      appState.graph.mapClicked = null\r\n      appState.graph.mapClickedArray = []\r\n      appState.graph.selectedNodes = []\r\n      appState.graph.selectedSets = []\r\n      self.lastTimeSelectionLength = 0\r\n      appState.graph.commonSetNodes =[]\r\n      appState.graph.interSetNodes = []\r\n      self.selection = []\r\n      appState.graph.areaSelected = undefined;\r\n    }\r\n\r\n    // if(self.selection.length>0){\r\n    //   const tselection = self.selection.map(n=>n)\r\n    //   appState.graph.selectedNodes = tselection\r\n    // }\r\n    \r\n  \r\n    // Left or right mouse button\r\n    if (true) {\r\n      self.showBox = false;\r\n      self.dragging = null;\r\n      self.selectBox.visible = false;\r\n\r\n      self.ee.emit(\"select-nodes\", self.selection);\r\n      \r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Right click event to save right clicked node\r\n   */\r\n  self.onRightClick = function (selection) {\r\n    if (selection) {\r\n      self.rightClickedNode = selection;\r\n    } else {\r\n      self.rightClickedNode = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Right click event that emits context menu event to Argo\r\n   */\r\n  self.onRightClickCoords = function (event) {\r\n    // Don't show menu if dragging camera\r\n    if (endTime - startTime < 200) {\r\n      self.ee.emit(\"right-click\", {\r\n        pageX: event.pageX,\r\n        pageY: event.pageY\r\n      });\r\n    }\r\n  };\r\n};","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set all nodes to a size\r\n   */\r\n  self.setUniformNodeSize = function(s) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.scale.set(s, s, 1);\r\n      var hsize = 1 + def.HIGHLIGHT_SIZE / s;\r\n      node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a size based on a value in the node's data\r\n   */\r\n  self.setNodeDataSize = function(dataValue) {\r\n    self.graph.forEachNode(function(node) {\r\n      dataVal = node.renderData[dataValue];\r\n      if (!dataVal) {\r\n        console.log(\"Data value does not exist\");\r\n      } else {\r\n        dataVal = Math.log(dataVal + 1);\r\n        node.renderData.draw_object.scale.set(dataVal, dataVal, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / dataVal;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color\r\n   */\r\n  self.setUniformNodeColor = function(hsvDegree) {\r\n    self.graph.forEachNode(function(node) {\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 43%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set all nodes to a color based on a value in the node's data\r\n   */\r\n  self.setNodeDataColor = function(dataValue) {\r\n    var i = 0;\r\n    values = [];\r\n    min = null;\r\n    max = null;\r\n\r\n    self.graph.forEachNode(function(node) {\r\n      if ((dataVal = node.renderData[dataValue])) {\r\n        if (min == null) min = dataVal;\r\n        if (max == null) max = dataVal;\r\n        if (dataVal < min) min = dataVal;\r\n        else if (dataVal > max) max = dataVal;\r\n        values[i] = dataVal;\r\n        i += 1;\r\n      } else {\r\n        values[i] = -1;\r\n      }\r\n    });\r\n\r\n    i = 0;\r\n    self.graph.forEachNode(function(node) {\r\n      var hsvDegree;\r\n      if (values[i] == -1) {\r\n        hsvDegree = 0;\r\n      } else {\r\n        values[i] = (values[i] - min) / (max - min);\r\n        hsvDegree = values[i] * 120;\r\n      }\r\n      node.renderData.draw_object.material.color.set(\r\n        new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 48%)\")\r\n      );\r\n      if (!def.NODE_NO_HIGHLIGHT) {\r\n        node.renderData.draw_object.children[0].material.color.set(\r\n          new THREE.Color(\"hsl(\" + hsvDegree + \", 100%, 63%)\")\r\n        );\r\n      }\r\n      i++;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Map a node attribute based on some mapping function\r\n   */\r\n  self.mapNodeAttributes = function(mapping, nodes = null) {\r\n    let val;\r\n    if (mapping[0] == \"degree\") {\r\n      val = node => (node.links ? node.links.length + 2 : 2);\r\n    } else if (mapping[0] == \"scalex\") {\r\n      val = node => node.renderData.draw_object.scale.x;\r\n    } else {\r\n      val = node => mapping[0];\r\n    }\r\n\r\n    let mod;\r\n    if (mapping[1] == \"volume\") {\r\n      mod = val => self.volToRadius(val);\r\n    } else if (mapping[1] == \"mult\") {\r\n      mod = val => val * mapping[3](val);\r\n    } else if (mapping[1] == \"add\") {\r\n      mod = val => val + mapping[3](val);\r\n    } else if (mapping[1] == \"log\") {\r\n      mod = val => Math.log(val);\r\n    } else {\r\n      mod = val => val;\r\n    }\r\n\r\n    let attr;\r\n    if (mapping[2] == \"scalexy\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.scale.set(val, val, 1);\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / val;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      };\r\n    } else if (mapping[2] == \"edgeColorRed\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.r = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.b = 1;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n        node.renderData.linecolor.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"edgeColorGreen\") {\r\n      attr = (node, val) => {\r\n        node.renderData.linecolor.g = 1;\r\n        node.renderData.linecolor.b = 1 - val / 5;\r\n        node.renderData.linecolor.r = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"nodeColorBlue\") {\r\n      attr = (node, val) => {\r\n        node.renderData.draw_object.material.color.b = 1;\r\n        node.renderData.draw_object.material.color.r = 1 - val / 5;\r\n        node.renderData.draw_object.material.color.g = 1 - val / 5;\r\n      };\r\n    } else if (mapping[2] == \"pinned\") {\r\n      attr = (node, val) => {\r\n        node.pinnedx = val;\r\n        node.pinnedy = val;\r\n      };\r\n    } else if (mapping[2] == \"labelSize\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelFontSize(node, val);\r\n      };\r\n    } else if (mapping[2] == \"labelLength\") {\r\n      attr = (node, val) => {\r\n        self.changeLabelLength(node, val);\r\n      };\r\n    }\r\n\r\n    self.changeNodes(val, mod, attr, nodes);\r\n  };\r\n\r\n  /**\r\n   *  get attribute from node using function val\r\n   *  modify result with function mode\r\n   *  set node attribute with attr\r\n   */\r\n  self.changeNode = function(val, mod, attr, node) {\r\n    var v = val(node);\r\n    if (v != undefined) {\r\n      var r = mod(v);\r\n      if (r != undefined) {\r\n        attr(node, r);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  perform changeNode on many nodes\r\n   */\r\n  self.changeNodes = function(val, mod, attr, nodes = null) {\r\n    if (nodes == null) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.changeNode(val, mod, attr, node);\r\n      });\r\n    } else {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        self.changeNode(val, mod, attr, nodes[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelLength = function(node, numChars) {\r\n    node.renderData.textHolder.children[0].element.children[0].style.width =\r\n      numChars.toString() + \"ch\";\r\n  };\r\n\r\n  /**\r\n   * Limit label size by (estimated) characters\r\n   * This is only accurate if the label is monospaced\r\n   */\r\n  self.changeLabelFontSize = function(node, size, relativeSize = 1) {\r\n    size = size * relativeSize *6;\r\n    mapsize  = size/6;\r\n    node.renderData.textHolder.children[0].element.children[0].style.fontSize =\r\n      size.toString() + \"px\";\r\n      node.renderData.textHolder.children[0].element.children[0].style.mapfontSize =\r\n      mapsize.toString() + \"px\";\r\n  };\r\n\r\n  /**\r\n   * Change boundary size\r\n   */\r\n  self.setBoundarySize = function(size) {\r\n    self.renderWidth = size;\r\n    self.renderHeight = size;\r\n    self.boundaries.scale.set(size * 2, size * 2, 1);\r\n    self.boundaries.position.x = -size;\r\n    self.boundaries.position.y = -size;\r\n    self.controls.maxDistance = size * 2;\r\n    self.minimap.camera.position.z = self.renderWidth * 2;\r\n  };\r\n\r\n  /**\r\n   * Change viewport size\r\n   */\r\n  self.setViewPortSize = function(camera) {\r\n    var distance = self.ccamera.position.z;\r\n    var height =\r\n      Math.tan(((camera.fov * Math.PI) / 180) * 0.5) * distance * 2 + 5;\r\n    var width = height * camera.aspect + 5;\r\n    self.viewPort.scale.set(width, height, 1);\r\n    self.viewPort.position.x = camera.position.x - width / 2;\r\n    self.viewPort.position.y = camera.position.y - height / 2;\r\n  };\r\n};\r\n","var def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\nconst { default: appState } = require(\"../../stores\");\r\n\r\n\r\nmodule.exports = function(self) {\r\n  /**\r\n   *  Create highlight mesh\r\n   */\r\n  self.createHighlightMesh = function(node, texture) {\r\n    var shape =\r\n      node.renderData.hshape || node.renderData.shape || def.NODE_HSHAPE;\r\n    if (shape == \"square\") {\r\n      var hgeometry = self.make2x2Rect();\r\n    } else {\r\n      var hgeometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n\r\n    return self.createHighlightDrawObject(hgeometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Sets the material, color, visibility, and size of the highlight drawing for a node.\r\n   */\r\n  self.createHighlightDrawObject = function(hgeometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n    var hsize = def.HIGHLIGHT_SIZE;\r\n\r\n    texture = def.NODE_NO_HTEX ? null : texture;\r\n    var color = def.NODE_NO_HCOLOR\r\n      ? null\r\n      : parseInt(node.renderData.hcolor || def.NODE_HIGHLIGHT);\r\n    var hmaterial = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    hmaterial.transparent = true;\r\n    var highlight = new THREE.Mesh(hgeometry, hmaterial);\r\n    highlight.visible = true;\r\n    highlight.scale.set(1 + hsize / size, 1 + hsize / size, 1);\r\n    highlight.position.z = -0.01;\r\n    return highlight;\r\n  };\r\n\r\n  /**\r\n   *  Create node mesh\r\n   */\r\n  self.createNodeMesh = function(node, texture) {\r\n    var shape = node.renderData.shape || def.NODE_SHAPE;\r\n    if (shape == \"square\") {\r\n      var geometry = self.make2x2Rect();\r\n    } else {\r\n      var geometry = new THREE.CircleGeometry(1, 32);\r\n    }\r\n    return self.createNodeDrawObject(geometry, node, texture);\r\n  };\r\n\r\n  /**\r\n   * Create mesh to visual show pinning\r\n   */\r\n  self.createPinMesh = function(size) {\r\n    var geometry = self.make2x2Rect();\r\n    var color = new THREE.Color(def.PIN_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color });\r\n    var pinMesh = new THREE.Mesh(geometry, material);\r\n    pinMesh.scale.set(0.1, 0.1, 1);\r\n    pinMesh.position.z = 0.01;\r\n    pinMesh.visible = false;\r\n    return pinMesh;\r\n  };\r\n\r\n  /**\r\n   * Create the drawing information for a node\r\n   */\r\n  self.createNodeDrawObject = function(geometry, node, texture) {\r\n    var size = self.getNodeSize(node);\r\n\r\n    texture = def.NODE_NO_TEX ? null : texture;\r\n    var color = def.NODE_NO_COLOR\r\n      ? null\r\n      : new THREE.Color(node.renderData.color || def.NODE_COLOR);\r\n    var material = new THREE.MeshBasicMaterial({ color: color, map: texture });\r\n    material.transparent = true;\r\n    var draw_object = new THREE.Mesh(geometry, material);\r\n    draw_object.scale.set(size, size, 1);\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   * Get the size of a node if it exists, otherwise get it from the render data.\r\n   */\r\n  self.getNodeSize = function(node) {\r\n    var size;\r\n    if (node.renderData.size != undefined) size = node.renderData.size;\r\n    else size = node.renderData[\"size\"];\r\n    return size;\r\n  };\r\n\r\n  self.createNodeLabel = function(node) {\r\n    var material = new THREE.MeshBasicMaterial({\r\n      color: 0x000000,\r\n      wireframe: true,\r\n      wireframeLinewidth: 1,\r\n      side: THREE.DoubleSide\r\n    });\r\n    var geometry = new THREE.PlaneGeometry(1000, 200);\r\n    var textMesh = self.createAndSetupLabelTextMesh(geometry, material);\r\n    var label = self.createAndSetupLabelDiv(node, textMesh);\r\n    var textHolder = self.createAndSetupTextHolder(label, textMesh);\r\n    node.renderData.textHolder = textHolder;\r\n    self.scene.add(textHolder);\r\n  };\r\n\r\n  self.createAndSetupLabelTextMesh = function(geometry, material) {\r\n    var textMesh = new THREE.Mesh(geometry, material);\r\n    textMesh.scale.set(def.TEXT_SIZE, def.TEXT_SIZE, 1);\r\n    var bbox = new THREE.Box3().setFromObject(textMesh);\r\n    textMesh.position.x += (bbox.max.x - bbox.min.x) * def.TEXT_X_OFFSET;\r\n    textMesh.position.y -= (bbox.max.y - bbox.min.y) * def.TEXT_Y_OFFSET;\r\n    textMesh.visible = def.TEXT_WIREFRAME;\r\n    return textMesh;\r\n  };\r\n\r\n  self.createAndSetupLabelDiv = function(node, textMesh) {\r\n    var label = self.createLabelDiv(node);\r\n    label.element.hidden = true;\r\n    label.position.copy(textMesh.position);\r\n    label.scale.copy(textMesh.scale);\r\n    return label;\r\n  };\r\n\r\n  self.createAndSetupTextHolder = function(label, textMesh) {\r\n    var textHolder = new THREE.Object3D();\r\n    textHolder.add(label);\r\n    textHolder.add(textMesh);\r\n    return textHolder;\r\n  };\r\n\r\n  /**\r\n   *  Create label div\r\n   */\r\n  self.createLabelDiv = function(node) {\r\n    // Create canvas to draw text label onto sprite image\r\n    var element = self.createLabelDivElement();\r\n    var content = document.createTextNode(node.renderData.label);\r\n    var textElement = self.createLabelTextElement();\r\n    textElement.appendChild(content);\r\n    element.appendChild(textElement);\r\n    var labelObj = new THREE.CSS3DObject(element);\r\n    return labelObj;\r\n  };\r\n\r\n  /**\r\n   * Creates the Label Div Element for a node's label\r\n   */\r\n  self.createLabelDivElement = function() {\r\n    var element = document.createElement(\"div\");\r\n    element.style.width = \"1000px\";\r\n    element.style.height = \"200px\";\r\n    element.style.backgroundColor = def.TEXT_BACK_COLOR;\r\n    element.style.opacity = def.TEXT_OPACITY;\r\n    return element;\r\n  };\r\n\r\n  /**\r\n   * Creates the text element to add to the label div for a node.\r\n   */\r\n  self.createLabelTextElement = function() {\r\n    var textElement = document.createElement(\"div\");\r\n    textElement.style.width = \"1000px\";\r\n    textElement.style.height = \"2ch\";\r\n    textElement.style.fontSize = \"96px\";\r\n    textElement.style.textOverflow = \"ellipsis\";\r\n    textElement.style.overflow = \"hidden\";\r\n    textElement.style.userSelect = \"all\";\r\n    textElement.style.whiteSpace = \"nowrap\";\r\n    //textElement.setAttribute('contenteditable', 'true');\r\n    return textElement;\r\n  };\r\n\r\n  /**\r\n   * Instantiates, sets highlight for, and sets position for the actual THREE\r\n   * drawing of a node\r\n   */\r\n  self.setupNodeDrawObject = function(node, htexture, texture) {\r\n    var draw_object = self.createNodeMesh(node, texture);\r\n\r\n    // Create highlight\r\n    if (!def.NODE_NO_HIGHLIGHT) {\r\n      var highlight = self.createHighlightMesh(node, htexture);\r\n      draw_object.add(highlight);\r\n    }\r\n\r\n    var pinMesh = self.createPinMesh();\r\n    draw_object.add(pinMesh);\r\n\r\n    draw_object.position.x = node.renderData.x;\r\n    draw_object.position.y = node.renderData.y;\r\n    draw_object.index = node.id;\r\n    draw_object.name = node.id;\r\n    node.renderData.draw_object = draw_object;\r\n\r\n    return draw_object;\r\n  };\r\n\r\n  /**\r\n   *  Create a node object and add it to the scene.\r\n   */\r\n  self.drawNode = function(node) {\r\n    function onHTextureLoad(node, htexture) {\r\n      // Load node texture\r\n      self.textureLoader.load(\r\n        node.renderData.image || def.NODE_TEXTURE,\r\n        onTextureLoad.bind(null, node, htexture)\r\n      );\r\n    }\r\n\r\n    function onTextureLoad(node, htexture, texture) {\r\n      // Create mesh for node\r\n      var draw_object = self.setupNodeDrawObject(node, htexture, texture);\r\n\r\n      // Create div for label\r\n      self.createNodeLabel(node);\r\n\r\n      self.nodeCount += 1;\r\n      self.nodes.add(draw_object);\r\n    }\r\n\r\n    if (def.NODE_NO_HTEX && def.NODE_NO_TEX) {\r\n      onTextureLoad(node, null, null);\r\n    } else {\r\n      // Load highlight texture\r\n      self.textureLoader.load(\r\n        node.renderData.himage || def.NODE_HTEXTURE,\r\n        onHTextureLoad.bind(null, node)\r\n      );\r\n    }\r\n  };\r\n\r\n  let hexToRGB = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? \r\n    new THREE.Color(appState.graph.edges.color)\r\n    : null;\r\n}\r\n\r\nself.getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  var p = 0.017453292519943295;    // Math.PI / 180\r\n  var c = Math.cos;\r\n  var a = 0.5 - c((lat2 - lat1) * p)/2 + \r\n          c(lat1 * p) * c(lat2 * p) * \r\n          (1 - c((lon2 - lon1) * p))/2;\r\n\r\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n}\r\n\r\n  /**\r\n   *  Create an edge and add it to the lineSegments.\r\n   */\r\n  self.drawEdge = function(source, target, visible = true) {\r\n    if (\r\n      source.renderData.draw_object === undefined ||\r\n      target.renderData.draw_object === undefined\r\n    ) {\r\n      setTimeout(self.drawEdge.bind(null, source, target), 50);\r\n      return;\r\n    }\r\n    var index = self.drawCount * 3;\r\n    self.lineObjects[index / 3] = source;\r\n    self.lineObjects[index / 3 + 1] = target;\r\n    if (!source.linkObjs) {\r\n      source.linkObjs = [];\r\n    }\r\n    if (!target.linkObjs) {\r\n      target.linkObjs = [];\r\n    }\r\n    var edgeDist\r\n    if(source.data.ref.LonX){\r\n      const lon1 = source.data.ref.LonX\r\n      const lat1 = source.data.ref.LatY\r\n      const lon2 = target.data.ref.LonX\r\n      const lat2 = target.data.ref.LatY\r\n      edgeDist = self.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n    }\r\n    \r\n\r\n    self.lineIndices.push({\r\n      source: source,\r\n      target: target,\r\n      hide: !visible,\r\n      linecolor: hexToRGB(appState.graph.edges.color),\r\n      edgeDist:edgeDist\r\n      // hexToRGB(appState.graph.edges.color),\r\n      // source.renderData.linecolor, \r\n    });\r\n\r\n    source.linkObjs.push(self.lineIndices[index / 6]);\r\n    target.linkObjs.push(self.lineIndices[index / 6]);\r\n    self.updateColorsAndPositions(source, target, index);\r\n    self.drawCount += 2;\r\n  };\r\n\r\n  /**\r\n   * Update the colors and positions of the edges between source and target\r\n   */\r\n  self.updateColorsAndPositions = function(source, target, index) {\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n\r\n    var v1pos = source.renderData.draw_object.position;\r\n    var v2pos = target.renderData.draw_object.position;\r\n    var v1color = self.lineIndices[index / 6].linecolor;\r\n    var v2color = self.lineIndices[index / 6].linecolor;\r\n    colors[index] = v1color.b;\r\n    positions[index++] = v1pos.x;\r\n    colors[index] = v1color.g;\r\n    positions[index++] = v1pos.y;\r\n    colors[index] = v1color.r;\r\n    positions[index++] = v1pos.z - 0.02;\r\n    colors[index] = v2color.b;\r\n    positions[index++] = v2pos.x;\r\n    colors[index] = v2color.g;\r\n    positions[index++] = v2pos.y;\r\n    colors[index] = v2color.r;\r\n    positions[index++] = v2pos.z - 0.02;\r\n  };\r\n};\r\n","const { default: appState } = require(\"../../stores\");\r\n\r\nvar def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n/**\r\n * These functions are endpoints revealed to Argo frontend\r\n */\r\nmodule.exports = function(self) {\r\n  /**\r\n   * Set frame.mouseMode to the specified mode\r\n   * @param {string} mode name of the mode, currently supports ['select', 'move']\r\n   */\r\n  self.setMouseMode = mode => {\r\n    if (mode === \"select\") {\r\n      // This is the default mode, where users can select one or multiple nodes\r\n      self.mouseMode = \"select\";\r\n      self.isMouseModeMove = false;\r\n    } else if (mode === \"move\") {\r\n      // move mode, where user can drag the screen to achieve panning\r\n      self.mouseMode = \"move\";\r\n      self.isMouseModeMove = true;\r\n    }\r\n  };\r\n\r\n  self.pauseLayout = () => {\r\n    self.paused = true;\r\n  };\r\n  window.pause = self.pauseLayout;\r\n\r\n  self.resumeLayout = () => {\r\n    self.paused = false;\r\n  };\r\n\r\n  self.mapSelectedNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"], self.selection);\r\n  };\r\n\r\n  self.mapAllNodes = () => {\r\n    self.mapNodeAttributes([\"degree\", \"log\", \"scalexy\"]);\r\n  };\r\n\r\n  self.pinSelectedNodes = () => {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.unpinSelectedNodes = () => {\r\n    self.mapNodeAttributes([false, \"\", \"pinned\"], self.selection);\r\n  };\r\n\r\n  self.setLabelFontSize = size => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelFontSize(node, size, self.relativeFontSize);\r\n    });\r\n\r\n    // change the map label size\r\n    size = (size * self.relativeFontSize ) ;\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.fontSize = size.toString() + \"px\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.setLabelRelativeSize = size => {\r\n    self.relativeFontSize = size;\r\n    self.setLabelFontSize(self.labelSize);\r\n  };\r\n\r\n  self.setLabelLength = numChars => {\r\n    self.graph.forEachNode(function(node) {\r\n      self.changeLabelLength(node, numChars);\r\n    });\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.width = numChars.toString() + \"ch\";\r\n    })\r\n    \r\n  };\r\n\r\n  self.toggleMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      self.hideMiniMap();\r\n    } else {\r\n      self.showMiniMap();\r\n    }\r\n  };\r\n\r\n  self.showMiniMap = () => {\r\n    if (self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = true;\r\n    // self.element.appendChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  self.hideMiniMap = () => {\r\n    if (!self.mapShowing) {\r\n      return;\r\n    }\r\n    self.mapShowing = false;\r\n    // self.element.removeChild(self.minimapRenderer.domElement);\r\n  };\r\n\r\n  // The CSS Renderer for rendering labels is the most expensive\r\n  // renderer. For 300+ nodes it's recommended to turn it off by\r\n  // default and only use it when no node is moving to prevent\r\n  // visible lagging (during layout, dragging etc.)\r\n  self.turnOffLabelCSSRenderer = () => {\r\n    if (self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.removeChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = true;\r\n  };\r\n\r\n  // See turnOffLabelCSSRenderer.\r\n  self.turnOnLabelCSSRenderer = () => {\r\n    if (!self.cssRenderer.isPaused) {\r\n      return;\r\n    }\r\n    self.element.appendChild(self.cssRenderer.domElement);\r\n    self.cssRenderer.isPaused = false;\r\n  };\r\n\r\n  // Emits id of every node with label being displayed at this moment.\r\n  // Used to keep mobx state in sync since GraphStore and snapshot\r\n  // needs to save what nodes have labels shown and what not.\r\n  // Also turns off label CSSRenderer when no node is showing label.\r\n  self.updateNodesShowingLabels = () => {\r\n    var nodes = [];\r\n    self.graph.forEachNode(n => {\r\n      var node = self.graph.getNode(n.id);\r\n      if (node.renderData.textHolder.children[0].element.override) {\r\n        nodes.push(n.id);\r\n      }\r\n    });\r\n\r\n    // Turns off label CSSRenderer when no node is showing label.\r\n    // This is because CSSRenderer is slow.\r\n    if (nodes.length == 0) {\r\n      self.turnOffLabelCSSRenderer();\r\n    } else if (!((self.selection.length > 0) && (self.dragging)) || (appState.graph.frame.paused)) { \r\n      //Only turns on when no node is moving\r\n      self.turnOnLabelCSSRenderer();\r\n    }\r\n\r\n    self.ee.emit(\"show-node-label\", nodes);\r\n  };\r\n\r\n  self.toggleSelectedLabels = () => {\r\n    self.toggleLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.showSelectedLabels = () => {\r\n    // document.getElementById(\"showSelected\").style.display=\"none\";\r\n    // document.getElementById(\"hideSelected\").style.display=\"inline\";\r\n    self.showLabels(self.selection.map(n => n.id));\r\n    self.selection.forEach(n=>{\r\n      document.querySelectorAll(`.maptooltip_${n.id}`).forEach(node=>{\r\n        node.style.opacity = 1;\r\n      })\r\n      \r\n    })\r\n      \r\n    if(appState.graph.mapClicked){\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(appState.graph.mapClicked)\r\n      selectneighbors.forEach(n=>{\r\n        document.querySelectorAll(`.maptooltip_${n.id}`).forEach(node=>{\r\n          node.style.opacity = 1;\r\n        })\r\n        \r\n      })\r\n      self.showLabels(selectneighbors.map(n => n.id));\r\n    }\r\n    \r\n  };\r\n\r\n  self.hideSelectedLabels = () => {\r\n    document.getElementById(\"hideSelected\").style.display=\"none\";\r\n    document.getElementById(\"showSelected\").style.display=\"inline\";\r\n    self.hideLabels(self.selection.map(n => n.id));\r\n  };\r\n\r\n  self.toggleLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        if (\r\n          node.renderData.textHolder.children[0].element.override == undefined\r\n        ) {\r\n          node.renderData.textHolder.children[0].element.override = false;\r\n        }\r\n        node.renderData.textHolder.children[0].element.override = !node\r\n          .renderData.textHolder.children[0].element.override;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.showLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = true;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    \r\n    \r\n    \r\n  };\r\n\r\n  self.hideLabels = nodeids => {\r\n    self.graph.forEachNode(n => {\r\n      if (nodeids.includes(n.id)) {\r\n        var node = self.graph.getNode(n.id);\r\n        node.renderData.textHolder.children[0].element.override = false;\r\n      }\r\n    });\r\n    self.updateNodesShowingLabels();\r\n  };\r\n\r\n  self.hideAllLabels = () => {\r\n    // document.getElementById(\"hideAll\").style.display=\"none\";\r\n    // document.getElementById(\"showAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = false;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    //update map tooltip \r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=0;\r\n    })\r\n  };\r\n\r\n  self.showAllLabels = () => {\r\n    // document.getElementById(\"showAll\").style.display=\"none\";\r\n    // document.getElementById(\"hideAll\").style.display=\"inline\";\r\n    self.graph.forEachNode(function(node) {\r\n      var node = self.graph.getNode(node.id);\r\n      node.renderData.textHolder.children[0].element.override = true;\r\n    });\r\n    self.updateNodesShowingLabels();\r\n    document.querySelectorAll('.maptooltip').forEach(node=>{\r\n      node.style.opacity=1;\r\n    })\r\n  };\r\n\r\n  self.setCanvasSize = function(size) {\r\n    self.setBoundarySize(size);\r\n  };\r\n\r\n  self.setAllNodesShape = function(shape) {\r\n    if (self.selection.length == 0) {\r\n      self.graph.forEachNode(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    } else {\r\n      self.selection.forEach(function(node) {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      });\r\n    }\r\n  };\r\n\r\n  self.setAllNodesShapeWithOverride = function(shape, overrides) {\r\n    self.graph.forEachNode(function(node) {\r\n      if (overrides.has(node.id) && overrides.get(node.id).has('shape')) {\r\n        self.setNodeShape(self.graph.getNode(node.id), overrides.get(node.id).get('shape'));\r\n      } else {\r\n        self.setNodeShape(self.graph.getNode(node.id), shape);\r\n      }\r\n    });\r\n  }\r\n\r\n  self.setNodeShape = function(node, shape) {\r\n    if (shape == \"square\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = self.make2x2Rect();\r\n      node.renderData.draw_object.children[0].geometry = self.make2x2Rect();\r\n    } else if (shape == \"circle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 32);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        32\r\n      );\r\n    } else if (shape == \"triangle\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 3);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        3\r\n      );\r\n    } else if (shape == \"pentagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 5);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        5\r\n      );\r\n    } else if (shape == \"hexagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 6);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        6\r\n      );\r\n    } else if (shape == \"octagon\") {\r\n      node.renderData.shape = shape;\r\n      node.renderData.draw_object.geometry = new THREE.CircleGeometry(1, 8);\r\n      node.renderData.draw_object.children[0].geometry = new THREE.CircleGeometry(\r\n        1,\r\n        8\r\n      );\r\n    }\r\n  };\r\n\r\n  self.getNumSelected = function() {\r\n    if (self.selection.length == self.graph.getNodesCount()) {\r\n      return 0;\r\n    }\r\n    return self.selection.length;\r\n  };\r\n\r\n  self.toggleDark = function() {\r\n    self.darkMode = !self.darkMode;\r\n    self.updateViewPortEdgeColor();\r\n  };\r\n\r\n  self.updateViewPortEdgeColor = function() {\r\n    self.viewPort.material.color = new THREE.Color( self.darkMode? 0xffffff : 0x000000 );       \r\n  }\r\n\r\n  self.getGraph = function() {\r\n    return self.graph;\r\n  };\r\n\r\n  self.getNodeList = function() {\r\n    var nodes = [];\r\n    self.graph.forEachNode(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  self.getEdgeList = function(){\r\n    var edges = [];\r\n\r\n    self.graph.forEachLink(function(edge) {\r\n      edges.push(edge);\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  self.getPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.x, node.y];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  self.getPinPositions = function() {\r\n    var poses = {};\r\n    self.graph.forEachNode(function(node) {\r\n      poses[node.id] = [node.fx, node.fy];\r\n    });\r\n    return poses;\r\n  };\r\n\r\n  // retrieves current graph's pinned nodes \r\n  self.getPinnedNodes = function() {\r\n    var poses = new Set();\r\n    self.graph.forEachNode(function(node) {\r\n      if(node.pinnedx && node.pinnedy) {\r\n        poses.add(node.id);\r\n      }\r\n    });\r\n    return poses;\r\n  }\r\n\r\n  //pins nodes that were pinned from a graph loaded in\r\n  self.setPinnedNodes = function(nodesToPin) {\r\n    self.mapNodeAttributes([true, \"\", \"pinned\"], nodesToPin);\r\n  }\r\n\r\n  var alias = false;\r\n  self.toggleAlias = () => {\r\n    // TODO: recreate renderer with new antialias\r\n    // self.init(alias);\r\n    // self.display();\r\n    alias = !alias;\r\n  };\r\n\r\n  self.setLastNode = id => {\r\n    self.lastNode = self.graph.getNode(id);\r\n  };\r\n\r\n  self.dragLastNode = () => {\r\n    self.selectNode(self.lastNode);\r\n  };\r\n\r\n  var x = 1.0;\r\n  self.lowerRes = () => {\r\n    x -= 0.1;\r\n    self.renderer.setPixelRatio(x);\r\n    self.onWindowResize();\r\n  };\r\n\r\n  self.toggleNeighborHighlight = function() {\r\n    self.doHighlightNeighbors = !self.doHighlightNeighbors;\r\n  };\r\n\r\n  self.highlightNodeIds = function(nodeids, toggle) {\r\n    if (nodeids.length > 0 && Array.isArray(nodeids[0])) {\r\n      nodeids = nodeids[0];\r\n    }\r\n    // if (self.prevHighlights) {\r\n    //   for (var i = 0; i < self.prevHighlights.length; i++) {\r\n    //     self.highlightNode(\r\n    //       self.prevHighlights[i],\r\n    //       !toggle,\r\n    //       def.SEARCH_HIGHLIGHT\r\n    //     );\r\n    //   }\r\n    // }\r\n    self.prevHighlights = [];\r\n    // self.graph.forEachNode(function(node) {\r\n    //   if (nodeids.indexOf(node.id) != -1) {\r\n    //     self.highlightNode(node, toggle, def.SEARCH_HIGHLIGHT);\r\n    //     self.prevHighlights.push(node);\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  self.removeSelected = function() {\r\n    for (var i = 0; i < self.selection.length; i++) {\r\n      self.removeNode(self.selection[i]);\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.removeNodesByIds = function(nodeids) {\r\n    for (var i = 0; i < nodeids.length; i++) {\r\n      const node = self.graph.getNode(nodeids[i]);\r\n      if (node) {\r\n        self.removeNode(node);\r\n      }\r\n    }\r\n    self.selection = [];\r\n  };\r\n\r\n  self.getSelected = function() {\r\n    return self.selection;\r\n  };\r\n\r\n  self.getSelectedIds = function() {\r\n    return self.selection.map(n => n.id);\r\n  };\r\n};","// import appState from '../../stores/index';\r\nconst { default: appState } = require(\"../../stores\");\r\nvar def = require(\"./imports\").default;\r\nvar THREE = def.THREE;\r\nvar Edge = def.Edge;\r\nvar Node = def.Node;\r\nvar OrbitControls = def.OrbitControls;\r\nvar d3 = def.d3;\r\nvar ee = def.ee;\r\n\r\n\r\nmodule.exports = function (self) {\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateEdges = function () {\r\n    self.edges.setDrawRange(0, self.drawCount + 6);\r\n    var total = self.drawCount + 6;\r\n    var positions = self.edges.attributes.position.array;\r\n    var colors = self.edges.attributes.color.array;\r\n    // var width = self.edges.attributes.width.array;\r\n\r\n    //directed arrows\r\n    self.directedArrows.attributes.position.array = new Float32Array(self.MAX_LINES * 3);\r\n    var arrowPosition = self.directedArrows.attributes.position.array;\r\n    var arrowColor = self.directedArrows.attributes.color.array;\r\n\r\n    for (var i = 0; i < total; i += 2) {\r\n      if (self.lineIndices[i / 2]) {\r\n        if (self.lineIndices[i / 2].hide) {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = 255;\r\n          colors[i * 3 + 1] = 255;\r\n          colors[i * 3 + 2] = 255;\r\n          colors[i * 3 + 3] = 255;\r\n          colors[i * 3 + 4] = 255;\r\n          colors[i * 3 + 5] = 255;\r\n        } else {\r\n          var v1pos = self.lineObjects[i].renderData.draw_object.position;\r\n          var v2pos = self.lineObjects[i + 1].renderData.draw_object.position;\r\n          var v1color = self.lineIndices[i / 2].linecolor;\r\n          var v2color = self.lineIndices[i / 2].linecolor;\r\n          positions[i * 3] = v1pos.x;\r\n          positions[i * 3 + 1] = v1pos.y;\r\n          positions[i * 3 + 3] = v2pos.x;\r\n          positions[i * 3 + 4] = v2pos.y;\r\n          colors[i * 3] = v1color.r;\r\n          colors[i * 3 + 1] = v1color.g;\r\n          colors[i * 3 + 2] = v1color.b;\r\n          colors[i * 3 + 3] = v2color.r;\r\n          colors[i * 3 + 4] = v2color.g;\r\n          colors[i * 3 + 5] = v2color.b;\r\n          // width[i * 3] = 5;\r\n          // width[i * 3 + 1] = 5;\r\n          // width[i * 3 + 2] = 5;\r\n          // width[i * 3 + 3] = 5;\r\n          // width[i * 3 + 4] = 5;\r\n          // width[i * 3 + 5] = 5;\r\n\r\n          //directed edges\r\n          if (appState.graph.directedOrNot) {\r\n            self.arrow.visible = true;\r\n            var midPointX = (v1pos.x + v2pos.x) / 2;\r\n            var midPointY = (v1pos.y + v2pos.y) / 2;\r\n\r\n            var dX = v2pos.x - v1pos.x;\r\n            var dY = v2pos.y - v1pos.y;\r\n\r\n            if (dX === 0) {\r\n              dX = 0.001;\r\n            }\r\n            var radianDegree = Math.atan(dY / dX);\r\n            // var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n            // var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n\r\n            // var degreeDifference = Math.PI/2 - radianDegree\r\n            arrowPosition[i / 2 * 9] = midPointX;\r\n            arrowPosition[i / 2 * 9 + 1] = midPointY;\r\n\r\n            if (dX >= 0) {\r\n              var tempXCorner = midPointX - Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY - Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n\r\n            } else {\r\n              var tempXCorner = midPointX + Math.cos(radianDegree) * 0.866;\r\n              var tempYCorner = midPointY + Math.sin(radianDegree) * 0.866;\r\n              var degreeDifference = Math.PI / 2 - radianDegree;\r\n              arrowPosition[i / 2 * 9 + 3] = tempXCorner + 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 4] = tempYCorner - 0.5 * Math.sin(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 6] = tempXCorner - 0.5 * Math.cos(degreeDifference);\r\n              arrowPosition[i / 2 * 9 + 7] = tempYCorner + 0.5 * Math.sin(degreeDifference);\r\n            }\r\n          } else {\r\n            self.arrow.visible = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    self.edges.attributes.position.needsUpdate = true;\r\n    self.edges.attributes.color.needsUpdate = true;\r\n\r\n    self.directedArrows.attributes.position.needsUpdate = true;\r\n    self.directedArrows.attributes.color.needsUpdate = true;\r\n  };\r\n\r\n  /**\r\n   *  Update the position of the labels\r\n   */\r\n  self.updateLabels = function () {\r\n    var nodes = self.force.nodes();\r\n    for (var i = 0; i < nodes.length; i++) {\r\n      let thisNode = self.graph.getNode(nodes[i].id);\r\n      if (thisNode.renderData.textHolder != undefined) {\r\n        if (\r\n          //thisNode.renderData.textHolder.children[0].element.hideme != false &&\r\n          !thisNode.renderData.textHolder.children[0].element.override\r\n        ) {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = true;\r\n        } else {\r\n          thisNode.renderData.textHolder.children[0].element.hidden = false;\r\n        }\r\n      }\r\n      thisNode.renderData.textHolder.position.x =\r\n        thisNode.renderData.size + thisNode.renderData.draw_object.position.x;\r\n      thisNode.renderData.textHolder.position.y =\r\n        thisNode.renderData.draw_object.position.y;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  Update the position and color of the edges\r\n   */\r\n  self.updateNodes = function () {\r\n    // console.log(\"triggered\");\r\n    if (self.options.layout == \"ngraph\") {\r\n      self.graph.forEachNode(function (node) {\r\n        if (node.renderData) {\r\n          node.renderData.draw_object.position.x = self.force.getNodePosition(\r\n            node.id\r\n          ).x;\r\n          node.renderData.draw_object.position.y = self.force.getNodePosition(\r\n            node.id\r\n          ).y;\r\n        }\r\n      });\r\n      if (!self.paused) {\r\n        self.force.step();\r\n      }\r\n    } else if (self.options.layout == \"d3\") {\r\n      var nodes = self.force.nodes();\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        nodes[i].x = Math.max(\r\n          -self.renderWidth,\r\n          Math.min(self.renderWidth, nodes[i].x)\r\n        );\r\n        nodes[i].y = Math.max(\r\n          -self.renderHeight,\r\n          Math.min(self.renderHeight, nodes[i].y)\r\n        );\r\n        let thisNode = self.graph.getNode(nodes[i].id);\r\n        if (thisNode && thisNode.renderData.draw_object) {\r\n          if (!thisNode.pinnedx) {\r\n            thisNode.fx = null;\r\n            thisNode.renderData.draw_object.children[1].visible = false;\r\n          } else {\r\n            thisNode.fx = thisNode.x;\r\n            thisNode.renderData.draw_object.children[1].visible = true;\r\n          }\r\n          if (!thisNode.pinnedy) {\r\n            thisNode.fy = null;\r\n          } else {\r\n            thisNode.fy = thisNode.y;\r\n          }\r\n          thisNode.renderData.draw_object.position.x = nodes[i].x;\r\n          thisNode.renderData.draw_object.position.y = nodes[i].y;\r\n        }\r\n      }\r\n\r\n      if (!self.paused) {\r\n        self.force.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Restrict camera translation\r\n   */\r\n  self.updateCamera = function () {\r\n    self.controls.target.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.object.position.x -=\r\n      self.controls.object.position.x -\r\n      Math.max(\r\n        -self.renderWidth,\r\n        Math.min(self.renderWidth, self.controls.object.position.x)\r\n      );\r\n    self.controls.target.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.controls.object.position.y -=\r\n      self.controls.object.position.y -\r\n      Math.max(\r\n        -self.renderHeight,\r\n        Math.min(self.renderHeight, self.controls.object.position.y)\r\n      );\r\n    self.setViewPortSize(self.ccamera);\r\n  };\r\n\r\n  /**\r\n   * Given an ngraph, update the current ngraph and add or remove inconsistent nodes\r\n   */\r\n  self.updateGraph = function (graph) {\r\n    var numNodesAdded = 0;\r\n    graph.forEachNode(function (node) {\r\n      var oldNode = self.graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        if (!self.newNodeIds) {\r\n          self.newNodeIds = [];\r\n        }\r\n        self.newNodeIds.push(node.id);\r\n        self.addNode(node);\r\n        numNodesAdded += 1;\r\n        self.lastNode = self.graph.getNode(node.id);\r\n      } else {\r\n        self.updateNode(oldNode, node);\r\n      }\r\n    });\r\n    graph.forEachLink(function (link) {\r\n      if (!self.graph.getLink(link.fromId, link.toId)) {\r\n        self.addEdge(\r\n          self.graph.getNode(link.fromId),\r\n          self.graph.getNode(link.toId)\r\n        );\r\n      }\r\n    });\r\n\r\n    self.graph.forEachNode(function (node) {\r\n      var oldNode = graph.getNode(node.id);\r\n      if (!oldNode) {\r\n        self.removeNode(node);\r\n      }\r\n      \r\n    });\r\n    \r\n\r\n    self.force.alpha(1);\r\n    self.force.stop();\r\n\r\n    if (numNodesAdded > 10) {\r\n      // This seems unnecessary for now\r\n      // self.tickToStatic = true;\r\n      self.tickToStatic = false;\r\n    } else {\r\n      self.tickToStatic = false;\r\n    }\r\n\r\n    if (self.newNodeIds) {\r\n      // Highlight every new node.\r\n      self.highlightNodeIds(self.newNodeIds, true);\r\n\r\n      // Select every new node if there aren't too many of them.\r\n      if (self.newNodeIds.length < 10) {\r\n        for (let i = 0; i < self.newNodeIds.length; i++) {\r\n          self.selection.push(self.graph.getNode(self.newNodeIds[i]));\r\n          appState.graph.selectedNodes.push(self.graph.getNode(self.newNodeIds[i]));\r\n        }\r\n        // self.ee.emit(\"select-nodes\", self.selection);\r\n        \r\n        //  = self.selection \r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * update positions in the ngraph given a list of positions\r\n   */\r\n  self.updatePositions = function (positions) {\r\n    self.graph.forEachNode(function (node) {\r\n      var pos = positions[node.id];\r\n      if (pos) {\r\n        node.x = pos[0];\r\n        node.y = pos[1];\r\n        if (node.pinnedx) {\r\n          node.fx = pos[0];\r\n        }\r\n        if (node.pinnedy) {\r\n          node.fy = pos[1];\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update a node given a new node\r\n   */\r\n  self.updateNode = function (node, newNode) {\r\n    if (newNode.data) {\r\n      if (node.data.color && newNode.data.color) {\r\n        node.data.color = newNode.data.color;\r\n        node.renderData.color = node.data.color;\r\n        node.renderData.draw_object.material.color.set(\r\n          new THREE.Color(node.data.color)\r\n        );\r\n      }\r\n      if (newNode.data.size && newNode.data.size > 0) {\r\n        node.data.size = newNode.data.size;\r\n        node.renderData.size = newNode.data.size;\r\n        node.renderData.draw_object.scale.set(\r\n          newNode.data.size,\r\n          newNode.data.size,\r\n          1\r\n        );\r\n        var hsize = 1 + def.HIGHLIGHT_SIZE / newNode.data.size;\r\n        node.renderData.draw_object.children[0].scale.set(hsize, hsize, 1);\r\n      }\r\n      if (newNode.data.label) {\r\n        node.data.label = newNode.data.label;\r\n        node.renderData.label = node.data.label;\r\n        node.renderData.textHolder.children[0].element.childNodes[0].innerText =\r\n          node.data.label;\r\n      }\r\n      if (newNode.data.shape) {\r\n        node.data.shape = newNode.data.shape;\r\n        node.renderData.shape = node.data.shape;\r\n        self.setNodeShape(node, node.data.shape);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Switch } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { requestChangeWorkspace } from \"../ipc/client\";\r\n\r\n@observer\r\nclass PreferencesDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"cog\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.dialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.dialogOpen = false;\r\n        }}\r\n        title=\"Preferences\"\r\n      >\r\n        <div className=\"pt-dialog-body\">\r\n          <Switch\r\n            label=\"Dark Mode\"\r\n            checked={appState.preferences.darkMode}\r\n            onChange={() => {\r\n              appState.preferences.darkMode = !appState.preferences.darkMode;\r\n              appState.preferences.saveUserConfig();\r\n              if (appState.graph.frame) {\r\n                appState.graph.frame.toggleDark();\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Switch\r\n           label=\"Minimap\"\r\n           checked={appState.preferences.minimapShowing}\r\n           onChange={() => {\r\n            appState.preferences.minimapShowing = !appState.preferences.minimapShowing;\r\n            appState.preferences.saveUserConfig();\r\n            if (appState.graph.frame) {\r\n              if (appState.preferences.minimapShowing) {\r\n                appState.graph.frame.showMiniMap();\r\n              } else {\r\n                appState.graph.frame.hideMiniMap();\r\n              }\r\n            } else {\r\n              console.log(\"Frame not ready when trying to toggle minimap.\");\r\n            }\r\n           }}\r\n          />\r\n        </div>\r\n        <div className=\"pt-dialog-footer\">\r\n          <div className=\"pt-dialog-footer-actions\">\r\n            <Button\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                appState.preferences.dialogOpen = false;\r\n              }}\r\n              text=\"Done\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreferencesDialog;","import React from \"react\";\r\nimport { Button, Classes, Collapse } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Button\r\n      className={classnames(Classes.LARGE, Classes.FILL, Classes.MINIMAL, \"text-align-left\")}\r\n      rightIconName={isOpen ? \"chevron-up\" : \"chevron-down\"}\r\n      onClick={onToggle}\r\n    >\r\n      {name}\r\n    </Button>\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\r\n\r\nexport default ({ handleClick, item, isActive }) => (\r\n  \r\n\r\n  <MenuItem\r\n  iconName={item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Distance to center\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Shortest path\" \r\n            ||item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() == \"Pair distance\"\r\n            ? \"globe\" : \"graph\"}\r\n    className={isActive ? Classes.ACTIVE : \"\"}\r\n    key={item}\r\n    onClick={handleClick}\r\n    text={item.replace(/\\w+/g, function(word) {\r\n      return ['to'].includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n    })}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        {/* <button style={{height: \"100%\" ,marginLeft: \"2px\"}} type=\"button\">\r\n          {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}\r\n        </button> */}\r\n        <Button className={fill ? Classes.FILL : null} text={value} />\r\n\r\n  </Select>\r\n);\r\n","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch,\r\n  FileInput\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass PostImportOptions extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n            After import, show:\r\n            <SimpleSelect\r\n                items={Object.keys(appState.import.postImportFilteringOptions)}\r\n                value={appState.import.selectedPostImportFilteringOption}\r\n                onSelect={(selected) => {\r\n                    appState.import.selectedPostImportFilteringOption = selected;\r\n                }}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostImportOptions;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseEdgeFile,\r\n  requestChooseNodeFile,\r\n  requestImportGraphFromCSV,\r\n  requestCreateNewProject\r\n} from \"../ipc/client\";\r\nimport Collapsable from \"./utils/Collapsable\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { NODE_AND_EDGE_FILE, ONLY_EDGE_FILE } from \"../constants/index\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass PreviewTable extends React.Component {\r\n  render() {\r\n    const file = this.props.file;\r\n    return (\r\n      <Table\r\n        className=\"import-preview-table\"\r\n        numRows={file.topN.length}\r\n        selectedRegions={Object.values(file.mapping)\r\n          .map(it => file.columns.indexOf(it))\r\n          .map(it => ({ rows: null, cols: [it, it] }))}\r\n      >\r\n        {file.columns.map(it => (\r\n          <Column\r\n            key={it}\r\n            name={it}\r\n            renderCell={i => <Cell>{file.topN[i][it]}</Cell>}\r\n          />\r\n        ))}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass ImportDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: NODE_AND_EDGE_FILE,\r\n      nodesOpen: true,\r\n      edgesOpen: true,\r\n      delimiter: ','\r\n    };\r\n  }\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  canImport = () => {\r\n    if (this.state.available === NODE_AND_EDGE_FILE) {\r\n      return (\r\n        appState.import.importConfig.edgeFile.ready &&\r\n        appState.import.importConfig.nodeFile.ready\r\n      );\r\n    } else if (this.state.available === ONLY_EDGE_FILE) {\r\n      return appState.import.importConfig.edgeFile.ready;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  renderNodesSelection = () => {\r\n    const nodeFile = appState.import.importConfig.nodeFile;\r\n    if (this.state.available === ONLY_EDGE_FILE) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Collapsable\r\n        name=\"Nodes\"\r\n        isOpen={this.state.nodesOpen}\r\n        onToggle={() => this.setState({ nodesOpen: !this.state.nodesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n        <div className={classnames(Classes.CONTROL_GROUP)}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedNodeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={nodeFile.hasColumns}\r\n          onChange={() => (nodeFile.hasColumns = !nodeFile.hasColumns)}\r\n        /> */}\r\n        {nodeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={nodeFile} />\r\n            Column for Node ID:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.id}\r\n              onSelect={it => (nodeFile.mapping.id = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Longitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LonX}\r\n              onSelect={it => (nodeFile.mapping.LonX = it)}\r\n            />\r\n            <p sytle = {{margin: '0 0 0px',padding: '0'}}></p>\r\n            Column for Node Latitude:\r\n            <SimpleSelect\r\n              items={nodeFile.columns}\r\n              value={nodeFile.mapping.LatY}\r\n              onSelect={it => (nodeFile.mapping.LatY = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  renderEdgesSelection = () => {\r\n    const edgeFile = appState.import.importConfig.edgeFile;\r\n    return (\r\n      <Collapsable\r\n        name=\"Edges\"\r\n        isOpen={this.state.edgesOpen}\r\n        onToggle={() => this.setState({ edgesOpen: !this.state.edgesOpen })}\r\n      >\r\n        <div className={classnames(Classes.CONTROL_GROUP)} style={{margin: \"10px\"}}>\r\n          <div style={{lineHeight:\"10px\"}} className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n            <input\r\n              type=\"file\"\r\n              className={classnames(Classes.DISABLED)}\r\n              onChange={(event) => {\r\n                if (event.target.files.length < 1) {\r\n                  return;\r\n                }\r\n                appState.import.selectedEdgeFileFromInput = event.target.files[0];\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <Switch\r\n          label=\"Has Headers\"\r\n          checked={edgeFile.hasColumns}\r\n          onChange={() => (edgeFile.hasColumns = !edgeFile.hasColumns)}\r\n        /> */}\r\n        {/* <Switch\r\n          label=\"Create Missing Nodes\"\r\n          checked={edgeFile.createMissing}\r\n          disabled={this.state.available === ONLY_EDGE_FILE}\r\n          onChange={() => (edgeFile.createMissing = !edgeFile.createMissing)}\r\n        /> */}\r\n        {edgeFile.ready && (\r\n          <div className=\"column-selection\">\r\n            <PreviewTable file={edgeFile} />\r\n            Column for Source ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.fromId}\r\n              onSelect={it => (edgeFile.mapping.fromId = it)}\r\n            />{\" \"}\r\n            <br />\r\n            Column for Target ID:\r\n            <SimpleSelect\r\n              items={edgeFile.columns}\r\n              value={edgeFile.mapping.toId}\r\n              onSelect={it => (edgeFile.mapping.toId = it)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Collapsable>\r\n    );\r\n  };\r\n\r\n  updateDelimiter (newDelimiter) {\r\n    this.setState({delimiter: newDelimiter});\r\n\r\n    if (newDelimiter == \"\\\\t\") {\r\n      newDelimiter = \"\\t\"\r\n    }\r\n\r\n    appState.import.importConfig.edgeFile.delimiter = newDelimiter\r\n    appState.import.importConfig.nodeFile.delimiter = newDelimiter\r\n  }\r\n\r\n  renderDelimiterSelection() {\r\n    return (\r\n      <div className=\"column-selection\">\r\n        Selected Delimiter: \r\n        <SimpleSelect\r\n          items={[\",\", \"\\\\t\", \";\"]}\r\n          value={this.state.delimiter}\r\n          onSelect={it => { this.updateDelimiter(it) }}\r\n        />{\" \"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderExampleDataset(){\r\n    return(\r\n      <div id=\"exampleTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n        <p>Required attributes for nodelist.csv. Each row of the node table should represent attributes of a node, including at least a unique node ID and the node's longitude and latitude. </p>\r\n                    <table id=\"exampleNodeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead >\r\n                            <tr>\r\n                                <th > ID (unique node ID field) </th>\r\n                                <th> LonX (node longitude ) </th>\r\n                                <th> LatY (node latitude ) </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>67.2391</td>\r\n                                <td>-102.3472</td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Required attributes for edgelist.csv. Each row of the edge table should represent attributes of an edge, including at least a source and target column corresponding to the node ID. </p>\r\n                    <table id = \"exampleEdgeTable\" className={Classes.TABLE} style={{width: '100%' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th > Source </th>\r\n                                <th> Target </th>\r\n                              \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\"APL\"</td>\r\n                                <td>\"FWL\"</td>\r\n                \r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    </table>\r\n                    <p>Example Dataset:</p>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1_OIDSbUyM9gTqziVdcqU_NsGxkk6HMTo/view?usp=share_link\"> US_airport_nodelist.csv</a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://drive.google.com/file/d/1cvOUir8gKDlS_hhNGL0qQOn2eNHCDsOU/view?usp=share_link\"> US_airport_edgelist.csv</a>\r\n                </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.dialogOpen}\r\n        onClose={() => {\r\n          appState.import.dialogOpen = false;\r\n        }}\r\n        title=\"Import CSV\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[ NODE_AND_EDGE_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderNodesSelection()}\r\n              {this.renderEdgesSelection()}\r\n              {this.renderExampleDataset()}\r\n              {/* {this.renderDelimiterSelection()} */}\r\n              <hr />\r\n              <PostImportOptions />\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // TODO: this might be unsafe, check if there's racing condition\r\n\r\n                    //active layout when new graph imported\r\n                    appState.graph.runActiveLayout();\r\n\r\n                    requestCreateNewProject({\r\n                      name: appState.project.newProjectName,\r\n                      createdDate: new Date().toLocaleString(),\r\n                    });\r\n                    requestImportGraphFromCSV( //edgefile.delimiter and nodefile.delimiter are the same\r\n                      this.state.available === NODE_AND_EDGE_FILE, appState.import.importConfig.edgeFile.delimiter, appState.project.newProjectName\r\n                    );\r\n\r\n                    // Importing a graph means no label would be shown by default,\r\n                    // thus turn off label CSSRenderer for better performance.\r\n                    appState.graph.frame.turnOffLabelCSSRenderer();\r\n                  }}\r\n                  text=\"Import\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestImportGraphFromGexf\r\n} from \"../ipc/client\";\r\nimport PostImportOptions from './PostImportOptions';\r\n\r\n@observer\r\nclass GEXFImportDialog extends React.Component {\r\n\r\n  renderImportButton() {\r\n    return (\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button\r\n            className={classnames({\r\n              [Classes.DISABLED]: appState.import.selectedGexfFileFromInput == null\r\n            })}\r\n            intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              // Temp\r\n              \r\n               //active layout when new graph imported\r\n               appState.graph.runActiveLayout();\r\n\r\n              appState.import.loading = true;\r\n              requestImportGraphFromGexf();\r\n            }}\r\n            text=\"Import\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.import.gexfDialogOpen}\r\n        onClose={() => {\r\n          appState.import.gexfDialogOpen = false;\r\n          appState.import.loading = false;\r\n        }}\r\n        title=\"Import GEXF\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n            <div>\r\n              <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                <input\r\n                  type=\"file\"\r\n                  className={classnames(Classes.DISABLED)}\r\n                  onChange={(event) => {\r\n                    if (event.target.files.length < 1) {\r\n                      return;\r\n                    }\r\n                    appState.import.selectedGexfFileFromInput = event.target.files[0];\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PostImportOptions />\r\n          </div>\r\n            {this.renderImportButton()}\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GEXFImportDialog;","/* eslint-disable jsx-a11y/label-has-for */\r\n\r\n/**\r\n * [Deprecated] This dialog is only used to open SQlite-based\r\n * graph file and optionally along with a snapshot file.\r\n * \r\n * For Argo-lite, which only has the JSON snapshot file,\r\n * use OpenSnapshotDialog.\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport {\r\n  requestChooseGraphFile,\r\n  requestChooseStateFile,\r\n  requestOpen\r\n} from \"../ipc/client\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport {\r\n  GRAPH_AND_STATE_FILE,\r\n  ONLY_EDGE_FILE,\r\n  ONLY_GRAPH_FILE\r\n} from \"../constants\";\r\n\r\n@observer\r\nclass OpenDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: ONLY_GRAPH_FILE,\r\n      selectedGraph: null,\r\n      selectedState: null\r\n    };\r\n  }\r\n\r\n  canImport = () => {\r\n    if (this.state.available === GRAPH_AND_STATE_FILE) {\r\n      return appState.import.stateFile && appState.import.graphFile;\r\n    } else {\r\n      return appState.import.graphFile;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  changeAvailable = targetValue => {\r\n    if (targetValue === ONLY_EDGE_FILE) {\r\n      appState.import.importConfig.edgeFile.createMissing = true;\r\n    }\r\n    this.setState({ available: targetValue });\r\n  };\r\n\r\n  renderSelectGraph = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select graph file\"\r\n            readOnly\r\n            value={appState.import.graphFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseGraphFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSelectState = () => {\r\n    return (\r\n      <div className={classnames(Classes.CONTROL_GROUP)}>\r\n        <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(Classes.DISABLED, Classes.INPUT)}\r\n            placeholder=\"Select snapshot file\"\r\n            readOnly\r\n            value={appState.import.stateFile}\r\n          />\r\n        </div>\r\n        <Button \r\n        style={{height:'15px'}}\r\n        intent={Intent.PRIMARY} onClick={requestChooseStateFile}>\r\n          Choose File\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        {appState.import.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div>\r\n            <div className={classnames(Classes.DIALOG_BODY, \"import-dialog\")}>\r\n              I have:\r\n              <SimpleSelect\r\n                items={[GRAPH_AND_STATE_FILE, ONLY_GRAPH_FILE]}\r\n                value={this.state.available}\r\n                onSelect={this.changeAvailable}\r\n              />\r\n              {this.renderSelectGraph()}\r\n              {this.state.available === GRAPH_AND_STATE_FILE &&\r\n                this.renderSelectState()}\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.canImport()\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    appState.preferences.openDialogOpen = false;\r\n                    requestOpen();\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass NewProjectDialog extends React.Component {\r\n  \r\n  render() {\r\n    const isNewProjectNameDuplicate = appState.project.projects.some(p => p.name === appState.project.newProjectName);\r\n    const isNewProjectNameEmpty = appState.project.newProjectName.trim() === '';\r\n    const isValidated = !(isNewProjectNameDuplicate || isNewProjectNameEmpty);\r\n  \r\n    return (\r\n      <Dialog\r\n        iconName=\"projects\"\r\n        isOpen={appState.project.isNewProjectDialogOpen}\r\n        onClose={() => {\r\n          appState.project.isNewProjectDialogOpen = false;\r\n        }}\r\n        title=\"Create New Project\"\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <label className=\"pt-label .modifier\">\r\n            Project Name\r\n            <span className=\"pt-text-muted\"> (required){isNewProjectNameDuplicate && ' (This name has already been taken!)'}</span>\r\n            <input\r\n              className=\"pt-input\"\r\n              type=\"text\"\r\n              placeholder=\"New Project\"\r\n              dir=\"auto\"\r\n              value={appState.project.newProjectName}\r\n              onChange={event => {\r\n                appState.project.newProjectName = event.target.value;\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button\r\n              className={classnames({\r\n                [Classes.DISABLED]: !isValidated\r\n              })}\r\n              intent={Intent.PRIMARY}\r\n              onClick={() => {\r\n                if (isValidated) {\r\n                  appState.project.isNewProjectDialogOpen = false;\r\n                  appState.import.dialogOpen = true;\r\n                }\r\n              }}\r\n              text=\"Next\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewProjectDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestOpen, requestDelete } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass ProjectDetailDialog extends React.Component {\r\n  render() {\r\n    return (\r\n      appState.project.currentProject && (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isProjectDetailDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isProjectDetailDialogOpen = false;\r\n          }}\r\n          title={`Load ${appState.project.currentProject.name} Project`}\r\n        >\r\n          {appState.project.currentProject.hasGraphData ? (\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <Card\r\n                interactive={true}\r\n                elevation={Card.ELEVATION_TWO}\r\n                onClick={() => {\r\n                  appState.import.graphFile =\r\n                    appState.project.currentProject.graphDataPath;\r\n                  appState.project.isProjectDetailDialogOpen = false;\r\n                  requestOpen();\r\n                }}\r\n              >\r\n                <Icon iconName=\"graph\" /> Start fresh from original graph\r\n              </Card>\r\n              <hr />\r\n              <div className=\"argo-menu-list-header\">Load recent snapshots</div>\r\n              <div>\r\n                {appState.project.currentProject.snapshotPaths.map(\r\n                  snapshotPath => {\r\n                    return (\r\n                      <div key={snapshotPath}>\r\n                        <Card\r\n                          interactive={false}\r\n                          elevation={Card.ELEVATION_TWO}\r\n                        >\r\n                          {/* <Icon iconName=\"layout\" /> */}\r\n                          <h5>\r\n                            {snapshotPath\r\n                              .replace(/^.*[\\\\\\/]/, \"\")\r\n                              .replace(/\\.[^/.]+$/, \"\")}\r\n                          </h5>\r\n                          <Button\r\n                            className={classnames([\r\n                              Classes.BUTTON,\r\n                              Classes.INTENT_PRIMARY\r\n                            ])}\r\n                            onClick={() => {\r\n                              appState.import.graphFile =\r\n                                appState.project.currentProject.graphDataPath;\r\n                              appState.import.stateFile = snapshotPath;\r\n                              appState.project.currentSnapshotName = snapshotPath\r\n                                .replace(/^.*[\\\\\\/]/, \"\")\r\n                                .replace(/\\.[^/.]+$/, \"\");\r\n                              appState.project.isProjectDetailDialogOpen = false;\r\n                              requestOpen();\r\n                            }}\r\n                          >\r\n                            Load Snapshot\r\n                          </Button>\r\n                          <Button\r\n                            className={classnames([Classes.BUTTON])}\r\n                            onClick={() => {\r\n                                requestDelete(snapshotPath);\r\n                                appState.project.currentProject.snapshotPaths = appState.project.currentProject.snapshotPaths.filter(\r\n                                  path => path !== snapshotPath\r\n                                );\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Card>\r\n                      </div>\r\n                    );\r\n                  }\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              Error: Cannot find .argograph file in this project directory.\r\n            </div>\r\n          )}\r\n        </Dialog>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectDetailDialog;","/**\r\n * [Argo-lite Modified]\r\n * In electron Argo, snapshots are saved to the active project folder.\r\n * In Argo-lite, snapshots are saved as a file download.\r\n * Sometimes, it's tricky to let browser download something without a backend\r\n * hosting the file. Thus we also allow user to copy paste from\r\n * a text area containing our snapshot JSON.\r\n * \r\n * Remember to change appState.project.stringCopyOfSnapshot\r\n * before showing the dialog.\r\n */\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { requestSaveSnapshot } from \"../ipc/client\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     name: \"Quick Save\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isSaveSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isSaveSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Save Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            {/* <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label> */}\r\n            <p>If your browser doesn't start downloading the file, you can manually copy the content below and save to a plain text file.</p>\r\n            <input id=\"snapshot-textarea\" type=\"textarea\" value={appState.project.stringCopyOfSnapshot} readOnly />\r\n            <button\r\n              onClick={() => {\r\n                document.getElementById('snapshot-textarea').select();\r\n                document.execCommand(\"copy\");\r\n              }}\r\n            >\r\n              Copy to Clipboard\r\n            </button>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                // className={classnames({\r\n                //   [Classes.DISABLED]: !this.state.name\r\n                // })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.project.isSaveSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass SaveSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.project.isRenameSnapshotDialogOpen}\r\n          onClose={() => {\r\n            appState.project.isRenameSnapshotDialogOpen = false;\r\n          }}\r\n          title={`Rename Snapshot`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <label className=\"pt-label .modifier\">\r\n              Snapshot Name\r\n              <span className=\"pt-text-muted\"> (required)</span>\r\n              <input\r\n                className=\"pt-input\"\r\n                type=\"text\"\r\n                placeholder=\"My Snapshot\"\r\n                dir=\"auto\"\r\n                value={this.state.name}\r\n                onChange={event => this.setState({ name: event.target.value })}\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                className={classnames({\r\n                  [Classes.DISABLED]: !this.state.name\r\n                })}\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.graph.metadata.snapshotName = this.state.name;\r\n                  appState.project.isRenameSnapshotDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveSnapshotDialog;","/**\r\n * [Argo-lite] Open the Argo-lite JSON graph snapshot file\r\n */\r\nimport React from \"react\";\r\nimport { Button, Classes, Dialog, Intent } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { toaster } from '../notifications/client';\r\n\r\n@observer\r\nclass OpenSnapshotDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selectedFile: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        iconName=\"import\"\r\n        className={classnames({\r\n          [Classes.DARK]: appState.preferences.darkMode\r\n        })}\r\n        isOpen={appState.preferences.openSnapshotDialogOpen}\r\n        onClose={() => {\r\n          appState.preferences.openSnapshotDialogOpen = false;\r\n        }}\r\n        title=\"Open File\"\r\n      >\r\n        <div>\r\n            <div className={classnames(Classes.DIALOG_BODY)}>\r\n                <div className={classnames(Classes.CONTROL_GROUP)}>\r\n                    <div className={classnames(Classes.INPUT_GROUP, Classes.FILL)}>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={classnames(Classes.DISABLED)}\r\n                            onChange={(event) => {\r\n                                if (event.target.files.length < 1) {\r\n                                    return;\r\n                                }\r\n                                this.setState({\r\n                                    selectedFile: event.target.files[0]\r\n                                });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Classes.DIALOG_FOOTER}>\r\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                <Button\r\n                  className={classnames({\r\n                    [Classes.DISABLED]: !this.state.selectedFile\r\n                  })}\r\n                  intent={Intent.PRIMARY}\r\n                  onClick={() => {\r\n                    // This dialog is closed when user is done selecting file\r\n                    appState.preferences.openSnapshotDialogOpen = false;\r\n\r\n                    // Show user a notification\r\n                    toaster.show({\r\n                        message: 'Loading Graph Snapshot. Please wait...',\r\n                        intent: Intent.NONE,\r\n                        timeout: 2000\r\n                    });\r\n                    \r\n                    // Read the file and load snapshot\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(this.state.selectedFile);\r\n\r\n                    reader.onload = () => {\r\n                        const fileAsString = reader.result;\r\n                        appState.graph.loadImmediateStates(fileAsString);\r\n                    }\r\n                  }}\r\n                  text=\"Open\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OpenSnapshotDialog;","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    Card,\r\n    Icon,\r\n    Dialog,\r\n    Intent,\r\n    Spinner\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toaster } from '../notifications/client';\r\nimport * as Blueprint from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport { BACKEND_URL } from \"../constants\";\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n@observer\r\nclass ShareDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShared: false,\r\n            isFetching: false,\r\n            sharedURL: 'Error: Sharing failed',\r\n            selectedContinue: false,\r\n        };\r\n\r\n        this.handleRequest = this.handleRequest.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleRequest(uuid) {\r\n        // return await new Promise(resolve => setTimeout(resolve, 2000));\r\n        const backendURL = `${BACKEND_URL}/snapshots`;\r\n        // TODO: add better error handling\r\n        return await fetch(backendURL, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            referrer: 'no-referrer',\r\n            body: JSON.stringify({\r\n                uuid,\r\n                body: window.saveSnapshotToString()\r\n            }),\r\n        }).then(response => response.ok).catch(error => {\r\n            toaster.show({\r\n                message: 'Failed to publish to sharing server. Unexpected error.',\r\n                intent: Intent.DANGER,\r\n                timeout: -1\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Dialog\r\n                iconName=\"projects\"\r\n                isOpen={appState.preferences.shareDialogOpen}\r\n                onClose={() => {\r\n                    appState.preferences.shareDialogOpen = false;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        selectedContinue: false,\r\n                    });\r\n                }}\r\n                title={`Share Graph Snapshot`}\r\n                style={{ width: !this.state.selectedContinue ? 735 : 580 }}\r\n            >\r\n                <div className={classnames(Classes.DIALOG_BODY)}>\r\n                    {\r\n                        !this.state.selectedContinue && (\r\n                            <div>\r\n                                <p style={{ display: \"inline\", marginRight: \"20px\" }}>You can share your snapshot as\r\n                        <b> a public URL</b>, an <b> HTML iframe</b>, or a <b>Jupyter Notebook IFrame</b></p>\r\n                                {\r\n                                    !this.state.selectedContinue && (\r\n                                        <Button\r\n                                            className={classnames({\r\n                                                [Classes.DISABLED]: this.state.isFetching\r\n                                            })}\r\n                                            intent={Intent.PRIMARY}\r\n                                            onClick={async () => {\r\n                                                this.setState({ isFetching: true });\r\n                                                // Generate a random UUID\r\n                                                const uuid = uuidv4();\r\n                                                // Generate URL corresponding to the UUID\r\n                                                const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                                // Wait for backend response\r\n                                                const requestSuccess = await this.handleRequest(uuid);\r\n                                                // Update local state\r\n                                                if (requestSuccess) {\r\n                                                    this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                                } else {\r\n                                                    // request fails, toast fires\r\n                                                    this.setState({ isFetching: false, isShared: false });\r\n                                                    toaster.show({\r\n                                                        message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                        intent: Intent.DANGER,\r\n                                                        timeout: -1\r\n                                                    });\r\n                                                }\r\n                                                this.setState({\r\n                                                    ...this.state,\r\n                                                    selectedContinue: true,\r\n                                                });\r\n                                            }}\r\n                                            text=\"Continue\"\r\n                                        />\r\n                                    )\r\n                                }\r\n                                <hr />\r\n                                {/**pt-callout pt-intent-primary .modifier */}\r\n                                <div className=\"pt-callout pt-intent-warning\" style={{marginBottom: \"20px\",}}>\r\n                                    <p className=\"pt-callout-title\">This snapshot is “static”, like taking a photo of your visualization. This means that if your graph is changed in any ways (e.g., move nodes around) after creating a URL and you want to re-share those updates, you will need to create a new URL by selecting <b>Share Again to a new URL</b> in the next window.</p>\r\n                                </div>\r\n                                <div className=\"pt-callout pt-intent-danger\">\r\n                                    <p className=\"pt-callout-title \"><b>IMPORTANT!</b> This will make your graph snapshot public. If you are working with sensitive data (with custom access control), or large data (>400MB), please follow our guide on Github to easily deploy your own sharing server.</p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.isFetching && (\r\n                            <p style={{marginTop: \"10px\"}}><b>Sharing in progress. Please wait...</b></p>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.selectedContinue && (\r\n                            <div>\r\n                                {/** graph URL */}\r\n                        Your current snapshot has been shared to\r\n                                <br />\r\n                                <input\r\n                                    id=\"snapshot-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={this.state.sharedURL}\r\n                                    readOnly\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('snapshot-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as HTML iframe */}\r\n                        Embed as an <b>HTML iframe</b>:\r\n                                <br />\r\n                                <input\r\n                                    id=\"iframe-html-textarea\"\r\n                                    type=\"textarea\"\r\n                                    value={`<iframe src=\"${this.state.sharedURL}\" width=\"850\" height=\"500\"></iframe>`}\r\n                                    style={{\r\n                                        width: '400px',\r\n                                        marginTop: \"5px\"\r\n                                    }}\r\n                                    readOnly\r\n                                />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-html-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                                <br />\r\n                                <hr />\r\n\r\n                                {/** Embedding as Jupyter Notebook IFrame */}\r\n                        Embed as a <b>Jupyter Notebook IFrame</b>:\r\n                                <br />\r\n                                <textarea\r\n                                    id=\"iframe-jupyter-textarea\"\r\n                                    rows=\"2\"\r\n                                    cols=\"60\"\r\n                                    style={{\r\n                                        overflow: \"hidden\",\r\n                                        marginTop: \"5px\",\r\n                                        width: \"400px\",\r\n                                        resize: \"none\"\r\n                                    }}\r\n                                    readOnly=\"true\"\r\n                                    value={`from IPython.display import IFrame` + \"\\n\" + `IFrame(\"${this.state.sharedURL}\", width=700, height=350)`} />\r\n                                <button\r\n                                    onClick={() => {\r\n                                        document.getElementById('iframe-jupyter-textarea').select();\r\n                                        document.execCommand(\"copy\");\r\n                                    }}\r\n                                    className=\"copy-to-clipboard\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        marginTop: \"20px\",\r\n                                    }}\r\n                                >\r\n                                    Copy to Clipboard\r\n                        </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div className={Classes.DIALOG_FOOTER}>\r\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n                        {\r\n                            this.state.selectedContinue && (\r\n\r\n\r\n                                <Button\r\n                                    className={classnames({\r\n                                        [Classes.DISABLED]: this.state.isFetching\r\n                                    })}\r\n                                    intent={Intent.PRIMARY}\r\n                                    onClick={async () => {\r\n                                        this.setState({ isFetching: true, isShared: false });\r\n                                        // Generate a random UUID\r\n                                        const uuid = uuidv4();\r\n                                        // Generate URL corresponding to the UUID\r\n                                        const sharedURL = `https://poloclub.github.io/argo-graph-lite/#${uuid}`;\r\n\r\n                                        // Wait for backend response\r\n                                        const requestSuccess = await this.handleRequest(uuid);\r\n                                        // Update local state\r\n                                        if (requestSuccess) {\r\n                                            this.setState({ isFetching: false, isShared: true, sharedURL });\r\n                                        } else {\r\n                                            // request fails, toast fires\r\n                                            this.setState({ isFetching: false, isShared: false });\r\n                                            toaster.show({\r\n                                                message: 'Failed to publish to sharing server. Please try again later.',\r\n                                                intent: Intent.DANGER,\r\n                                                timeout: -1\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n                                    text=\"Share Snapshot as New URL\"\r\n                                />\r\n                            )\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style dangerouslySetInnerHTML={{\r\n                    __html:\r\n                        `\r\n                    .copy-to-clipboard{\r\n                        margin-top: 5px;\r\n                        margin-left: 5px;\r\n                        border-style: solid;\r\n                    }\r\n                    \r\n            `}} />\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShareDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass StatisticsDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.statisticsDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.statisticsDialogOpen = false;\r\n          }}\r\n          title={`Statistics`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density().toFixed(3) : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.statisticsDialogOpen) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.statisticsDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Card,\r\n  Icon,\r\n  Dialog,\r\n  Intent,\r\n  Spinner,\r\n  Switch\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass FilterDialog extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"projects\"\r\n          isOpen={appState.preferences.filterDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.filterDialogOpen = false;\r\n          }}\r\n          title={`Filters`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n            <table className={Classes.TABLE} style={{width: '100%'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Statistics</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td># Nodes</td>\r\n                        <td>{appState.graph.metadata.fullNodes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td># Edges</td>\r\n                        <td>{appState.graph.metadata.fullEdges}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Average Degree</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.degree : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Density</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.density : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Graph Diameter</td>\r\n                        <td>\r\n                          {appState.graph.hasGraph ? appState.graph.diameter : 'loading graph'}\r\n                        </td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>Clustering Coefficient</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.averageClustering : 'loading graph'}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Connected Component</td>\r\n                        <td>{(appState.graph.hasGraph & appState.preferences.filterDialogOpen) ? appState.graph.components : 'loading graph'}</td>\r\n\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.filterDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\n\r\n@observer\r\nclass HelpDialog extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          iconName=\"help\"\r\n          isOpen={appState.preferences.helpDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.helpDialogOpen = false;\r\n          }}\r\n          title={`Help`}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"pt-button pt-icon-document\"  href=\"https://gatech.co1.qualtrics.com/jfe/form/SV_3kjYXeZT37404PY\"> Please fill out the participant survey here</a>\r\n            <p> SNoMaN supports both mouse/trackpad and touchscreen. </p>\r\n            <div className=\"argo-table-container\">\r\n              <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Basic Operation</th>\r\n                    <th>Mouse</th>\r\n                    <th>Touchscreen</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>Clear Selection</td>\r\n                    <td>Click blank area in the Network or Map View</td>\r\n                    <td>Tap blank area in the Network or Map View</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Zoom</td>\r\n                    <td>Mouse wheel</td>\r\n                    <td>2 finger zoom gesture</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Pan</td>\r\n                    <td>In the Network: drag with right mouse button down OR Move mouse with space key pressed; in the Map: drag the map</td>\r\n                    <td>Drag with 3 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Adjust view size</td>\r\n                    <td>Drag the view borders between the left and right view and between the top and bottom view. </td>\r\n                    <td>Not supported</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select single node to view details and highlight its eco-centric network</td>\r\n                    <td>Single click or drag to select one node in the Network or Map view</td>\r\n                    <td>Tap or drag with 1 finger to select one node</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Select multiple nodes to view details</td>\r\n                    <td>In the Network: Drag left mouse button from empty area; in the map: move mouse with CTRL key pressed;</td>\r\n                    <td>Drag 1 finger from empty area; </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a node</td>\r\n                    <td>Click one node and drag with left mouse button down in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Move and pin a set of nodes</td>\r\n                    <td>Drag left mouse button from empty area to select, then click one of the hilighted nodes and drag to move in the Network view</td>\r\n                    <td>Drag with 1 finger</td>\r\n                  </tr>\r\n                  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.helpDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  Switch,\r\n  ButtonGroup\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NodeTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortBy: 'pagerank',\r\n            sortOrder: 'descending', // or 'ascending'\r\n        };\r\n    }\r\n\r\n  render() {\r\n    let filteredNodes = this.props.nodes;\r\n    \r\n    filteredNodes.sort((n1, n2) => {\r\n        const n1val = n1[this.state.sortBy];\r\n        const n2val = n2[this.state.sortBy];\r\n        if (n1val && n2val) {\r\n            // Check if these are numerical fields, if so sort by number.\r\n            const n1valAsNum = Number(n1val);\r\n            const n2valAsNum = Number(n2val);\r\n            if (!Number.isNaN(n1valAsNum) && !Number.isNaN(n2valAsNum)) {\r\n                // both values are numeric, compare by their value.\r\n                if (this.state.sortOrder === 'descending') {\r\n                    return n2valAsNum - n1valAsNum;\r\n                }\r\n                return n1valAsNum - n2valAsNum;\r\n            } else {\r\n                // not all values are numeric, sort by string order.\r\n                const n1valAsString = n1val.toString();\r\n                const n2valAsString = n2val.toString();\r\n                return (this.state.sortOrder === 'descending' ? -1 : 1) * n1valAsString.localeCompare(n2valAsString);\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    const nodeAttributesOrig = appState.graph.allPropertiesKeyList.filter((k) => k !== 'pagerank' && k !== 'degree');\r\n    \r\n    return (\r\n            <div className=\"argo-table-container\">\r\n                Sort By {' '}\r\n                <SimpleSelect\r\n                    items={['pagerank', 'degree', ...nodeAttributesOrig]}\r\n                    value={this.state.sortBy}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortBy: selected});\r\n                    }}\r\n                />\r\n                <SimpleSelect\r\n                    items={['descending', 'ascending']}\r\n                    value={this.state.sortOrder}\r\n                    onSelect={(selected) => {\r\n                        this.setState({sortOrder: selected});\r\n                    }}\r\n                />\r\n                <table className=\"argo-table-container__table pt-table pt-bordered pt-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><b>Show</b></th>\r\n                            <th><b>Node ID</b></th>\r\n                            {\r\n                                appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                    if (it !== 'id') {\r\n                                        return <th key={`${it}-${i}`}>{it}</th>;\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            filteredNodes.map((node) => (\r\n                                <tr key={node.id}>\r\n                                    <td>\r\n                                        <Switch\r\n                                            checked={!node.isHidden}\r\n                                            onChange={() => {\r\n                                                if (node.isHidden) {\r\n                                                    appState.graph.showNodes([node.id]);\r\n                                                } else {\r\n                                                    appState.graph.hideNodes([node.id]);\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>{node.id}</td>\r\n                                    {\r\n                                        appState.graph.allPropertiesKeyList.map((it, i) => {\r\n                                            if (it !== 'id') {\r\n                                                return <td key={`${it}-${i}`}>{node[it]}</td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeTable;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n@observer\r\nclass NeighborDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // Compare function for nodes used for sorting descendingly.\r\n    const compareByPageRank = (n1, n2) => {\r\n        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n            return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    let filteredNodes = [];\r\n    // When only one node is selected, show the neighbors of this selected node.\r\n    if (appState.graph.lastSelectedSingleNode) {\r\n        const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n        filteredNodes = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId);\r\n\r\n        // Sort by pagerank if available.\r\n        filteredNodes.sort(compareByPageRank);\r\n    }\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"graph\"\r\n          isOpen={appState.preferences.neighborDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.neighborDialogOpen = false;\r\n          }}\r\n          title='Neighbors'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.neighborDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborDialog;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  Dialog,\r\n  Intent,\r\n  ButtonGroup,\r\n  NumericInput,\r\n} from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores/index\";\r\nimport NodeTable from './NodeTable';\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\n\r\n\r\n@observer\r\nclass DataSheetDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showMoreBy: 'pagerank',\r\n      showMoreNum: 5,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let filteredNodes = [...appState.graph.rawGraph.nodes];\r\n\r\n    const showNMoreByAttribute = (numberToShow, attributeName) => {\r\n      const hiddenNodes = filteredNodes.filter(n => n.isHidden);\r\n      hiddenNodes.sort((n1, n2) => {\r\n        if (n1[attributeName] && n2[attributeName]) {\r\n            return n2[attributeName] - n1[attributeName];\r\n        }\r\n        return 0;\r\n      });\r\n      const ids = [];\r\n      for (let i = 0; i < numberToShow && i < hiddenNodes.length; i++) {\r\n          ids.push(hiddenNodes[i].id);\r\n      }\r\n      appState.graph.showNodes(ids);\r\n    };\r\n    \r\n    return (\r\n        <Dialog\r\n          iconName=\"database\"\r\n          isOpen={appState.preferences.dataSheetDialogOpen}\r\n          onClose={() => {\r\n            appState.preferences.dataSheetDialogOpen = false;\r\n          }}\r\n          title='Data Sheet'\r\n          style={{minWidth: '80vw'}}\r\n        >\r\n          <div className={classnames(Classes.DIALOG_BODY)}>\r\n\r\n            <ButtonGroup>\r\n                <Button onClick={() => {appState.graph.showNodes(filteredNodes.map(n => n.id))}}>Show All</Button>\r\n                <Button onClick={() => {appState.graph.hideNodes(filteredNodes.map(n => n.id))}}>Hide All</Button>\r\n            </ButtonGroup>\r\n\r\n            <hr />\r\n\r\n            <div>\r\n              <Button\r\n              style={{display: 'inline'}}\r\n              intent={Intent.PRIMARY}\r\n              text='Show'\r\n              onClick={() => {\r\n                showNMoreByAttribute(this.state.showMoreNum, this.state.showMoreBy);\r\n              }} /> <NumericInput onValueChange={(valAsNumber, valAsString) => {this.setState({showMoreNum: Number(valAsString)})}} value={this.state.showMoreNum} style={{display: 'inline-flex', width: '30px'}} /> {' '}\r\n              more nodes with highest <SimpleSelect items={['pagerank', 'degree']} value={this.state.showMoreBy} onSelect={(selected) => {this.setState({showMoreBy: selected})}} />\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <NodeTable nodes={filteredNodes} />\r\n          </div>\r\n\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button\r\n                intent={Intent.PRIMARY}\r\n                onClick={() => {\r\n                  appState.preferences.dataSheetDialogOpen = false;\r\n                }}\r\n                text=\"Done\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSheetDialog;","import React from \"react\";\r\nimport PreferencesDialog from \"./PreferencesDialog\";\r\nimport ImportDialog from \"./ImportDialog\";\r\nimport GEXFImportDialog from \"./GEXFImportDialog\"\r\nimport OpenDialog from \"./OpenDialog\";\r\nimport NewProjectDialog from \"./NewProjectDialog\";\r\nimport ProjectDetailDialog from \"./ProjectDetailDialog\";\r\nimport SaveSnapshotDialog from \"./SaveSnapshotDialog\";\r\nimport RenameSnapshotDialog from \"./RenameSnapshotDialog\";\r\nimport OpenSnapshotDialog from \"./OpenSnapshotDialog\";\r\nimport ShareDialog from './ShareDialog';\r\nimport StatisticsDialog from './StatisticsDialog';\r\nimport FilterDialog from './FilterDialog';\r\nimport HelpDialog from './HelpDialog';\r\nimport NeighborDialog from './NeighborDialog';\r\nimport DataSheetDialog from './DataSheetDialog';\r\nimport ResizableDraggableDialog from \"./ResizableDraggableDialog\"\r\n\r\nexport default class Dialogs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ }}>\r\n        <PreferencesDialog />\r\n        <ImportDialog />\r\n        <GEXFImportDialog />\r\n        <OpenDialog />\r\n        <OpenSnapshotDialog />\r\n        <NewProjectDialog />\r\n        <ProjectDetailDialog />\r\n        <SaveSnapshotDialog />\r\n        <RenameSnapshotDialog />\r\n        <ShareDialog />\r\n        <StatisticsDialog />\r\n        {/* <ResizableDraggableDialog /> */}\r\n        <FilterDialog />\r\n        <HelpDialog />\r\n        <NeighborDialog />\r\n        <DataSheetDialog />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Rnd} from \"react-rnd\";\r\nimport React from \"react\";\r\n// import \"./style.css\";\r\nimport { Dialog } from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass ResizableDraggableDialog extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n    }\r\n  \r\n    render() {\r\n      const w = window,\r\n      d = document,\r\n      e = d.documentElement,\r\n      g = d.getElementsByTagName(\"body\")[0],\r\n      windowWidth = w.innerWidth || e.clientWidth || g.clientWidth,\r\n      windowHeight = w.innerHeight || e.clientHeight || g.clientHeight;\r\n      return (\r\n        \r\n<div\r\n      className={\"tg-pt-dialog-resizable-draggable\"}\r\n      style={{ top: 0, left: 0, position: \"fixed\" }}\r\n    >\r\n         <Rnd\r\n        style={{backgroundColor:'red'}}\r\n        bounds={\"body\"}\r\n        default={{\r\n          x: window.innerWidth/3,\r\n          y: window.innerHeight/3,\r\n          width: 320,\r\n          height: 200,\r\n        }}\r\n      > \r\n        \r\n        \r\n      </Rnd>\r\n    </div>\r\n     \r\n  //       <div\r\n  //       className={\"tg-pt-dialog-resizable-draggable\"}\r\n  //       style={{ top: 300, left: 300, position: \"fixed\" }}\r\n  //     >\r\n  //       <Rnd\r\n  //         enableResizing={{\r\n  //           bottomLeft: true,\r\n  //           bottomRight: true,\r\n  //           topLeft: true,\r\n  //           topRight: true\r\n  //         }}\r\n  //         bounds={\"body\"}\r\n  //         default={{\r\n  //           x: Math.max((windowWidth - 400) / 2, 0),\r\n  //           y: Math.max((windowHeight - 450) / 2, 0),\r\n  //           width: Math.min(400, windowWidth),\r\n  //           height: Math.min(450, windowHeight)\r\n  //         }}\r\n  //         dragHandleClassName={\".pt-dialog-header\"}\r\n  //         // {...RndProps}\r\n  //       >\r\n  \r\n  // <Dialog\r\n  //           iconName=\"projects\"\r\n  //           isOpen={appState.preferences.isScatterPlotDialogOpen}\r\n  //           onClose={() => {\r\n  //             appState.preferences.isScatterPlotDialogOpen = false;\r\n  //           }}\r\n  //           title={`Scatterplot`}\r\n  //           hasBackdrop={false} usePortal={false}\r\n            \r\n  //         >\r\n  //         </Dialog>\r\n          \r\n  //       </Rnd>\r\n  //     </div>\r\n      )\r\n    }}\r\n    \r\nexport default ResizableDraggableDialog;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport { scales } from \"../../constants/index\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport { uniq } from \"lodash\";\r\n\r\n\r\nconst ColorLegend = ({ colors }) => {\r\n  // const barWidth = parentWidth / colors.length;\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'row', width: '100%' }}>\r\n      {colors.map((color, index) => (\r\n        <div\r\n          key={index}\r\n          style={{\r\n            backgroundColor: color,\r\n            flex: 1,\r\n            height: '10px', // Adjust the height of each color bar\r\n            // marginRight: '10px' // Adjust the spacing between color bars\r\n          }}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n@observer\r\nclass GlobalPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timeOutRef: null,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      shapeOptionOpen: false\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Collapsable Option: Color */}\r\n        <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.filterKeyList}\r\n                  onSelect={it => {\r\n                    appState.graph.nodes.colorBy = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                  }}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => {\r\n                    appState.graph.nodes.color.scale = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                  }}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              {appState.graph.nodes.color.scale == \"Nominal Scale\" ? (\r\n              <div style={{ width: '100%' }}>\r\n                <ColorLegend colors={appState.graph.getNominalColor} />\r\n              </div>\r\n            ) : (\r\n\r\n              <div>\r\n\r\n                <div>\r\n                  <div style={{ marginTop: \"10px\" }}>\r\n                    <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                    <span style={{ float: \"right\" }}>\r\n                      <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                          preventOverflow: {\r\n                            enabled: false,\r\n                          },\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          text=\"  \"\r\n                          style={{\r\n                            backgroundImage: \"inherit\",\r\n                            backgroundColor: appState.graph.nodes.color.from\r\n                          }}\r\n                        />\r\n                        <SketchPicker\r\n                          color={appState.graph.nodes.color.from}\r\n                          onChange={it => {\r\n                            appState.graph.nodes.color.from = it.hex\r\n                            appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                          }}\r\n                        />\r\n                      </Popover2>\r\n                      &nbsp; &#8594; &nbsp;\r\n                      <Popover2\r\n                        placement=\"bottom\"\r\n                        modifiers={{\r\n                          preventOverflow: {\r\n                            enabled: false,\r\n                          },\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          text=\"  \"\r\n                          style={{\r\n                            backgroundImage: \"inherit\",\r\n                            backgroundColor: appState.graph.nodes.color.to\r\n                          }}\r\n                        />\r\n                        <SketchPicker\r\n                          color={appState.graph.nodes.color.to}\r\n                          onChange={it => {\r\n                            appState.graph.nodes.color.to = it.hex\r\n                            appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                          }}\r\n                        />\r\n                      </Popover2>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div style={{ marginTop: \"-1em\" }}>\r\n                  <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                    <defs>\r\n                      <linearGradient\r\n                        x1=\"0%\"\r\n                        y1=\"50%\"\r\n                        x2=\"100%\"\r\n                        y2=\"50%\"\r\n                        id=\"theGradient\"\r\n                      >\r\n                        <stop\r\n                          stopColor={appState.graph.nodes.color.from}\r\n                          stopOpacity=\"1\"\r\n                          offset=\"0%\"\r\n                        />\r\n                        <stop\r\n                          stopColor={appState.graph.nodes.color.to}\r\n                          stopOpacity=\"1\"\r\n                          offset=\"100%\"\r\n                        />\r\n                      </linearGradient>\r\n                    </defs>\r\n                    <rect\r\n                      x=\"0\"\r\n                      y=\"0\"\r\n                      width=\"100%\"\r\n                      height=\"50\"\r\n                      fill=\"url(#theGradient)\"\r\n                    />\r\n                  </svg>\r\n                </div>\r\n              </div>)}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        </Collapsable>\r\n\r\n        {/* Collapsable Option: Size */}\r\n        <Collapsable\r\n          name=\"Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              sizeOptionOpen: !this.state.sizeOptionOpen\r\n            })\r\n          }\r\n        >\r\n\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Scale By:</p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.filterKeyList}\r\n                  // itemRenderer={CommonItemRenderer}\r\n                  // filterable={false}\r\n                  onSelect={it => {\r\n                    appState.graph.nodes.sizeBy = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                  }}\r\n                  // onItemSelect={it => (appState.graph.nodes.sizeBy = it)}\r\n                  value={appState.graph.nodes.sizeBy}\r\n                />\r\n              </span>\r\n\r\n            </div>\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type:</p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onSelect={it => {\r\n                    appState.graph.nodes.size.scale = it\r\n                    appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n                  }}\r\n                  // onItemSelect={it => (appState.graph.nodes.size.scale = it)}\r\n                  value={appState.graph.nodes.size.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Size Range:</p>\r\n              <br />\r\n              <RangeSlider\r\n                min={1}\r\n                max={20}\r\n                stepSize={0.1}\r\n                labelStepSize={5}\r\n                onChange={([a, b]) => {\r\n                  runInAction(\"update scale\", () => {\r\n                    appState.graph.nodes.size.min = a;\r\n                    appState.graph.nodes.size.max = b;\r\n                  });\r\n                }}\r\n                value={[\r\n                  appState.graph.nodes.size.min,\r\n                  appState.graph.nodes.size.max\r\n                ]}\r\n              />\r\n            </div>\r\n            <div style={{ height: \"15px\" }}>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </Collapsable>\r\n\r\n        {/* Collapsable Option: Shape */}\r\n        <Collapsable\r\n          name=\"Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              shapeOptionOpen: !this.state.shapeOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Node Shape:</p>\r\n              <span style={{ float: \"right\" }}>\r\n                <Select\r\n                  items={[\r\n                    \"circle\",\r\n                    \"square\",\r\n                    \"triangle\",\r\n                    \"pentagon\",\r\n                    \"hexagon\",\r\n                    \"octagon\"\r\n                  ]}\r\n                  itemRenderer={CommonItemRenderer}\r\n                  filterable={false}\r\n                  onItemSelect={it => (appState.graph.nodes.shape = it)}\r\n                >\r\n                  <Button text={appState.graph.nodes.shape} />\r\n                </Select>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Collapsable>\r\n        <br />\r\n        <text style={{ fontSize: \"12px\" }}>\r\n\r\n          {pluralize(\"node\", appState.graph.overrides.size, true)}<span> </span>\r\n          have override styles.  &nbsp;\r\n          <Button className={\"pt-small\"} text=\"Clear\" onClick={() => (appState.graph.overrides = new Map())} />\r\n        </text>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalPanel;","import React from \"react\";\r\nimport { Classes, Collapse, Switch } from \"@blueprintjs/core\";\r\n\r\nexport default ({ name, isOpen, onToggle, children }) => (\r\n  <div>\r\n    <Switch\r\n      label={name}\r\n      checked={isOpen}\r\n      onChange={onToggle}\r\n      className={Classes.ALIGN_RIGHT}\r\n    />\r\n    <Collapse isOpen={isOpen}>{children}</Collapse>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport { runInAction } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport SwitchCollapsable from \"../utils/SwitchCollapsable\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\n\r\n@observer\r\nclass SelectionPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shapeOptionOpen: false,\r\n      sizeOptionOpen: false,\r\n      colorOptionOpen: false,\r\n      labelOptionOpen: false\r\n    };\r\n  }\r\n\r\n  twoLayerUpdate = (nodeId, key, value) => {\r\n    if (!appState.graph.overrides.has(nodeId)) {\r\n      appState.graph.overrides.set(nodeId, new Map());\r\n    }\r\n    const nodeAttrs = appState.graph.overrides.get(nodeId);\r\n    if (value !== null) {\r\n      nodeAttrs.set(key, value);\r\n    } else {\r\n      nodeAttrs.delete(key);\r\n      if (nodeAttrs.size === 0) {\r\n        appState.graph.overrides.delete(nodeId);\r\n      }\r\n    }\r\n  };\r\n\r\n  batchTwoLayerUpdate = (nodes, key, value) => {\r\n    runInAction(\"update entire selection\", () => {\r\n      nodes.forEach(n => this.twoLayerUpdate(n.data.ref.id, key, value));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Size\"\r\n          isOpen={this.state.sizeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.sizeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  sizeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"size\",\r\n                    appState.graph.overrideConfig.size\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <Slider\r\n              min={1}\r\n              max={20}\r\n              stepSize={0.1}\r\n              labelStepSize={5}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.size = it;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"size\",\r\n                  it\r\n                );\r\n              }}\r\n              value={appState.graph.overrideConfig.size}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.colorOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  colorOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    appState.graph.overrideConfig.color\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{display: \"inline\"}}>Choose Color:</p>\r\n              <span style={{float:\"right\"}}>\r\n            <Popover2\r\n              placement=\"bottom\"\r\n              modifiers={{\r\n                preventOverflow: {\r\n                  enabled: false,\r\n                },\r\n              }}>\r\n              <Button\r\n                text=\"  \"\r\n                style={{\r\n                  backgroundImage: \"inherit\",\r\n                  backgroundColor: appState.graph.overrideConfig.color\r\n                }}\r\n              />\r\n              <SketchPicker\r\n                color={appState.graph.overrideConfig.color}\r\n                onChange={it => {\r\n                  appState.graph.overrideConfig.color = it.hex;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"color\",\r\n                    it.hex\r\n                  );\r\n                }}\r\n              />\r\n            </Popover2>\r\n            </span>\r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        {/* <Collapsable\r\n                    name=\"Color By Distance\"\r\n                    isOpen={this.state.colorByDistance}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                          colorByDistance: !this.state.colorByDistance\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Node Color by Distance: </p>\r\n                            <span>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.colorByDistance);\r\n                                     appState.graph.colorByDistance = !appState.graph.colorByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n                <br />\r\n        <SwitchCollapsable\r\n          name=\"Override Label\"\r\n          isOpen={this.state.labelOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.labelOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  labelOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"label\",\r\n                    appState.graph.overrideConfig.label\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <p style={{display: \"inline\"}}>Custom Label:</p>\r\n            <input\r\n              value={appState.graph.overrideConfig.label}\r\n              onChange={it => {\r\n                appState.graph.overrideConfig.label = it.target.value;\r\n                this.batchTwoLayerUpdate(\r\n                  appState.graph.selectedNodes,\r\n                  \"label\",\r\n                  it.target.value\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </SwitchCollapsable>\r\n        <br/>\r\n        <SwitchCollapsable\r\n          name=\"Override Shape\"\r\n          isOpen={this.state.shapeOptionOpen}\r\n          onToggle={() => {\r\n            if (this.state.shapeOptionOpen) {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: false\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    null\r\n                  )\r\n              );\r\n            } else {\r\n              this.setState(\r\n                {\r\n                  shapeOptionOpen: true\r\n                },\r\n                () =>\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    appState.graph.overrideConfig.shape\r\n                  )\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div> \r\n              <p style={{display: \"inline\"}}>Node Shape:</p>\r\n              <span style={{float:\"right\"}}>\r\n                <Select\r\n                items={[\r\n                  \"circle\",\r\n                  \"square\",\r\n                  \"triangle\",\r\n                  \"pentagon\",\r\n                  \"hexagon\",\r\n                  \"octagon\"\r\n                ]}\r\n                itemRenderer={CommonItemRenderer}\r\n                filterable={false}\r\n                onItemSelect={it => {\r\n                  appState.graph.overrideConfig.shape = it;\r\n                  this.batchTwoLayerUpdate(\r\n                    appState.graph.selectedNodes,\r\n                    \"shape\",\r\n                    it\r\n                  );\r\n                }}\r\n              >\r\n                <Button text={appState.graph.overrideConfig.shape} />\r\n              </Select>\r\n              </span>        \r\n            </div>\r\n          </div>\r\n        </SwitchCollapsable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\n\r\n@observer\r\nclass NodesPanel extends React.Component {\r\n  getRenderedNodes = () => {\r\n    if (appState.graph.selectedNodes.length === 0) {\r\n      return (\r\n        <div>\r\n          <text style={{fontSize:\"12px\"}}>Modifying All Nodes</text>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <p>{`Modifying ${pluralize(\r\n        \"Node\",\r\n        appState.graph.selectedNodes.length,\r\n        true\r\n      )}`}</p>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getRenderedNodes()}\r\n        {appState.graph.selectedNodes.length === 0 ? (\r\n          <GlobalPanel />\r\n        ) : (\r\n          <SelectionPanel />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport { Button, Checkbox, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Popover2, Select } from \"@blueprintjs/labs\";\r\nimport classnames from \"classnames\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport mouse from \"../../graph-frontend/src/select\";\r\n\r\n@observer\r\nclass EdgesPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeOutRef: null,\r\n        //   sizeOptionOpen: false,\r\n          colorOptionOpen:false,\r\n          directionOptionOpen:false,\r\n        //   colorOptionOpen:false,\r\n          thicknessOptionOpen: false,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        let graph = appState.graph.graph;\r\n        return (\r\n            <div>\r\n                <text style={{fontSize:\"12px\"}}>{`Modifying All Edges`}</text>\r\n\r\n\r\n                {/* Collapsable Option: Color */}\r\n                <Collapsable\r\n                    name=\"Color\"\r\n                    isOpen={this.state.colorOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        colorOptionOpen: !this.state.colorOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Select Edge Color: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                                <Popover2 \r\n                                placement=\"bottom\"\r\n                                modifiers={{\r\n                                    preventOverflow: {\r\n                                      enabled: false,\r\n                                    },\r\n                                  }}>\r\n                                    <Button\r\n                                    text=\"  \"\r\n                                    style={{\r\n                                        backgroundImage: \"inherit\",\r\n                                        backgroundColor: appState.graph.edges.color\r\n                                    }}\r\n                                    />\r\n                                    <SketchPicker\r\n                                    color={appState.graph.edges.color}\r\n                                    onChange={(it) => {\r\n                                        appState.graph.process.graph.forEachNode(n => {\r\n                                             \r\n                                             let red = new THREE.Color(appState.graph.edges.color).r;\r\n                                             let blue = new THREE.Color(appState.graph.edges.color).g;\r\n                                             let green = new THREE.Color(appState.graph.edges.color).b;\r\n                                             n.renderData.linecolor.r = red;\r\n                                             n.renderData.linecolor.g = blue;\r\n                                             n.renderData.linecolor.b = green;\r\n                                           });\r\n                                        (appState.graph.edges.color = it.hex);\r\n                                        /**update edge color in real time*/\r\n                                        appState.graph.process.onHover(); \r\n                                    }}\r\n                                    />\r\n                                </Popover2>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable>\r\n            \r\n                {/* <Collapsable\r\n                    name=\"Direction\"\r\n                    isOpen={this.state.directionOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                        directionOptionOpen: !this.state.directionOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <div> \r\n                            <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                            </div>\r\n                        \r\n                    </div>\r\n                </Collapsable> */}\r\n{/* \r\n                <div>\r\n                     <section style = {{marginTop: \"15px\"}}>\r\n                         <p style={{display: \"inline\"}}>Show Edge Direction: </p>\r\n                         <div style={{display: \"inline\", float: \"right\"}}>\r\n                               <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.directedOrNot);\r\n                                     appState.graph.directedOrNot = !appState.graph.directedOrNot;\r\n                                 }\r\n                                 }\r\n                               />\r\n                         </div>\r\n                     </section>\r\n                 </div> */}\r\n\r\n                {/* <Collapsable\r\n                    name=\"Thickness\"\r\n                    isOpen={this.state.thicknessOptionOpen}\r\n                    onToggle={() =>\r\n                        this.setState({\r\n                            thicknessOptionOpen: !this.state.thicknessOptionOpen\r\n                        })\r\n                    }\r\n                    >\r\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n                        <section>\r\n                            <p>Edge Thickness by distance: </p>\r\n                            <span style={{float:\"right\"}}>\r\n                            <label class=\".pt-large\">\r\n                            <input \r\n                                 type=\"checkbox\"\r\n                                 onChange={it => {\r\n                                     console.log(appState.graph.edgeThicknessByDistance);\r\n                                     appState.graph.edgeThicknessByDistance = !appState.graph.edgeThicknessByDistance;\r\n                                 }\r\n                                 }\r\n                               />\r\n                            </label>\r\n                            </span>\r\n                        </section>\r\n                    </div>\r\n                </Collapsable> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgesPanel;","import React from \"react\";\r\nimport { Button, Classes, Slider } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\nimport CommonItemRenderer from \"../utils/CommonItemRenderer\";\r\n\r\n@observer\r\nclass LabelsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={{display: \"inline-block\"}}>\r\n        <Button\r\n          style={{\r\n            // width:\"100px\",\r\n            display:\"inline\"}}\r\n          id=\"showAll\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showAllLabels()}\r\n        >\r\n          Show All\r\n        </Button>\r\n        <Button\r\n          style={{display:\"inline\"}}\r\n          id=\"hideAll\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideAllLabels()}\r\n        >\r\n          Hide All\r\n        </Button>\r\n        \r\n        {/* <Button\r\n          style={{\r\n            // width:\"140px\"\r\n            // marginLeft:\"10px\"\r\n          }}\r\n          id=\"hideSelected\"\r\n          iconName=\"eye-off\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.hideSelectedLabels()}\r\n        >\r\n          Hide Selected\r\n        </Button> */}\r\n        <Button\r\n          style={{display:\"inline\"}}\r\n          id=\"showSelected\"\r\n          iconName=\"eye-on\"\r\n          className={Classes.FILL}\r\n          onClick={() => appState.graph.frame.showSelectedLabels()}\r\n        >\r\n          Show Selected\r\n        </Button>\r\n        </span>\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Size</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={2}\r\n          stepSize={0.1}\r\n          labelStepSize={0.5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelSize = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1;\r\n          }}\r\n          value={appState.graph.nodes.labelSize}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label Length</text>\r\n        <Slider\r\n        style ={{left:\"10%\", width:\"80%\"}}\r\n          min={1}\r\n          max={40}\r\n          \r\n          stepSize={1}\r\n          labelStepSize={5}\r\n          onChange={value => {\r\n            appState.graph.nodes.labelLength = value;\r\n            appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n          value={appState.graph.nodes.labelLength}\r\n        />\r\n        <div style={{height: '20px'}} />\r\n        <text className=\"option-font\">Label By</text>\r\n        <Select\r\n          items={appState.graph.filterKeyList}\r\n          itemRenderer={CommonItemRenderer}\r\n          filterable={false}\r\n          onItemSelect={it => {appState.graph.nodes.labelBy = it; appState.graph.watchAppearance = appState.graph.watchAppearance +1\r\n          }}\r\n        >\r\n          <Button text={appState.graph.nodes.labelBy} />\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LabelsPanel;","import React from \"react\";\r\nimport { Button, Classes ,Intent, TagProps} from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false , tag,tagprops }) => {\r\n\r\nconst clearButton = <Button icon=\"cross\"  /> ;\r\n// this.state = {\r\n//   selecteditems : value\r\n// }\r\n\r\nreturn (\r\n\r\n  <MultiSelect\r\n  popoverProps={{\r\n    popoverClassName: \"filter-scroll\",\r\n   \r\n    targetTagName: 'div' \r\n  }}\r\n//  placeholder={'Search for a country'} \r\n  resetOnSelect={true}\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={true}\r\n    onItemSelect={onSelect}\r\n    tagRenderer = {tag}\r\n    selectedItems = {value}\r\n    tagInputProps = {tagprops}\r\n    \r\n\r\n    // tagInputProps={{ tagProps: {intent: Intent.PRIMARY, interactive: true,values: value}}}\r\n    // tagInputProps={{\r\n    //   onRemove: {appState.graph.nodes.filter = {}},\r\n    //   rightElement: {appState.graph.nodes.filter ? <Button icon=\"cross\" minimal={true} onClick={this.handleClear} /> : undefined;},\r\n    //     values: value,\r\n    //     // rightElement: clearButton,\r\n    //     tagProps: (_value: React.ReactNode, index: number): TagProps => ({\r\n    //       intent: this.state.intent ? INTENTS[index % INTENTS.length] : Intent.NONE,\r\n    //       minimal: false,\r\n    //   }),\r\n    // }}\r\n  >\r\n    {/* <Button className={fill ? Classes.FILL : null} text={value} /> */}\r\n  </MultiSelect>\r\n\r\n)\r\n  \r\n  };\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport Collapsable from \"../utils/Collapsable\";\r\nimport { Button, Classes, RangeSlider } from \"@blueprintjs/core\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport MultiSelects from \"../utils/MultiSelects\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { runInAction } from \"mobx\";\r\n\r\n@observer\r\nclass NodesFilterPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    appState.graph.filterKeyList.forEach(it => {\r\n      this.state[it + 'isOpen'] = false;\r\n      this.state[it + '_filterlist'] = []\r\n    });\r\n    // console.log(this.state)\r\n    // this.state = \r\n    // {\r\n    //   timeOutRef: null,\r\n    //   sizeOptionOpen: false,\r\n    //   colorOptionOpen: false,\r\n    //   shapeOptionOpen: false\r\n    // };\r\n  }\r\n\r\n  // getRenderedNodes = () => {\r\n  //   if (appState.graph.selectedNodes.length === 0) {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>Modifying All Nodes</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  //   return (\r\n  //     <p>{`Modifying ${pluralize(\r\n  //       \"Node\",\r\n  //       appState.graph.selectedNodes.length,\r\n  //       true\r\n  //     )}`}</p>\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {appState.graph.filterKeyList.map((it, i) => (\r\n          <Collapsable\r\n            name={it}\r\n            isOpen={this.state[it + 'isOpen']}\r\n            onToggle={() =>\r\n              this.setState({\r\n                [it + 'isOpen']: !this.state[it + 'isOpen']\r\n              })\r\n            }\r\n          >\r\n            <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n              { (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]) ) ?\r\n                <MultiSelects\r\n                  items={[...new Set(appState.graph.rawGraph.nodes.map(n => n[it]))]}\r\n                  onSelect={selectit => {\r\n                    appState.graph.filter[it] ? appState.graph.filter[it].push(selectit) : appState.graph.filter[it] = [selectit]\r\n                    appState.graph.filterNodes()\r\n\r\n                    this.setState({\r\n                      [it + '_filterlist']: appState.graph.filter[it]\r\n                    })\r\n                    \r\n\r\n                    // console.log(this.state[it + '_filterlist'])\r\n                    // return selectit\r\n                    // console.log(appState.graph.filter[it][0])\r\n                  }}\r\n                  tag={selectit => { return selectit }}\r\n                  value={(Object.keys(appState.graph.filter).length === 0) ? []:appState.graph.filter[it]}\r\n\r\n                  tagprops={{\r\n                    fill:true ,\r\n                    placeholder: '  ',\r\n                    onRemove: selectit => {\r\n                      var self = this\r\n                      // var deselectIndex0 = this.state[it + '_filterlist'].indexOf(selectit)\r\n                      var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      if (deselectIndex1 > -1) {\r\n                        appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                        // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                        appState.graph.filterNodes()\r\n                      }\r\n                      if (deselectIndex1 > -1) {\r\n                        this.setState({\r\n                          [it + '_filterlist']:appState.graph.filter[it]\r\n                          //  this.state[it + '_filterlist'].splice(deselectIndex0, 1)\r\n                        })\r\n                       \r\n                      }\r\n                      \r\n                      // var deselectIndex1 = appState.graph.filter[it].indexOf(selectit)\r\n                      // if (deselectIndex1 > -1) {\r\n                      //   appState.graph.filter[it] = appState.graph.filter[it].filter(item => item !== selectit)\r\n\r\n                      //   // appState.graph.filter[it].splice(deselectIndex1, 1)\r\n                      //   appState.graph.filterNodes()\r\n                      // }\r\n\r\n\r\n                      console.log(this.state[it + '_filterlist'])\r\n                      // return selectit\r\n                      // console.log(appState.graph.filter[it][0])\r\n                    },\r\n                    // tagProps: getTagProps,\r\n                  }}\r\n                />\r\n                :\r\n                <RangeSlider\r\n                  min={Math.min(... appState.graph.rawGraph.nodes.map(n => n[it]))}   //uniqueValue[it][0] is computed min \r\n                  max={Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))} //uniqueValue[it][1] is computed max\r\n                  stepSize={1}\r\n                  labelStepSize={10000}\r\n                  className=\"range-slider-container\"\r\n                  onChange={([a, b]) => {\r\n                    runInAction(\"update scale\", () => {\r\n                      this.setState({\r\n                        [it + '_filterlist']: {\r\n                          \"min\":a,\r\n                          \"max\":b\r\n                        }\r\n                      })\r\n                      appState.graph.filter[it] ={\r\n                        \"min\":a,\r\n                        \"max\":b\r\n                      }\r\n                    })\r\n                    \r\n                  }}\r\n                  onRelease={([a, b]) => {\r\n                  // console.log(Math.max(... appState.graph.rawGraph.nodes.map(n => n[it])));\r\n                  this.setState({\r\n                    [it + '_filterlist']: {\r\n                      \"min\":a,\r\n                      \"max\":b\r\n                    }\r\n                  })\r\n                  appState.graph.filter[it] ={\r\n                    \"min\":a,\r\n                    \"max\":b\r\n                  }\r\n                  appState.graph.filterNodes()\r\n                  \r\n                \r\n                 \r\n                }}\r\n                value={(appState.graph.filter[it])?\r\n                [\r\n                  appState.graph.filter[it][\"min\"],\r\n                  appState.graph.filter[it][\"max\"]\r\n                ]:\r\n              [\r\n                Math.min(... appState.graph.rawGraph.nodes.map(n => n[it])),\r\n                Math.max(... appState.graph.rawGraph.nodes.map(n => n[it]))\r\n\r\n              ]}\r\n                />\r\n\r\n              }\r\n            </div>\r\n\r\n          </Collapsable>\r\n\r\n\r\n        ))}\r\n\r\n\r\n\r\n        {/* <Collapsable\r\n          name=\"Color\"\r\n          isOpen={this.state.colorOptionOpen}\r\n          onToggle={() =>\r\n            this.setState({\r\n              colorOptionOpen: !this.state.colorOptionOpen\r\n            })\r\n          }\r\n        >\r\n          <div className={classnames(Classes.CARD, \"sub-option\")}>\r\n            <div>\r\n              <p style={{ display: \"inline\" }}>Color By: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={appState.graph.allPropertiesKeyList}\r\n                  onSelect={it => (appState.graph.nodes.colorBy = it)}\r\n                  value={appState.graph.nodes.colorBy}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <p style={{ display: \"inline\" }}>Scale Type: </p>\r\n              <span style={{ float: \"right\" }}>\r\n                <SimpleSelect\r\n                  items={Object.keys(scales)}\r\n                  onSelect={it => (appState.graph.nodes.color.scale = it)}\r\n                  value={appState.graph.nodes.color.scale}\r\n                />\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <div style={{ marginTop: \"10px\" }}>\r\n                <p style={{ display: \"inline\" }}>Gradient: &nbsp;</p>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.from\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.from}\r\n                      onChange={it => (appState.graph.nodes.color.from = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                  &nbsp; &#8594; &nbsp;\r\n                  <Popover2\r\n                    placement=\"bottom\"\r\n                    modifiers={{\r\n                      preventOverflow: {\r\n                        enabled: false,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      text=\"  \"\r\n                      style={{\r\n                        backgroundImage: \"inherit\",\r\n                        backgroundColor: appState.graph.nodes.color.to\r\n                      }}\r\n                    />\r\n                    <SketchPicker\r\n                      color={appState.graph.nodes.color.to}\r\n                      onChange={it => (appState.graph.nodes.color.to = it.hex)}\r\n                    />\r\n                  </Popover2>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div style={{ marginTop: \"-1em\" }}>\r\n              <svg width=\"100%\" height=\"10\" className=\"gradient-preview\">\r\n                <defs>\r\n                  <linearGradient\r\n                    x1=\"0%\"\r\n                    y1=\"50%\"\r\n                    x2=\"100%\"\r\n                    y2=\"50%\"\r\n                    id=\"theGradient\"\r\n                  >\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.from}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"0%\"\r\n                    />\r\n                    <stop\r\n                      stopColor={appState.graph.nodes.color.to}\r\n                      stopOpacity=\"1\"\r\n                      offset=\"100%\"\r\n                    />\r\n                  </linearGradient>\r\n                </defs>\r\n                <rect\r\n                  x=\"0\"\r\n                  y=\"0\"\r\n                  width=\"100%\"\r\n                  height=\"50\"\r\n                  fill=\"url(#theGradient)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </Collapsable> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodesFilterPanel;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Navbar\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport appState from \"../stores/index\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport argologo_dark from '../images/Snoman title.png';\r\nimport argologo_light from '../images/Snoman logo.png';\r\nimport { toaster } from '../notifications/client';\r\nimport { LOGO_URL, GITHUB_URL, SAMPLE_GRAPH_SNAPSHOTS } from '../constants';\r\n\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed,reaction, action, runInAction } from \"mobx\";\r\n\r\nimport { Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\n\r\n@observer\r\nclass RegularNavbar extends React.Component {\r\n  @observable modularity = undefined;\r\n\r\n  // reaction(\r\n  //   () => appState.graph.smartPause.smartPaused,\r\n  //   () => {\r\n  //       this.forceUpdate()\r\n  //     }\r\n    \r\n  // );\r\n\r\n  \r\n  runcommunity = () => {\r\n    appState.graph.convexPolygons = []\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'community'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n      (response) => {\r\n        var communityDict = response.data.message;\r\n        this.modularity = response.data.modularity;\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.community = communityDict[node.id] ? communityDict[node.id] : -1\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n        appState.graph.nodes.colorBy = \"community\"\r\n        appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  findcliques = () => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'clique'\r\n      },\r\n      \"fromedgelist\": fromedgelist,\r\n      \"toedgelist\": toedgelist\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n      (response) => {\r\n        var cliques = response.data.message;\r\n        console.log(cliques)\r\n        // appState.graph.rawGraph.nodes.forEach((node) => {\r\n        //     node.community = communityDict[node.id]\r\n        // })\r\n        // const nodesArr = appState.graph.rawGraph.nodes\r\n        // const nodekeyList = Object.keys(nodesArr[1])\r\n        // const nodePropertyTypes = {}\r\n        // nodekeyList.forEach(function (k) {\r\n        //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        // })\r\n        // const uniqueValue = {}\r\n        // nodekeyList.forEach(function (k, i) {\r\n\r\n        //     if (nodePropertyTypes[k] == 'string') {\r\n        //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n        //     } else {\r\n        //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n        //         const minv = Math.min(...valuea)\r\n        //         const maxv = Math.max(...valuea)\r\n        //         uniqueValue[k] = [minv, maxv]\r\n        //     }\r\n        // })\r\n        // appState.graph.metadata.uniqueValue = uniqueValue\r\n        // appState.graph.metadata.nodeProperties = nodekeyList\r\n        // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n        // console.log(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  convexhull = (group) => {\r\n\r\n    var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.source_id\r\n    })\r\n    var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n      return edge.target_id\r\n    })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'convex'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes\r\n\r\n    }\r\n    axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        var convexDict = jsondata.message;\r\n\r\n\r\n        appState.graph.rawGraph.nodes.forEach((node) => {\r\n          node.isconvex = convexDict[node.id]\r\n        })\r\n        const nodesArr = appState.graph.rawGraph.nodes\r\n        const nodekeyList = Object.keys(nodesArr[1])\r\n        const nodePropertyTypes = {}\r\n        nodekeyList.forEach(function (k) {\r\n          nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n        })\r\n        const uniqueValue = {}\r\n        nodekeyList.forEach(function (k, i) {\r\n\r\n          if (nodePropertyTypes[k] == 'string') {\r\n            uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n          } else {\r\n            const valuea = nodesArr.map(function (el) { return el[k]; })\r\n            const minv = Math.min(...valuea)\r\n            const maxv = Math.max(...valuea)\r\n            uniqueValue[k] = [minv, maxv]\r\n          }\r\n        })\r\n        appState.graph.metadata.uniqueValue = uniqueValue\r\n        appState.graph.metadata.nodeProperties = nodekeyList\r\n        appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n\r\n\r\n        // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        //     // console.log(node)\r\n        //     node.data.ref.isconvex\r\n\r\n        // )\r\n        // // highlight for the mapview \r\n        // appState.graph.convexNodes = selectionNode\r\n        appState.graph.convexPolygons = jsondata.multipolygon;\r\n        console.log(appState.graph.convexPolygons)\r\n        //highlight in the network view \r\n        // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n        //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n        // });\r\n\r\n        // appState.graph.frame.lineIndices.forEach(function (link) {\r\n        //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n        //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n        //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n        // })\r\n\r\n        // for (var i = 0; i < selectionNode.length; i++) {\r\n        //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n        //   }\r\n\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  density_distance = (group) => {\r\n\r\n    // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.source_id\r\n    // })\r\n    // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n    //     return edge.target_id\r\n    // })\r\n    var querydict = {\r\n      \"type\": 'edgelist',\r\n      \"message\": {\r\n        'name': 'density_distance'\r\n      },\r\n      \"group\": group,\r\n      \"nodes\": appState.graph.rawGraph.nodes,\r\n      \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n    }\r\n    axios.post('http://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n      (response) => {\r\n        var jsondata = JSON.parse(response.data)\r\n        // var convexDict = jsondata.message;\r\n\r\n        appState.graph.metadata.nodeComputed.push('standard distance')\r\n        appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n\r\n\r\n        appState.graph.densityDistance = jsondata.density_distance\r\n        appState.graph.scatterplot.y = 'standard distance'\r\n        appState.graph.scatterplot.x = 'network density'\r\n        appState.graph.groupby = group\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className={classnames([Classes.NAVBAR], 'navbar-head')} style={{display:\"block\", height:\"5vh\"}}>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT])} style={{height:\"100%\"}}>\r\n          <a href={LOGO_URL} target=\"_blank\">\r\n            <img title=\"Snoman\" id=\"SNoMAN logo\"\r\n              src={appState.preferences.darkMode ? argologo_dark : argologo_light}\r\n              height=\"28px\"></img>\r\n          </a>\r\n          <span>SNoMaN</span>\r\n          <div className={classnames([Classes.NAVBAR_HEADING])} style={{height:\"100%\"}}></div>\r\n          {/* <a\r\n            href=\"https://poloclub.github.io/argo-graph/\"\r\n            target='_blank'\r\n            style={{\r\n              padding: '6px 10px 6px 10px',\r\n              backgroundColor: 'pink',\r\n              color: 'white',\r\n              borderRadius: '4px',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            Learn more about Argo\r\n          </a> */}\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem text=\"Load Sample\" iconName=\"graph\">\r\n                  {\r\n                    SAMPLE_GRAPH_SNAPSHOTS.map((sample) => {\r\n                      const sampleSnapshotTitle = sample[0];\r\n                      const sampleSnapshotStrapiUuid = sample[1];\r\n\r\n                      return (\r\n                        <MenuItem\r\n                          style={{ width: \"300px\" }}\r\n                          key={sampleSnapshotTitle}\r\n                          iconName=\"graph\"\r\n                          text={sampleSnapshotTitle}\r\n                          onClick={() => {\r\n                            window.loadAndDisplaySnapshotFromStrapi(sampleSnapshotStrapiUuid);\r\n                          }}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from CSV...\"\r\n                  onClick={() => (appState.import.dialogOpen = true)}\r\n                />\r\n                {/* <MenuItem\r\n                  iconName=\"import\"\r\n                  text=\"Import from GEXF...\"\r\n                  onClick={() => (appState.import.gexfDialogOpen = true)}\r\n                /> */}\r\n                {/* <MenuItem\r\n                  iconName=\"pt-icon-document-open\"\r\n                  text=\"Open Snapshot\"\r\n                  onClick={() => { appState.preferences.openSnapshotDialogOpen = true }}\r\n                /> */}\r\n                <MenuDivider />\r\n                <MenuItem\r\n                  iconName=\"download\"\r\n                  text=\"Save Snapshot\"\r\n                  onClick={() => {\r\n                    appState.project.stringCopyOfSnapshot = appState.graph.saveImmediateStates();\r\n                    appState.project.isSaveSnapshotDialogOpen = true\r\n                  }}\r\n                />\r\n                <MenuItem\r\n                  iconName=\"pt-icon-document-share\"\r\n                  text=\"Publish and Share Snapshot\"\r\n                  onClick={() => { appState.preferences.shareDialogOpen = true }}\r\n                />\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n            style={{height:\"100%\"}}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              style={{height:\"100%\"}}\r\n              iconName=\"document\"\r\n            >\r\n              File\r\n            </Button>\r\n          </Popover>\r\n          <Popover\r\n            content={\r\n              <Menu>\r\n                <MenuItem\r\n                  text=\"View Table\"\r\n                  iconName=\"pt-icon-database\"\r\n                  onClick={() => {\r\n                    appState.graph.frame.pauseLayout();\r\n                    appState.preferences.dataSheetDialogOpen = true;\r\n                    this.forceUpdate();\r\n                  }}\r\n                />\r\n                {/* <MenuItem\r\n                  text=\"Statistics\"\r\n                  iconName=\"pt-icon-timeline-bar-chart\"\r\n                  onClick={() => { appState.preferences.statisticsDialogOpen = true }}\r\n                /> */}\r\n                {/* <MenuItem text=\"Community Detection\" iconName=\"graph\">\r\n                  <MenuItem\r\n                    text=\"Convex Hull\"\r\n                    onClick={() => {\r\n                      appState.graph.showNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 PageRank\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"pagerank\"] && n2[\"pagerank\"]) {\r\n                          return n2[\"pagerank\"] - n1[\"pagerank\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Show only nodes with top 5 Degree\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                      const sortedNodeList = [...appState.graph.rawGraph.nodes];\r\n                      sortedNodeList.sort((n1, n2) => {\r\n                        if (n1[\"degree\"] && n2[\"degree\"]) {\r\n                          return n2[\"degree\"] - n1[\"degree\"];\r\n                        }\r\n                        return 0;\r\n                      });\r\n                      const ids = [];\r\n                      for (let i = 0; i < 5 && i < sortedNodeList.length; i++) {\r\n                        ids.push(sortedNodeList[i].id);\r\n                      }\r\n                      appState.graph.showNodes(ids);\r\n                    }}\r\n                  />\r\n                  <MenuItem\r\n                    text=\"Hide All Nodes\"\r\n                    onClick={() => {\r\n                      appState.graph.hideNodes(appState.graph.rawGraph.nodes.map(n => n.id));\r\n                    }}\r\n                  />\r\n                </MenuItem> */}\r\n              </Menu>\r\n            }\r\n            position={Position.BOTTOM}\r\n          >\r\n            <Button\r\n              className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n              iconName=\"pt-icon-wrench\"\r\n            >\r\n              View\r\n            </Button>\r\n          </Popover>\r\n        </div>\r\n        <div className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_LEFT]) } style={{height:\"100%\"}}>\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          {appState.graph.hasGraph && appState.graph.frame && (\r\n            <div style={{ display: \"inline\" }}>\r\n\r\n              {/** Smart Pause functionality: pauses graph when no interaction */}\r\n              {(() => {\r\n                let self = this;\r\n                setInterval(function () {\r\n                  let timeNow = Date.now();\r\n                  /**stops initial default active layout*/\r\n                  if (appState.graph.smartPause.defaultActive.isActive) {\r\n                    if (timeNow - appState.graph.smartPause.defaultActive.startTime > appState.graph.smartPause.defaultActive.duration\r\n                      || appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.smartPause.defaultActive.isActive = false;\r\n                    }\r\n                  } else {\r\n                    /**smart pausing*/\r\n                    if (!appState.graph.frame.paused &&\r\n                      !appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.pauseLayout();\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = true;\r\n                      self.forceUpdate();\r\n                    }\r\n                    /**old code using lastUnpaused:*/\r\n                    /**\r\n                     * if(!appState.graph.frame.paused && \r\n                      appState.graph.smartPause.lastUnpaused && \r\n                      !appState.graph.smartPause.interactingWithGraph && timeNow - appState.graph.smartPause.lastUnpaused > 300){\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.graph.frame.paused = true;\r\n                        appState.graph.smartPause.smartPaused = true;\r\n                        self.forceUpdate();\r\n                    }\r\n                     */\r\n\r\n                    /**un-smart pausing*/\r\n                    if (appState.graph.smartPause.smartPaused && appState.graph.smartPause.interactingWithGraph) {\r\n                      appState.graph.frame.resumeLayout();\r\n                      appState.graph.frame.paused = false;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                      self.forceUpdate();\r\n                    }\r\n                  }\r\n                }, 10)\r\n              })()}\r\n\r\n{<Tooltip\r\n                content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n                position={Position.BOTTOM}\r\n              >\r\n                <Button\r\n                  className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n                  iconName={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"play\" : \"pause\"}\r\n                  text={(!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"Resume Force-Directed Layout\" : \"Pause Force-Directed Layout\"}\r\n                  onClick={() => {\r\n                    if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                      /** graph runs for default duration when unpaused */\r\n                      appState.graph.runActiveLayout();\r\n\r\n                      appState.graph.frame.resumeLayout();\r\n                      this.forceUpdate();\r\n                      /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                    } else if (appState.graph.smartPause.smartPaused) {\r\n                      /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.paused = true;\r\n                      appState.graph.smartPause.smartPaused = false;\r\n                    } else {\r\n                      /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                      appState.graph.frame.pauseLayout();\r\n                      this.forceUpdate();\r\n                    }\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              }\r\n              {/* {                    {appState.graph.hasGraph && <Button className={\"pt-small\"} text=\"Clear Selection and Filter\" onClick={() => (appState.graph.overrides = new Map())} />}} */}\r\n              <div className=\"pt-button-group\">\r\n              <a className=\"pt-button pt-icon-refresh\"  role=\"button\" onClick={() => {\r\n                appState.graph.mapClicked = undefined;\r\n                appState.graph.mapClickedArray = [];\r\n                appState.graph.areaSelected = undefined;\r\n                appState.graph.selectedNodes = [];\r\n                appState.graph.selectedSets = [];\r\n                // appState.graph.frame.lastTimeSelectionLength = 0\r\n                appState.graph.commonSetNodes =[];\r\n                appState.graph.interSetNodes = [];\r\n                appState.graph.frame.selection = []\r\n                appState.graph.filter  = {}\r\n                appState.graph.currentlyHovered = undefined;\r\n                appState.graph.pathHovered = undefined;\r\n                appState.graph.pathHoveredList = [];\r\n                appState.graph.edgeselection = [];\r\n                appState.graph.degreeselection = [];\r\n                appState.graph.degreebrushed = false;\r\n                appState.graph.distanceDensityCurrentlyHovered = undefined;\r\n                appState.graph.distanceDensityCurrentlyClicked = [];\r\n                appState.graph.clearBrush = true;\r\n                appState.graph.filterNodes()\r\n                appState.graph.frame.updateSelectionOpacity()\r\n\r\n                // this.forceUpdate();\r\n              }}>Clear All Selections and Filters</a>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* {!appState.graph.smartPause.smartPaused && this.forceUpdate()} */}\r\n        </div>\r\n        <div\r\n          className={classnames([Classes.NAVBAR_GROUP, Classes.ALIGN_RIGHT])} style={{height:\"100%\"}}\r\n        >\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"graph\"\r\n            onClick={() => {\r\n              appState.project.isRenameSnapshotDialogOpen = true;\r\n            }}\r\n          >\r\n            {appState.graph.metadata.snapshotName || \"Untitled Graph\"}\r\n          </Button> */}\r\n          <span className={Classes.NAVBAR_DIVIDER} />\r\n          {/* <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            iconName=\"cog\"\r\n            onClick={() => {\r\n              appState.preferences.dialogOpen = true;\r\n            }}\r\n          /> */}\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"help\"\r\n            onClick={() => {\r\n              appState.preferences.helpDialogOpen = true;\r\n            }}\r\n          />\r\n          <Button\r\n            className={classnames([Classes.BUTTON, Classes.MINIMAL])}\r\n            style={{height:\"100%\"}}\r\n            iconName=\"minimize\"\r\n            onClick={() => {\r\n              appState.preferences.turnOnMinimalMode()\r\n            }}\r\n          />\r\n          <span className={Classes.NAVBAR_DIVIDER} style={{height:\"100%\"}}/>\r\n          <a\r\n            href={GITHUB_URL}\r\n            target='_blank'\r\n            style={{\r\n              color: appState.preferences.darkMode ? 'white' : 'black',\r\n              fontSize: '120%',\r\n              textDecoration: 'none'\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass MinimalNavbar extends React.Component {\r\n  render() {\r\n    return appState.graph.frame && (\r\n      <div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-left\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <Tooltip\r\n            content={(appState.graph.frame.paused) ? \"Resume Layout Algorithm\" : \"Pause Layout Algorithm\"}\r\n            position={Position.BOTTOM}\r\n          >\r\n             <div className=\"pt-button-group\">\r\n            <a\r\n              className={classnames(\"pt-button pt-icon-maximize\", (!appState.graph.smartPause.smartPaused && appState.graph.frame.paused) ? \"pt-icon-play\" : \"pt-icon-pause\")}\r\n              role=\"button\"\r\n              onClick={() => {\r\n                if (appState.graph.frame.paused && !appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from \"pause layout\" mode to \"resume layout\"*/\r\n\r\n                  /** graph runs for default duration when unpaused */\r\n                  appState.graph.runActiveLayout();\r\n\r\n                  appState.graph.frame.resumeLayout();\r\n                  this.forceUpdate();\r\n                  /**appState.graph.smartPause.lastUnpaused = Date.now(); //old code using lastUnpaused*/\r\n                } else if (appState.graph.smartPause.smartPaused) {\r\n                  /**graph is going from smart paused \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.paused = true;\r\n                  appState.graph.smartPause.smartPaused = false;\r\n                } else {\r\n                  /**graph is going from in \"resume layout\" mode to \"pause layout\" mode*/\r\n                  appState.graph.frame.pauseLayout();\r\n                  this.forceUpdate();\r\n                }\r\n              }}\r\n            // onClick={() => {\r\n            //   if (appState.graph.frame.paused) {\r\n            //     appState.graph.frame.resumeLayout();\r\n            //     this.forceUpdate();\r\n            //   } else {\r\n            //     appState.graph.frame.pauseLayout();\r\n            //     this.forceUpdate();\r\n            //   }\r\n            // }}\r\n            />\r\n          </div>\r\n          </Tooltip>\r\n         \r\n        </div>\r\n        <div\r\n          className={classnames(\"minimal-navbar-right\")}\r\n          style={{\r\n            backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n          }}\r\n        >\r\n          <div className=\"pt-button-group\">\r\n            <a className=\"pt-button pt-icon-maximize\"  role=\"button\" onClick={() => appState.preferences.turnOffMinimalMode()}></a>\r\n            <a className=\"pt-button pt-icon-help\"  role=\"button\" onClick={() => appState.preferences.helpDialogOpen = true}></a>\r\n            <a className=\"pt-button pt-icon-document-open\"  role=\"button\" href={window.location} target=\"_blank\"></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass NavbarSelector extends React.Component {\r\n  render() {\r\n    return appState.preferences.isNavbarInMinimalMode ? <MinimalNavbar /> : <RegularNavbar />;\r\n  }\r\n}\r\n\r\nexport default NavbarSelector;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Card,\r\n  Classes,\r\n  Spinner,\r\n  NonIdealState,\r\n  FocusStyleManager\r\n} from \"@blueprintjs/core\";\r\nimport appState from \"../stores/index\";\r\nimport { requestOpenWorkspaceFolder } from \"../ipc/client\";\r\n\r\n// Argo-lite: In lite, home screen is replaced by a loading screen\r\n// since there will always be a default graph showing.\r\n@observer\r\nclass WorkspaceView extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"workspace\">\r\n        {/* <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            appState.project.isNewProjectDialogOpen = true;\r\n          }}\r\n        >\r\n          <Icon iconName=\"plus\" /> Create New Project\r\n        </Card>\r\n        <Card\r\n          interactive={true}\r\n          elevation={Card.ELEVATION_TWO}\r\n          onClick={() => {\r\n            requestOpenWorkspaceFolder();\r\n          }}\r\n        >\r\n          <Icon iconName=\"cog\" /> Manage Workspace\r\n        </Card>\r\n        <hr />\r\n        <div className=\"argo-menu-list-header\">My Projects</div>\r\n        <div style={{ paddingBottom: '100px' }}>\r\n          {appState.project.isFetching ? (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Spinner />\r\n            </div>\r\n          ) : appState.project.projects.length > 0 ? (\r\n            appState.project.projects.map(project => {\r\n              return (\r\n                <div key={project.name}>\r\n                  <Card\r\n                    interactive={true}\r\n                    elevation={Card.ELEVATION_TWO}\r\n                    onClick={() => {\r\n                      appState.project.currentProject = project;\r\n                      appState.project.isProjectDetailDialogOpen = true;\r\n                    }}\r\n                  >\r\n                    <h5>{project.name}</h5>\r\n                    <p>Created: {project.createdDate || 'Unknown'}</p>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <div style={{ textAlign: \"center\" }}>\r\n              Workspace is empty. Start by creating a new project.\r\n            </div>\r\n          )}\r\n        </div> */}\r\n        <div style={{ textAlign: \"center\", height: \"100vh\" }}>\r\n          <Spinner />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkspaceView;","import React from \"react\";\r\nimport appState from \"../stores\";\r\nimport {Tag } from \"@blueprintjs/core\";\r\n\r\n\r\nexport default class ThreeJSVis extends React.Component {\r\n  componentDidMount() {\r\n    appState.graph.setUpFrame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"graph-container\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          // flex: \"1\",\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n          // position: \"absolute\"\r\n        }}\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport appState from '../stores';\r\n\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\n\r\nfunction uniqueArrayByAttribute(arr, attribute) {\r\n  const uniqueMap = new Map();\r\n  const result = [];\r\n\r\n  arr.forEach((item) => {\r\n    if (!uniqueMap.has(item[attribute])) {\r\n      uniqueMap.set(item[attribute], true);\r\n      result.push(item);\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport default function AreaSelect() {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    if (!map.selectArea) return;\r\n\r\n    map.selectArea.enable();\r\n\r\n    map.on(\"areaselectstart\", (e) => {\r\n        //empty selection \r\n        // appState.graph.frame.selection.forEach(function(node){\r\n        //   node.renderData.draw_object.children[0].material.color.set(\r\n        //     node.renderData.hcolor\r\n        //   )\r\n        //   node.renderData.draw_object.children[0].visible = false\r\n        // })\r\n        // appState.graph.frame.selection = []\r\n        // appState.graph.selectedNodes = []\r\n        // appState.graph.edgeselection = []\r\n        appState.graph.areaSelected = undefined;\r\n\r\n\r\n      });\r\n\r\n    map.on(\"areaselected\", (e) => {\r\n      console.log(e.bounds.toBBoxString()); // lon, lat, lon, lat\r\n      L.rectangle(e.bounds, { color: \"blue\", weight: 1 });\r\n      // const mapselection = []\r\n      // if(appState.graph.rawGraph.nodes[0].LatY !== undefined){\r\n      //   map.eachLayer((pointLayer) => { \r\n      //       if (pointLayer instanceof L.CircleMarker && e.bounds.contains(pointLayer.getLatLng())) {\r\n      //           mapselection.push(pointLayer.options.data)\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n      //           pointLayer.options.data.renderData.draw_object.children[0].visible = true\r\n      //           appState.graph.frame.colorNodeOpacity(pointLayer.options.data,1)\r\n      //       }\r\n      //       // else if(pointLayer instanceof L.CircleMarker){\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].material.color.setHex(pointLayer.options.data.renderData.hcolor);\r\n      //       //   pointLayer.options.data.renderData.draw_object.children[0].visible = false\r\n      //       //   appState.graph.frame.colorNodeOpacity(pointLayer.options.data,0.5)\r\n      //       // }\r\n      //     }\r\n      //       )\r\n      // }\r\n\r\n      // const northeast = e.bounds.getNorthEast()\r\n      // const southwest = e.bounds.getSouthWest()\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        e.bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n      )\r\n      \r\n      // //highlight selected nodes \r\n      // if (appState.graph.selectedNodes.length > 0) {\r\n      //   if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.3, stroke: node.renderData.draw_object.children[0].material.color, zIndex:'auto' }\r\n      //   } else {\r\n  \r\n      //     return { fillColor: node.renderData.color , fillOpacity: 0.9, stroke: def.NODE_HIGHLIGHT, zIndex:'10000' }\r\n      //   }\r\n      // }\r\n      // appState.graph.selectedNodes = []\r\n      if (selectionNode.length === 0) return \r\n      appState.graph.selectedNodes.push(...selectionNode)\r\n      appState.graph.highlightCommonNodes = false\r\n      appState.graph.showIntersect = false;\r\n      appState.graph.pickUpAlter = false;\r\n      appState.graph.selectedSets.push(selectionNode)\r\n      appState.graph.frame.selection.push(...selectionNode)\r\n      appState.graph.selectedNodes = uniqueArrayByAttribute(appState.graph.selectedNodes, 'id');\r\n      appState.graph.frame.selection = uniqueArrayByAttribute(appState.graph.frame.selection, 'id');\r\n      if(appState.graph.pickUpAlter){\r\n        appState.graph.frame.updateSelectionOutOpacity();\r\n      }else if(appState.graph.highlightCommonNodes){\r\n        self.updateSelectionCommonOpacity();\r\n       }else{\r\n        appState.graph.frame.updateSelectionOpacity();\r\n      }\r\n      \r\n      appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n      //clear previsou selection\r\n      // appState.graph.selectedNodes = selectionNode\r\n      // appState.graph.frame.selection = selectionNode\r\n      // appState.graph.frame.updateSelectionOutOpacity();\r\n\r\n      appState.graph.areaSelected = true;\r\n      \r\n      // console.log(appState.graph.selectedNodes)\r\n    });\r\n\r\n    \r\n\r\n    // You can restrict selection area like this:\r\n    const bounds = map.getBounds().pad(-0.25); // save current map bounds as restriction area\r\n    // check restricted area on start and move\r\n    map.selectArea.setValidate((layerPoint) => {\r\n      return bounds.contains(this._map.layerPointToLatLng(layerPoint));\r\n    });\r\n\r\n    // now switch it off\r\n    map.selectArea.setValidate();\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport appState, { AppState } from \"../stores/index\";\r\n\r\nimport { useMap } from \"react-leaflet\";\r\n\r\nimport { FeatureGroup, Circle } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\"\r\n\r\n\r\nclass ReactLeafletToolbar extends React.Component {\r\n    \r\n    onCreate(e) {\r\n        this.clearMap()\r\n        const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n            e.layer._bounds.contains(L.latLng(node.data.ref.LatY, node.data.ref.LonX)))\r\n        )\r\n        appState.graph.selectedNodes = selectionNode\r\n        appState.graph.frame.selection = selectionNode\r\n        appState.graph.frame.updateSelectionOpacity()\r\n        appState.useToolbartoSelect = true\r\n    }\r\n    clearMap() {\r\n        const map = useMap();\r\n        map.eachLayer(function (layer) {\r\n          map.removeLayer(layer);\r\n        });\r\n      }\r\n    render() {\r\n        return (\r\n            <FeatureGroup>\r\n            <EditControl\r\n            position='bottomleft'\r\n            onEdited={this._onEditPath}\r\n            onCreated={this.onCreate}\r\n            onDeleted={this._onDeleted}\r\n            draw={{\r\n                marker: false,\r\n                polygon: false,\r\n                circlemarker: false,\r\n                circle: false,\r\n                polyline: false\r\n            }}\r\n            edit={{\r\n                edit: false\r\n            }}\r\n            />\r\n            <Circle center={[51.51, -0.06]} radius={200} />\r\n            </FeatureGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactLeafletToolbar;","import { useEffect, useMemo } from \"react\";\r\nimport { useMap, useMapEvents } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { latLngBounds } from 'leaflet'\r\nimport appState from '../stores';\r\nimport { observer } from \"mobx-react\";\r\n\r\n// @observer\r\nexport function ZoomMap() {\r\n  const map = useMap();\r\n\r\n  const bounds = useMemo(() => {\r\n    if (appState.graph.firstload) {\r\n      // if (appState.graph.frame.getNodeList() >0){\r\n      const nodeLoc = appState.graph.frame.getNodeList().map(function (node) {\r\n        return [parseFloat(node.data.ref.LatY), parseFloat(node.data.ref.LonX)]\r\n      })\r\n      const b = latLngBounds() // seemed to work without having to pass init arg\r\n      nodeLoc.forEach(coords => {\r\n        b.extend(coords)\r\n      })\r\n      if (Object.keys(b).length > 0) {\r\n        map.fitBounds(b)\r\n      }\r\n\r\n      // }\r\n      appState.graph.firstload = false\r\n      return null;\r\n    }   //first load\r\n    if (!appState.graph.autoZoom) return;\r\n    if (appState.graph.frame.selection.length == 0) {\r\n      // if (appState.graph.frame.getNodeList() >0){\r\n      const nodeLoc = appState.graph.frame.getNodeList().map(function (node) {\r\n        return [parseFloat(node.data.ref.LatY), parseFloat(node.data.ref.LonX)]\r\n      })\r\n      const b = latLngBounds() // seemed to work without having to pass init arg\r\n      nodeLoc.forEach(coords => {\r\n        b.extend(coords)\r\n      })\r\n      if (Object.keys(b).length > 0) {\r\n        map.fitBounds(b)\r\n      }\r\n\r\n      // }\r\n      return null;\r\n    }   //no selection \r\n    if (appState.graph.frame.selection.length == 1) { // only one node is selected \r\n      const nodeLoc = appState.graph.frame.selection.map(function (node) {\r\n        return [parseFloat(node.data.ref.LatY), parseFloat(node.data.ref.LonX)]\r\n      })\r\n      const b = latLngBounds() // seemed to work without having to pass init arg\r\n      nodeLoc.forEach(coords => {\r\n        b.extend(coords)\r\n      })\r\n      if (Object.keys(b).length > 0) {\r\n        map.fitBounds(b)\r\n      }\r\n      return;\r\n    }\r\n\r\n    const nodeLoc = appState.graph.frame.selection.map(function (node) {\r\n      return [parseFloat(node.data.ref.LatY), parseFloat(node.data.ref.LonX)]\r\n    })\r\n    // console.log(nodeLoc)\r\n    const b = latLngBounds() // seemed to work without having to pass init arg\r\n    nodeLoc.forEach(coords => {\r\n      b.extend(coords)\r\n    })\r\n    if (Object.keys(b).length > 0) {\r\n      map.fitBounds(b)\r\n    }\r\n  }, [appState.graph.frame.selection])\r\n\r\n  return null;\r\n}\r\n\r\n\r\nexport function MapClick() {\r\n\r\n  const map = useMapEvents({\r\n    click(e) {\r\n      if (appState.useToolbartoSelect) {\r\n        appState.useToolbartoSelect = false\r\n      } else {\r\n        appState.graph.frame.selection = []\r\n        appState.graph.mapClickedArray =[]\r\n        appState.graph.selectedNodes = []\r\n        appState.graph.selectedSets = []\r\n        appState.graph.frame.lastTimeSelectionLength = 0\r\n        appState.graph.commonSetNodes =[];\r\n        appState.graph.interSetNodes = [];\r\n        appState.graph.edgeselection = []\r\n        appState.graph.mapClicked = null\r\n        appState.graph.areaSelected = undefined;\r\n        // appState.graph.networkClicked = null\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n        appState.graph.frame.updateSelectionOpacity()\r\n\r\n      }\r\n\r\n\r\n    }\r\n  })\r\n  return null;\r\n}\r\n\r\nexport function DetectKeyPress() {\r\n  document.addEventListener('keydown', (event) => {\r\n    appState.graph.keydown = true\r\n  }, false);\r\n  document.addEventListener('keyup', (event) => {\r\n    appState.graph.keydown = false\r\n  }, false);\r\n  return null;\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport L from 'leaflet'\r\nimport 'leaflet-curve'\r\nimport { useLeafletContext } from '@react-leaflet/core'\r\n\r\nconst Curve = (props) => {\r\n    const context = useLeafletContext()\r\n    const {path, options} = props\r\n\r\n    useEffect(() => {\r\n        const curve = new L.Curve(path, options)\r\n        const container = context.layerContainer || context.map\r\n        container.addLayer(curve)\r\n\r\n        return () => {\r\n            container.removeLayer(curve)\r\n        }\r\n    })\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Curve","import React from 'react';\r\n// import L from 'leaflet';\r\nimport { MapContainer, CircleMarker, TileLayer, Tooltip, Polyline, Polygon, Pane, LayersControl, GeoJSON, FeatureGroup, Circle } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\"\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appState from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport \"leaflet-area-select\";\r\nimport AreaSelect from \"../components/AreaSelect\"\r\nimport ReactLeafletToolbar from \"../components/ReactLeafletToolbar\"\r\nimport { ZoomMap, MapClick, DetectKeyPress } from \"../components/ZoomMap\"\r\nimport { useMap } from \"react-leaflet\";\r\nimport { Tag, Switch } from \"@blueprintjs/core\";\r\nimport * as turf from '@turf/turf'\r\nimport statejsonfile from \"../layerdata/us-state.json\"\r\nimport countyjsonfile from \"../layerdata/county_0_5m.json\"\r\nimport congressionjsonfile from \"../layerdata/congressional_5m.json\"\r\n\r\nimport \"../../node_modules/leaflet/dist/leaflet.css\"\r\nimport \"../../node_modules/leaflet-draw/dist/leaflet.draw.css\"\r\n\r\nimport Curve from \"../components/Curve\"\r\n\r\n// import { Button, Classes, Switch, Tag } from \"@blueprintjs/core\";\r\nvar def = require(\"../graph-frontend/src/imports\").default;\r\nvar d3 = def.d3;\r\n\r\n\r\n\r\n\r\n// import LocationFilter from \"../components/LocationFilter\"\r\n\r\n@observer\r\nclass MapView extends React.Component {\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.stringified = JSON.stringify(statejsonfile);\r\n    //  this.statejson = JSON.parse(this.stringified);\r\n    //  this.statePolyPath = this.statejson.features.map(statedata =>{\r\n    //     statedata.geometry.coordinates[0]\r\n    // })\r\n    //  this.statePolygons = turf.polygon(this.statePolyPath);\r\n    // console.log(this.statePolygons)\r\n  }\r\n\r\n  // frameNode = []\r\n  // {\r\n\r\n  //   if (appState.graph.rawGraph.nodes[0].LatY !== undefined) {\r\n  //     frameNode = appState.graph.frame.getNodeIdList()\r\n  //   }\r\n\r\n\r\n  // }\r\n  // @observable neighborTosID = []\r\n  // @observable neighborFromsID = []\r\n\r\n\r\n\r\n  @computed\r\n  get neighborNodesID() {\r\n    const neighborIDs = []\r\n    // const neighborTosID = []\r\n    if (appState.graph.currentlyHovered && appState.graph.currentlyHovered.links) {\r\n      for (var j = 0; j < appState.graph.currentlyHovered.links.length; j++) {\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].fromId);\r\n        neighborIDs.push(appState.graph.currentlyHovered.links[j].toId);\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClicked) {\r\n      for (var j = 0; j < appState.graph.mapClicked.links.length; j++) {\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].fromId);\r\n        neighborIDs.push(appState.graph.mapClicked.links[j].toId);\r\n      }\r\n    }\r\n    return neighborIDs\r\n  }\r\n\r\n  @computed\r\n  get nodesSelectedID() {\r\n    var edgesOfNodes = []\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      const filterNode = appState.graph.selectedNodes.filter((n) => n !== undefined)\r\n      edgesOfNodes = filterNode.map(function (node) {\r\n        return node.id\r\n      })\r\n    }\r\n    return edgesOfNodes\r\n  }\r\n\r\n  @computed\r\n  get edgeSelectionID() {\r\n    var edgeselectionID = []\r\n    // if (appState.graph.selectedNodes.length > 0) {\r\n\r\n    edgeselectionID = appState.graph.edgeselection.map(function (edge) {\r\n      return `${edge.source.id}👉 ${edge.target.id}`\r\n    })\r\n    // }\r\n    // console.log(edgeselectionID)\r\n    return edgeselectionID\r\n  }\r\n\r\n  // distance(fromlocLatY, fromlocLonX,tolocLatY,tolocLonX) {\r\n  //   const dx2 = Math.pow(fromlocLonX - tolocLonX, 2);\r\n  //   const dy2 = Math.pow(fromlocLatY - tolocLatY, 2);\r\n\r\n  //   return Math.sqrt(dx2 + dy2);\r\n  // }\r\n\r\n  // hypotenuse = Math.sqrt(1 + 1)\r\n\r\n  // segments= d3.scaleLinear()\r\n  //     .domain([0, this.hypotenuse])\r\n  //     .range([1, 10])\r\n\r\n\r\n  // generateSegments(nodes, links) {\r\n  //   // generate separate graph for edge bundling\r\n  //   // nodes: all nodes including control nodes\r\n  //   // links: all individual segments (source to target)\r\n  //   // paths: all segments combined into single path for drawing\r\n  //   let bundle = {nodes: [], links: [], paths: []};\r\n\r\n  //   // make existing nodes fixed\r\n  //   bundle.nodes = nodes.map(function(d, i) {\r\n  //     d.fx = d.LonX;\r\n  //     d.fy = d.LatY;\r\n  //     return d;\r\n  //   });\r\n\r\n  //   links.forEach(function(d, i) {\r\n  //     // calculate the distance between the source and target\r\n  //     let length = this.distance(d.data.fromlocLatY, d.data.fromlocLonX,d.data.tolocLatY,d.data.tolocLonX);\r\n\r\n  //     // calculate total number of inner nodes for this link\r\n  //     let total = Math.round(this.segments(length));\r\n\r\n  //     // create scales from source to target\r\n  //     let xscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1]) // source, inner nodes, target\r\n  //       .range([d.data.fromlocLonX, d.data.tolocLonX]);\r\n\r\n  //     let yscale = d3.scaleLinear()\r\n  //       .domain([0, total + 1])\r\n  //       .range([d.data.fromlocLatY, d.data.tolocLatY]);\r\n\r\n  //     // initialize source node\r\n  //     let source = d.source;\r\n  //     let target = null;\r\n\r\n  //     // add all points to local path\r\n  //     let local = [source];\r\n\r\n  //     for (let j = 1; j <= total; j++) {\r\n  //       // calculate target node\r\n  //       target = {\r\n  //         x: xscale(j),\r\n  //         y: yscale(j)\r\n  //       };\r\n\r\n  //       local.push(target);\r\n  //       bundle.nodes.push(target);\r\n\r\n  //       bundle.links.push({\r\n  //         source: source,\r\n  //         target: target\r\n  //       });\r\n\r\n  //       source = target;\r\n  //     }\r\n\r\n  //     local.push(d.target);\r\n\r\n  //     // add last link to target node\r\n  //     bundle.links.push({\r\n  //       source: target,\r\n  //       target: d.target\r\n  //     });\r\n\r\n  //     bundle.paths.push(local);\r\n  //   });\r\n\r\n  //   return bundle;\r\n  // }\r\n\r\n\r\n\r\n  dec2hexString = (dec) => {\r\n    return '0x' + (dec + 0x10000).toString(16).substr(-4).toUpperCase();\r\n  }\r\n\r\n  onMouseOut = (e) => {\r\n    console.log('onMouseOut', e)\r\n  }\r\n\r\n\r\n\r\n\r\n  uniqueArrayByAttribute(arr, attribute) {\r\n    const uniqueMap = new Map();\r\n    const result = [];\r\n\r\n    arr.forEach((item) => {\r\n      if (!uniqueMap.has(item[attribute])) {\r\n        uniqueMap.set(item[attribute], true);\r\n        result.push(item);\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n\r\n  setEdgePathOption = (edge) => {\r\n    if (!appState.graph.mapEdgeShow) {\r\n      return { opacity: '0' }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.edgeselection.length !== 0) {  // && appState.graph.selectedNodes.length !== 0\r\n      const tempedgelist = this.edgeSelectionID\r\n      if (tempedgelist.indexOf(edge.id) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n\r\n      }\r\n      // else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      //   return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n      else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.highlightCommonNodes && appState.graph.selectedSets.length > 1) {\r\n      // const commonnodes = appState.graph.frame.getCommonNodesBetweenSets(appState.graph.selectedSets)\r\n      const commonSetNodesID = appState.graph.commonSetNodes.map(n => n.id)\r\n      const selectionID = appState.graph.selectedNodes.map(n => n.id)\r\n      if (((commonSetNodesID.indexOf(edge.fromId) !== -1) && (selectionID.indexOf(edge.toId) !== -1)) || ((commonSetNodesID.indexOf(edge.toId) !== -1) && (selectionID.indexOf(edge.fromId) !== -1))) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.showIntersect && appState.graph.selectedSets.length > 1) {\r\n      // const commonnodes = appState.graph.frame.getCommonNodesBetweenSets(appState.graph.selectedSets)\r\n      if (appState.graph.mapClickedArray.length > 0) {\r\n        const mapClickedArraryID = appState.graph.mapClickedArray.map(n => n.id)\r\n        const interSetNodesID = appState.graph.interSetNodes.map(n => n.id)\r\n        // const selectionID = appState.graph.selectedSets.map(n => n.id)\r\n        if (((interSetNodesID.indexOf(edge.fromId) !== -1) && (mapClickedArraryID.indexOf(edge.toId) !== -1)) || ((interSetNodesID.indexOf(edge.toId) !== -1) && (mapClickedArraryID.indexOf(edge.fromId) !== -1))) {\r\n          return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n        } else {\r\n          return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n        }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.mapClickedArray.length > 0) {\r\n      const mapClickedArraryID = appState.graph.mapClickedArray.map(n => n.id)\r\n      if ((mapClickedArraryID.indexOf(edge.fromId) !== -1) || (mapClickedArraryID.indexOf(edge.toId) !== -1)) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    // if (appState.graph.mapClicked) {\r\n    //   if (edge.fromId == appState.graph.mapClicked.id || edge.toId == appState.graph.mapClicked.id) {\r\n    //     return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n    //   } else {\r\n    //     return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    //   }\r\n    // }\r\n\r\n    //highlight branching out edges as well when select from map \r\n    if (appState.graph.areaSelected && appState.graph.selectedNodes.length > 0) {\r\n      if (appState.graph.pickUpAlter) {\r\n        if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n          return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n        } else {\r\n          return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n        }\r\n      } else {\r\n        if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n          return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n        } else {\r\n          return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    if (appState.graph.degreeselection.length > 0) {\r\n      const degreeselectionID = appState.graph.degreeselection.map(n => n.id)\r\n      if (degreeselectionID.indexOf(edge.fromId) !== -1 && degreeselectionID.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n      } else {\r\n\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.pathHovered && appState.graph.pathHovered.pathnode.length > 0) {\r\n\r\n      const pathnodeid = appState.graph.pathHovered[\"pathnode\"].map(p => p.id)\r\n      const pathnodeall = [...appState.graph.pathHovered[\"sourceid\"], ...appState.graph.pathHovered[\"targetid\"], ...pathnodeid];\r\n      if (pathnodeall.indexOf(edge.fromId) !== -1 && pathnodeall.indexOf(edge.toId) !== -1) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n      // for (let i = 0; i < pathnode.length - 1; i++) {\r\n      //   if ((edge.fromId == pathnode[i].id && edge.toId == pathnode[i + 1].id) || (edge.fromId == pathnode[i + 1].id && edge.toId == pathnode[i].id)) {\r\n      //     return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      //   }\r\n      // }\r\n      // return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked) {\r\n      return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n\r\n      // { color: edge.data.withinFamily ? appState.graph.edges.color : appState.graph.edges.crossColor, weight: '1', opacity: '1' }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n\r\n      //highlight within selection edges , &&\r\n      if (appState.graph.pickUpAlter) {\r\n        if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n          return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n        } else {\r\n          return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n        }\r\n\r\n      } else {\r\n        if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 && this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n          return { color: appState.graph.edges.color, weight: '1.1', opacity: '1' }\r\n        } else {\r\n          return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n        }\r\n\r\n      }\r\n\r\n\r\n      //else if (this.nodesSelectedID.indexOf(edge.fromId) !== -1 || this.nodesSelectedID.indexOf(edge.toId) !== -1) {\r\n      // return { color: appState.graph.edges.color, weight: '1', opacity: '1' }\r\n      // } \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if (appState.graph.currentlyHovered) {\r\n      if (edge.fromId == appState.graph.currentlyHovered.id || edge.toId == appState.graph.currentlyHovered.id) {\r\n        return { color: appState.graph.edges.crossColor, weight: '1.1', opacity: '1' }\r\n      } else {\r\n        return { color: appState.graph.edges.color, weight: '0.01', opacity: '0' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  setNodeCircle = (node) => {\r\n    if (appState.graph.frame && appState.graph.nodes.size.max) {\r\n      // appState.graph.frame.updateGraph(appState.graph.computedGraph);\r\n      return node.data.size\r\n    }\r\n  }\r\n\r\n  setNodePathOption = (node) => {\r\n\r\n    //the order of if condition matters, because of return first \r\n\r\n    // return {fillColor: node.renderData.color , fillOpacity: node.renderData.draw_object.material.opacity, stroke: node.renderData.draw_object.children[0].material.color}\r\n\r\n    // //no hover and selection \r\n    console.log(appState.graph.watchAppearance)\r\n    // appState.graph.frame.paused = true;\r\n\r\n    if (appState.graph.highlightCommonNodes && appState.graph.selectedSets.length > 1) {\r\n      // const commonnodes = appState.graph.frame.getCommonNodesBetweenSets(appState.graph.selectedSets)\r\n      if (appState.graph.selectedNodes.indexOf(node) > -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if (appState.graph.commonSetNodes.indexOf(node) > -1) {  //within selection but not within commons nodes\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.5, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else {  // background nodes\r\n        if (appState.graph.backNodeShow) {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0, stroke: false, zIndex: 'auto' }\r\n        } else {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0, stroke: false, zIndex: 'auto' }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.showIntersect && appState.graph.selectedSets.length > 1) {\r\n      if (appState.graph.interSetNodes.indexOf(node) > -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n      } else if (appState.graph.selectedNodes.indexOf(node) > -1) {  //within selection but not within commons nodes\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.3, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else {  // background nodes\r\n        if (appState.graph.backNodeShow) {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0, stroke: false, zIndex: 'auto' }\r\n        } else {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0, stroke: false, zIndex: 'auto' }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.degreeselection.length > 0) {\r\n      if (appState.graph.degreeselection.indexOf(node) == -1) {\r\n        if (appState.graph.backNodeShow) {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0.4, stroke: false, zIndex: 'auto' }\r\n        } else {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0, stroke: false, zIndex: 'auto' }\r\n        }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n    if (appState.graph.degreebrushed && appState.graph.degreeselection.length == 0) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n\r\n    if (appState.graph.convexNodes.length > 0) {\r\n      if (appState.graph.convexNodes.indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n    }\r\n\r\n\r\n    if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0 && !appState.graph.mapClicked && !appState.graph.pathHovered) {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: 'auto' }\r\n    }\r\n\r\n    if (appState.graph.selectedNodes.length > 0) {\r\n      if (appState.graph.pickUpAlter) {\r\n        const neighborIDs = appState.graph.selectedNeighborIDs\r\n        if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n        } else if (neighborIDs.indexOf(node.id) !== -1) {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0.5, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n        }\r\n        else {\r\n          if (appState.graph.backNodeShow) {\r\n            return { fillColor: node.renderData.color, fillOpacity: 0.4, stroke: false, zIndex: 'auto' }\r\n          } else {\r\n            return { fillColor: node.renderData.color, fillOpacity: 0, stroke: false, zIndex: 'auto' }\r\n          }\r\n        }\r\n      } else {\r\n        if (this.nodesSelectedID.indexOf(node.id) !== -1) {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n\r\n        }\r\n        else {\r\n          if (appState.graph.backNodeShow) {\r\n            return { fillColor: node.renderData.color, fillOpacity: 0.4, stroke: false, zIndex: 'auto' }\r\n          } else {\r\n            return { fillColor: node.renderData.color, fillOpacity: 0, stroke: false, zIndex: 'auto' }\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    // //currently hovered node highlight \r\n    if (appState.graph.currentlyHovered) {\r\n      // currently node\r\n      if (node.id === appState.graph.currentlyHovered.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, zIndex: '10000' }\r\n      } else { //others \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    if (appState.graph.mapClicked) {\r\n      // currently node\r\n      if (node.id === appState.graph.mapClicked.id) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else if (this.neighborNodesID.indexOf(node.id) !== -1) { // neighbors \r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      } else { //others \r\n        if (appState.graph.backNodeShow) {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0.4, stroke: false, zIndex: 'auto' }\r\n        } else {\r\n          return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    //scatterplot path highlight \r\n    if (appState.graph.pathHovered && appState.graph.pathHovered[\"pathnode\"].length > 0) {\r\n      // if (  node.id == appState.graph.pathHovered[\"sourceid\"]  || node.id == appState.graph.pathHovered[\"targetid\"]) {\r\n      //   return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      // }\r\n      // else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n      //   return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      // } else {\r\n\r\n      //   return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      // }\r\n\r\n      if (appState.graph.pathHovered[\"sourceid\"].indexOf(node.id) !== -1 || appState.graph.pathHovered[\"targetid\"].indexOf(node.id) !== -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: true, color: 'green', zIndex: '10000' }\r\n      }\r\n      else if (appState.graph.pathHovered[\"pathnode\"].indexOf(node) == -1) {\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.1, stroke: false, zIndex: 'auto' }\r\n      } else {\r\n\r\n        return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n      }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    // select area highlight \r\n\r\n    else {\r\n      return { fillColor: node.renderData.color, fillOpacity: 0.8, stroke: false, color: 'orange', zIndex: '10000' }\r\n    }\r\n\r\n  }\r\n\r\n  setPolygonPath = (polygon, pi) => {\r\n    if (appState.graph.convexPolygonsShow && appState.graph.distanceDensityCurrentlyClicked.length > 0) {\r\n      if (appState.graph.distanceDensityCurrentlyClicked.includes(pi)) {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n      }\r\n      else {\r\n        return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n      }\r\n\r\n    }\r\n    if (appState.graph.convexPolygonsShow) {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0.3, opacity: 0.8 }\r\n    } else {\r\n      return { fillColor: appState.graph.nodeColorScale(pi), fillOpacity: 0, opacity: 0 }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // setPathOption = (node) => {\r\n  //   if (appState.graph.frame.selection.length > 0) {\r\n  //     if (appState.graph.frame.selection.indexOf(node) == -1) {\r\n  //       return { fillColor: 'blue', fillOpacity: 0.5, stroke: false, zIndex:'auto' }\r\n  //     } else {\r\n\r\n  //       return { fillColor: 'red', fillOpacity: 1, stroke: false,zIndex: '10000' }\r\n  //     }\r\n  //   }\r\n  //   if (appState.graph.currentlyHovered && node.id === appState.graph.currentlyHovered.id) {\r\n  //     return { fillColor: 'red', fillOpacity: 1, stroke: false }\r\n  //   } else {\r\n  //     return { fillColor: 'blue', fillOpacity: 0.5, stroke: false }\r\n  //   }\r\n\r\n\r\n  // }\r\n  onCreate = (e) => {\r\n    console.log(e);\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    return <div id=\"map\"\r\n      style={{\r\n        width: \"45vw\",\r\n        height: \"100%\",\r\n        flex: \"1 1 50%\",\r\n        zIndex: \"10\",\r\n        // border:'#C0C0C0',\r\n        //   borderStyle:'solid',\r\n        // position: \"absolute\"\r\n      }}\r\n    >\r\n\r\n      <Tag className=\"map-tag\">Map</Tag>\r\n\r\n      <MapContainer\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n        zoom={4}\r\n        center={[37.5, -97.5]}\r\n      >\r\n\r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer name=\"OpenStreetMap\" checked=\"true\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key=8f6a7e18-709d-4fe8-9dc9-fcce7bfa30d8\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"DarkOpenStreetMap\">\r\n            <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.BaseLayer name=\"Transport\">\r\n            <TileLayer url=\"'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=<3e517e9e5dff41bdbfe201c3b1d72e69>\" />\r\n          </LayersControl.BaseLayer>\r\n          <LayersControl.Overlay name=\"income\">\r\n            <TileLayer url=\"https://www.justicemap.org/tile/{size}/income/{z}/{x}/{y}.png\"\r\n              size={'county'} />\r\n\r\n          </LayersControl.Overlay>\r\n          <LayersControl.Overlay name=\"US state\">\r\n\r\n            <GeoJSON data={statejsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US county\">\r\n\r\n            <GeoJSON data={countyjsonfile} />\r\n          </LayersControl.Overlay>\r\n\r\n          <LayersControl.Overlay name=\"US Congressional\">\r\n\r\n            <GeoJSON data={congressionjsonfile} />\r\n          </LayersControl.Overlay>\r\n        </LayersControl>\r\n\r\n\r\n        {/* <ReactLeafletToolbar /> */}\r\n\r\n        <AreaSelect />\r\n        {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n          <ZoomMap />\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        <MapClick />\r\n        <DetectKeyPress />\r\n\r\n\r\n        <Pane name=\"edgepane\" style={{ zIndex: 10000 }}>\r\n          {/* <Curve path={[\"M\", [50, 14], \"Q\", [53, 20], [49, 25]]}\r\n          options={{color:'red',fill:false}}\r\n            /> */}\r\n          {appState.graph.rawGraph.edges[0].fromlocLatY !== undefined && appState.graph.rawGraph.edges[0].fromlocLatY !== 360 &&\r\n\r\n            appState.graph.frame && appState.graph.frame.getEdgeList().map((edge, i) => {\r\n              // if (this.frameNode.indexOf(edge.source_id) !== -1 && this.frameNode.indexOf(edge.target_id) !== -1) {\r\n\r\n              var edgepositions = [[edge.data.fromlocLatY, edge.data.fromlocLonX], [edge.data.tolocLatY, edge.data.tolocLonX]]\r\n              return (\r\n                // <Polyline key={i} pathOptions={this.setEdgePathOption(edge)} positions={edgepositions}\r\n                //   data={edge}\r\n                // // eventHandlers={{\r\n                // //   click: (e) => {\r\n                // //     console.log(e.target.options.data)\r\n                // //   }}}\r\n                // />\r\n                <Curve path={[\"M\", edgepositions[0], \"T\", edgepositions[1]]}\r\n                  options={this.setEdgePathOption(edge)}\r\n                />\r\n\r\n\r\n\r\n              );\r\n\r\n\r\n\r\n\r\n            })\r\n          }\r\n        </Pane>\r\n\r\n\r\n        {appState.graph.convexPolygons.map((polygon, i) => {\r\n          var community = polygon.community\r\n          var polygonlist = polygon.points.map((p) => {\r\n            return [p[0], p[1]]\r\n          })\r\n          // console.log(polygonlist)\r\n\r\n          return <Polygon pathOptions={this.setPolygonPath(polygon, community)} positions={polygonlist} />\r\n\r\n        })\r\n\r\n        }\r\n        {/* </Pane> */}\r\n\r\n\r\n\r\n\r\n        <Pane name=\"custom\" style={{ zIndex: 10000 }}>\r\n          {appState.graph.rawGraph.nodes[0].LatY !== undefined && appState.graph.rawGraph.nodes[0].LonX !== undefined &&\r\n            appState.graph.frame && appState.graph.frame.getNodeList().map((node, i) => {\r\n\r\n              return (\r\n                <CircleMarker\r\n                  key={node.id}\r\n                  center={[node.data.ref.LatY, node.data.ref.LonX]}\r\n                  radius={this.setNodeCircle(node) * 1.5}\r\n                  pathOptions={this.setNodePathOption(node)}\r\n\r\n\r\n                  data={node}\r\n                  eventHandlers={{\r\n                    click: (e) => {\r\n                      e.originalEvent.view.L.DomEvent.stopPropagation(e)\r\n                      const thenode = e.target.options.data\r\n                      appState.graph.highlightCommonNodes = false\r\n                      appState.graph.showIntersect = false;\r\n                      appState.graph.pickUpAlter = false;\r\n                      if (appState.graph.mapClickedArray.indexOf(thenode) == -1) { //no clicked circle before \r\n\r\n                        appState.graph.mapClickedArray.push(thenode)  //control map update \r\n                        appState.graph.currentlyHovered = null\r\n                        const neightborNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n                        appState.graph.selectedNodes.push(...neightborNodes)\r\n                        appState.graph.selectedSets.push(neightborNodes)\r\n                        appState.graph.frame.selection.push(...appState.graph.frame.getNeighborNodesFromGraph(thenode))\r\n                        appState.graph.selectedNodes = this.uniqueArrayByAttribute(appState.graph.selectedNodes, 'id');\r\n                        appState.graph.frame.selection = this.uniqueArrayByAttribute(appState.graph.frame.selection, 'id');\r\n\r\n                        // appState.graph.frame.highlightNode(thenode, true);   //control socio update \r\n                        // appState.graph.frame.highlightEdges(thenode, true);\r\n                        // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                        // appState.graph.frame.highlightClickNode(thenode);\r\n\r\n\r\n                      } else {  // click again to unselect \r\n                        appState.graph.mapClickedArray = appState.graph.mapClickedArray.filter((obj) => obj.id !== thenode.id);\r\n                        const toRemoveSets = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n                        appState.graph.selectedSets = appState.graph.selectedSets.filter((nodeset) => !appState.graph.frame.areArraysIdentical(nodeset, toRemoveSets))\r\n                        let thenodeneighbors = []\r\n                        appState.graph.mapClickedArray.forEach((mapClicked) => {\r\n                          thenodeneighbors.push(...appState.graph.frame.getNeighborNodesFromGraph(mapClicked))\r\n                        })\r\n\r\n                        appState.graph.frame.selection = appState.graph.frame.selection.filter((obj) => thenodeneighbors.indexOf(obj) > 0)\r\n                        appState.graph.selectedNodes = appState.graph.selectedNodes.filter((obj) => thenodeneighbors.indexOf(obj) > 0)\r\n                        // appState.graph.edgeselection = []\r\n                      }\r\n                      appState.graph.frame.highlightClickArrayNode(appState.graph.mapClickedArray)\r\n\r\n                    },\r\n                    mouseover: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      if (appState.graph.pathHovered && appState.graph.pathHovered.pathnode.length > 0) return;\r\n                      // var currentNode = e.target.options.data\r\n                      // appState.graph.selectedNodes = []\r\n                      // appState.graph.frame.selection = []\r\n\r\n\r\n                      appState.graph.currentlyHovered = e.target.options.data  // control map update \r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true);   // control cosio update \r\n                      // appState.graph.frame.highlightEdges(e.target.options.data, true);\r\n                      const thenode = e.target.options.data\r\n                      // appState.graph.frame.selection = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      // appState.graph.selectedNodes = appState.graph.frame.getNeighborNodesFromGraph(thenode);\r\n                      appState.graph.frame.highlightClickNode(thenode);\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.setHex(def.NODE_HIGHLIGHT);\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = true\r\n\r\n                      // appState.graph.frame.lastHover = e.target.options.data\r\n                      // appState.graph.frame.highlightNode(e.target.options.data, true)\r\n                      // e.target.setStyle({fillOpacity: 1, fillColor:'red'})\r\n                      // console.log(e.target.options.data)\r\n                    },\r\n                    mouseout: (e) => {\r\n                      //when selection or mapclick, then freeze, no hover event \r\n                      if (appState.graph.mapClicked || appState.graph.frame.selection.length !== 0) return;\r\n                      if (appState.graph.pathHovered && appState.graph.pathHovered.pathnode.length > 0) return;\r\n                      appState.graph.frame.graph.forEachNode(function (n) {\r\n                        // if (n !== appState.graph.mapClicked) {\r\n                        appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                        appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                        // }\r\n                      }\r\n                      );\r\n                      appState.graph.frame.colorNodeEdge(null);\r\n                      appState.graph.currentlyHovered = null;\r\n\r\n\r\n                      // e.target.options.data.renderData.draw_object.children[0].material.color.set(\r\n                      //   e.target.options.data.renderData.hcolor\r\n                      // )\r\n                      // e.target.options.data.renderData.draw_object.children[0].visible = false\r\n\r\n                      // appState.graph.currentlyHovered = null\r\n                      // appState.graph.frame.highlightNode(e.target.options.data,false)\r\n                      // e.target.setStyle({ fillOpacity: 0.5, fillColor: 'blue' })\r\n\r\n                      // console.log('marker out', e)\r\n                    }\r\n                  }}\r\n                // onMouseOver = {this.onMouseOver}\r\n                // {(e) => {\r\n                //   // appState.graph.currentlyHovered = \r\n                //   e.target.setStyle({fillOpacity: 1, stroke: true, color:'black', weight:3})\r\n                // }}\r\n                // onMouseOut={this.onMouseOut}\r\n                // {(e) => e.target.setStyle({fillOpacity: 0.5,stroke: false })}\r\n                >\r\n                  {(appState.graph.frame && node.renderData.textHolder.children[0].element.override) ?\r\n                    <Tooltip\r\n                      style={{ textAlign: \"left\" }}\r\n                      width={node.renderData.textHolder.children[0].element.children[0].style.width}\r\n                      fontSize={node.renderData.textHolder.children[0].element.children[0].style.mapfontSize}\r\n                      className={`maptooltip maptooltip_${node.id}`} direction=\"right\" offset={[0, 0]} opacity={1} permanent>{node.renderData.label}</Tooltip> :\r\n                    <Tooltip fontSize={node.renderData.textHolder.children[0].element.children[0].style.mapfontSize} style={{ textAlign: \"left\" }} className={`maptooltip maptooltip_${node.id}`} direction=\"right\" offset={[0, 0]} opacity={0} permanent>{node.renderData.label}</Tooltip>}\r\n\r\n                </CircleMarker>\r\n              );\r\n\r\n\r\n            })\r\n\r\n\r\n          }\r\n        </Pane>\r\n        <div>\r\n          <Switch style={{ position: 'fixed', top: '5vh', left: '97vw', zIndex: '1000' }}\r\n            defaultChecked={appState.graph.mapEdgeShow}\r\n            // checked={!node.isHidden}\r\n            onChange={(value) => {\r\n              appState.graph.mapEdgeShow = value.target.checked\r\n\r\n            }}\r\n          />\r\n          <span style={{ fontSize: '12px', position: 'fixed', top: '5vh', right: '4vw', zIndex: '1000' }}> Show Edges</span>\r\n\r\n\r\n          <Switch style={{ position: 'fixed', top: '8vh', left: '97vw', zIndex: '1000' }}\r\n            defaultChecked={appState.graph.convexPolygonsShow}\r\n            // checked={!node.isHidden}\r\n            onChange={(value) => {\r\n              appState.graph.convexPolygonsShow = value.target.checked\r\n\r\n            }}\r\n          />\r\n          <span style={{ fontSize: '12px', position: 'fixed', top: '8vh', right: '4vw', zIndex: '1000' }}> Show Community Convex Hull</span>\r\n\r\n          <Switch style={{ position: 'fixed', top: '11vh', left: '97vw', zIndex: '1000' }}\r\n            defaultChecked={appState.graph.autoZoom}\r\n            // checked={!node.isHidden}\r\n            onChange={(value) => {\r\n              appState.graph.autoZoom = value.target.checked\r\n\r\n            }}\r\n          />\r\n          <span style={{ fontSize: '12px', position: 'fixed', top: '11vh', right: '4vw', zIndex: '1000' }}> Automatic Zoom</span>\r\n\r\n          <span style={{ fontSize: '12px', position: 'fixed', top: '14vh', right: '1vw', zIndex: '1000' }}> press CTRL key to select nodes on the map</span>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n        {/* {(appState.graph.convexPolygonsShow && this.modularity) ? <Tag className=\"modularity-tag\" style={{ position: 'absolute', top: '55vh', left: '70vw', zIndex: '1000' }}>{\"Q value: \" + parseFloat(this.modularity).toFixed(3)}</Tag> : null} */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </MapContainer>\r\n\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default MapView;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\n\r\n@observer\r\nclass NodeDetail extends React.Component {\r\n  render() {\r\n    // If input is number,\r\n    // currently format number between 0-1 (eg. pagerank)\r\n    // to show no more than 3 significant digits.\r\n    const formatLongFloat = (nodeAttributeValue) => {\r\n      const num = Number(nodeAttributeValue);\r\n      if (Number.isNaN(num) || num > 1 || num < 0) {\r\n        // Do not format just return original\r\n        return nodeAttributeValue;\r\n      }\r\n      // Format to no more than 3 significant digit.\r\n      return Number.parseFloat(num).toPrecision(3);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          \"right-overlay-card\",\r\n          \"transparent-frame\"\r\n        )}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n            \r\n            <thead>\r\n              <tr>\r\n                <th>Property</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                <tr key={`${it}-${i}`}>\r\n                  <td style={{ padding: '5px 10px' }}>{it}</td>\r\n                  <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeDetail;","import React from \"react\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport { Select } from \"@blueprintjs/labs\";\r\nimport CommonItemRenderer from \"./CommonItemRenderer\";\r\n\r\nexport default ({ items, onSelect, value, fill = false }) => (\r\n  <Select\r\n    items={items}\r\n    itemRenderer={CommonItemRenderer}\r\n    filterable={false}\r\n    onItemSelect={onSelect}\r\n  >\r\n        <Button className={`bp4-button  ${fill ? Classes.FILL : null}`} text={value} />\r\n\r\n  </Select>\r\n);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Button, Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { scaleLinear, scalePoint, max, axisLeft, axisBottom, select, group } from \"d3\"\r\nimport { brush, brushY } from \"d3-brush\";\r\nimport XYSelect from \"../utils/XYSelect\";\r\nimport SVGBrush from 'react-svg-brush';\r\nimport path from 'ngraph.path';\r\nimport * as SvgSaver from 'svgsaver';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport { transform } from \"lodash\";\r\n// import SvgSaver from svgsaver\r\n\r\nvar def = require(\"../../graph-frontend/src/imports\").default;\r\n\r\n\r\n\r\n\r\n\r\n// const settings = {\r\n//   width: 150,\r\n//   height: 150,\r\n//   padding: 10,\r\n//   // numDataPoints: 50,\r\n//   // maxRange: () => Math.random() * 1000\r\n// };\r\n\r\n@observer\r\nclass ScatterPlot extends React.Component {\r\n\r\n  @observable data = appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n\r\n  margin = { top: 40, right: 10, bottom: 60, left: 70 }\r\n  // clustermargin = {top: 50, right: 50, bottom: 50, left: 50}\r\n  width = window.innerWidth * 0.48 - this.margin.left - this.margin.right\r\n  height = window.innerHeight * 0.35 - this.margin.top - this.margin.bottom\r\n  cr = 3\r\n  maxhop = undefined\r\n  formatXtext = []\r\n  infinityhop = []\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.circles = React.createRef();\r\n    this.state = { csvarray: [] }\r\n  }\r\n\r\n  downloadCSV = () => {\r\n    appState.graph.frame.getNodeList().filter(node => !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.x])) && !isNaN(parseFloat(node.data.ref[appState.graph.scatterplot.y])))\r\n    let column1, column2\r\n\r\n    let header = [];\r\n    this.setState({\r\n      csvarray: []\r\n    });\r\n    // // this.state.;\r\n    // if (appState.graph.scatterplot.x === 'shortest path') {\r\n    //   column1 = this.infinityhop\r\n    //   header.push('shortest path')\r\n    // } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n    //   column1 = appState.graph.rawGraph.paths.map((path, i) => {\r\n    //     return parseFloat(path['distance'])\r\n    //   })\r\n    //   header.push('pair distance')\r\n    // } else {\r\n    //   header.push(appState.graph.scatterplot.x)\r\n    //   column1 = appState.graph.frame.getNodeList().map((d) => {\r\n    //     return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n    //   })\r\n    // }\r\n\r\n    // if (appState.graph.scatterplot.y === 'shortest path') {\r\n    //   column2 = this.infinityhop\r\n    //   header.push('shortest path')\r\n    // } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n    //   column2 = appState.graph.rawGraph.paths.map((path, i) => {\r\n    //     return parseFloat(path['distance'])\r\n    //   })\r\n    //   header.push('pair distance')\r\n    // } else {\r\n    //   header.push(appState.graph.scatterplot.y)\r\n    //   column2 = appState.graph.frame.getNodeList().map((d) => {\r\n    //     return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n    //   })\r\n    // }\r\n\r\n    //download for all \r\n    let temp = []\r\n    header = appState.graph.metadata.nodeComputed.filter(n => (n !== 'shortest path' && n !== 'pair distance'))\r\n    header.unshift('id')\r\n    temp.push(header)\r\n    // temp[0].unshift('id')\r\n    appState.graph.frame.getNodeList().forEach((node) => {\r\n      const noderow = []\r\n      // noderow.push(node.id)\r\n      header.forEach((column) => {\r\n        noderow.push(node.data.ref[column])\r\n      })\r\n      temp.push(noderow)\r\n    })\r\n\r\n\r\n    // temp.push(header)\r\n    // for (var i = 0; i < column2.length && i < column1.length; i++) {\r\n    //   temp.push([column1[i], column2[i]]);\r\n    // }\r\n    this.setState({\r\n      csvarray: temp\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.frame.selection = []\r\n    appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.mapClicked = null\r\n    appState.graph.clearBrush = false;\r\n\r\n  }\r\n  onBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    appState.graph.selectedNodes = []\r\n    const selectionNodeID = []\r\n    const svgElement = select(this.svg)\r\n    const circles = svgElement.selectAll(\"circle\")\r\n    if (selection) {\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1] - this.margin.top - this.cr,\r\n        y1: selection[1][1] - this.margin.top - this.cr,\r\n      }\r\n      console.log(selection[0][1], selection[1][1], brushBounds.y1, brushBounds.y0);\r\n\r\n      circles.each(function (d, i) {\r\n        const nodecx = parseFloat(select(this).attr(\"cx\"))\r\n        const nodecy = parseFloat(select(this).attr(\"cy\"))\r\n        console.log(nodecx, nodecy);\r\n        if (nodecx >= brushBounds.x0 && nodecx <= brushBounds.x1 && nodecy >= brushBounds.y0 && nodecy <= brushBounds.y1) {\r\n          selectionNodeID.push(select(this).attr(\"id\"))\r\n        }\r\n\r\n\r\n\r\n      })\r\n\r\n\r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n        // console.log(node)\r\n        selectionNodeID.includes(node.id)\r\n\r\n      )\r\n      appState.graph.frame.selection = selectionNode\r\n      appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n      // console.log(selectionNode)\r\n      appState.graph.frame.updateSelectionOpacity()\r\n    } else {   //click to clear selection \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n\r\n    }\r\n\r\n\r\n  }\r\n  renderBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      // transform={\"translate(0,\" + this.margin.top +\")\"}\r\n      selection={appState.graph.clearBrush ? null : undefined}\r\n      extent={\r\n        [[this.margin.left, this.margin.top], [this.width + this.margin.left, this.height + this.margin.top]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.svg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"2d\" // \"x\"\r\n      onBrushStart={this.onBrushStart}\r\n      onBrush={this.onBrush}\r\n      onBrushEnd={this.onBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n  // componentDidMount() {\r\n  //   var svg = select('.scatterchart');\r\n  //   //Do svg stuff\r\n  //   const brush = brushY()\r\n  //     .on(\"brush\", brushed);\r\n\r\n  // svg.append(\"g\")\r\n  // .call(brush); \r\n  //   function brushed({selection}) {\r\n  //     console.log(selection)\r\n  //   }\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n\r\n    if (appState.graph.hasGraph) {\r\n      let x, y\r\n      if (appState.graph.scatterplot.x === 'network density' || appState.graph.scatterplot.x === 'standard distance') {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n      else if (appState.graph.scatterplot.x === 'shortest path') {\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort()\r\n        // console.log()\r\n        // this.formatXtext =  [...new Set(this.infinityhop)].map((pathlen,i)=>{\r\n        //   if(pathlen == (this.maxhop +1)){\r\n        //     return 'None'\r\n        //   }else{\r\n        //     return pathlen.toString()\r\n        //   }\r\n        // })\r\n        // console.log(this.formatXtext)\r\n        x = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.width]);\r\n\r\n\r\n      } else if (appState.graph.scatterplot.x === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map((path, i) => {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([0, this.width])\r\n\r\n\r\n      } else {\r\n        x = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.x])\r\n            })\r\n          ])\r\n          .range([0, this.width])\r\n      }\r\n\r\n      if (appState.graph.scatterplot.y === 'network density' || appState.graph.scatterplot.y === 'standard distance') {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.densityDistance, function (d) {\r\n              return parseFloat(d[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      else if (appState.graph.scatterplot.y === 'shortest path') {\r\n\r\n\r\n        const shortpathhop = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return path['path'].length - 1\r\n        })\r\n        shortpathhop.sort()\r\n        this.maxhop = shortpathhop[shortpathhop.length - 1]\r\n\r\n        this.infinityhop = shortpathhop.map((pathlen, i) => {\r\n          if (pathlen == -1) {\r\n            return this.maxhop + 1\r\n          } else {\r\n            return pathlen\r\n          }\r\n        })\r\n        this.infinityhop.sort().reverse()\r\n\r\n        y = scalePoint()\r\n          .domain(this.infinityhop)\r\n          .range([0, this.height]);\r\n\r\n      } else if (appState.graph.scatterplot.y === 'pair distance') {\r\n        const pairdistance = appState.graph.rawGraph.paths.map(function (path, i) {\r\n          return parseFloat(path['distance'])\r\n        })\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(pairdistance)\r\n          ])\r\n          .range([this.height, 0])\r\n\r\n      } else {\r\n        y = scaleLinear()\r\n          .domain([\r\n            0,\r\n            max(appState.graph.frame.getNodeList(), function (d) {\r\n              return parseFloat(d.data.ref[appState.graph.scatterplot.y])\r\n            })\r\n          ])\r\n          .range([this.height, 0])\r\n      }\r\n      const capitalizeString = (inputString) => {\r\n        const connectingWords = ['in', 'to']; // Add more connecting words as needed\r\n\r\n        return inputString.replace(/\\w+/g, function (word) {\r\n          return connectingWords.includes(word.toLowerCase()) ? word : word.charAt(0).toUpperCase() + word.slice(1);\r\n        });\r\n      }\r\n\r\n      // if (isLoggedIn) {\r\n      //   button = <LogoutButton onClick={this.handleLogoutClick} />;\r\n      // } else {\r\n      //   button = <LoginButton onClick={this.handleLoginClick} />;\r\n      // }\r\n\r\n\r\n      return (\r\n        <div>\r\n\r\n          {/* <div style={{ width:'50vw', transform:'translate(10px,10px)'}} className={classnames(Classes.CARD, \"sub-option\")}> */}\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize: \"12px\" }}>X by: </p>\r\n            <span >\r\n              < XYSelect className=\"scatter-plot-font\" style={{ display: \"inline\" }}\r\n                items={appState.graph.allComputedPropertiesKeyList.map(s => capitalizeString(s))}\r\n                onSelect={it => (appState.graph.scatterplot.x = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={\r\n                  capitalizeString(appState.graph.scatterplot.x)\r\n                }\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <p className=\"scatter-plot-font\" style={{ display: \"inline\", fontSize: \"12px\" }}>Y by: </p>\r\n            <span >\r\n              <XYSelect\r\n                className=\"scatter-plot-font\"\r\n                items={appState.graph.allComputedPropertiesKeyList}\r\n                onSelect={it => (appState.graph.scatterplot.y = it.split(' ').map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join(' '))}\r\n                value={capitalizeString(appState.graph.scatterplot.y)}\r\n              />\r\n            </span>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n            <text id=\"scattertitle\" style={{}} > {(((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) || ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance'))) ? (\r\n              'Route Factor Diagram'\r\n            ) : (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n              ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) ? (\r\n              'Cluster-Cluster Plot'\r\n            ) : (\r\n              'Centrality-Centrality Plot'\r\n            )}</text>\r\n          </div>\r\n\r\n          <div style={{ display: \"inline\", }}>\r\n\r\n          </div>\r\n          {/* </div> */}\r\n          <div>\r\n\r\n            <svg\r\n              width={this.width + this.margin.right + this.margin.left + 10}\r\n              height={this.height + this.margin.top + this.margin.bottom}\r\n              className=\"scatterchart\"\r\n              id=\"scatterplot\"\r\n              ref={input => (this.svg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <g\r\n                transform={\"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"}\r\n                width={this.width}\r\n                height={this.height}\r\n                className=\"main\"\r\n              >\r\n\r\n                {appState.graph.hasGraph && <RenderCircles scale={{ x, y }} cr={this.cr} ref={this.circles} maxhop={this.maxhop} infinityhop={this.infinityhop} />}\r\n                <text style={{ transform: 'translate(20vw, 27.5vh)' }} fontSize=\"11px\">{(appState.graph.scatterplot.x === 'standard distance' || appState.graph.scatterplot.x === 'distance to center') ? capitalizeString(appState.graph.scatterplot.x) + ' (km)' : capitalizeString(appState.graph.scatterplot.x)}</text>\r\n                <Axis\r\n                  axis=\"x\"\r\n                  transform={\"translate(0,\" + this.height + \")\"}\r\n                  scale={(appState.graph.scatterplot.x === 'shortest path') ?\r\n                    axisBottom().scale(x).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    }) : axisBottom().scale(x)\r\n                  }\r\n                />\r\n                <text\r\n                  style={{ transform: \"translate(-45px, 18vh) rotate(-90deg)\", }}\r\n                  // transform={\"translate(-1vw, 21vh) rotate(-90deg)\"}\r\n                  fontSize=\"11px\"\r\n                >{(appState.graph.scatterplot.y === 'standard distance' || appState.graph.scatterplot.y === 'distance to center') ? capitalizeString(appState.graph.scatterplot.y) + ' (km)' : capitalizeString(appState.graph.scatterplot.y)}</text>\r\n                <Axis\r\n                  axis=\"y\"\r\n                  transform=\"translate(0,0)\"\r\n                  scale={(appState.graph.scatterplot.y === 'shortest path') ?\r\n                    axisLeft().scale(y).tickFormat((label) => {\r\n                      if (parseInt(label) == (this.maxhop + 1)) {\r\n                        return 'None'\r\n                      } else {\r\n                        return label\r\n                      }\r\n\r\n                    })\r\n                    : axisLeft().scale(y)\r\n                  }\r\n                // decorate={(s) => {\r\n                //   s.enter()\r\n                //     .select('text')\r\n                //     .style('text-anchor', 'start')\r\n                //     .attr('transform', 'rotate(45 -10 10)');\r\n                // }}\r\n                />\r\n              </g>\r\n              {(appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path') &&\r\n                (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'standard distance') &&\r\n                (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'network density') &&\r\n                (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance') &&\r\n                this.renderBrush()}\r\n            </svg>\r\n          </div>\r\n          <Button\r\n            className=\"bp4-button\"\r\n            style={{ transform: \"translate(35vw, 1vh)\", }}\r\n            onClick={() => {\r\n              var svgsaver = new SvgSaver();                      // creates a new instance\r\n              var svg = document.querySelector('#scatterplot');         // find the SVG element\r\n              svgsaver.asSvg(svg);\r\n            }}>Download Image</Button>\r\n\r\n\r\n          {(\r\n            <CSVLink data={this.state.csvarray} onClick={this.downloadCSV} asyncOnClick={true} filename=\"bsedata.csv\">\r\n              <Button\r\n                className=\"bp4-button\"\r\n                style={{ transform: \"translate(12vw, 1.0vh)\", }}\r\n\r\n              >Download CSV\r\n              </Button>\r\n            </CSVLink>\r\n          )}\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n@observer\r\nclass Axis extends React.Component {\r\n\r\n\r\n  componentDidMount() {\r\n    const node = this.refs[this.props.axis]\r\n    select(node).call(this.props.scale)\r\n\r\n  }\r\n\r\n  render() {\r\n    if (appState.graph.hasGraph) {\r\n      const node = this.refs[this.props.axis]\r\n      select(node).call(this.props.scale)\r\n\r\n      if (this.props.axis == 'x') {\r\n        return (\r\n          <g\r\n            className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <g\r\n            // className=\"xaxis\"\r\n            transform={this.props.transform}\r\n            ref={this.props.axis}\r\n          />\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n@observer\r\nclass RenderCircles extends React.Component {\r\n  setScatterStyle = (node, ni) => {\r\n    // const dehighlightNode = {\r\n    //   fill: \"rgba(25, 158, 199, .9)\",\r\n    //   zIndex: \"0\"\r\n    // }\r\n    // const highlightNode = {\r\n    //   fill: \"rgba(255, 1, 1, .9)\",\r\n    //   zIndex: \"10000\"\r\n    // }\r\n    if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n      && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')\r\n      && (appState.graph.scatterplot.y !== 'standard distance') && (appState.graph.scatterplot.x !== 'standard distance')\r\n      && (appState.graph.scatterplot.y !== 'network density') && (appState.graph.scatterplot.x !== 'network density')) {\r\n      if (!appState.graph.currentlyHovered && appState.graph.selectedNodes.length == 0) {\r\n        return {\r\n          fill: node.renderData.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      } else if (appState.graph.selectedNodes.length > 0) {\r\n        if (appState.graph.selectedNodes.indexOf(node) == -1) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }else if (appState.graph.currentlyHovered) {\r\n        if (node.id === appState.graph.currentlyHovered.id) {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        } else {\r\n          return {\r\n            fill: node.renderData.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      } \r\n    } else if (((appState.graph.scatterplot.y == 'network density') && (appState.graph.scatterplot.x == 'standard distance')) ||\r\n      ((appState.graph.scatterplot.y == 'standard distance') && (appState.graph.scatterplot.x == 'network density'))) {  // density distance node style\r\n\r\n      //Click\r\n      if (appState.graph.distanceDensityCurrentlyClicked.length !== 0) {\r\n        if (appState.graph.distanceDensityCurrentlyClicked.includes(String(node['name']))) {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"10000\",\r\n            stroke: def.NODE_HIGHLIGHT,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n        else {\r\n          return {\r\n            fill: appState.graph.nodeColorScale(node['name']),\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.1\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n        return {\r\n          fill: appState.graph.nodeColorScale(node['name']),\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      }\r\n    }\r\n    else { //path node style \r\n\r\n      //Click\r\n      if (appState.graph.pathHoveredList.length !== 0) {\r\n        const cpathid = `${node.source}👉${node.target}`\r\n        if (appState.graph.pathHoveredList.includes(cpathid)) {\r\n          return {\r\n\r\n            fill: 'rgba(255, 1, 1, .9)',\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          } \r\n        }\r\n        else {\r\n          return {\r\n\r\n            fill: appState.graph.edges.color,\r\n            zIndex: \"0\",\r\n            stroke: false,\r\n            fillOpacity: 0.8\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // no click \r\n        return {\r\n\r\n          fill: appState.graph.edges.color,\r\n          zIndex: \"0\",\r\n          stroke: false,\r\n          fillOpacity: 0.8\r\n        }\r\n      }\r\n      // return {\r\n\r\n      //   fill: appState.graph.edges.color,\r\n      //   zIndex: \"0\",\r\n      //   stroke: false,\r\n      //   fillOpacity: 0.8\r\n      // }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const pathFinder = path.aGreedy(appState.graph.computedGraph);\r\n    if (appState.graph.hasGraph) {\r\n      let renderCircles = []\r\n      // let renderLabels = []\r\n      // let ydata =[]\r\n      if (((appState.graph.scatterplot.x === 'network density') && (appState.graph.scatterplot.y === 'standard distance')) ||\r\n        ((appState.graph.scatterplot.x === 'standard distance') && (appState.graph.scatterplot.y === 'network density'))) {\r\n        // renderLabels = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster,ci)=>())\r\n\r\n        // appState.graph.densityDistance = ;\r\n        renderCircles = appState.graph.densityDistance.sort((a, b) => b.size - a.size).map((cluster, ci) => (\r\n\r\n          <g>\r\n            <circle\r\n              cx={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              cy={this.props.scale.y(cluster[appState.graph.scatterplot.y])}\r\n              r={cluster['size'] > 50 ? 25 : cluster['size'] / 2}\r\n              style={this.setScatterStyle(cluster, ci)}\r\n              id={`${cluster.name}`}\r\n              // onMouseOver={(e) => {\r\n              //   appState.graph.distanceDensityCurrentlyHovered = e.target.getAttribute('id')\r\n\r\n              //   const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n              //     // console.log(node)\r\n              //     String(node.data.ref[appState.graph.groupby]) == appState.graph.distanceDensityCurrentlyHovered\r\n\r\n              //   )\r\n              //   appState.graph.frame.selection = selectionNode\r\n              //   appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n              //   // console.log(selectionNode)\r\n              //   appState.graph.frame.updateSelectionOpacity()\r\n\r\n\r\n\r\n              // }}\r\n              // onMouseLeave={(e) => {\r\n\r\n              //   if (appState.graph.mapClicked) return;\r\n              //   appState.graph.distanceDensityCurrentlyHovered = undefined\r\n              //   appState.graph.frame.selection = []\r\n              //   appState.graph.selectedNodes = []\r\n              //   appState.graph.edgeselection = []\r\n\r\n              //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n              //     // if (n !== appState.graph.mapClicked) {\r\n              //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n              //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n              //     // }\r\n              //   }\r\n              //   );\r\n\r\n\r\n              // }}\r\n              onClick={(e) => {\r\n                if (appState.graph.distanceDensityCurrentlyClicked.includes(e.target.getAttribute('id'))) {\r\n                  appState.graph.distanceDensityCurrentlyClicked = appState.graph.distanceDensityCurrentlyClicked.filter(node =>\r\n                    node !== e.target.getAttribute('id')\r\n                  )\r\n                }\r\n                else {\r\n                  appState.graph.distanceDensityCurrentlyClicked.push(e.target.getAttribute('id'));\r\n                }\r\n\r\n                const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                  // console.log(node)\r\n                  appState.graph.distanceDensityCurrentlyClicked.includes(String(node.data.ref[appState.graph.groupby]))\r\n\r\n                )\r\n                appState.graph.frame.selection = selectionNode\r\n                appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n                // console.log(selectionNode)\r\n                appState.graph.frame.updateSelectionOpacity()\r\n              }}\r\n              key={ci}\r\n            />\r\n            <text className=\"scatterplot-label\"\r\n              x={this.props.scale.x(cluster[appState.graph.scatterplot.x])}\r\n              y={this.props.scale.y(cluster[appState.graph.scatterplot.y])}>\r\n              {cluster.name}\r\n            </text>\r\n          </g>)\r\n        )\r\n      }\r\n\r\n      else if ((appState.graph.scatterplot.x === 'shortest path') && (appState.graph.scatterplot.y === 'pair distance')) {\r\n        // const pathkeys = Object.keys(appState.graph.rawGraph.paths)\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cx={path['path'].length == 0 ? this.props.scale.x(this.props.maxhop + 1) : this.props.scale.x(path['path'].length - 1)}\r\n            cy={this.props.scale.y(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            data={path}\r\n            onClick={(e) => {\r\n              if (appState.graph.pathHoveredList.includes(e.target.getAttribute('id'))) {\r\n                appState.graph.pathHoveredList = appState.graph.pathHoveredList.filter(node =>\r\n                  node !== e.target.getAttribute('id')\r\n                )\r\n              }\r\n              else {\r\n                appState.graph.pathHoveredList.push(e.target.getAttribute('id'));\r\n              }\r\n              const pathlist = []\r\n              appState.graph.pathHoveredList.forEach((pathid) => {\r\n                const [sourceid, targetid] = pathid.split('👉')\r\n                // e.target.getAttribute('fill') node.renderData.color,\r\n                // e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n                // const source = appState.graph.frame.getNode(sourceid)\r\n                // const target = appState.graph.frame.getNode(targetid)\r\n                const thepath = pathFinder.find(sourceid, targetid)\r\n                const pathnode = thepath.map((node) => {\r\n                  return appState.graph.frame.getNode(node.id)\r\n                })\r\n                //control map highlight \r\n                \r\n                pathlist.push( {\r\n                  \"sourceid\": sourceid,\r\n                  \"targetid\": targetid,\r\n                  \"pathnode\": pathnode\r\n                })\r\n               \r\n              })\r\n              appState.graph.pathHovered = {\r\n                'sourceid': pathlist.map(n=>n.sourceid),\r\n                'targetid': pathlist.map(n=>n.targetid),\r\n                // 'pathnode': pathlist.map(n=>n.pathnode),\r\n              }\r\n              appState.graph.pathHovered['pathnode']= []\r\n              if(pathlist.length>0){\r\n                appState.graph.pathHovered['pathnode']= pathlist[0].pathnode\r\n                for (let i = 0; i < pathlist.length-1; i++){\r\n                  appState.graph.pathHovered['pathnode'] = appState.graph.pathHovered['pathnode'].concat(pathlist[i+1].pathnode)\r\n                }\r\n              }\r\n              \r\n              \r\n              // pathlist.forEach(p=>appState.graph.pathHovered['pathnode'].concat(p.pathnode))\r\n              // appState.graph.pathHovered['pathnode'] = [].concat(...appState.graph.pathHovered['pathnode'])\r\n               // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(appState.graph.pathHovered['pathnode'])\r\n            }}\r\n            // onMouseOver={(e) => {\r\n            //   // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n            //   const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n            //   // e.target.getAttribute('fill') node.renderData.color,\r\n            //   e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n            //   // const source = appState.graph.frame.getNode(sourceid)\r\n            //   // const target = appState.graph.frame.getNode(targetid)\r\n            //   const thepath = pathFinder.find(sourceid, targetid)\r\n            //   const pathnode = thepath.map((node) => {\r\n            //     return appState.graph.frame.getNode(node.id)\r\n            //   })\r\n            //   //control map highlight \r\n            //   appState.graph.pathHovered = {\r\n            //     \"sourceid\": sourceid,\r\n            //     \"targetid\": targetid,\r\n            //     \"pathnode\": pathnode\r\n            //   }\r\n            //   // control socio update \r\n            //   appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            // }}\r\n            // onMouseLeave={(e) => {\r\n            //   // if (appState.graph.mapClicked) return;\r\n            //   e.target.style.fill = appState.graph.edges.color\r\n\r\n            //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n            //     // if (n !== appState.graph.mapClicked) {\r\n            //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n            //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n            //     // }\r\n            //   }\r\n            //   );\r\n            //   appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n            //   appState.graph.pathHovered = null;\r\n\r\n\r\n            // }}\r\n            key={i}\r\n          />)\r\n        )\r\n\r\n\r\n      } else if ((appState.graph.scatterplot.y === 'shortest path') && (appState.graph.scatterplot.x === 'pair distance')) {\r\n        renderCircles = appState.graph.rawGraph.paths.map((path, i) => (\r\n          <circle\r\n            cy={path['path'].length == 0 ? this.props.scale.y(this.props.maxhop + 1) : this.props.scale.y(path['path'].length - 1)}\r\n            cx={this.props.scale.x(parseFloat(path['distance']))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(path)}\r\n            id={`${path.source}👉${path.target}`}\r\n            // data={node}\r\n            onClick={(e) => {\r\n              if (appState.graph.pathHoveredList.includes(e.target.getAttribute('id'))) {\r\n                appState.graph.pathHoveredList = appState.graph.pathHoveredList.filter(node =>\r\n                  node !== e.target.getAttribute('id')\r\n                )\r\n              }\r\n              else {\r\n                appState.graph.pathHoveredList.push(e.target.getAttribute('id'));\r\n              }\r\n              const pathlist = []\r\n              appState.graph.pathHoveredList.forEach((pathid) => {\r\n                const [sourceid, targetid] = pathid.split('👉')\r\n                // e.target.getAttribute('fill') node.renderData.color,\r\n                // e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n                // const source = appState.graph.frame.getNode(sourceid)\r\n                // const target = appState.graph.frame.getNode(targetid)\r\n                const thepath = pathFinder.find(sourceid, targetid)\r\n                const pathnode = thepath.map((node) => {\r\n                  return appState.graph.frame.getNode(node.id)\r\n                })\r\n                //control map highlight \r\n                \r\n                pathlist.push( {\r\n                  \"sourceid\": sourceid,\r\n                  \"targetid\": targetid,\r\n                  \"pathnode\": pathnode\r\n                })\r\n               \r\n              })\r\n              appState.graph.pathHovered = {\r\n                'sourceid': pathlist.map(n=>n.sourceid),\r\n                'targetid': pathlist.map(n=>n.targetid),\r\n                // 'pathnode': pathlist.map(n=>n.pathnode),\r\n              }\r\n              appState.graph.pathHovered['pathnode']= []\r\n              if(pathlist.length>0){\r\n                appState.graph.pathHovered['pathnode']= pathlist[0].pathnode\r\n                for (let i = 0; i < pathlist.length-1; i++){\r\n                  appState.graph.pathHovered['pathnode'] = appState.graph.pathHovered['pathnode'].concat(pathlist[i+1].pathnode)\r\n                }\r\n              }\r\n              \r\n              \r\n              // pathlist.forEach(p=>appState.graph.pathHovered['pathnode'].concat(p.pathnode))\r\n              // appState.graph.pathHovered['pathnode'] = [].concat(...appState.graph.pathHovered['pathnode'])\r\n               // control socio update \r\n              appState.graph.frame.highlightPathEdgeNode(appState.graph.pathHovered['pathnode'])\r\n            }}\r\n            // onMouseOver={(e) => {\r\n            //   // const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n            //   const [sourceid, targetid] = e.target.getAttribute('id').split('👉')\r\n\r\n            //   e.target.style.fill = 'rgba(255, 1, 1, .9)'\r\n            //   // const source = appState.graph.frame.getNode(sourceid)\r\n            //   // const target = appState.graph.frame.getNode(targetid)\r\n            //   const thepath = pathFinder.find(sourceid, targetid)\r\n            //   const pathnode = thepath.map((node) => {\r\n            //     return appState.graph.frame.getNode(node.id)\r\n            //   })\r\n            //   //control map highlight \r\n            //   appState.graph.pathHovered = {\r\n            //     \"sourceid\": sourceid,\r\n            //     \"targetid\": targetid,\r\n            //     \"pathnode\": pathnode\r\n            //   }\r\n            //   // control socio update \r\n            //   appState.graph.frame.highlightPathEdgeNode(pathnode)\r\n\r\n\r\n\r\n            // }}\r\n            // onMouseLeave={(e) => {\r\n            //   // if (appState.graph.mapClicked) return;\r\n            //   e.target.style.fill = appState.graph.edges.color\r\n            //   appState.graph.frame.graph.forEachNode(function (n) {  //highlight all the nodes \r\n            //     // if (n !== appState.graph.mapClicked) {\r\n            //     appState.graph.frame.colorNodeOpacity(n, 1);  // set opacity for all the node 1\r\n\r\n            //     appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT); //set highlight edge null\r\n            //     // }\r\n            //   }\r\n            //   );\r\n            //   appState.graph.frame.colorNodeEdge(null);  //highlight all edges \r\n            //   appState.graph.pathHovered = null;\r\n\r\n\r\n            // }}\r\n            key={i}\r\n          />)\r\n        )\r\n      } else if ((appState.graph.scatterplot.y !== 'shortest path') && (appState.graph.scatterplot.x !== 'shortest path')\r\n        && (appState.graph.scatterplot.y !== 'pair distance') && (appState.graph.scatterplot.x !== 'pair distance')) {\r\n        renderCircles = appState.graph.frame.getNodeList().map((node, i) => (\r\n          <circle\r\n            cx={this.props.scale.x(parseFloat(node.data.ref[appState.graph.scatterplot.x]))}\r\n            cy={this.props.scale.y(parseFloat(node.data.ref[appState.graph.scatterplot.y]))}\r\n            r={this.props.cr}\r\n            style={this.setScatterStyle(node)}\r\n            id={node.id}\r\n            data={node}\r\n            onMouseOver={(e) => {\r\n              // console.log(e.target.dataset.id)\r\n              const thenode = appState.graph.frame.getNode(e.target.dataset.id)\r\n              appState.graph.currentlyHovered = thenode  // control map update \r\n              appState.graph.frame.highlightNode(thenode, true);   // control cosio update \r\n              appState.graph.frame.highlightEdges(thenode, true);\r\n\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              if (appState.graph.mapClicked) return;\r\n\r\n              appState.graph.frame.graph.forEachNode(function (n) {\r\n                // if (n !== appState.graph.mapClicked) {\r\n                appState.graph.frame.colorNodeOpacity(n, 1);\r\n\r\n                appState.graph.frame.highlightNode(n, false, def.ADJACENT_HIGHLIGHT);\r\n                // }\r\n              }\r\n              );\r\n              appState.graph.frame.colorNodeEdge(null);\r\n              appState.graph.currentlyHovered = null;\r\n\r\n\r\n            }}\r\n            // eventHandlers={{\r\n            //   mouseover: (e) => {\r\n            //     console.log(e)\r\n            //   }\r\n            // }}\r\n            // style={{ fill: \"rgba(25, 158, 199, .9)\" }}\r\n            key={i}\r\n          />\r\n        ))\r\n      }\r\n\r\n      return <g>{renderCircles}</g>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScatterPlot;\r\n\r\n","import React from \"react\";\r\n\r\nimport { format } from \"d3-format\";\r\nimport { LegendLinear, LegendSize } from \"@vx/vx\";\r\nimport appState from \"../stores\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction Legends() {\r\n  return (\r\n    <div className=\"legends\" style={{visibility: appState.preferences.isLegendShowing ? 'visible' : 'hidden'}}>\r\n      {/* <LegendSize\r\n        className=\"scale-legend\"\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        itemMargin=\"0\"\r\n        shapeMargin=\"5px 0\"\r\n        labelFormat={format(\".2f\")}\r\n        scale={appState.graph.nodeSizeScale}\r\n        shape={props => {\r\n          const { size } = props;\r\n          return (\r\n            <svg width={size} height={size}>\r\n              <circle  {...props} r={size / 2} cx={size / 2} cy={size / 2} fill={'#9a9ea1'}/>\r\n            </svg>\r\n          );\r\n        }}\r\n      /> */}\r\n      {/* <LegendLinear\r\n        direction=\"row\"\r\n        itemDirection=\"column\"\r\n        shape=\"circle\"\r\n        scale={appState.graph.nodeColorScale}\r\n        labelFormat={format(\".4f\")}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Legends);\r\n","import React from \"react\";\r\nimport { Button, Classes, Tooltip, Intent, Position } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../../stores\";\r\n\r\n@observer\r\nclass SelectionActionPanel extends React.Component {\r\n  render() {\r\n      // Only relevant when there's exact 1 node selected.\r\n      // To display number of hidden nodes if exists\r\n      let numHiddenNeighbor = 0;\r\n      if (appState.graph.selectedNodes.length === 1) {\r\n        if (appState.graph.lastSelectedSingleNode) {\r\n            const selectedNodeId = appState.graph.lastSelectedSingleNode.data.ref.id.toString();\r\n            numHiddenNeighbor = appState.graph.getNeighborNodesFromRawGraph(selectedNodeId).filter(n => n.isHidden).length;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <div\r\n            className=\"argo-selection-action-panel\"\r\n            style={{\r\n                backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n            }}\r\n        >\r\n            <Tooltip\r\n                content=\"Pin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"pin\"\r\n                    text=\"Pin\"\r\n                    intent={Intent.PRIMARY}\r\n                    onClick={() => {\r\n                    appState.graph.frame.pinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Unpin Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"unpin\"\r\n                    text=\"Unpin\"\r\n                    intent={Intent.WARNING}\r\n                    onClick={() => {\r\n                    appState.graph.frame.unpinSelectedNodes();\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            <Tooltip\r\n                content=\"Hide Selected Nodes\"\r\n                position={Position.BOTTOM}\r\n            >\r\n                <Button\r\n                    className={classnames([\r\n                    Classes.BUTTON,\r\n                    Classes.MINIMAL\r\n                    ])}\r\n                    iconName=\"delete\"\r\n                    text=\"Hide\"\r\n                    intent={Intent.DANGER}\r\n                    onClick={() => {\r\n                    appState.graph.hideNodes(\r\n                        appState.graph.frame.getSelectedIds()\r\n                    );\r\n                    this.forceUpdate();\r\n                    }}\r\n                />\r\n            </Tooltip>\r\n            {// This menu only shows when there's exactly 1 node selected\r\n              appState.graph.selectedNodes.length === 1 && (\r\n                <div style={{ display: \"inline\" }}>\r\n                  <Tooltip\r\n                    content=\"Open Neighbor Dialog\"\r\n                    position={Position.BOTTOM}\r\n                  >\r\n                    <Button\r\n                      className={classnames([\r\n                        Classes.BUTTON,\r\n                        Classes.MINIMAL\r\n                      ])}\r\n                      iconName=\"graph\"\r\n                      text={`Neighbors (${numHiddenNeighbor} hidden)`}\r\n                      intent={Intent.PRIMARY}\r\n                      onClick={() => {\r\n                        appState.graph.frame.pauseLayout();\r\n                        appState.preferences.neighborDialogOpen = true;\r\n                        this.forceUpdate();\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n                </div>\r\n            )}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SelectionActionPanel;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport appState from \"../stores\";\r\n\r\n@observer\r\nclass StatusBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={classnames(\"bottom-status-bar\")}\r\n                style={{\r\n                    backgroundColor: appState.preferences.darkMode ? '#30404D' : '#FFFFFF',\r\n                    visibility: appState.preferences.isStatusBarShowing? \"visible\" : \"hidden\"\r\n                }}\r\n            >\r\n                <div className={classnames(\"bottom-status-bar__left\")}>{appState.graph.metadata.fullNodes && appState.graph.metadata.fullEdges && `Total Nodes: ${appState.graph.metadata.fullNodes}, Total Edges: ${appState.graph.metadata.fullEdges},`} Hidden Nodes: {appState.graph.numHiddenNodes}</div>\r\n                <div className={classnames(\"bottom-status-bar__right\")}>Color by: {appState.graph.nodes.colorBy} ({appState.graph.nodes.color.scale}), Size by: {appState.graph.nodes.sizeBy} ({appState.graph.nodes.size.scale})</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n  Position,\r\n  Tooltip,\r\n  Popover,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider\r\n} from \"@blueprintjs/core\";\r\nimport pluralize from \"pluralize\";\r\nimport appState from \"../../stores\";\r\nimport GlobalPanel from \"./GlobalPanel\";\r\nimport SelectionPanel from \"./SelectionPanel\";\r\nimport uniq from \"lodash/uniq\";\r\n// import { averageClusteringCoefficient } from \"../../services/AlgorithmUtils\";\r\n\r\n\r\n@observer\r\nclass ZoomPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classnames(\r\n        \"zoom-buttons\"\r\n      )}>\r\n          <Button\r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"plus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(1.5)\r\n            }}\r\n            ></Button>\r\n            \r\n            \r\n            <br></br>\r\n            \r\n            \r\n            <Button \r\n            style={{marginBottom: \"5px\"}}\r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"minus\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.dollyIn(0.5)\r\n            }}></Button>\r\n\r\n\r\n            <br></br>\r\n            \r\n            \r\n            <Button\r\n            style={{marginBottom: \"5px\"}} \r\n            className={classnames([Classes.BUTTON])} \r\n            iconName=\"home\"\r\n            onClick={() => {\r\n              let controls = appState.controls\r\n              controls.reset()\r\n\r\n              //reset to center of graph code:\r\n              // let xVal = 0\r\n              // let yVal = 0\r\n              // let pos = appState.graph.frame.getPositions();\r\n              // for(let n in pos) {\r\n              //   xVal = pos[n][0]\r\n              //   yVal = pos[n][1]\r\n              // }\r\n              // let len = Object.keys(pos).length\r\n              // appState.panToMousePosition(xVal,yVal);\r\n            }}></Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ZoomPanel;","import React from \"react\";\r\nimport { Classes,Button, Tab2, Tabs2, Tag } from \"@blueprintjs/core\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\nimport appState from \"../stores\";\r\nimport SimpleSelect from \"./utils/SimpleSelect\";\r\nimport { addNode } from \"../ipc/client\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodeDetail from \"./panels/NodeDetailPanel\";\r\nimport ScatterPlot from \"./panels/ScatterPlot\";\r\nimport Legends from \"./Legends\";\r\nimport StatusBar from './StatusBar';\r\nimport SelectionActionPanel from \"./panels/SelectionActionPanel\";\r\nimport ZoomPanel from \"./panels/ZoomPanel\";\r\nimport * as SvgSaver from 'svgsaver';\r\n\r\n// TODO: migrate to simple select\r\n\r\n@observer\r\nclass RenderOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Appearance </h4>\r\n        <Tabs2 animate id=\"graph-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          <Tab2 id=\"labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n@observer\r\nclass FilterOptionsCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Filter Options</h4>\r\n        <Tabs2 animate id=\"filter-options\">\r\n          <Tab2 id=\"nodes\" title=\"Nodes\" panel={<NodesFilterPanel />} />\r\n          <Tab2 id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n          {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n          <Tabs2.Expander />\r\n        </Tabs2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//\r\n\r\n@observer\r\nclass FloatingCards extends React.Component {\r\n  optionsVisible = {\r\n    left: '0em'\r\n  }\r\n  optionsInvisible = {\r\n    left: '-22em'\r\n  }\r\n  sideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  sideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  toggleOptions = () => {\r\n    appState.preferences.isRenderOptionsCardHidden = !appState.preferences.isRenderOptionsCardHidden;\r\n  };\r\n\r\n  filtersVisible = {\r\n    left: '0em'\r\n  }\r\n  filtersInvisible = {\r\n    left: '-22em'\r\n  }\r\n  filterSideButtonVis = {\r\n    marginLeft: '50px'\r\n  }\r\n  filterSideButtonInv = {\r\n    marginLeft: '-15px'\r\n  }\r\n  filterToggleOptions = () => {\r\n    appState.preferences.isFilterOptionsCardHidden = !appState.preferences.isFilterOptionsCardHidden;\r\n  };\r\n\r\n  scatterVisible = {\r\n    right: '0em'\r\n  }\r\n  scatterInvisible = {\r\n    right: '-52em'\r\n  }\r\n  scatterSideButtonVis = {\r\n    marginLeft: '0px'\r\n  }\r\n  scatterSideButtonInv = {\r\n    marginLeft: '80px'\r\n  }\r\n\r\n  scatterToggleOptions = () => {\r\n    appState.preferences.isScatterPlotCardHidden = !appState.preferences.isScatterPlotCardHidden;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"floating-overlay\">\r\n        <div className=\"left-cards\" style={{zIndex: '5000'}}>\r\n          {appState.search.panelOpen && (\r\n            <div\r\n              className={classnames(\r\n                Classes.CARD,\r\n                Classes.ELEVATION_2,\r\n                \"overlay-card\",\r\n                \"left-overlay-card\"\r\n              )}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"left\",\r\n                  alignItems: \"left\"\r\n                }}\r\n              >\r\n                <h4 style={{ width: 140 }}>\r\n                  {appState.search.numCandidates} results\r\n                </h4>\r\n                <div style={{ width: 20 }} />\r\n                <h4>Order</h4>\r\n                <div style={{ width: 5 }} />\r\n                <SimpleSelect\r\n                  style={{ \"margin-bottom\": 10 }}\r\n                  items={[...appState.graph.metadata.nodeComputed, \"node_id\"]}\r\n                  onSelect={it => (appState.graph.searchOrder = it)}\r\n                  value={appState.graph.searchOrder}\r\n                />\r\n              </div>\r\n              <table\r\n                className={classnames(\r\n                  Classes.TABLE,\r\n                  Classes.TABLE_STRIPED,\r\n                  Classes.INTERACTIVE\r\n                )}\r\n                style={{\r\n                  width: \"100%\",\r\n                  userSelect: \"none\"\r\n                }}\r\n              >\r\n                <tbody>\r\n                  {appState.search.candidates.map((node, i) => (\r\n                    <tr\r\n                      key={i}\r\n                      onMouseOver={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          true\r\n                        )\r\n                      }\r\n                      onMouseDown={() => addNode(node.node_id)}\r\n                      onMouseLeave={() =>\r\n                        appState.graph.frame.highlightNodeIds(\r\n                          [node.node_id],\r\n                          false\r\n                        )\r\n                      }\r\n                    >\r\n                      <td>{node[appState.graph.nodes.labelBy]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <center>\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum > 0) {\r\n                      appState.search.pageNum -= 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev&nbsp;\r\n                </a>\r\n                &nbsp;\r\n                {appState.search.pageNum !== 0 ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = 0;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    1&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}&nbsp;\r\n                  </a>\r\n                )}\r\n                ...<b>&nbsp;</b>\r\n                {appState.search.pages.map(i => {\r\n                  if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    i == appState.search.pageNum\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        style={{\r\n                          color: \"#111111\",\r\n                          pointerEvents: \"none\",\r\n                          cursor: \"default\"\r\n                        }}\r\n                      >\r\n                        {appState.search.pageNum + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  } else if (\r\n                    i != 0 &&\r\n                    i != appState.search.maxPage &&\r\n                    ((i > appState.search.pageNum - 4 &&\r\n                      i < appState.search.pageNum + 4) ||\r\n                      (appState.search.pageNum < 4 && i < 8) ||\r\n                      (appState.search.pageNum > appState.search.maxPage - 4 &&\r\n                        i > appState.search.maxPage - 8))\r\n                  ) {\r\n                    return (\r\n                      <a\r\n                        key={i}\r\n                        onMouseDown={() => {\r\n                          appState.search.pageNum = i;\r\n                          appState.search.candidates = appState.search.allCands.slice(\r\n                            appState.search.pageNum * appState.search.nPerPage,\r\n                            (appState.search.pageNum + 1) *\r\n                            appState.search.nPerPage\r\n                          );\r\n                        }}\r\n                      >\r\n                        {i + 1}&nbsp;\r\n                      </a>\r\n                    );\r\n                  }\r\n                })}\r\n                ...&nbsp;\r\n                {appState.search.pageNum !== appState.search.maxPage ? (\r\n                  <a\r\n                    onMouseDown={() => {\r\n                      appState.search.pageNum = appState.search.maxPage;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }}\r\n                  >\r\n                    {appState.search.maxPage + 1}&nbsp;\r\n                  </a>\r\n                ) : (\r\n                  <a\r\n                    style={{\r\n                      color: \"#111111\",\r\n                      pointerEvents: \"none\",\r\n                      cursor: \"default\"\r\n                    }}\r\n                  >\r\n                    {appState.search.pageNum + 1}\r\n                  </a>\r\n                )}\r\n                &nbsp;\r\n                <a\r\n                  onMouseDown={() => {\r\n                    if (appState.search.pageNum < appState.search.maxPage) {\r\n                      appState.search.pageNum += 1;\r\n                      appState.search.candidates = appState.search.allCands.slice(\r\n                        appState.search.pageNum * appState.search.nPerPage,\r\n                        (appState.search.pageNum + 1) * appState.search.nPerPage\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </a>\r\n                <br />\r\n                <br />\r\n                <h5>Page {appState.search.pageNum + 1}</h5>\r\n              </center>\r\n            </div>\r\n          )}\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\",\r\n              \"graph-option\"\r\n            )}\r\n            style={appState.preferences.isRenderOptionsCardHidden ? this.optionsInvisible : this.optionsVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.toggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <RenderOptionsCard />\r\n          </div>\r\n\r\n\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.toggleOptions} style={appState.preferences.isRenderOptionsCardHidden ? this.sideButtonVis : this.sideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        {/* Scatter Plot  panels */}\r\n        {/* <div className=\"right-cards\">\r\n          <div\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"scatter-overlay-card\",\r\n              \r\n              \"transparent-frame\",\r\n              \"right-cards\",\r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isScatterPlotCardHidden ? this.scatterInvisible : this.scatterVisible}\r\n          >\r\n            <button className=\"openbtn3\" onClick={this.scatterToggleOptions}> &#8250;\r\n            </button>\r\n            \r\n            <br />\r\n            \r\n            <div id=\"scatter-plot\"\r\n            style={{transform: \"translate(10px, -20px)\"}}\r\n            >\r\n\r\n              {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", height: \"0px\", paddingTop: \"0em\", paddingLeft: \"0px\", paddingBottom: \"0em\", marginRight: \"35px\" }}>\r\n            <button className=\"openbtn\" onClick={this.scatterToggleOptions} style={appState.preferences.isScatterPlotCardHidden ? this.scatterSideButtonVis : this.scatterSideButtonInv}>\r\n              &#9776;\r\n            </button>\r\n          </div>\r\n        </div> */}\r\n\r\n        {/* Filter option  panels */}\r\n        <div className={\"left-cards\"} style={{ marginTop:'6em'}} >\r\n          <div\r\n\r\n\r\n            className={classnames(\r\n              Classes.CARD,\r\n              Classes.ELEVATION_2,\r\n              \"overlay-card\",\r\n              \"left-overlay-card\",\r\n              \"transparent-frame\",\r\n              \"left-cards\", \r\n              \"filter-option\"\r\n            )}\r\n            style={appState.preferences.isFilterOptionsCardHidden ? this.filtersInvisible : this.filtersVisible}\r\n          >\r\n            <button className=\"openbtn2\" onClick={this.filterToggleOptions}> &#8249;\r\n            </button>\r\n            <br />\r\n            <FilterOptionsCard />\r\n\r\n          </div>\r\n\r\n          <div className={classnames(Classes.CARD, Classes.ELEVATION_2, \"overlay-card\",\r\n            \"transparent-frame\")} style={{ width: \"1em\", paddingTop: \"0em\", paddingRight: \"0.7em\", paddingBottom: \"0.5em\", marginLeft: \"-5.4em\" }}>\r\n            <button className=\"openbtn\" onClick={this.filterToggleOptions} style={appState.preferences.isFilterOptionsCardHidden ? this.filterSideButtonVis : this.filterSideButtonInv}>\r\n               &#9776;\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n     \r\n\r\n\r\n        <Legends />\r\n        {/* <StatusBar /> */}\r\n        {// This menu only shows when there are nodes selected\r\n          appState.graph.selectedNodes.length > 0 && !appState.preferences.isNavbarInMinimalMode && <SelectionActionPanel />\r\n        }\r\n\r\n        <ZoomPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FloatingCards;","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport appState from \"../../stores\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport { Histogram, DensitySeries, BarSeries, withParentSize, XAxis, YAxis } from '@data-ui/histogram';\r\n// import  Histogram  from \"./Histogram\"\r\nimport SVGBrush from 'react-svg-brush';\r\n\r\nimport { min, max, scaleLinear, map, range, select } from \"d3\"\r\nimport { bin } from \"d3-array\"\r\nimport * as d3 from \"d3\"\r\nimport { filter, forEach } from \"lodash\";\r\n// import { min } from \"lodash\";\r\n\r\n\r\n@observer\r\nclass SelectionDetail extends React.Component {\r\n\r\n  // \r\n  margin = { top: 32, right: 30, bottom: 70, left: 40 }\r\n  // { top: 32, right: 32, bottom: 64, left: 64 }\r\n  containerDiv = document.querySelector(\"#graph-container\");\r\n  allwidth = this.containerDiv.offsetWidth / 2;\r\n  allheight = this.containerDiv.offsetHeight/ 3 *2;\r\n  width = this.allwidth - this.margin.left - this.margin.right\r\n  height = this.allheight - this.margin.top - this.margin.bottom\r\n  brushmargin = this.margin\r\n  brushwidth = this.width\r\n  distBinData = []\r\n  degreeBinData = []\r\n  edgeSelection = []\r\n\r\n\r\n  @action\r\n  SelectionDistanceFromLatLonIn = () => {\r\n    const selectNodes = appState.graph.selectedNodes;\r\n    const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n    this.SelectionDensity()\r\n\r\n    if (appState.graph.mapClicked) {\r\n\r\n      const edgeSelection = appState.graph.mapClicked.linkObjs\r\n      if (!edgeSelection || edgeSelection.length == 0) {\r\n        appState.graph.avgdist = 0\r\n        return [null, []];\r\n      }\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          \r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n      return [appState.graph.avgdist, edgeDistance];\r\n\r\n    }\r\n\r\n    if (selectNodes.length > 1) {\r\n      //// calculate only the connected distance \r\n      const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n      if (edgeSelection.length == 0) {\r\n        appState.graph.avgdist = 0\r\n        return [null, []];\r\n      }\r\n      this.edgeSelection = edgeSelection\r\n      const edgeDistance = edgeSelection.map(e => {\r\n        if(e.edgeDist >0){\r\n          return e.edgeDist\r\n        }else {\r\n          return 0\r\n        }\r\n       \r\n      })\r\n      appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n      return [appState.graph.avgdist, edgeDistance];\r\n\r\n      //// calculate average distance between all selected nodes \r\n      // const edgeDistance = []\r\n      // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n      //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n      //     edgeDistance.push(edge.edgeDist)\r\n\r\n      //   }\r\n      // })\r\n      // if(edgeDistance.length>0){\r\n      //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n      // }else{\r\n      //   return  [null, []]\r\n      // }\r\n\r\n      // for (let i = 0; i < selectNodes.length; i++) {\r\n      //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n      //     const lon1 = selectNodes[i].data.ref.LonX\r\n      //     const lat1 = selectNodes[i].data.ref.LatY\r\n      //     const lon2 = selectNodes[j].data.ref.LonX\r\n      //     const lat2 = selectNodes[j].data.ref.LatY\r\n      //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n      //     edgeDistance.push(edgeDist)\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n    } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n      let edgeSelection = []\r\n      appState.graph.frame.getNodeList().forEach(node => {\r\n        if(node.linkObjs && node.linkObjs.length>0){\r\n          edgeSelection.push(...node.linkObjs)\r\n        }\r\n        \r\n      })\r\n\r\n      if (edgeSelection.length > 0) {\r\n        let uniqEdgeSelection = uniq(edgeSelection)\r\n        this.edgeSelection = uniqEdgeSelection\r\n        if (uniqEdgeSelection.length > 0) {\r\n          let edgeDistance = uniqEdgeSelection.map(e=>{\r\n            if(e.edgeDist >0){\r\n              return e.edgeDist\r\n            }else {\r\n              return 0\r\n            }\r\n           \r\n          })\r\n          // console.log(edgeDistance)\r\n          appState.graph.avgdist = average(edgeDistance).toFixed(2)\r\n          return [appState.graph.avgdist, edgeDistance];\r\n\r\n        } else {\r\n          return [null, []]\r\n        }\r\n\r\n      } else {\r\n        return [null, []]\r\n      }\r\n\r\n\r\n      // return null\r\n    }\r\n\r\n  }\r\n  \r\n  @action\r\n  SelectionDensity = () => {\r\n\r\n    // undirect graph\r\n\r\nif(appState.graph.selectedNodes.length > 1){\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) {\r\n      appState.graph.tempRawGraph = undefined\r\n      return 0;\r\n    }\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = appState.graph.selectedNodes.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    appState.graph.selectedEdge = edgeSelection.length;\r\n    appState.graph.avgDegree = appState.graph.selectedNodes.reduce((de, l) => de + l.data.ref.degree, 0) / appState.graph.selectedNodes.length\r\n    appState.graph.avgDegree = appState.graph.avgDegree.toFixed(3)\r\n    appState.graph.avgdensity = selectionDen.toFixed(3);\r\n    const selectnodesID = appState.graph.selectedNodes.map(n=>n.id)\r\n    appState.graph.rediameter = ''\r\n    appState.graph.reclustercoe = ''\r\n    appState.graph.recomponent = ''\r\n    appState.graph.tempRawGraph = {\r\n      \r\n        nodes: appState.graph.rawGraph.nodes.filter((n)=>(selectnodesID.includes(n.id))),\r\n        edges: appState.graph.rawGraph.edges.filter((e)=>(selectnodesID.includes(e.source_id) && selectnodesID.includes(e.target_id)))\r\n\r\n      \r\n    }\r\n    return selectionDen.toFixed(3)\r\n}else if (appState.graph.mapClicked){\r\n  const thenode = appState.graph.mapClicked\r\n  const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n  const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n    // console.log(edgeSelection.length);\r\n    if (edgeSelection.length == 0) return 0;\r\n    // this.edgeSelection = [...edgeSelection]\r\n    \r\n    const nodelength = selectneighbors.length;\r\n    const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n    appState.graph.selectedEdge = edgeSelection.length;\r\n    appState.graph.avgDegree = selectneighbors.reduce((de, l) => de + l.data.ref.degree, 0) / selectneighbors.length;\r\n    appState.graph.avgDegree = appState.graph.avgDegree.toFixed(3)\r\n    appState.graph.avgdensity = selectionDen.toFixed(3);\r\n    const selectnodesID = selectneighbors.map(n=>n.data.ref.id)\r\n    selectnodesID.push(appState.graph.mapClicked.id)\r\n    appState.graph.rediameter = ''\r\n    appState.graph.reclustercoe = ''\r\n    appState.graph.recomponent = ''\r\n    appState.graph.tempRawGraph = {\r\n      \r\n        nodes: appState.graph.rawGraph.nodes.filter((n)=>(selectnodesID.includes(n.id))),\r\n        edges: appState.graph.rawGraph.edges.filter((e)=>(selectnodesID.includes(e.source_id) && selectnodesID.includes(e.target_id)))\r\n\r\n      \r\n    }\r\n    return selectionDen.toFixed(3)\r\n\r\n}\r\n    \r\n\r\n  }\r\n  // margin = \r\n\r\n\r\n  onEdgeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    appState.graph.edgeselection = []\r\n    appState.graph.clearBrush = false\r\n    // rehighlight all edges in sociogram\r\n    appState.graph.frame.highlightAllEdges()\r\n\r\n  }\r\n  onEdgeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onEdgeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.edgesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.brushmargin.left,\r\n      x1: selection[1][0] - this.brushmargin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n    })\r\n\r\n\r\n\r\n    // console.log(this.distBinData)\r\n    // console.log(selectionRectID)\r\n    // const filterDistBin = this.distBinData.filter((d, i) => i % 2 != 1)\r\n    const filterDistBin2 = this.distBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    // console.log(this.distBinData)\r\n    const distbuffer_min = min(filterDistBin2.map((d) => d.mind))\r\n    const distbuffer_max = max(filterDistBin2.map((d) => d.maxd))\r\n    // console.log(this.edgeSelection)\r\n    const filteredge = this.edgeSelection.filter(edge => (edge.edgeDist >= distbuffer_min && edge.edgeDist <= distbuffer_max))\r\n\r\n\r\n    appState.graph.edgeselection = filteredge\r\n    appState.graph.frame.highlightedgeWithinDist(distbuffer_min, distbuffer_max)\r\n    // this.distBinData = []\r\n    // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n    //   // console.log(node)\r\n    //   selectionNodeID.includes(node.id)\r\n\r\n    // )\r\n    // appState.graph.frame.selection = selectionNode\r\n    // appState.graph.selectedNodes = selectionNode\r\n\r\n\r\n    // // console.log(selectionNode)\r\n    // appState.graph.frame.updateSelectionOpacity()\r\n    console.log(appState.graph.edgeselection)\r\n    // console.log(selection)\r\n    // console.log(selectionRectID)\r\n\r\n  }\r\n\r\n  renderEdgeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.edgesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        if ((clientX - left) < 0) {\r\n          console.log(\"Here\");\r\n          return [0, clientY - top];\r\n        }\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onEdgeBrushStart}\r\n      onBrush={this.onEdgeBrush}\r\n      onBrushEnd={this.onEdgeBrushEnd}\r\n    />\r\n  )\r\n\r\n  onDegreeBrushStart = ({ target, type, selection, sourceEvent }) => {\r\n    // appState.graph.frame.selection = []\r\n    // appState.graph.selectedNodes = []\r\n    // appState.graph.filter['degree'] ={\r\n    //   \"min\":-1,\r\n    //   \"max\":Infinity\r\n    // }\r\n\r\n    // appState.graph.filterNodes()\r\n    appState.graph.clearBrush = false\r\n\r\n  }\r\n  onDegreeBrush = ({ target, type, selection, sourceEvent }) => {\r\n\r\n  }\r\n  onNoNodeDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n      const brushBounds = {\r\n        x0: selection[0][0] - this.margin.left,\r\n        x1: selection[1][0] - this.margin.left,\r\n        y0: selection[0][1],\r\n        y1: selection[1][1],\r\n      }\r\n  \r\n      rects.each(function (d, i) {\r\n        const rectx = parseFloat(select(this).attr(\"x\"))\r\n        // const recty = parseFloat(select(this).attr(\"y\"))\r\n        if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n          selectionRectID.push(i)\r\n        }\r\n  \r\n  \r\n      })\r\n  \r\n      \r\n    //  if(selectionRectID.length>0){\r\n      const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n      const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n      const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n      \r\n      const selectionNode = appState.graph.frame.getNodeList().filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n\r\n      // when no node statisfy, should dehighlight \r\n      appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n    }else{       // click on brush should clear \r\n      appState.graph.frame.selection = []\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false\r\n    }\r\n    \r\n    \r\n  \r\n\r\n  }\r\n\r\n  onSelectDegreeBrushEnd = ({ target, type, selection, sourceEvent }) => {\r\n    const selectionRectID = []\r\n    const svgElement = select(this.degreesvg)\r\n    const rects = svgElement.selectAll(\".vx-bar\")\r\n    if (selection){\r\n    const brushBounds = {\r\n      x0: selection[0][0] - this.margin.left,\r\n      x1: selection[1][0] - this.margin.left,\r\n      y0: selection[0][1],\r\n      y1: selection[1][1],\r\n    }\r\n\r\n    rects.each(function (d, i) {\r\n      const rectx = parseFloat(select(this).attr(\"x\"))\r\n      // const recty = parseFloat(select(this).attr(\"y\"))\r\n      if (rectx >= brushBounds.x0 && rectx <= brushBounds.x1) {\r\n        selectionRectID.push(i)\r\n      }\r\n\r\n\r\n    })\r\n\r\n    \r\n  \r\n    const filterdegreeBin2 = this.degreeBinData.filter((d, i) => selectionRectID.indexOf(i) !== -1)\r\n    const degreebuffer_min = min(filterdegreeBin2.map((d) => d.mind))\r\n    const degreebuffer_max = max(filterdegreeBin2.map((d) => d.maxd))\r\n    \r\n    var selectionNode\r\n    if(appState.graph.selectedNodes.length >1){\r\n      selectionNode = appState.graph.selectedNodes.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      const thenode = appState.graph.selectedNodes[0]\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      selectionNode = selectneighbors.filter(node =>( \r\n        node.data.ref.degree>=degreebuffer_min && node.data.ref.degree<=degreebuffer_max)\r\n      )\r\n    }\r\n\r\n    \r\n    appState.graph.frame.degreehighlight = selectionNode\r\n      appState.graph.frame.updateDegreeHistOpacity()\r\n      appState.graph.degreeselection = selectionNode\r\n      appState.graph.degreebrushed = true\r\n  }\r\n    else{\r\n      if(appState.graph.selectedNodes.length >1){\r\n      appState.graph.frame.selection = appState.graph.selectedNodes\r\n      appState.graph.frame.updateSelectionOpacity()\r\n      appState.graph.degreeselection = []\r\n      appState.graph.degreebrushed = false}\r\n      else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n        const thenode = appState.graph.selectedNodes[0]\r\n        const selectionNode = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n        appState.graph.frame.degreehighlight = selectionNode\r\n        appState.graph.frame.updateDegreeHistOpacity()\r\n        appState.graph.degreeselection = selectionNode\r\n        appState.graph.degreebrushed = true\r\n      }\r\n\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  renderNoNodeDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onNoNodeDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n  renderSelectDegreeBrush = () => (\r\n    <SVGBrush\r\n      // Defines the boundary of the brush.\r\n      // Strictly uses the format [[x0, y0], [x1, y1]] for both 1d and 2d brush.\r\n      // Note: d3 allows the format [x, y] for 1d brush.\r\n      selection = {appState.graph.clearBrush? null:undefined}\r\n      extent={\r\n        [[this.margin.left, this.brushmargin.top], [this.allwidth - this.brushmargin.right, this.allheight - this.brushmargin.bottom]]\r\n      }\r\n      // Obtain mouse positions relative to the current svg during mouse events.\r\n      // By default, getEventMouse returns [event.clientX, event.clientY]\r\n      getEventMouse={event => {\r\n        const { clientX, clientY } = event;\r\n        const { left, top } = this.degreesvg.getBoundingClientRect();\r\n        // console.log([clientX - left, clientY - top])\r\n        return [clientX - left, clientY - top];\r\n      }}\r\n      brushType=\"x\" // \"x\"\r\n      onBrushStart={this.onDegreeBrushStart}\r\n      onBrush={this.onDegreeBrush}\r\n      onBrushEnd={this.onSelectDegreeBrushEnd}\r\n    />\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    this.prevTick = \"\";\r\n    this.maxDegreeDict = {};\r\n    this.maxDegreeCount = 0;\r\n    this.maxDistanceCount= 0;\r\n\r\n    if (appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n      // self = this\r\n\r\n      // Array(100).fill().map(Math.random);\r\n\r\n\r\n      return (\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {appState.graph.selectedNodes.length + ' nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                </tr> */}\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{ height: '100%' }}>\r\n              {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"35vh\"}\r\n                // className=\"hist\"\r\n                id=\"edgesvg\"\r\n                ref={input => (this.edgesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"distance_dis\"\r\n                  orientation=\"vertical\"\r\n                  label=\"Edge Distance Distribution\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  margin={this.margin}\r\n                  valueAccessor={(datum) => {\r\n\r\n                    return datum\r\n                  }}\r\n                  binType=\"numeric\"\r\n\r\n                >\r\n                  <BarSeries\r\n                    animated={false}\r\n                    rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.distBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.distBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.distBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.maxDistanceCount/2);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          return parseInt(tick).toString()\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                  \r\n\r\n\r\n                </Histogram>\r\n                {this.renderEdgeBrush()}\r\n              </svg>\r\n              <svg\r\n                width={\"50%\"}\r\n                height={\"35vh\"}\r\n                // className=\"hist\"\r\n                id=\"degreesvg\"\r\n                ref={input => (this.degreesvg = input)}\r\n              // ref = {ref}\r\n              >\r\n\r\n                <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                <Histogram\r\n                  ariaLabel=\"degree_dis\"\r\n                  orientation=\"vertical\"\r\n                  height={this.allheight}\r\n                  width={this.allwidth}\r\n                  margin={this.margin}\r\n                  cumulative={false}\r\n                  normalized={false}\r\n                  binCount={25}\r\n                  valueAccessor={(datum) => datum}\r\n                  binType=\"numeric\"\r\n                >\r\n                  <BarSeries\r\n                    fill={(d, i) => {\r\n                      if (i === 0) {\r\n                        this.maxDistanceCount = 0;\r\n                        this.degreeBinData = []\r\n                      }\r\n                      if (d.data.length > this.maxDistanceCount) {\r\n                        this.maxDistanceCount = d.data.length;\r\n                      }\r\n                      if (d.data.length > 0) {\r\n                        this.degreeBinData.push({\r\n                          mind: min(d.data),\r\n                          maxd: max(d.data)\r\n                        })\r\n                      } else {\r\n                        this.degreeBinData.push({\r\n                          mind: Infinity,\r\n                          maxd: -1\r\n                        })\r\n                      }\r\n\r\n\r\n\r\n                      // console.log(this.distBinData)\r\n                      // console.log(i)\r\n                      // console.log(d)\r\n                      return \"#08519c\"\r\n                    }}\r\n                    animated={false}\r\n                    rawData={appState.graph.selectedNodes.map((node, i) => {\r\n                      if (i == 0) {\r\n                        this.maxDegreeCount = 0;\r\n                      }\r\n                      if (node.data.ref.degree in this.maxDegreeDict) {\r\n                        this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      } else {\r\n                        this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                        if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                          this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                        }\r\n                      }\r\n                      // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                      if(node.data.ref.degree>0){\r\n                        return node.data.ref.degree\r\n                      }else{\r\n                        return 0\r\n                      }\r\n                    })}\r\n                  />\r\n                  <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                  {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                        console.log(tick, this.prevTick);\r\n                        if (parseInt(tick).toString() == this.prevTick) {\r\n                          return \"\";\r\n                        } \r\n                        else {\r\n                          this.prevTick = parseInt(tick).toString();\r\n                          return parseInt(tick).toString();\r\n                        }\r\n                          \r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                    :\r\n                    <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                      (tick, ti) => {\r\n                          // console.log(tick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n  \r\n                        // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                      }} />\r\n                  }\r\n                </Histogram>\r\n                {this.renderSelectDegreeBrush()}\r\n              </svg>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if(appState.graph.mapClicked && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n      const thenode = appState.graph.mapClicked\r\n      const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n      // appState.graph.selectedNodes = selectneighbors\r\n      if(selectneighbors.length >1 ){\r\n        return (\r\n          //\r\n          <div\r\n            className={classnames(\r\n              // 'overlay-card',\r\n              // \"right-overlay-card\",\r\n              // \"transparent-frame\"\r\n            )}\r\n            style={{\r\n              // width: '40vw',\r\n              height: '40vh',\r\n              // border:'#C0C0C0',\r\n              // borderStyle:'solid',\r\n            }}\r\n          >\r\n            <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n              <table\r\n                className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n                style={{\r\n                  width: \"100%\",\r\n                  padding: '0',\r\n                  fontSize: \"12px\"\r\n                }}\r\n              >\r\n  \r\n                <thead>\r\n                  {/* <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                   \r\n                  </tr> */}\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {selectneighbors.length + ' nodes are selected'}</td>\r\n                    {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                  </tr>\r\n                  {/* <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                  </tr> */}\r\n                  {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                    \r\n                  ))} */}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n  \r\n            <div style={{ height: '100%' }}>\r\n                {/* <text className=\"distribution-title\" >Distance Distribution</text> */}\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"35vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"edgesvg\"\r\n                  ref={input => (this.edgesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"distance_dis\"\r\n                    orientation=\"vertical\"\r\n                    label=\"Edge Distance Distribution\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    margin={this.margin}\r\n                    valueAccessor={(datum) => {\r\n  \r\n                      return datum\r\n                    }}\r\n                    binType=\"numeric\"\r\n  \r\n                  >\r\n                    <BarSeries\r\n                      animated={false}\r\n                      rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.distBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.distBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.distBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          console.log(tick, this.maxDistanceCount/2);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            return parseInt(tick).toString()\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                    \r\n  \r\n  \r\n                  </Histogram>\r\n                  {this.renderEdgeBrush()}\r\n                </svg>\r\n                <svg\r\n                  width={\"50%\"}\r\n                  height={\"35vh\"}\r\n                  // className=\"hist\"\r\n                  id=\"degreesvg\"\r\n                  ref={input => (this.degreesvg = input)}\r\n                // ref = {ref}\r\n                >\r\n  \r\n                  <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n                  <Histogram\r\n                    ariaLabel=\"degree_dis\"\r\n                    orientation=\"vertical\"\r\n                    height={this.allheight}\r\n                    width={this.allwidth}\r\n                    margin={this.margin}\r\n                    cumulative={false}\r\n                    normalized={false}\r\n                    binCount={25}\r\n                    valueAccessor={(datum) => datum}\r\n                    binType=\"numeric\"\r\n                  >\r\n                    <BarSeries\r\n                      fill={(d, i) => {\r\n                        if (i === 0) {\r\n                          this.maxDistanceCount = 0;\r\n                          this.degreeBinData = []\r\n                        }\r\n                        if (d.data.length > this.maxDistanceCount) {\r\n                          this.maxDistanceCount = d.data.length;\r\n                        }\r\n                        if (d.data.length > 0) {\r\n                          this.degreeBinData.push({\r\n                            mind: min(d.data),\r\n                            maxd: max(d.data)\r\n                          })\r\n                        } else {\r\n                          this.degreeBinData.push({\r\n                            mind: Infinity,\r\n                            maxd: -1\r\n                          })\r\n                        }\r\n  \r\n  \r\n  \r\n                        // console.log(this.distBinData)\r\n                        // console.log(i)\r\n                        // console.log(d)\r\n                        return \"#08519c\"\r\n                      }}\r\n                      animated={false}\r\n                      rawData={selectneighbors.map((node, i) => {\r\n                        if (i == 0) {\r\n                          this.maxDegreeCount = 0;\r\n                        }\r\n                        if (node.data.ref.degree in this.maxDegreeDict) {\r\n                          this.maxDegreeDict[node.data.ref.degree] += 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        } else {\r\n                          this.maxDegreeDict[node.data.ref.degree] = 1;\r\n                          if (this.maxDegreeDict[node.data.ref.degree] > this.maxDegreeCount) {\r\n                            this.maxDegreeCount = this.maxDegreeDict[node.data.ref.degree]\r\n                          }\r\n                        }\r\n                        // console.log(this.maxDegreeCount, node.data.ref.degree);\r\n                        if(node.data.ref.degree>0){\r\n                          return node.data.ref.degree\r\n                        }else{\r\n                          return 0\r\n                        }\r\n                      })}\r\n                    />\r\n                    <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                    {this.SelectionDistanceFromLatLonIn()[1].length < 10 ?\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                          // console.log(tick, this.prevTick);\r\n                          if (parseInt(tick).toString() == this.prevTick) {\r\n                            return \"\";\r\n                          } \r\n                          else {\r\n                            this.prevTick = parseInt(tick).toString();\r\n                            return parseInt(tick).toString();\r\n                          }\r\n                            \r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                      :\r\n                      <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                        (tick, ti) => {\r\n                            // console.log(tick);\r\n                            if (parseInt(tick).toString() == this.prevTick) {\r\n                              return \"\";\r\n                            } \r\n                            else {\r\n                              this.prevTick = parseInt(tick).toString();\r\n                              return parseInt(tick).toString();\r\n                            }\r\n    \r\n                          // return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString() == \"0\" ? \"\" : parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                        }} />\r\n                    }\r\n                  </Histogram>\r\n                  {this.renderSelectDegreeBrush()}\r\n                </svg>\r\n            </div>\r\n  \r\n  \r\n          </div>\r\n        );\r\n      }else {\r\n        return <div></div>\r\n      }\r\n     \r\n    }else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]){\r\n      return (\r\n        //\r\n        <div\r\n          className={classnames(\r\n            // 'overlay-card',\r\n            // \"right-overlay-card\",\r\n            // \"transparent-frame\"\r\n          )}\r\n          style={{\r\n            // width: '40vw',\r\n            height: '40vh',\r\n            // border:'#C0C0C0',\r\n            // borderStyle:'solid',\r\n          }}\r\n        >\r\n          <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n            <table\r\n              className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n              style={{\r\n                width: \"100%\",\r\n                padding: '0',\r\n                fontSize: \"12px\"\r\n              }}\r\n            >\r\n\r\n              <thead>\r\n                {/* <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                 \r\n                </tr> */}\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'1 nodes are selected'}</td>\r\n                  {/* <td style={{ padding: '5px 10px', whiteSpace: 'normal' }}>{formatLongFloat(this.props.node[it])}</td> */}\r\n                </tr>\r\n                {/* <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The average distance is ' + this.SelectionDistanceFromLatLonIn()[0] + ' km'}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ padding: '5px 10px' }}> {'The network density (undirected network) is ' + this.SelectionDensity()}</td>\r\n                </tr> */}\r\n                {/* {appState.graph.allPropertiesKeyList.map((it, i) => (\r\n                  \r\n                ))} */}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n         \r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else if( this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {  // when no node is selected, show the result of the whole network \r\n      return <div\r\n        className={classnames(\r\n          // 'overlay-card',\r\n          // \"right-overlay-card\",\r\n          // \"transparent-frame\"\r\n        )}\r\n        style={{\r\n          // width: '40vw',\r\n          height: '40vh',\r\n          // border:'#C0C0C0',\r\n          // borderStyle:'solid',\r\n        }}\r\n      >\r\n        <div className={classnames(Classes.CARD, \"node-details-table\")}>\r\n          <table\r\n            className={classnames(Classes.TABLE, Classes.TABLE_STRIPED, \"node-details-table-content\")}\r\n            style={{\r\n              width: \"100%\",\r\n              padding: '0',\r\n              fontSize: \"12px\"\r\n            }}\r\n          >\r\n\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n\r\n\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {'No node is selected'} | {`Size by ${appState.graph.hasGraph ? appState.graph.nodes.sizeBy : 'NULL'}`} | {`Color by ${appState.graph.hasGraph ? appState.graph.nodes.colorBy : 'NULL'}`}</td>\r\n              </tr>\r\n              {/* <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average degree is ${appState.graph.hasGraph ? appState.graph.degree().toFixed(3) : 'NULL'}`}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style={{ padding: '5px 10px' }}> {`The average density is ${appState.graph.hasGraph ? (appState.graph.density() ).toFixed(3) : 'NULL'}`}</td>\r\n              </tr> */}\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div style={{ height: '20vw' }}>\r\n            \r\n\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"35vh\"}\r\n              // className=\"hist\"\r\n              id=\"edgesvg\"\r\n              ref={input => (this.edgesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Edge Distance Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"distance_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n\r\n              >\r\n                <BarSeries\r\n                  animated={false}\r\n                  rawData={this.SelectionDistanceFromLatLonIn()[1]}\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.distBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.distBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.distBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                />\r\n                <XAxis numTicks={5} label=\"Edge Distance (km)\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                <YAxis label=\"Frequency\" fontSize=\"12px\" tickFormat={\r\n                  (tick, ti) => {\r\n                    // console.log(tick, this.SelectionDistanceFromLatLonIn()[1].length);\r\n                    return parseInt(tick * this.SelectionDistanceFromLatLonIn()[1].length).toString()\r\n                  }} />\r\n\r\n\r\n              </Histogram>\r\n              {this.renderEdgeBrush()}\r\n            </svg>\r\n\r\n\r\n            {/* <text className=\"distribution-title\">Degree Distribution</text> */}\r\n            <svg\r\n              width={\"50%\"}\r\n              height={\"35vh\"}\r\n              // className=\"hist\"\r\n              id=\"degreesvg\"\r\n              ref={input => (this.degreesvg = input)}\r\n            // ref = {ref}\r\n            >\r\n\r\n              <text x=\"50%\" y=\"10%\" text-anchor=\"middle\" fontSize=\"12px\" fontSizeAdjust=\"inherit\">Node Degree Distribution</text>\r\n              <Histogram\r\n                ariaLabel=\"degree_dis\"\r\n                orientation=\"vertical\"\r\n                height={this.allheight}\r\n                width={this.allwidth}\r\n                cumulative={false}\r\n                normalized={true}\r\n                binCount={25}\r\n                margin={this.margin}\r\n                valueAccessor={(datum) => {\r\n                  return datum\r\n                }}\r\n                binType=\"numeric\"\r\n                \r\n              >\r\n                <BarSeries\r\n                  fill={(d, i) => {\r\n                    if (i === 0) {\r\n                      this.degreeBinData = []\r\n                    }\r\n\r\n                    if (d.data.length > 0) {\r\n                      this.degreeBinData.push({\r\n                        mind: min(d.data),\r\n                        maxd: max(d.data)\r\n                      })\r\n                    } else {\r\n                      this.degreeBinData.push({\r\n                        mind: Infinity,\r\n                        maxd: -1\r\n                      })\r\n                    }\r\n                    return \"#08519c\"\r\n                  }}\r\n                  animated={false}\r\n                  rawData={appState.graph.frame.getNodeList().map((node) => {\r\n                    if(node.data.ref.degree>0){\r\n                      return node.data.ref.degree\r\n                    }else{\r\n                      return 0\r\n                    }\r\n                    \r\n                  })}\r\n                />\r\n                <XAxis numTicks={5} label=\"Degree\" fontSize=\"12px\" tickLabelProps={(d, i) => ({ angle: 45 })} />\r\n                {/* <YAxis fontSize=\"12px\" /> */}\r\n                <YAxis numTicks={5} label=\"Frequency\" fontSize=\"12px\"\r\n                  tickFormat={\r\n                    (tick, ti) => {\r\n                      return parseInt(tick * appState.graph.frame.getNodeList().length).toString()\r\n                    }} />\r\n\r\n              </Histogram>\r\n              {this.renderNoNodeDegreeBrush()}\r\n            </svg>\r\n          </div>\r\n      </div>\r\n    } \r\n    else {\r\n      return <div></div>\r\n    }\r\n\r\n    ///\r\n    \r\n    ///\r\n\r\n  }\r\n}\r\n\r\nexport default SelectionDetail;","\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport SimpleSelect from \"../utils/SimpleSelect\";\r\nimport {\r\n    Button,\r\n    Classes,\r\n    InputGroup,\r\n    Intent,\r\n    Position,\r\n    Tooltip,\r\n    Popover,\r\n    Menu,\r\n    MenuItem,\r\n    MenuDivider\r\n} from \"@blueprintjs/core\";\r\n\r\nimport appState from \"../../stores\";\r\nimport createGraph from 'ngraph.graph';\r\nimport path from 'ngraph.path';\r\n\r\n\r\nimport axios from 'axios'\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\n\r\n\r\n@observer\r\nclass StatGroupPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n\r\n    runcommunity = () => {\r\n        appState.graph.convexPolygons = []\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'community'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            // https://snoman.herokuapp.com/flask/community', querydict).then(\r\n            (response) => {\r\n                var communityDict = response.data.message;\r\n                appState.graph.modularity = response.data.modularity;\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    var unicommunity = Math.max.apply(null, Object.values(communityDict)) +1\r\n                    if(node.degree>0 && !communityDict[node.id]){\r\n                        node.community = String.fromCharCode( unicommunity + 95)\r\n                        unicommunity = unicommunity+1\r\n                    }else if(communityDict[node.id]){\r\n                        node.community = String.fromCharCode(communityDict[node.id] + 95)\r\n                    }else{\r\n                        node.community =  '-1'\r\n                    }\r\n                    \r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = \"community\"\r\n\r\n                appState.graph.nodes.convexhullby = \"community\"\r\n                appState.graph.nodes.groupby = \"community\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    avgConnectionDist = () => {\r\n        appState.graph.rawGraph.nodes.forEach(function (node) {\r\n            const links = appState.graph.frame.getNode(node['id']).linkObjs\r\n            if (links) {\r\n                const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                node['average distance'] = cdistance / node.degree\r\n                node['average distance'] = node['average distance'].toFixed(2)\r\n            }else{\r\n                node['average distance'] = 0\r\n            }\r\n        })\r\n\r\n        appState.graph.scatterplot.x = 'average distance'\r\n        appState.graph.scatterplot.y = 'degree'\r\n        appState.graph.metadata.nodeComputed.push('average distance')\r\n\r\n    }\r\n\r\n    runKfullfillment = () => {\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        // Function to find the K nearest neighbors for each node\r\n        const findKfulfillment = (nodes, edges) => {\r\n            const neighbors = {};\r\n\r\n\r\n            for (const currentNode of nodes) {\r\n                // find nearest neighbors\r\n                const currentId = currentNode.id;\r\n                currentNode['nearestnn'] = []\r\n                // neighbors[currentId] = [];\r\n\r\n                // Calculate distances to all other nodes\r\n                for (const otherNode of nodes) {\r\n                    if (currentNode !== otherNode) {\r\n                        const distance = calculateDistance(\r\n                            currentNode.LatY,\r\n                            currentNode.LonX,\r\n                            otherNode.LatY,\r\n                            otherNode.LonX\r\n                        );\r\n\r\n                        currentNode['nearestnn'].push({\r\n                            id: otherNode.id,\r\n                            distance: distance\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Sort neighbors by distance and keep the closest K\r\n                currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                const k = currentNode['degree']\r\n                currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n                //find connected node id\r\n                currentNode['connected node'] = []\r\n                for (const edge of edges) {\r\n                    if (edge.source_id == currentNode['id'] || edge.target_id == currentNode[\"id\"]) {\r\n                        currentNode['connected node'].push(edge.source_id)\r\n                        currentNode['connected node'].push(edge.target_id)\r\n                    }\r\n                }\r\n                currentNode['connected node'].filter((n) => n !== currentNode['id']);\r\n\r\n\r\n\r\n                // calculate kfulfillment\r\n                const cnn = new Set(currentNode['connected node']);\r\n                currentNode['connected node'] = Array.from(cnn)\r\n                const snn = new Set(currentNode['nearestnn'].map(n => n.id));\r\n\r\n                const intersection = [...cnn].filter(item => snn.has(item));\r\n                if (currentNode['degree'] === 0) {\r\n                    currentNode['k-Fulfillment'] = 0\r\n                } else {\r\n                    currentNode['k-Fulfillment'] = intersection.length / currentNode['degree']\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        findKfulfillment(appState.graph.rawGraph.nodes, appState.graph.rawGraph.edges)\r\n        appState.graph.metadata.nodeComputed.push('k-Fulfillment')\r\n        appState.graph.scatterplot.x = 'k-Fulfillment'\r\n        appState.graph.scatterplot.y = 'degree'\r\n        appState.graph.nodes.colorBy = \"k-Fulfillment\"\r\n        appState.graph.nodes.color.scale = \"Linear Scale\"\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n    }\r\n\r\n    runGlobalFlatRatio = () => {\r\n        const nodes = appState.graph.rawGraph.nodes\r\n        const iter = 5\r\n        const shuffleArray = (array) => {\r\n            for (let i = array.length - 1; i > 0; i--) {\r\n                // Generate a random index from 0 to i\r\n                const randomIndex = Math.floor(Math.random() * (i + 1));\r\n\r\n                // Swap elements array[i] and array[randomIndex]\r\n                const temp = array[i];\r\n                array[i] = array[randomIndex];\r\n                array[randomIndex] = temp;\r\n            }\r\n        }\r\n\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        const gBarSumDistances = (nodeOrders, nodesWKnn, distanceMatrix, degreeConstraintMatrix) => {\r\n            const degreeCount = new Map();\r\n            nodeOrders.forEach(node => degreeCount.set(node, 0));\r\n\r\n            const nodesLabels = nodesWKnn.map((n) => n['id']);\r\n            const n = nodesLabels.length;\r\n            const connectionCounted = {}\r\n            for (const nl of nodesLabels) {\r\n                connectionCounted[nl] = {};\r\n            }\r\n\r\n            let totalDistance = 0;\r\n\r\n            for (let i = 0; i < nodeOrders.length; i++) {\r\n                const node = nodeOrders[i];\r\n                const neighbors = nodesWKnn.filter(obj => {\r\n                    return obj['id'] === node\r\n                })[0]['nearestnn'];\r\n\r\n                const neighborsid = neighbors.map(n => n['id'])\r\n\r\n\r\n                for (const neighbor of neighborsid) {\r\n                    if (!connectionCounted[node][neighbor] &&\r\n                        degreeCount.get(node) < appState.graph.frame.getNode(node).data.ref.degree &&\r\n                        degreeCount.get(neighbor) < appState.graph.frame.getNode(neighbor).data.ref.degree) {\r\n                        totalDistance += distanceMatrix[node][neighbor];\r\n                        degreeCount.set(node, degreeCount.get(node) + 1);\r\n                        degreeCount.set(neighbor, degreeCount.get(neighbor) + 1);\r\n                        connectionCounted[node][neighbor] = true;\r\n                        connectionCounted[neighbor][node] = true;\r\n                        // console.log(\"Added distance for\", node, neighbor, \"in order:\", nodeOrders);\r\n                    }\r\n                }\r\n            }\r\n            return totalDistance;\r\n        }\r\n\r\n        //calcualte knn \r\n        if (!nodes[0]['nearestnn']) {\r\n            for (const currentNode of nodes) {\r\n                // find nearest neighbors\r\n                const currentId = currentNode.id;\r\n                currentNode['nearestnn'] = []\r\n                // neighbors[currentId] = [];\r\n\r\n                // Calculate distances to all other nodes\r\n                for (const otherNode of nodes) {\r\n                    if (currentNode !== otherNode) {\r\n                        const distance = calculateDistance(\r\n                            currentNode.LatY,\r\n                            currentNode.LonX,\r\n                            otherNode.LatY,\r\n                            otherNode.LonX\r\n                        );\r\n\r\n                        currentNode['nearestnn'].push({\r\n                            id: otherNode.id,\r\n                            distance: distance\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Sort neighbors by distance and keep the closest K\r\n                currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                const k = currentNode['degree']\r\n                currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Generate iteration number of node orders \r\n        const nodeOrders = [];\r\n        for (let i = 0; i < iter; i++) {\r\n            nodeOrders.push(nodes.map((n) => n['id']));\r\n            shuffleArray(nodeOrders[i]); // Shuffle the node order\r\n        }\r\n\r\n        // Precompute the distance matrix\r\n        const nodesLabels = nodes.map((n) => n['id']);\r\n        const n = nodesLabels.length;\r\n        const distanceMatrix = {};\r\n        for (const nl of nodesLabels) {\r\n            distanceMatrix[nl] = {};\r\n            for (const ll of nodesLabels) {\r\n                distanceMatrix[nl][ll] = 0;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            // Skip diagonal values \r\n            for (let j = i + 1; j < n; j++) {\r\n                const distance = calculateDistance(\r\n                    nodes[i].LatY,\r\n                    nodes[i].LonX,\r\n                    nodes[j].LatY,\r\n                    nodes[j].LonX\r\n                )\r\n\r\n                // Update both upper and lower side of the matrix since the network is undirected\r\n                distanceMatrix[nodes[i]['id']][nodes[j]['id']] = distance;\r\n                distanceMatrix[nodes[j]['id']][nodes[i]['id']] = distance;\r\n            }\r\n        }\r\n\r\n        // Precompute the degree constraint matrix\r\n        const degreeConstraintMatrix = nodes.map(x => x['degree']);\r\n\r\n        // Calculate average distance of G_bar under iterations. \r\n        const avgGBarSum = nodeOrders.map(order => gBarSumDistances(order, nodes, distanceMatrix, degreeConstraintMatrix))\r\n            .reduce((a, b) => a + b, 0) / iter;\r\n        const links = appState.graph.frame.getNodeList().map(n => n.linkObjs).flat().filter(i => i)\r\n        const gSum = links.reduce((dist, l) => dist + l.edgeDist, 0) / 2\r\n\r\n        appState.graph.globalFlatRatio = avgGBarSum / gSum;\r\n    }\r\n\r\n\r\n\r\n    runLocalFlatRatio = () => {\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Radius of the Earth in kilometers\r\n            const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n            const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n            const a =\r\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            const distance = R * c;\r\n            return distance;\r\n        }\r\n\r\n        const findFlatRatio = (nodes) => {\r\n            const neighbors = {};\r\n\r\n            if (nodes[0]['nearestnn']) {\r\n                // don't calculate nearest neighbors again\r\n                //calculate connected node distance directly\r\n                for (const currentNode of nodes) {\r\n                    const currentId = currentNode.id;\r\n                    const links = appState.graph.frame.getNode(currentId).linkObjs\r\n                    if (links) {\r\n                        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                        const ndistance = currentNode['nearestnn'].reduce((dist, l) => dist + l.distance, 0);\r\n                        // calculate flat ratio\r\n                        currentNode['flattening ratio'] = ndistance / cdistance\r\n                        if (!isFinite(currentNode['flattening ratio'])) {\r\n                            currentNode['flattening ratio'] = 0\r\n                        }\r\n                    } else {\r\n                        currentNode['flattening ratio'] = 0\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                for (const currentNode of nodes) {\r\n                    // find nearest neighbors\r\n                    const currentId = currentNode.id;\r\n                    currentNode['nearestnn'] = []\r\n                    // neighbors[currentId] = [];\r\n\r\n                    // Calculate distances to all other nodes\r\n                    for (const otherNode of nodes) {\r\n                        if (currentNode !== otherNode) {\r\n                            const distance = calculateDistance(\r\n                                currentNode.LatY,\r\n                                currentNode.LonX,\r\n                                otherNode.LatY,\r\n                                otherNode.LonX\r\n                            );\r\n\r\n                            currentNode['nearestnn'].push({\r\n                                id: otherNode.id,\r\n                                distance: distance\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    // Sort neighbors by distance and keep the closest K\r\n                    currentNode['nearestnn'].sort((a, b) => a.distance - b.distance);\r\n                    const k = currentNode['degree']\r\n                    currentNode['nearestnn'] = currentNode['nearestnn'].slice(0, k);\r\n\r\n                    //calculate connected node distance\r\n                    const links = appState.graph.frame.getNode(currentId).linkObjs\r\n                    if (links) {\r\n                        const cdistance = links.reduce((dist, l) => dist + l.edgeDist, 0);\r\n                        const ndistance = currentNode['nearestnn'].reduce((dist, l) => dist + l.distance, 0);\r\n                        // calculate flat ratio\r\n                        currentNode['flattening ratio'] = ndistance / cdistance\r\n                        if (!isFinite(currentNode['flattening ratio'])) {\r\n                            currentNode['flattening ratio'] = 0\r\n                        }\r\n                    } else {\r\n                        currentNode['flattening ratio'] = 0\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        findFlatRatio(appState.graph.rawGraph.nodes)\r\n        appState.graph.metadata.nodeComputed.push('flattening ratio')\r\n        appState.graph.scatterplot.x = 'flattening ratio'\r\n        appState.graph.scatterplot.y = 'degree'\r\n        appState.graph.nodes.colorBy = \"flattening ratio\"\r\n        appState.graph.nodes.color.scale = \"Linear Scale\"\r\n        appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n    }\r\n\r\n    runShortestPath = () => {\r\n\r\n\r\n        const calDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n            var p = 0.017453292519943295;    // Math.PI / 180\r\n            var c = Math.cos;\r\n            var a = 0.5 - c((lat2 - lat1) * p) / 2 +\r\n                c(lat1 * p) * c(lat2 * p) *\r\n                (1 - c((lon2 - lon1) * p)) / 2;\r\n\r\n            return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n        }\r\n\r\n        const graph = createGraph();\r\n\r\n        // hardcode LatY and LonX for sample dataset \r\n        appState.graph.rawGraph.nodes.forEach(node => graph.addNode(node[\"id\"].toString(), { LatY: parseFloat(node[\"LatY\"]), LonX: parseFloat(node[\"LonX\"]) }))\r\n        appState.graph.rawGraph.edges.forEach(edge => graph.addLink(edge[\"source_id\"], edge[\"target_id\"]));\r\n\r\n        const shortestPathPairs = () => {\r\n            let pathFinder = path.aGreedy(graph);\r\n            const pathsArr = []\r\n            const pathsSet = new Set();\r\n\r\n\r\n\r\n            graph.forEachNode(function (fromnode) {\r\n\r\n                graph.forEachNode(function (tonode) {\r\n                    if (fromnode.id !== tonode.id) {\r\n                        const pathKey1 = `${fromnode.id}👉${tonode.id}`;\r\n                        const pathKey2 = `${tonode.id}👉${fromnode.id}`;\r\n                        const edgeinfo = appState.graph.rawGraph.edges.filter((edge) => {\r\n                            return (edge.source_id === fromnode.id && edge.target_id === tonode.id)\r\n                        })\r\n                        let pairdist = calDistanceFromLatLonInKm(fromnode.data.LatY, fromnode.data.LonX, tonode.data.LatY, tonode.data.LonX)\r\n\r\n\r\n\r\n                        // undirected graph:\r\n                        // only add once for undirected graph \r\n                        if (!(pathsSet.has(pathKey1)) && !(pathsSet.has(pathKey2))) {\r\n                            pathsSet.add(pathKey1);\r\n                            pathsSet.add(pathKey2);\r\n                            pathsArr.push({\r\n                                \"source\": fromnode.id,\r\n                                \"target\": tonode.id,\r\n                                \"path\": pathFinder.find(fromnode.id, tonode.id),\r\n                                \"distance\": pairdist\r\n\r\n                            })\r\n                        }\r\n\r\n                        //directed graph: \r\n                    }\r\n\r\n                })\r\n\r\n            })\r\n            // console.log(nodesArr.length)\r\n            // console.log(pathsArr.length)\r\n            return pathsArr\r\n\r\n        }\r\n        appState.graph.rawGraph.paths = shortestPathPairs();\r\n        appState.graph.metadata.nodeComputed.push('shortest path')\r\n        appState.graph.metadata.nodeComputed.push('pair distance')\r\n        appState.graph.scatterplot.x = 'pair distance'\r\n        appState.graph.scatterplot.y = 'shortest path'\r\n\r\n    }\r\n\r\n    findcliques = () => {\r\n\r\n        var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.source_id\r\n        })\r\n        var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n            return edge.target_id\r\n        })\r\n        var querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'clique'\r\n            },\r\n            \"fromedgelist\": fromedgelist,\r\n            \"toedgelist\": toedgelist\r\n        }\r\n        axios.post('https://snoman.herokuapp.com/flask/Cliques', querydict).then(\r\n            (response) => {\r\n                var cliques = response.data.message;\r\n                console.log(cliques)\r\n                // appState.graph.rawGraph.nodes.forEach((node) => {\r\n                //     node.community = communityDict[node.id]\r\n                // })\r\n                // const nodesArr = appState.graph.rawGraph.nodes\r\n                // const nodekeyList = Object.keys(nodesArr[1])\r\n                // const nodePropertyTypes = {}\r\n                // nodekeyList.forEach(function (k) {\r\n                //     nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                // })\r\n                // const uniqueValue = {}\r\n                // nodekeyList.forEach(function (k, i) {\r\n\r\n                //     if (nodePropertyTypes[k] == 'string') {\r\n                //         uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                //     } else {\r\n                //         const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                //         const minv = Math.min(...valuea)\r\n                //         const maxv = Math.max(...valuea)\r\n                //         uniqueValue[k] = [minv, maxv]\r\n                //     }\r\n                // })\r\n                // appState.graph.metadata.nodePropertyTypes= nodePropertyTypes\r\n                // appState.graph.metadata.uniqueValue = uniqueValue\r\n                // appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n                // console.log(result);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    convexhull = (group) => {\r\n        var querydict \r\n        if(group === 'community'){\r\n            querydict = {\r\n                \"type\": 'edgelist',\r\n                \"message\": {\r\n                    'name': 'convex'\r\n                },\r\n                \"group\": group,\r\n                \"nodes\": appState.graph.rawGraph.nodes.filter(n=>n['community']!== '-1')\r\n    \r\n            }\r\n        }else{\r\n            querydict = {\r\n                \"type\": 'edgelist',\r\n                \"message\": {\r\n                    'name': 'convex'\r\n                },\r\n                \"group\": group,\r\n                \"nodes\": appState.graph.rawGraph.nodes\r\n    \r\n            }\r\n\r\n        }\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n        \r\n        axios.post('https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n\r\n            // https://snoman.herokuapp.com/flask/convexhull', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                var convexDict = jsondata.message;\r\n\r\n\r\n                appState.graph.rawGraph.nodes.forEach((node) => {\r\n                    node.isconvex = convexDict[node.id]\r\n                })\r\n                const nodesArr = appState.graph.rawGraph.nodes\r\n                const nodekeyList = Object.keys(nodesArr[1])\r\n                const nodePropertyTypes = {}\r\n                nodekeyList.forEach(function (k) {\r\n                    nodePropertyTypes[k] = typeof (nodesArr[1][k])\r\n                })\r\n                const uniqueValue = {}\r\n                nodekeyList.forEach(function (k, i) {\r\n\r\n                    if (nodePropertyTypes[k] == 'string') {\r\n                        uniqueValue[k] = [...new Set(nodesArr.map(item => item[k]))]\r\n                    } else {\r\n                        const valuea = nodesArr.map(function (el) { return el[k]; })\r\n                        const minv = Math.min(...valuea)\r\n                        const maxv = Math.max(...valuea)\r\n                        uniqueValue[k] = [minv, maxv]\r\n                    }\r\n                })\r\n                appState.graph.metadata.nodePropertyTypes = nodePropertyTypes\r\n                appState.graph.metadata.uniqueValue = uniqueValue\r\n                appState.graph.metadata.nodeProperties = nodekeyList\r\n\r\n\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.convexPolygonsShow = true\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n                // const selectionNode = appState.graph.frame.getNodeList().filter(node =>\r\n                //     // console.log(node)\r\n                //     node.data.ref.isconvex\r\n\r\n                // )\r\n                // // highlight for the mapview \r\n                // appState.graph.convexNodes = selectionNode\r\n                appState.graph.convexPolygons = jsondata.multipolygon;\r\n                console.log(appState.graph.convexPolygons)\r\n                //highlight in the network view \r\n                // appState.graph.frame.graph.forEachNode(n => {  //fisrt dehighlight all the nodes  \r\n                //     appState.graph.frame.colorNodeOpacity(n, 0.2);\r\n\r\n                // });\r\n\r\n                // appState.graph.frame.lineIndices.forEach(function (link) {\r\n                //     link.linecolor.r = self.darkMode ? 0.25 : 0.89; //black/white\r\n                //     link.linecolor.g = self.darkMode ? 0.25 : 0.89;\r\n                //     link.linecolor.b = self.darkMode ? 0.25 : 0.89;\r\n                // })\r\n\r\n                // for (var i = 0; i < selectionNode.length; i++) {\r\n                //     appState.graph.frame.colorNodeOpacity(selectionNode[i], 1);\r\n                //   }\r\n\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    density_distance = (group) => {\r\n\r\n        // var fromedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.source_id\r\n        // })\r\n        // var toedgelist = appState.graph.rawGraph.edges.map((edge) => {\r\n        //     return edge.target_id\r\n        // })\r\n\r\n        var querydict \r\n        if(group === 'community'){\r\n            querydict = {\r\n            \"type\": 'edgelist',\r\n            \"message\": {\r\n                'name': 'density_distance'\r\n            },\r\n            \"group\": group,\r\n            \"nodes\": appState.graph.rawGraph.nodes.filter(n=>n['community']!== '-1'),\r\n            \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        }\r\n        }else{\r\n            querydict = {\r\n                \"type\": 'edgelist',\r\n                \"message\": {\r\n                    'name': 'density_distance'\r\n                },\r\n                \"group\": group,\r\n                \"nodes\": appState.graph.rawGraph.nodes,\r\n                \"edges\": appState.graph.rawGraph.edges\r\n    \r\n    \r\n            }\r\n        }\r\n        \r\n        // var querydict = {\r\n        //     \"type\": 'edgelist',\r\n        //     \"message\": {\r\n        //         'name': 'density_distance'\r\n        //     },\r\n        //     \"group\": group,\r\n        //     \"nodes\": appState.graph.rawGraph.nodes,\r\n        //     \"edges\": appState.graph.rawGraph.edges\r\n\r\n\r\n        // }\r\n        axios.post('https://snoman.herokuapp.com/flask/densitydistance', querydict).then(\r\n            (response) => {\r\n                var jsondata = JSON.parse(response.data)\r\n                // var convexDict = jsondata.message;\r\n\r\n                appState.graph.metadata.nodeComputed.push('standard distance')\r\n                appState.graph.metadata.nodeComputed.push('network density')\r\n\r\n                appState.graph.densityDistance = jsondata.density_distance\r\n                appState.graph.scatterplot.y = 'standard distance'\r\n                appState.graph.scatterplot.x = 'network density'\r\n                appState.graph.groupby = group\r\n                appState.graph.nodes.colorBy = group\r\n                appState.graph.nodes.color.scale = \"Nominal Scale\"\r\n                appState.graph.watchAppearance = appState.graph.watchAppearance + 1\r\n\r\n\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            (\r\n                <div> \r\n                    <p className=\"stat-section-heading\">Distance and Shortest Path</p>\r\n                     <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.avgConnectionDist}>Run Average Distance</Button>\r\n                        <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runShortestPath}>Run Shortest Path</Button>\r\n                    <br></br>\r\n                    <hr />\r\n                    <p className=\"stat-section-heading\">Efficient Distance Analysis</p>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runLocalFlatRatio}>Run Local Flattening Ratio</Button>\r\n                   <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runKfullfillment}>Run  K-fullfillment</Button>\r\n                        <br></br>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runGlobalFlatRatio}>Run Global Flattening Ratio</Button>\r\n                    {appState.graph.globalFlatRatio ? <text className=\"gf-tag\" style={{ fontSize: \"8px\" }} >{parseFloat(appState.graph.globalFlatRatio).toFixed(3)}</text> : null}\r\n                    <br></br>\r\n                    <hr />\r\n                    <p className=\"stat-section-heading\">Group-related Functions</p>\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={this.runcommunity}>Run Community Detection</Button>\r\n                    {/* <button style={{height: \"100%\"}} onClick={this.runcommunity} type=\"button\">\r\n                            Run Community\r\n                        </button> */}\r\n                    {appState.graph.modularity ? <text className=\"modularity-tag\" style={{ fontSize: \"8px\" }} >{\"Q value: \" + parseFloat(appState.graph.modularity).toFixed(3)}</text> : null}\r\n                    {/* <Button\r\n                        style={{ position: 'absolute', top: '50px', left: '500px', zIndex: '1000' }}\r\n                        onClick={this.findcliques}>Find Cliques</Button> */}\r\n                    {/* <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.convexhull('Family')}>Convex Hull by Group</Button>\r\n\r\n                    <Button\r\n                        className=\"bp4-button\"\r\n                        style={{ zIndex: '1000' }}\r\n                        onClick={() => this.density_distance('Family')}>Cluster Cluster</Button> */}\r\n\r\n\r\n                    <div>\r\n                        <p style={{ display: \"inline\", fontSize: \"12px\" }}>Convex Hull By: </p>\r\n                        <span style={{}}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList.filter(it=>(it !== 'ID'&& (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]))))}\r\n                                onSelect={it => {\r\n                                    appState.graph.convexhullby = it\r\n                                    this.convexhull(it)\r\n                                    appState.graph.convexPolygonsShow = true\r\n                                    //followed by cluster by function\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n\r\n                                }}\r\n                                value={appState.graph.convexhullby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <p style={{ display: \"inline\", fontSize: \"12px\" }}>Group By: </p>\r\n                        <span style={{}}>\r\n                            <SimpleSelect\r\n                                items={appState.graph.filterKeyList.filter(it=>(it !== 'ID'&& (it === 'community' || isNaN(appState.graph.rawGraph.nodes[0][it]))))}\r\n                                onSelect={it => {\r\n                                    appState.graph.groupby = it\r\n                                    this.density_distance(it)\r\n                                }}\r\n                                value={appState.graph.groupby}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroupPanel;\r\n\r\n","import SidebarMenu from 'react-bootstrap-sidebar-menu';\r\nimport React from \"react\";\r\nimport uniq from \"lodash/uniq\";\r\nimport { Tab2, Tabs2, Tag, Classes } from \"@blueprintjs/core\";\r\nimport NodesPanel from \"./panels/NodesPanel\";\r\nimport EdgesPanel from \"./panels/EdgesPanel\";\r\nimport LabelsPanel from \"./panels/LabelsPanel\";\r\nimport NodesFilterPanel from \"./panels/NodesFilterPanel\";\r\nimport StatGroupPanel from \"./panels/StatGroupPanel\"\r\nimport appState from \"../stores/index\";\r\nimport classnames from \"classnames\";\r\nimport { observer } from \"mobx-react/index\";\r\nimport { observable, computed, action, runInAction } from \"mobx\";\r\nimport {\r\n    Button\r\n} from \"@blueprintjs/core\";\r\n\r\n\r\n@observer\r\nclass Sidebar extends React.Component {\r\n    openCity(cityName) {\r\n        var i;\r\n        var x = document.getElementsByClassName(\"city\");\r\n        for (i = 0; i < x.length; i++) {\r\n            x[i].style.display = \"none\";\r\n        }\r\n        var x = document.getElementsByClassName(\"sidebarButton\");\r\n        for (i = 0; i < x.length; i++) {\r\n            x[i].style.background = \"white\";\r\n        }\r\n        document.getElementById(cityName).style.display = \"block\";\r\n        document.getElementById(cityName + 'Tab').style.background = \"gray\";\r\n\r\n    }\r\n    // AverageDegree=()=>{\r\n    //     links.reduce((dist, l) => dist + l.edgeDist, 0) / 2\r\n    // }\r\n\r\n    SelectionDistanceFromLatLonIn = () => {\r\n        const selectNodes = appState.graph.selectedNodes;\r\n        const average = (array) => array.reduce((a, b) => a + b) / array.length;\r\n\r\n        if (appState.graph.mapClicked) {\r\n\r\n            const edgeSelection = appState.graph.mapClicked.linkObjs\r\n            if (!edgeSelection || edgeSelection.length == 0) return [null, []];\r\n            this.edgeSelection = edgeSelection\r\n            const edgeDistance = edgeSelection.map(e => {\r\n                if (e.edgeDist > 0) {\r\n                    return e.edgeDist\r\n                } else {\r\n                    return 0\r\n                }\r\n\r\n            })\r\n            return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n        }\r\n\r\n        if (selectNodes.length > 1) {\r\n            //// calculate only the connected distance \r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n            if (edgeSelection.length == 0) return [null, []];\r\n            this.edgeSelection = edgeSelection\r\n            const edgeDistance = edgeSelection.map(e => {\r\n                if (e.edgeDist > 0) {\r\n                    return e.edgeDist\r\n                } else {\r\n                    return 0\r\n                }\r\n\r\n            })\r\n            return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n            //// calculate average distance between all selected nodes \r\n            // const edgeDistance = []\r\n            // appState.graph.frame.lineIndices.forEach((edge)=>{\r\n            //   if (appState.graph.selectedNodes.includes(edge.source ) && appState.graph.selectedNodes.includes(edge.target ) ){\r\n            //     edgeDistance.push(edge.edgeDist)\r\n\r\n            //   }\r\n            // })\r\n            // if(edgeDistance.length>0){\r\n            //   return [average(edgeDistance).toFixed(3), edgeDistance];\r\n            // }else{\r\n            //   return  [null, []]\r\n            // }\r\n\r\n            // for (let i = 0; i < selectNodes.length; i++) {\r\n            //   for (let j = i + 1; j < selectNodes.length; j++) {\r\n            //     const lon1 = selectNodes[i].data.ref.LonX\r\n            //     const lat1 = selectNodes[i].data.ref.LatY\r\n            //     const lon2 = selectNodes[j].data.ref.LonX\r\n            //     const lat2 = selectNodes[j].data.ref.LatY\r\n            //     const edgeDist = appState.graph.frame.getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2)\r\n            //     edgeDistance.push(edgeDist)\r\n            //   }\r\n            // }\r\n\r\n\r\n\r\n        } else {   // when no node is selected, return the distribution of the whole network \r\n\r\n            let edgeSelection = []\r\n            appState.graph.frame.getNodeList().forEach(node => {\r\n                if (node.linkObjs && node.linkObjs.length > 0) {\r\n                    edgeSelection.push(...node.linkObjs)\r\n                }\r\n\r\n            })\r\n\r\n            if (edgeSelection.length > 0) {\r\n                let uniqEdgeSelection = uniq(edgeSelection)\r\n                this.edgeSelection = uniqEdgeSelection\r\n                if (uniqEdgeSelection.length > 0) {\r\n                    let edgeDistance = uniqEdgeSelection.map(e => {\r\n                        if (e.edgeDist > 0) {\r\n                            return e.edgeDist\r\n                        } else {\r\n                            return 0\r\n                        }\r\n\r\n                    })\r\n                    // console.log(edgeDistance)\r\n                    return [average(edgeDistance).toFixed(3), edgeDistance];\r\n\r\n                } else {\r\n                    return [null, []]\r\n                }\r\n\r\n            } else {\r\n                return [null, []]\r\n            }\r\n\r\n\r\n            // return null\r\n        }\r\n\r\n    }\r\n\r\n    // @computed\r\n    SelectionDensity = () => {\r\n\r\n        // undirect graph\r\n        // console.log(\"ashdakjs\")\r\n        if (appState.graph.selectedNodes.length > 1) {\r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(appState.graph.selectedNodes)\r\n            // console.log(edgeSelection.length);\r\n            if (edgeSelection.length == 0) return [0, 0, 0];\r\n            // this.edgeSelection = [...edgeSelection]\r\n\r\n            const nodelength = appState.graph.selectedNodes.length;\r\n            const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n            const avgdegree = appState.graph.selectedNodes.reduce((de, l) => de + l.data.ref.degree, 0) / appState.graph.selectedNodes.length\r\n            return [selectionDen.toFixed(3), edgeSelection.length, avgdegree]\r\n        } else if (appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0]) {\r\n            const thenode = appState.graph.selectedNodes[0]\r\n            const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n            const edgeSelection = appState.graph.frame.getEdgeWithinSelectionForDensity(selectneighbors)\r\n            // console.log(edgeSelection.length);\r\n            if (edgeSelection.length == 0) return [0, 0, 0];\r\n            // this.edgeSelection = [...edgeSelection]\r\n            const avgdegree = selectneighbors.reduce((de, l) => de + l.data.ref.degree, 0) / selectneighbors.length\r\n            const nodelength = selectneighbors.length;\r\n            const selectionDen = (edgeSelection.length / (nodelength * (nodelength - 1))) * 2;\r\n            return [selectionDen.toFixed(3), edgeSelection.length, avgdegree]\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    rerunDiameter = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.rediameter = appState.graph.rerundiameter(appState.graph.tempRawGraph)\r\n        }else{\r\n            appState.graph.rediameter= 0\r\n        }\r\n\r\n    }\r\n    rerunCluster = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.reclustercoe = appState.graph.reruncluster(appState.graph.tempRawGraph).toFixed(2)\r\n        }else{\r\n            appState.graph.reclustercoe= 0\r\n        }\r\n\r\n    }\r\n    rerunComponent = ()=>{\r\n        // console.log(\"rerun degree\")\r\n        //create rawgraph based on selected nodes\r\n        if (appState.graph.tempRawGraph) {\r\n            appState.graph.recomponent = appState.graph.reruncomponent(appState.graph.tempRawGraph)\r\n        }else{\r\n            appState.graph.recomponent= 0\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        if (appState.graph.frame && appState.graph.selectedNodes.length > 1 && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar \">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{appState.graph.selectedNodes.length}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n\r\n                                        <td>{appState.graph.hasGraph ? appState.graph.selectedEdge : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgDegree : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance <br></br>(km)</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgdist : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgdensity : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter\r\n                                            <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunDiameter}>rerun</Button>\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.rediameter : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunCluster}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.reclustercoe : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunComponent}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.recomponent : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n        } else if (appState.graph.frame && appState.graph.mapClicked && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            //one node is clicked\r\n            const thenode = appState.graph.mapClicked\r\n            const selectneighbors = appState.graph.frame.getNeighborNodesFromGraph(thenode)\r\n            // appState.graph.selectedNodes = selectneighbors\r\n            if (selectneighbors.length > 1) {\r\n                return appState.graph.frame && (\r\n                    <SidebarMenu>\r\n                        <div class=\"sidebar-container\">\r\n                            <div class=\"w3-bar \">\r\n                                <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                                <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                                <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                            </div>\r\n                            <div id=\"Appearance\" class=\"city\">\r\n                                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                                <Tabs2 animate id=\"graph-options\">\r\n                                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                                <text style={{ fontSize: \"12px\" }}></text>\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <hr />\r\n                            <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                                <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                    <tbody>\r\n                                        {/* <thead> */}\r\n                                        <tr>\r\n                                            <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                        </tr>\r\n                                        {/* </thead> */}\r\n                                        {/* <caption>Network Statistics</caption> */}\r\n                                        <tr>\r\n                                            <td># Nodes</td>\r\n                                            <td>{selectneighbors.length}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td># Edges</td>\r\n                                            <td>{appState.graph.selectedEdge}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Degree</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgDegree : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Distance <br></br>(km)</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgdist : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Density</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? appState.graph.avgdensity : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                        <td>Network Diameter\r\n                                            <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunDiameter}>rerun</Button>\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.rediameter : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunCluster}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.reclustercoe : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component\r\n                                        <br></br>\r\n                                            <Button\r\n                                                className=\"bp4-button\"\r\n                                                style={{ zIndex: '1000' }}\r\n                                                onClick={this.rerunComponent}>rerun</Button></td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.recomponent : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </SidebarMenu>\r\n                );\r\n            } else {\r\n                //selection is 0\r\n                return appState.graph.frame && (\r\n                    <SidebarMenu>\r\n                        <div class=\"sidebar-container\">\r\n                            <div class=\"w3-bar \">\r\n                                <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                                <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                                <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                            </div>\r\n                            <div id=\"Appearance\" class=\"city\">\r\n                                {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                                <Tabs2 animate id=\"graph-options\">\r\n                                    <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                    <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                    <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                    {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                                {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                    {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                    {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                                <text style={{ fontSize: \"12px\" }}></text>\r\n                                <Tabs2 animate id=\"filter-options\">\r\n                                    <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                    <Tabs2.Expander />\r\n                                </Tabs2>\r\n                            </div>\r\n                            <hr />\r\n                            <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                                <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                    <tbody>\r\n                                        {/* <thead> */}\r\n                                        <tr>\r\n                                            <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                        </tr>\r\n                                        {/* </thead> */}\r\n                                        {/* <caption>Network Statistics</caption> */}\r\n                                        <tr>\r\n                                            <td># Nodes</td>\r\n                                            <td>{0}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td># Edges</td>\r\n                                            <td>{0}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Degree</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Average Distance <br></br>(km)</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Density</td>\r\n                                            <td>\r\n                                                {0}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Network Diameter</td>\r\n                                            <td>\r\n                                                {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Clustering<br></br>Coefficient</td>\r\n                                            <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Connected <br></br>Component</td>\r\n                                            <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </SidebarMenu>\r\n                );\r\n            }\r\n        }\r\n        else if (appState.graph.frame && appState.graph.selectedNodes.length == 1 && appState.graph.selectedNodes[0] && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]){\r\n            //one node is selected \r\n            const thenode = appState.graph.selectedNodes[0]\r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar \">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{1}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n                                        <td>{0}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {thenode.data.ref.degree}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance <br></br>(km)</td>\r\n                                        <td>\r\n                                            {0}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {0}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n        }\r\n        else if (appState.graph.frame && this.SelectionDistanceFromLatLonIn() && this.SelectionDistanceFromLatLonIn()[0]) {\r\n            //no node is selected \r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar \">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{appState.graph.frame.getNodeList().length}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n                                        <td>{appState.graph.frame.getEdgeList().filter(n=>n.fromId!==n.toId).length}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.avgDe().toFixed(3) : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance<br></br> (km)</td>\r\n                                        <td>\r\n                                            {appState.graph.frame ? appState.graph.avgDist() : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.filtergraphDensity().toFixed(3) : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? appState.graph.diameter() : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient</td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.averageClustering().toFixed(3) : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component</td>\r\n                                        <td>{(appState.graph.hasGraph) ? appState.graph.components() : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n        }\r\n        else {\r\n            //everything else , no valid selection, etc. \r\n            return appState.graph.frame && (\r\n                <SidebarMenu>\r\n                    <div class=\"sidebar-container\">\r\n                        <div class=\"w3-bar \">\r\n                            <button id=\"AppearanceTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Appearance\")}>Appearance</button>\r\n                            <button id=\"FilterTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Filter\")}>Filter</button>\r\n                            <button id=\"StatisticsTab\" class=\"sidebarButton w3-bar-item-button w3-bar-item w3-button\" onClick={this.openCity.bind(this, \"Statistics\")}>Statistics</button>\r\n                        </div>\r\n                        <div id=\"Appearance\" class=\"city\">\r\n                            {/* <text style={{fontSize: \"12px\"}}>Appearance </text> */}\r\n                            <Tabs2 animate id=\"graph-options\">\r\n                                <Tab2 id=\"a_nodes\" title=\"Nodes\" panel={<NodesPanel />} />\r\n                                <Tab2 id=\"a_edges\" title=\"Edges\" panel={<EdgesPanel />} />\r\n                                <Tab2 id=\"a_labels\" title=\"Labels\" panel={<LabelsPanel />} />\r\n                                {/* <Tab2 id=\"layout\" title=\"Layout\" panel={<LayoutPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Filter\" class=\"city\" style={{ display: \"None\" }}>\r\n                            {/* <text style={{fontSize: \"12px\"}}>Filter Options</text> */}\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"f_nodes\" panel={<NodesFilterPanel />} />\r\n                                {/* <Tab2 id=\"f_edges\" title=\"Edges\" panel={<EdgesPanel />} /> */}\r\n                                {/* <Tab2 id=\"f_layout\" title=\"Layout\" panel={<EdgesPanel />} /> */}\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <div id=\"Statistics\" class=\"city\" style={{ display: \"None\" }}>\r\n                            <text style={{ fontSize: \"12px\" }}></text>\r\n                            <Tabs2 animate id=\"filter-options\">\r\n                                <Tab2 id=\"s_layout\" panel={<StatGroupPanel />} />\r\n                                <Tabs2.Expander />\r\n                            </Tabs2>\r\n                        </div>\r\n                        <hr />\r\n                        <div id=\"statTable\" className={classnames(Classes.DIALOG_BODY)}>\r\n                            <table className={Classes.TABLE + ' ' + \"siderTable\"} style={{ width: '100%' }}>\r\n\r\n                                <tbody>\r\n                                    {/* <thead> */}\r\n                                    <tr>\r\n                                        <th colspan=\"2\" style={{ textAlign: \"center\" }}>Network Statistics</th>\r\n\r\n                                    </tr>\r\n                                    {/* </thead> */}\r\n                                    {/* <caption>Network Statistics</caption> */}\r\n                                    <tr>\r\n                                        <td># Nodes</td>\r\n                                        <td>{0}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td># Edges</td>\r\n                                        <td>{0}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Degree</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Average Distance<br></br> (km)</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Density</td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Network Diameter <br></br>\r\n\r\n                                        </td>\r\n                                        <td>\r\n                                            {appState.graph.hasGraph ? 0 : 'loading graph'}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Clustering<br></br>Coefficient</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Connected <br></br>Component</td>\r\n                                        <td>{(appState.graph.hasGraph) ? 0 : 'loading graph'}</td>\r\n\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </SidebarMenu>\r\n            );\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport classnames from \"classnames\";\r\nimport {\r\n  Button,\r\n  Classes,\r\n  FocusStyleManager,\r\n  NonIdealState\r\n} from \"@blueprintjs/core\";\r\nimport Dialogs from \"./components/Dialogs\";\r\nimport NavbarSelector from \"./components/Navbar\";\r\n// import ComDetection from './components/ComDetection'\r\nimport WorkspaceView from \"./components/WorkspaceView\";\r\nimport appState from \"./stores/index\";\r\nimport ThreeJSVis from \"./visualizers/ThreeJSVis\";\r\nimport MapView from \"./visualizers/MapView\";\r\nimport FloatingCards from \"./components/FloatingCards\";\r\nimport registerIPC from \"./ipc/client\";\r\nimport { fetchWorkspaceProjects } from \"./ipc/client\";\r\nimport { MOBILE_WIDTH_CUTOFF, MOBILE_HEIGHT_CUTOFF } from \"./constants\";\r\n// import ScatterPlot from \"./components/panels/ScatterPlot\"\r\nimport SelectionDetail from \"./components/panels/SelectionDetail\";\r\n// import Sidebar from \"./components/Sidebar\"\r\nimport { Tag , Switch} from \"@blueprintjs/core\";\r\n// import GraphView from \"./components/GraphView\";\r\n\r\nimport keydown, { Keys } from \"react-keydown\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios'\r\n\r\nimport ScatterPlot from \"./components/panels/ScatterPlot\";\r\n\r\nimport Sidebar from \"./components/Sidebar\"\r\n\r\nregisterIPC();\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nfetchWorkspaceProjects();\r\n\r\nappState.preferences.loadUserConfig();\r\n\r\nconst { DELETE, BACKSPACE, P, U } = Keys;\r\n\r\n// Respond to window resize, also triggered after frame is loaded.\r\nfunction respondToResize() {\r\n  if (!appState.graph.frame) {\r\n    window.setTimeout(respondToResize, 1000);\r\n    return;\r\n  }\r\n  if (window.innerWidth < MOBILE_WIDTH_CUTOFF || window.innerHeight < MOBILE_HEIGHT_CUTOFF) {\r\n    appState.preferences.turnOnMinimalMode();\r\n  }\r\n  // appState.graph.setUpFrame();\r\n}\r\n\r\nrespondToResize();\r\n\r\nwindow.addEventListener('resize', respondToResize);\r\n\r\n@keydown\r\n@observer\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  componentWillReceiveProps({ keydown }) {\r\n    if (keydown.event) {\r\n      if (keydown.event.which === DELETE || keydown.event.which === BACKSPACE) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.hideNodes(appState.graph.frame.getSelectedIds());\r\n          this.forceUpdate();\r\n        }\r\n      } else if (keydown.event.which === P) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.pinSelectedNodes();\r\n        }\r\n      } else if (keydown.event.which === U) {\r\n        if (appState && appState.graph && appState.graph.frame) {\r\n          appState.graph.frame.unpinSelectedNodes();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMeUp');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let upHeight = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        upHeight = leftSide.getBoundingClientRect().height;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftHeight = ((upHeight + dy) * 100) / resizer.parentNode.getBoundingClientRect().height;\r\n        leftSide.style.height = `${newLeftHeight}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n      // Query the element\r\n      const resizer = document.getElementById('dragMe');\r\n      const leftSide = resizer.previousElementSibling;\r\n      const rightSide = resizer.nextElementSibling;\r\n\r\n      // The current position of mouse\r\n      let x = 0;\r\n      let y = 0;\r\n      let leftWidth = 0;\r\n\r\n      // Handle the mousedown event\r\n      // that's triggered when user drags the resizer\r\n      const mouseDownHandler = function (e) {\r\n        // Get the current mouse position\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n        leftWidth = leftSide.getBoundingClientRect().width;\r\n\r\n        // Attach the listeners to `document`\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      const mouseMoveHandler = function (e) {\r\n        // How far the mouse has been moved\r\n        const dx = e.clientX - x;\r\n        const dy = e.clientY - y;\r\n\r\n        const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n        leftSide.style.width = `${newLeftWidth}%`;\r\n\r\n        resizer.style.cursor = 'col-resize';\r\n        document.body.style.cursor = 'col-resize';\r\n\r\n        leftSide.style.userSelect = 'none';\r\n        leftSide.style.pointerEvents = 'none';\r\n\r\n        rightSide.style.userSelect = 'none';\r\n        rightSide.style.pointerEvents = 'none';\r\n      };\r\n\r\n      const mouseUpHandler = function () {\r\n        resizer.style.removeProperty('cursor');\r\n        document.body.style.removeProperty('cursor');\r\n\r\n        leftSide.style.removeProperty('user-select');\r\n        leftSide.style.removeProperty('pointer-events');\r\n\r\n        rightSide.style.removeProperty('user-select');\r\n        rightSide.style.removeProperty('pointer-events');\r\n\r\n        // Remove the handlers of `mousemove` and `mouseup`\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n      };\r\n\r\n      // Attach the handler\r\n      resizer.addEventListener('mousedown', mouseDownHandler);\r\n    });\r\n\r\n    return (\r\n      <div className={classnames({\r\n        \"app-wrapper\": true,\r\n      })} style={{ display: \"flex\" }}>\r\n        <div>\r\n          <NavbarSelector />\r\n        </div>\r\n        <div class=\"container\" style={{ paddingTop: \"5vh\", maxWidth: \"100vw\", height: \"100%\" }}>\r\n          <div class=\"container\" style={{ height: \"100%\" }}>\r\n            <Sidebar />\r\n            {/* {appState.graph.hasGraph && <ComDetection />} */}\r\n            <div class=\"outer-container\">\r\n              <div class=\"container-up container\">\r\n                <div class=\"container__left\">\r\n                  {appState.graph.hasGraph && <Tag className=\"network-tag\">Network</Tag>}\r\n                  <main className=\"main\">\r\n                    {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                      <ThreeJSVis />\r\n                    ) : (\r\n                      <WorkspaceView />\r\n                    )}\r\n                  </main>\r\n                  {/* {appState.graph.hasGraph && <FloatingCards />} */}\r\n                  <Dialogs />\r\n                </div>\r\n                <div class=\"resizer\" id=\"dragMe\"></div>\r\n                <div> {appState.graph.selectedNodes.length === 0 && appState.graph.degreeselection.length===0 ? (\r\n                  <div></div>\r\n                ) : (\r\n                  \r\n                  <div>\r\n                    <Switch style={{ position: 'fixed', top: '54vh', left: '97vw', zIndex: '1000' }}\r\n                      defaultChecked={appState.graph.backNodeShow}\r\n                      checked={appState.graph.backNodeShow}\r\n                      onChange={(value) => {\r\n                        appState.graph.backNodeShow = value.target.checked\r\n\r\n                      }}\r\n                    />\r\n                    <span style={{ fontSize: '12px', position: 'fixed', top: '54vh', right: '4vw', zIndex: '1000' }}> Show Background Nodes</span>\r\n                  </div>\r\n                )}\r\n                </div>\r\n                <div> {appState.graph.selectedNodes.length === 0 ? (\r\n                  <div></div>\r\n                ) : (\r\n                  \r\n                  <div>\r\n                    <Switch style={{ position: 'fixed', top: '54vh', right: '47vw', zIndex: '1000' }}\r\n                      defaultChecked={appState.graph.pickUpAlter}\r\n                      checked={appState.graph.pickUpAlter}\r\n                      onChange={(value) => {\r\n                        appState.graph.pickUpAlter = value.target.checked\r\n                        appState.graph.backNodeShow = false\r\n                        appState.graph.highlightCommonNodes = false\r\n                        appState.graph.showIntersect = false;\r\n                        if(appState.graph.pickUpAlter){\r\n                          appState.graph.frame.updateSelectionOutOpacity();\r\n                        }else{\r\n                          appState.graph.frame.updateSelectionOpacity();\r\n                        }\r\n\r\n                      }}\r\n                    />\r\n                    <span style={{ fontSize: '12px', position: 'fixed', top: '54vh', right: '40vw', zIndex: '1000' }}> Pick Up Alters</span>\r\n                  </div>\r\n                )}\r\n                </div>\r\n                <div> {appState.graph.selectedSets.length < 2 ? (\r\n                  <div></div>\r\n                ) : (\r\n                  \r\n                  <div>\r\n                    <Switch style={{ position: 'fixed', top: '51vh', right: '47vw', zIndex: '1000' }}\r\n                      defaultChecked={appState.graph.highlightCommonNodes}\r\n                      checked={appState.graph.highlightCommonNodes}\r\n                      onChange={(value) => {\r\n                        \r\n                        appState.graph.highlightCommonNodes = value.target.checked\r\n                        if(appState.graph.highlightCommonNodes){\r\n                          appState.graph.pickUpAlter = false\r\n                          appState.graph.backNodeShow = false\r\n                          appState.graph.showIntersect = false;\r\n                          appState.graph.commonSetNodes = appState.graph.frame.getCommonNodesBetweenSets(appState.graph.selectedSets)\r\n                          appState.graph.frame.updateSelectionCommonOpacity();\r\n                        }else{\r\n                          appState.graph.frame.updateSelectionOpacity();\r\n                        }\r\n\r\n                      }}\r\n                    />\r\n                    <Switch style={{ position: 'fixed', top: '48vh', right: '47vw', zIndex: '1000' }}\r\n                      defaultChecked={appState.graph.showIntersect}\r\n                      checked={appState.graph.showIntersect}\r\n                      onChange={(value) => {\r\n                        \r\n                        appState.graph.showIntersect = value.target.checked\r\n                        if(appState.graph.showIntersect){\r\n                          appState.graph.pickUpAlter = false\r\n                          appState.graph.backNodeShow = false\r\n                          appState.graph.highlightCommonNodes = false\r\n                          appState.graph.interSetNodes = appState.graph.frame.findIntersection(appState.graph.selectedSets.map(n=>Array.from(n)))\r\n                          appState.graph.frame.updateSelectionInterOpacity();\r\n                        }else{\r\n                          appState.graph.frame.updateSelectionOpacity();\r\n                        }\r\n\r\n                      }}\r\n                    />\r\n                    <span style={{ fontSize: '12px', position: 'fixed', top: '51vh', right: '34.5vw', zIndex: '1000' }}> Show Common Friends</span>\r\n                    <span style={{ fontSize: '12px', position: 'fixed', top: '48vh', right: '37.5vw', zIndex: '1000' }}> Show Intersection</span>\r\n                  </div>\r\n                )}\r\n                </div>\r\n                <div class=\"container__right\">\r\n                  {(appState.graph.hasGraph && (!appState.import.loading)) ? (\r\n                    <MapView />\r\n                  ) : (\r\n                    <WorkspaceView />\r\n                  )}\r\n                  {/* <h3>{this.mss}</h3> */}\r\n                </div>\r\n              </div>\r\n              <div class=\"resizer-up\" id=\"dragMeUp\"></div>\r\n              <div class=\"container-down container\" id=\"scatter\">\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\", width: '40vw'\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {appState.graph.frame && <SelectionDetail />}\r\n                </div>\r\n                <div style={{\r\n                  display: \"flex\", height: \"100%\",\r\n                  // border:'#C0C0C0',\r\n                  // borderStyle:'solid',\r\n                  // flex:\"1 1 50%\"\r\n                }}>\r\n                  {/* {appState.graph.hasGraph && <GraphView />} */}\r\n                  <div id=\"scatter-plot\">\r\n                    {appState.graph.hasGraph && appState.graph.frame && appState.graph.rawGraph.nodes[0].degree !== undefined && < ScatterPlot />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport '@blueprintjs/core/dist/blueprint.css';\r\nimport '@blueprintjs/table/dist/table.css';\r\nimport './styles/index.css';\r\nimport './styles/w3.css'\r\n\r\n\r\nconst render = () => {\r\n    ReactDOM.render(<App/>, document.getElementById('root'));\r\n};\r\n\r\nrender();"],"sourceRoot":""}